<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>showteeth&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://showteeth.tech/"/>
  <updated>2020-04-04T08:11:24.365Z</updated>
  <id>http://showteeth.tech/</id>
  
  <author>
    <name>showteeth</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>R系列之reduce函数</title>
    <link href="http://showteeth.tech/posts/3019.html"/>
    <id>http://showteeth.tech/posts/3019.html</id>
    <published>2020-04-03T14:57:41.000Z</published>
    <updated>2020-04-04T08:11:24.365Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了R中常用函数reduce函数家族，该家族函数主要是用来<strong>对输入序列进行迭代化简的</strong>，其中包括<strong>显示最终结果的<code>reduce</code>函数</strong>、<strong>显示迭代过程的<code>accumulate</code>函数</strong>以及<strong>支持3参函数的<code>reduce2</code>、<code>accumulate2</code>函数</strong>。</p></div><a id="more"></a><h2 id="reduce函数简介"><a href="#reduce函数简介" class="headerlink" title="reduce函数简介"></a>reduce函数简介</h2><p><code>reduce</code>函数又名化简函数，是Python和R中都有并且使用较多的函数。<code>reduce</code>把一个函数<strong>作用在一个序列</strong>上，这个<strong>function函数必须接收两个参数</strong>，首先<code>reduce</code>会将序列的前两个元素传递给函数进行运算，然后将这个运算结果再和序列的第三个元素一同传入函数再次运算，依次类推，如<code>reduce(1:4, f)</code>就等同于<code>f(f(f(1, 2), 3), 4)</code>.</p><p><code>tidyverse</code>中有个<code>reduce</code>函数，<code>base</code>中也有一个<code>Reduce</code>函数，两者功能相同，但是用法略有区别，这里学习的是<code>tidyverse</code>中的<code>reduce</code>函数(实际上是<code>purr</code>包中的)。</p><hr><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>在<code>R</code>中接触到<code>reduce</code>主要是因为<strong>集合操作</strong>的需求，情形是我有三个向量，我想知道这三个向量共有的元素，intersect可以实现的是两个向量之间的交集操作，虽然可以多次执行，但是这样一来会产生中间变量，占用内存，二来也不优雅，所以就想找找简单的方法，reduce正好可以解决这个需求。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(tidyverse)</span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">b=<span class="number">5</span>:<span class="number">15</span></span><br><span class="line">c=<span class="number">8</span>:<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用嵌套的形式来求多个向量的交集</span></span><br><span class="line">intersect(intersect(a,b),c)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用reduce函数</span></span><br><span class="line">reduce(list(a,b,c),intersect)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入也可以是向量</span></span><br><span class="line">x &lt;- c(<span class="number">4</span>, <span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">reduce(x,`+`)</span><br><span class="line">  <span class="comment"># 求和</span></span><br><span class="line">  [<span class="number">1</span>] <span class="number">17</span></span><br><span class="line"></span><br><span class="line">x &lt;- list(c(<span class="number">0</span>, <span class="number">1</span>), c(<span class="number">2</span>, <span class="number">3</span>), c(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 得到长度为2的向量</span></span><br><span class="line">reduce(x,paste)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2 4"</span> <span class="string">"1 3 5"</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="accumulate-显示reduce计算过程"><a href="#accumulate-显示reduce计算过程" class="headerlink" title="accumulate-显示reduce计算过程"></a>accumulate-显示reduce计算过程</h2><p>reduce函数只会返回迭代的最后计算结果，而其变体accumulate可以返回每次迭代计算的中间结果：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个集合交集每次迭代的结果</span></span><br><span class="line">accumulate(list(a,b,c),intersect)</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">2</span>]]</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">3</span>]]</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法的每次迭代结果</span></span><br><span class="line">accumulate(x, `+`)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">4</span>  <span class="number">7</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line">accumulate(x,paste)</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">2</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2"</span> <span class="string">"1 3"</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">3</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2 4"</span> <span class="string">"1 3 5"</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="reduce2-accumulate2-3参函数"><a href="#reduce2-accumulate2-3参函数" class="headerlink" title="reduce2/accumulate2-3参函数"></a>reduce2/accumulate2-3参函数</h2><p><code>reduce</code>和<code>accumulate</code>中的函数都是<strong>两个参数的函数</strong>，如果<strong>想要支持3个参数的函数可以使用对应的变体</strong><code>reduce2</code>和<code>accumulate2</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- list(c(<span class="number">0</span>, <span class="number">1</span>), c(<span class="number">2</span>, <span class="number">3</span>), c(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 这里的y的长度要比x短1，不然会报错</span></span><br><span class="line">y &lt;- list(c(<span class="number">6</span>, <span class="number">7</span>), c(<span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行粘贴操作</span></span><br><span class="line">accumulate2(x, y, paste)</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">2</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2 6"</span> <span class="string">"1 3 7"</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">3</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2 6 4 8"</span> <span class="string">"1 3 7 5 9"</span></span><br><span class="line"></span><br><span class="line">reduce2(x, y, paste)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2 6 4 8"</span> <span class="string">"1 3 7 5 9"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果y的长度和x等长</span></span><br><span class="line">y &lt;- list(c(<span class="number">6</span>, <span class="number">7</span>), c(<span class="number">8</span>, <span class="number">9</span>),c(<span class="number">10</span>,<span class="number">11</span>))</span><br><span class="line">accumulate2(x, y, paste)</span><br><span class="line">  Error <span class="keyword">in</span> reduce2_impl(.x, .y, .f, <span class="keyword">...</span>, .init = .init, .acc = <span class="literal">TRUE</span>) : </span><br><span class="line">    `.y` does not have length <span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>需要注意的是<code>reduce2</code>和<code>accumulate2</code>传入的x和y是不等长的，具体计算过程是x中的第一个、第二个元素和y中的第一个元素得到结果，然后将这个结果和x中的第三个元素以及y中的第二个元素再次运算，以此类推。</p></div><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://adv-r.hadley.nz/functionals.html#basics-1" target="_blank" rel="noopener">Reduce family</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了R中常用函数reduce函数家族，该家族函数主要是用来&lt;strong&gt;对输入序列进行迭代化简的&lt;/strong&gt;，其中包括&lt;strong&gt;显示最终结果的&lt;code&gt;reduce&lt;/code&gt;函数&lt;/strong&gt;、&lt;strong&gt;显示迭代过程的&lt;code&gt;accumulate&lt;/code&gt;函数&lt;/strong&gt;以及&lt;strong&gt;支持3参函数的&lt;code&gt;reduce2&lt;/code&gt;、&lt;code&gt;accumulate2&lt;/code&gt;函数&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Github系列之给repo添加release信息以及DOI号</title>
    <link href="http://showteeth.tech/posts/24886.html"/>
    <id>http://showteeth.tech/posts/24886.html</id>
    <published>2020-04-03T14:49:24.000Z</published>
    <updated>2020-04-03T14:50:21.512Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这里写摘要，显示更好看</p></div><a id="more"></a><h2 id="开始于二级标题"><a href="#开始于二级标题" class="headerlink" title="开始于二级标题"></a>开始于二级标题</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/50d44cdf8233" target="_blank" rel="noopener">如何让你的GitHub能被引用</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这里写摘要，显示更好看&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="其他内容学习" scheme="http://showteeth.tech/categories/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Github" scheme="http://showteeth.tech/categories/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/Github/"/>
    
    
      <category term="小技巧" scheme="http://showteeth.tech/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>R系列之维恩图和upset图的绘制</title>
    <link href="http://showteeth.tech/posts/4408.html"/>
    <id>http://showteeth.tech/posts/4408.html</id>
    <published>2020-04-03T06:10:02.000Z</published>
    <updated>2020-04-03T06:40:11.675Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了使用<code>VennDiagram</code>包来进行韦恩图的绘制，并解决了<code>VennDiagram</code>绘制维恩图中出现的 <strong>不能直接展示，必须要保存为文件才能查看</strong>、<strong>每次运行都会产生log文件</strong>两大缺点；随后也学习了使用<code>UpSetR</code>绘制UpSet图。</p></div><a id="more"></a><h2 id="韦恩图"><a href="#韦恩图" class="headerlink" title="韦恩图"></a>韦恩图</h2><p>之前一直知道可以使用<code>VennDiagram</code>来进行韦恩图的绘制，但是一直不愿意用它，主要是因为其有两个非常致命的缺点：</p><ul><li><strong>不能直接展示，必须要保存为文件才能查看</strong>，这样在调试图形的时候就比较麻烦</li><li><strong>每次运行都会产生log文件</strong>，多次运行调试之后会产生很多无用的log文件，很麻烦</li></ul><p>后来发现其实这两个问题是可以解决的，这里在学习使用的同时记录一下解决问题的方法。</p><h3 id="在console中展示图片"><a href="#在console中展示图片" class="headerlink" title="在console中展示图片"></a>在console中展示图片</h3><p>这里先记录直接展示图片不用保存的方法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(VennDiagram)</span><br><span class="line">temp &lt;- venn.diagram(list(B = <span class="number">1</span>:<span class="number">1800</span>, A = <span class="number">1571</span>:<span class="number">2020</span>),</span><br><span class="line">                     fill = c(<span class="string">"red"</span>, <span class="string">"green"</span>), alpha = c(<span class="number">0.5</span>, <span class="number">0.5</span>), cex = <span class="number">2</span>,cat.fontface = <span class="number">4</span>,</span><br><span class="line">                     lty =<span class="number">2</span>,  filename = <span class="literal">NULL</span>)</span><br><span class="line"><span class="comment"># 直接在console中展示图片</span></span><br><span class="line"><span class="comment">## 创建一个全新的空白页面，防止前面存在图片后面形成覆盖</span></span><br><span class="line">grid.newpage()</span><br><span class="line"><span class="comment">## 在前面的空白页面上画图</span></span><br><span class="line">grid.draw(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用和其他绘图类似的方法保存图片</span></span><br><span class="line">pdf(file=<span class="string">"test.pdf"</span>)</span><br><span class="line">grid.newpage()</span><br><span class="line">grid.draw(temp)</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure><p></p><p>关键点：</p><ul><li>绘图中的<code>filename = NULL</code>，不用指定filename</li><li>使用<code>grid.draw</code>显示绘图结果</li></ul><p><a href="https://stackoverflow.com/questions/14243609/problems-with-venndiagram" target="_blank" rel="noopener">参考链接-附有将多个venn保存到单个pdf中的方法</a></p><hr><h3 id="不输出log文件"><a href="#不输出log文件" class="headerlink" title="不输出log文件"></a>不输出log文件</h3><p>log文件内容：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">INFO [2020-04-01 09:42:08] [[1]]</span><br><span class="line">INFO [2020-04-01 09:42:08] list(B = 1:1800, A = 1571:2020)</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$fill</span></span><br><span class="line">INFO [2020-04-01 09:42:08] c(<span class="string">"red"</span>, <span class="string">"green"</span>)</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$alpha</span></span><br><span class="line">INFO [2020-04-01 09:42:08] c(0.5, 0.5)</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$cex</span></span><br><span class="line">INFO [2020-04-01 09:42:08] [1] 2</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$cat</span>.fontface</span><br><span class="line">INFO [2020-04-01 09:42:08] [1] 4</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$lty</span></span><br><span class="line">INFO [2020-04-01 09:42:08] [1] 2</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$fontfamily</span></span><br><span class="line">INFO [2020-04-01 09:42:08] [1] 3</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$filename</span></span><br><span class="line">INFO [2020-04-01 09:42:08] NULL</span><br><span class="line">INFO [2020-04-01 09:42:08]</span><br></pre></td></tr></table></figure><p></p><p>没什么重要的信息，所以直接抑制其输出也没有什么问题.</p><p><code>VennDiagram</code>包进行日志的输出主要是使用了<code>futile.logger</code>包，这个在导入<code>VennDiagram</code>包就可以看出来：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(VennDiagram)</span><br><span class="line">  Loading required package: grid</span><br><span class="line">  Loading required package: futile.logger</span><br></pre></td></tr></table></figure><p></p><p>知道使用的什么log包之后就可以通过<strong>限制log的输出级别来进行限制(前面显示的log文件中的log级别都是INFO)</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加这一行，将输出的log级别限制于ERROR之上</span></span><br><span class="line">temp &lt;- venn.diagram(list(B = <span class="number">1</span>:<span class="number">1800</span>, A = <span class="number">1571</span>:<span class="number">2020</span>),</span><br><span class="line">                     fill = c(<span class="string">"red"</span>, <span class="string">"green"</span>), alpha = c(<span class="number">0.5</span>, <span class="number">0.5</span>), cex = <span class="number">2</span>,cat.fontface = <span class="number">4</span>,</span><br><span class="line">                     lty =<span class="number">2</span>,  filename = <span class="literal">NULL</span>)</span><br><span class="line">grid.newpage()                    </span><br><span class="line">grid.draw(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复的话就是设置为INFO</span></span><br><span class="line">futile.logger::flog.threshold(futile.logger::INFO, name = <span class="string">"VennDiagramLogger"</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在移除了两大障碍之后就可以安心学习这个包了。下面列出一些使用<code>VennDiagram</code>包可以实现的图片，后续使用的时候可以直接查阅：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Not run: </span></span><br><span class="line"><span class="comment"># Example to print to screen</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    sample1 = c(<span class="number">1</span>:<span class="number">40</span>),</span><br><span class="line">    sample2 = c(<span class="number">30</span>:<span class="number">60</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save picture to non-TIFF file type</span></span><br><span class="line"><span class="comment"># currently working on adding this functionality directly into venn.diagram</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list (</span><br><span class="line">    A = <span class="number">1</span>:<span class="number">10</span>,</span><br><span class="line">    B = <span class="number">6</span>:<span class="number">25</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">jpeg(<span class="string">"venn_jpeg.jpg"</span>);</span><br><span class="line">grid.draw(venn.plot);</span><br><span class="line">dev.off();</span><br><span class="line"></span><br><span class="line"><span class="comment">## End(Not run)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dontrun-starts-here</span></span><br><span class="line"><span class="comment">### NB: All figures from the paper can be run, but are turned off from</span></span><br><span class="line"><span class="comment">###     automatic execution to reduce burden on CRAN computing resources.</span></span><br><span class="line"><span class="comment">## Not run: </span></span><br><span class="line"><span class="comment"># Figure 1A</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    Label = <span class="number">1</span>:<span class="number">100</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"1A-single_Venn.tiff"</span>,</span><br><span class="line">  col = <span class="string">"black"</span>,</span><br><span class="line">  lwd = <span class="number">9</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  fill = <span class="string">"grey"</span>,</span><br><span class="line">  alpha = <span class="number">0.75</span>,</span><br><span class="line">  cex = <span class="number">4</span>,</span><br><span class="line">  cat.cex = <span class="number">3</span>,</span><br><span class="line">  cat.fontface = <span class="string">"bold"</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 1B</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    X = <span class="number">1</span>:<span class="number">150</span>,</span><br><span class="line">    Y = <span class="number">121</span>:<span class="number">180</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"1B-double_Venn.tiff"</span>,</span><br><span class="line">  lwd = <span class="number">4</span>,</span><br><span class="line">  fill = c(<span class="string">"cornflowerblue"</span>, <span class="string">"darkorchid1"</span>),</span><br><span class="line">  alpha = <span class="number">0.75</span>,</span><br><span class="line">  label.col = <span class="string">"white"</span>,</span><br><span class="line">  cex = <span class="number">4</span>,</span><br><span class="line">  fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.col = c(<span class="string">"cornflowerblue"</span>, <span class="string">"darkorchid1"</span>),</span><br><span class="line">  cat.cex = <span class="number">3</span>,</span><br><span class="line">  cat.fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  cat.fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.03</span>, <span class="number">0.03</span>),</span><br><span class="line">  cat.pos = c(-<span class="number">20</span>, <span class="number">14</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 1C</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    R = c(<span class="number">1</span>:<span class="number">70</span>, <span class="number">71</span>:<span class="number">110</span>, <span class="number">111</span>:<span class="number">120</span>, <span class="number">121</span>:<span class="number">140</span>),</span><br><span class="line">    B = c(<span class="number">141</span>:<span class="number">200</span>, <span class="number">71</span>:<span class="number">110</span>, <span class="number">111</span>:<span class="number">120</span>, <span class="number">201</span>:<span class="number">230</span>),</span><br><span class="line">    G = c(<span class="number">231</span>:<span class="number">280</span>, <span class="number">111</span>:<span class="number">120</span>, <span class="number">121</span>:<span class="number">140</span>, <span class="number">201</span>:<span class="number">230</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"1C-triple_Venn.tiff"</span>,</span><br><span class="line">  col = <span class="string">"transparent"</span>,</span><br><span class="line">  fill = c(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>),</span><br><span class="line">  alpha = <span class="number">0.5</span>,</span><br><span class="line">  label.col = c(<span class="string">"darkred"</span>, <span class="string">"white"</span>, <span class="string">"darkblue"</span>, <span class="string">"white"</span>,</span><br><span class="line">                <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"darkgreen"</span>),</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.default.pos = <span class="string">"text"</span>,</span><br><span class="line">  cat.col = c(<span class="string">"darkred"</span>, <span class="string">"darkblue"</span>, <span class="string">"darkgreen"</span>),</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.06</span>, <span class="number">0.06</span>, <span class="number">0.03</span>),</span><br><span class="line">  cat.pos = <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 1D</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    I = c(<span class="number">1</span>:<span class="number">60</span>, <span class="number">61</span>:<span class="number">105</span>, <span class="number">106</span>:<span class="number">140</span>, <span class="number">141</span>:<span class="number">160</span>, <span class="number">166</span>:<span class="number">175</span>, <span class="number">176</span>:<span class="number">180</span>, <span class="number">181</span>:<span class="number">205</span>, </span><br><span class="line">          <span class="number">206</span>:<span class="number">220</span>),</span><br><span class="line">    IV = c(<span class="number">531</span>:<span class="number">605</span>, <span class="number">476</span>:<span class="number">530</span>, <span class="number">336</span>:<span class="number">375</span>, <span class="number">376</span>:<span class="number">405</span>, <span class="number">181</span>:<span class="number">205</span>, <span class="number">206</span>:<span class="number">220</span>, <span class="number">166</span>:<span class="number">175</span>, </span><br><span class="line">           <span class="number">176</span>:<span class="number">180</span>),</span><br><span class="line">    II = c(<span class="number">61</span>:<span class="number">105</span>, <span class="number">106</span>:<span class="number">140</span>, <span class="number">181</span>:<span class="number">205</span>, <span class="number">206</span>:<span class="number">220</span>, <span class="number">221</span>:<span class="number">285</span>, <span class="number">286</span>:<span class="number">335</span>, <span class="number">336</span>:<span class="number">375</span>, </span><br><span class="line">           <span class="number">376</span>:<span class="number">405</span>),</span><br><span class="line">    III = c(<span class="number">406</span>:<span class="number">475</span>, <span class="number">286</span>:<span class="number">335</span>, <span class="number">106</span>:<span class="number">140</span>, <span class="number">141</span>:<span class="number">160</span>, <span class="number">166</span>:<span class="number">175</span>, <span class="number">181</span>:<span class="number">205</span>, <span class="number">336</span>:<span class="number">375</span>, </span><br><span class="line">            <span class="number">476</span>:<span class="number">530</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"1D-quadruple_Venn.tiff"</span>,</span><br><span class="line">  col = <span class="string">"black"</span>,</span><br><span class="line">  lty = <span class="string">"dotted"</span>,</span><br><span class="line">  lwd = <span class="number">4</span>,</span><br><span class="line">  fill = c(<span class="string">"cornflowerblue"</span>, <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"darkorchid1"</span>),</span><br><span class="line">  alpha = <span class="number">0.50</span>,</span><br><span class="line">  label.col = c(<span class="string">"orange"</span>, <span class="string">"white"</span>, <span class="string">"darkorchid4"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>,</span><br><span class="line">                <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"darkblue"</span>, <span class="string">"white"</span>,</span><br><span class="line">                <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"darkgreen"</span>, <span class="string">"white"</span>),</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.col = c(<span class="string">"darkblue"</span>, <span class="string">"darkgreen"</span>, <span class="string">"orange"</span>, <span class="string">"darkorchid4"</span>),</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.fontfamily = <span class="string">"serif"</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-1</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = <span class="number">1</span>:<span class="number">105</span>,</span><br><span class="line">    B = <span class="number">101</span>:<span class="number">115</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-1_special_case_ext-text.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = c(-<span class="number">20</span>, <span class="number">20</span>),</span><br><span class="line">  ext.line.lty = <span class="string">"dotted"</span>,</span><br><span class="line">  ext.line.lwd = <span class="number">2</span>,</span><br><span class="line">  ext.pos = <span class="number">12</span>,</span><br><span class="line">  ext.dist = -<span class="number">0.12</span>,</span><br><span class="line">  ext.length = <span class="number">0.85</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-2</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = <span class="number">1</span>:<span class="number">100</span>,</span><br><span class="line">    B = <span class="number">1</span>:<span class="number">10</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-2_special_case_pairwise-inclusion.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-3</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = <span class="number">1</span>:<span class="number">150</span>,</span><br><span class="line">    B = <span class="number">151</span>:<span class="number">250</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-3_special_case_pairwise-exclusion.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = c(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">  cat.dist = <span class="number">0.05</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-4</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">50</span>, <span class="number">101</span>:<span class="number">140</span>, <span class="number">141</span>:<span class="number">160</span>, <span class="number">161</span>:<span class="number">170</span>),</span><br><span class="line">    B = c(<span class="number">171</span>:<span class="number">230</span>, <span class="number">101</span>:<span class="number">140</span>, <span class="number">161</span>:<span class="number">170</span>, <span class="number">291</span>:<span class="number">320</span>),</span><br><span class="line">    C = c(<span class="number">141</span>:<span class="number">160</span>, <span class="number">161</span>:<span class="number">170</span>, <span class="number">291</span>:<span class="number">320</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-4_triple_special_case-001.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.05</span>, <span class="number">0.05</span>, -<span class="number">0.1</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-5</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">100</span>),</span><br><span class="line">    B = c(<span class="number">61</span>:<span class="number">70</span>, <span class="number">71</span>:<span class="number">100</span>),</span><br><span class="line">    C = c(<span class="number">41</span>:<span class="number">60</span>, <span class="number">61</span>:<span class="number">70</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-5_triple_special_case-012AA.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = c(-<span class="number">25</span>, <span class="number">0</span>, <span class="number">30</span>),</span><br><span class="line">  cat.dist = c(<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.02</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-6</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">90</span>),</span><br><span class="line">    B = c(<span class="number">1</span>:<span class="number">25</span>),</span><br><span class="line">    C = c(<span class="number">1</span>:<span class="number">5</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-6_triple_special_case-022AAAO.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = <span class="number">0</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.03</span>, <span class="number">0.03</span>, <span class="number">0.01</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-7</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">20</span>),</span><br><span class="line">    B = c(<span class="number">21</span>:<span class="number">80</span>),</span><br><span class="line">    C = c(<span class="number">81</span>:<span class="number">210</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-7_triple_special_case-100.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.dist = <span class="number">0.05</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-8</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">80</span>),</span><br><span class="line">    B = c(<span class="number">41</span>:<span class="number">150</span>),</span><br><span class="line">    C = c(<span class="number">71</span>:<span class="number">100</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-8_triple_special_case-011A.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.07</span>, <span class="number">0.07</span>, <span class="number">0.02</span>),</span><br><span class="line">  cat.pos = c(-<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-9</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">10</span>),</span><br><span class="line">    B = c(<span class="number">11</span>:<span class="number">90</span>),</span><br><span class="line">    C = c(<span class="number">81</span>:<span class="number">90</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-9_triple_special_case-121AO.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = <span class="number">0</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.04</span>, <span class="number">0.04</span>, <span class="number">0.02</span>),</span><br><span class="line">  reverse = <span class="literal">TRUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Complex three-way Venn with labels &amp; sub-/super-scripts</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    I = c(<span class="number">1</span>:<span class="number">60</span>, <span class="number">61</span>:<span class="number">105</span>, <span class="number">106</span>:<span class="number">140</span>, <span class="number">141</span>:<span class="number">160</span>, <span class="number">166</span>:<span class="number">175</span>, <span class="number">176</span>:<span class="number">180</span>, <span class="number">181</span>:<span class="number">205</span>, </span><br><span class="line">          <span class="number">206</span>:<span class="number">220</span>),</span><br><span class="line">    II = c(<span class="number">531</span>:<span class="number">605</span>, <span class="number">476</span>:<span class="number">530</span>, <span class="number">336</span>:<span class="number">375</span>, <span class="number">376</span>:<span class="number">405</span>, <span class="number">181</span>:<span class="number">205</span>, <span class="number">206</span>:<span class="number">220</span>, <span class="number">166</span>:<span class="number">175</span>, </span><br><span class="line">           <span class="number">176</span>:<span class="number">180</span>),</span><br><span class="line">    III = c(<span class="number">61</span>:<span class="number">105</span>, <span class="number">106</span>:<span class="number">140</span>, <span class="number">181</span>:<span class="number">205</span>, <span class="number">206</span>:<span class="number">220</span>, <span class="number">221</span>:<span class="number">285</span>, <span class="number">286</span>:<span class="number">335</span>, <span class="number">336</span>:<span class="number">375</span>, </span><br><span class="line">            <span class="number">376</span>:<span class="number">405</span>)</span><br><span class="line">  ),</span><br><span class="line">  category.names = c(</span><br><span class="line">    expression( bold(<span class="string">'A'</span>[<span class="string">'1: subscript'</span>]) ),</span><br><span class="line">    expression( bold(<span class="string">'B'</span>^<span class="string">'2: going up'</span>) ),</span><br><span class="line">    expression( paste(bold(<span class="string">'C'</span>^<span class="string">'3'</span>), bold(<span class="string">'X'</span>[<span class="string">'i'</span> &lt;= <span class="string">'r'</span>^<span class="string">'2'</span>]^<span class="string">'2'</span>) ) )</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">'Fig3-1_triple_labels_sub_and_superscripts.tiff'</span>,</span><br><span class="line">  output = <span class="literal">TRUE</span>,</span><br><span class="line">  height = <span class="number">3000</span>,</span><br><span class="line">  width = <span class="number">3000</span>,</span><br><span class="line">  resolution = <span class="number">300</span>,</span><br><span class="line">  compression = <span class="string">'lzw'</span>,</span><br><span class="line">  units = <span class="string">'px'</span>,</span><br><span class="line">  lwd = <span class="number">6</span>,</span><br><span class="line">  lty = <span class="string">'blank'</span>,</span><br><span class="line">  fill = c(<span class="string">'yellow'</span>, <span class="string">'purple'</span>, <span class="string">'green'</span>),</span><br><span class="line">  cex = <span class="number">3.5</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  fontfamily = <span class="string">"sans"</span>,</span><br><span class="line">  cat.cex = <span class="number">3</span>,</span><br><span class="line">  cat.fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.default.pos = <span class="string">"outer"</span>,</span><br><span class="line">  cat.pos = c(-<span class="number">27</span>, <span class="number">27</span>, <span class="number">135</span>),</span><br><span class="line">  cat.dist = c(<span class="number">0.055</span>, <span class="number">0.055</span>, <span class="number">0.085</span>),</span><br><span class="line">  cat.fontfamily = <span class="string">"sans"</span>,</span><br><span class="line">  rotation = <span class="number">1</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Complex 3-way Venn using expressions</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    <span class="string">"Num A"</span> = paste(<span class="string">"Num"</span>, <span class="number">1</span>:<span class="number">100</span>),</span><br><span class="line">    <span class="string">"Num B"</span> = c(paste(<span class="string">"Num"</span>, <span class="number">61</span>:<span class="number">70</span>), paste(<span class="string">"Num"</span>, <span class="number">71</span>:<span class="number">100</span>)),</span><br><span class="line">    <span class="string">"Num C"</span> = c(paste(<span class="string">"Num"</span>, <span class="number">41</span>:<span class="number">60</span>), paste(<span class="string">"Num"</span>, <span class="number">61</span>:<span class="number">70</span>))),</span><br><span class="line">  category.names = c(</span><br><span class="line">    expression( bold(<span class="string">'A'</span>[<span class="string">'1'</span>]) ),</span><br><span class="line">    expression( bold(<span class="string">'A'</span>[<span class="string">'2'</span>]) ),</span><br><span class="line">    expression( bold(<span class="string">'A'</span>[<span class="string">'3'</span>]) )</span><br><span class="line">  ),</span><br><span class="line">  euler.d = <span class="literal">TRUE</span>,</span><br><span class="line">  filename = <span class="string">"Fig3-2_Euler_3set_simple_with_subscripts.tiff"</span>,</span><br><span class="line">  cat.pos = c(-<span class="number">20</span>, <span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">  cat.dist = c(<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.02</span>),</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  reverse = <span class="literal">TRUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  list(A = <span class="number">1</span>:<span class="number">150</span>, B = <span class="number">121</span>:<span class="number">170</span>), </span><br><span class="line">  <span class="string">"Venn_2set_simple.tiff"</span></span><br><span class="line">);</span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  list(A = <span class="number">1</span>:<span class="number">150</span>, B = <span class="number">121</span>:<span class="number">170</span>, C = <span class="number">101</span>:<span class="number">200</span>), </span><br><span class="line">  <span class="string">"Venn_3set_simple.tiff"</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">## End(Not run)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a more elaborate two-set Venn diagram with title and subtitle</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    <span class="string">"A"</span> = <span class="number">1</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="string">"B"</span> = <span class="number">96</span>:<span class="number">140</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"Venn_2set_complex.tiff"</span>,</span><br><span class="line">  scaled = <span class="literal">TRUE</span>,</span><br><span class="line">  ext.text = <span class="literal">TRUE</span>,</span><br><span class="line">  ext.line.lwd = <span class="number">2</span>,</span><br><span class="line">  ext.dist = -<span class="number">0.15</span>,</span><br><span class="line">  ext.length = <span class="number">0.9</span>,</span><br><span class="line">  ext.pos = -<span class="number">4</span>,</span><br><span class="line">  inverted = <span class="literal">TRUE</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  rotation.degree = <span class="number">45</span>,</span><br><span class="line">  main = <span class="string">"Complex Venn Diagram"</span>,</span><br><span class="line">  sub = <span class="string">"Featuring: rotation and external lines"</span>,</span><br><span class="line">  main.cex = <span class="number">2</span>,</span><br><span class="line">  sub.cex = <span class="number">1</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">## Not run: </span></span><br><span class="line"><span class="comment"># sample three-set Euler diagram</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    <span class="string">"Num A"</span> = paste(<span class="string">"Num"</span>, <span class="number">1</span>:<span class="number">100</span>),</span><br><span class="line">    <span class="string">"Num B"</span> = c(paste(<span class="string">"Num"</span>, <span class="number">61</span>:<span class="number">70</span>), paste(<span class="string">"Num"</span>, <span class="number">71</span>:<span class="number">100</span>)),</span><br><span class="line">    <span class="string">"Num C"</span> = c(paste(<span class="string">"Num"</span>, <span class="number">41</span>:<span class="number">60</span>), paste(<span class="string">"Num"</span>, <span class="number">61</span>:<span class="number">70</span>))),</span><br><span class="line">  euler.d = <span class="literal">TRUE</span>,</span><br><span class="line">  filename = <span class="string">"Euler_3set_simple.tiff"</span>,</span><br><span class="line">  cat.pos = c(-<span class="number">20</span>, <span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">  cat.dist = c(<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.02</span>),</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  reverse = <span class="literal">TRUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample three-set Euler diagram</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">10</span>),</span><br><span class="line">    B = c(<span class="number">11</span>:<span class="number">90</span>),</span><br><span class="line">    C = c(<span class="number">81</span>:<span class="number">90</span>)</span><br><span class="line">  ),</span><br><span class="line">  euler.d = <span class="literal">TRUE</span>,</span><br><span class="line">  filename = <span class="string">"Euler_3set_scaled.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">## End(Not run)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sample four-set Venn Diagram</span></span><br><span class="line">A &lt;- sample(<span class="number">1</span>:<span class="number">1000</span>, <span class="number">400</span>, replace = <span class="literal">FALSE</span>);</span><br><span class="line">B &lt;- sample(<span class="number">1</span>:<span class="number">1000</span>, <span class="number">600</span>, replace = <span class="literal">FALSE</span>);</span><br><span class="line">C &lt;- sample(<span class="number">1</span>:<span class="number">1000</span>, <span class="number">350</span>, replace = <span class="literal">FALSE</span>);</span><br><span class="line">D &lt;- sample(<span class="number">1</span>:<span class="number">1000</span>, <span class="number">550</span>, replace = <span class="literal">FALSE</span>);</span><br><span class="line">E &lt;- sample(<span class="number">1</span>:<span class="number">1000</span>, <span class="number">375</span>, replace = <span class="literal">FALSE</span>);</span><br><span class="line"></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = A,</span><br><span class="line">    D = D,</span><br><span class="line">    B = B,</span><br><span class="line">    C = C</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"Venn_4set_pretty.tiff"</span>,</span><br><span class="line">  col = <span class="string">"transparent"</span>,</span><br><span class="line">  fill = c(<span class="string">"cornflowerblue"</span>, <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"darkorchid1"</span>),</span><br><span class="line">  alpha = <span class="number">0.50</span>,</span><br><span class="line">  label.col = c(<span class="string">"orange"</span>, <span class="string">"white"</span>, <span class="string">"darkorchid4"</span>, <span class="string">"white"</span>, </span><br><span class="line">                <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"darkblue"</span>, <span class="string">"white"</span>, </span><br><span class="line">                <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"darkgreen"</span>, <span class="string">"white"</span>),</span><br><span class="line">  cex = <span class="number">1.5</span>,</span><br><span class="line">  fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.col = c(<span class="string">"darkblue"</span>, <span class="string">"darkgreen"</span>, <span class="string">"orange"</span>, <span class="string">"darkorchid4"</span>),</span><br><span class="line">  cat.cex = <span class="number">1.5</span>,</span><br><span class="line">  cat.pos = <span class="number">0</span>,</span><br><span class="line">  cat.dist = <span class="number">0.07</span>,</span><br><span class="line">  cat.fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  rotation.degree = <span class="number">270</span>,</span><br><span class="line">  margin = <span class="number">0.2</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample five-set Venn Diagram</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = A,</span><br><span class="line">    B = B,</span><br><span class="line">    C = C,</span><br><span class="line">    D = D,</span><br><span class="line">    E = E</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"Venn_5set_pretty.tiff"</span>,</span><br><span class="line">  col = <span class="string">"black"</span>,</span><br><span class="line">  fill = c(<span class="string">"dodgerblue"</span>, <span class="string">"goldenrod1"</span>, <span class="string">"darkorange1"</span>, <span class="string">"seagreen3"</span>, <span class="string">"orchid3"</span>),</span><br><span class="line">  alpha = <span class="number">0.50</span>,</span><br><span class="line">  cex = c(<span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0.8</span>,</span><br><span class="line">          <span class="number">1</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0.55</span>, <span class="number">1</span>, <span class="number">0.55</span>, <span class="number">1</span>, <span class="number">0.55</span>, <span class="number">1</span>, <span class="number">0.55</span>, <span class="number">1</span>, <span class="number">0.55</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1.5</span>),</span><br><span class="line">  cat.col = c(<span class="string">"dodgerblue"</span>, <span class="string">"goldenrod1"</span>, <span class="string">"darkorange1"</span>, <span class="string">"seagreen3"</span>, <span class="string">"orchid3"</span>),</span><br><span class="line">  cat.cex = <span class="number">1.5</span>,</span><br><span class="line">  cat.fontface = <span class="string">"bold"</span>,</span><br><span class="line">  margin = <span class="number">0.05</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/R_venn_VennDiagram_all.png.png" alt="R_venn_VennDiagram_all.png"></p><hr><h3 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h3><ul><li>控制标题的位置：<code>main.pos=c(0.5,1.05)</code>，其中的<code>c(0.5,1.05)</code>是<code>(x,y)</code>坐标值</li><li>设置标签在圆外面：<code>cat.default.pos = &quot;outer&quot;</code></li></ul><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://rdrr.io/cran/VennDiagram/man/venn.diagram.html" target="_blank" rel="noopener">官方文档——venn.diagram: Make a Venn Diagram</a></li><li><a href="https://blog.csdn.net/weixin_41929524/article/details/86436232" target="_blank" rel="noopener">利用R绘制venn图（VennDiagram、eulerr、venneuler、limma）</a></li></ul><hr><p><br></p><h2 id="UpSet-plot"><a href="#UpSet-plot" class="headerlink" title="UpSet plot"></a>UpSet plot</h2><p>相当于把韦恩图展开，具体来讲就是使用柱状图表示交集的大小，连线表示具体哪些集合之间的交集。其存在的意义是在集合数目较多时，使用韦恩图就很难解读其中的信息，可视化的效果不好。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">install.packages(<span class="string">"UpSetR"</span>)</span><br><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">library</span>(<span class="string">"UpSetR"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="输入数据"><a href="#输入数据" class="headerlink" title="输入数据"></a>输入数据</h3><p><code>UpSetR</code>主要支持三种类型的数据输入：</p><ul><li>一种是<strong>数据框格式的数据</strong>，后续的集合intersects就是针对的列的信息；</li><li>一种数据类型就是集合交集的向量，<strong>使用<code>&amp;</code>表示集合之间存在intersects，数值表示intersects数目的大小</strong>；</li><li>最后一种就是非常常见的<strong>由若干named vector组成的list的形式</strong>，<code>UpSetR</code>会自动找每个vector之间的交集。</li></ul><h4 id="dataframe"><a href="#dataframe" class="headerlink" title="dataframe"></a>dataframe</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">movies &lt;- read.csv(system.file(<span class="string">"extdata"</span>,<span class="string">"movies.csv"</span>,package = <span class="string">"UpSetR"</span>), header = <span class="literal">TRUE</span>, sep=<span class="string">";"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据信息</span></span><br><span class="line">movies[<span class="number">1</span>:<span class="number">5</span>,<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">                                  Name ReleaseDate Action Adventure Children</span><br><span class="line">  <span class="number">1</span>                   Toy Story (<span class="number">1995</span>)        <span class="number">1995</span>      <span class="number">0</span>         <span class="number">0</span>        <span class="number">1</span></span><br><span class="line">  <span class="number">2</span>                     Jumanji (<span class="number">1995</span>)        <span class="number">1995</span>      <span class="number">0</span>         <span class="number">1</span>        <span class="number">1</span></span><br><span class="line">  <span class="number">3</span>            Grumpier Old Men (<span class="number">1995</span>)        <span class="number">1995</span>      <span class="number">0</span>         <span class="number">0</span>        <span class="number">0</span></span><br><span class="line">  <span class="number">4</span>           Waiting to Exhale (<span class="number">1995</span>)        <span class="number">1995</span>      <span class="number">0</span>         <span class="number">0</span>        <span class="number">0</span></span><br><span class="line">  <span class="number">5</span> Father of the Bride Part II (<span class="number">1995</span>)        <span class="number">1995</span>      <span class="number">0</span>         <span class="number">0</span>        <span class="number">0</span></span><br></pre></td></tr></table></figure><p>数据是一个对电影进行分类的数据，可以分为动作片、冒险片以及各种其他类型的电影，有的电影可能只属于一种类型，而有的电影可能会同时属于好几种电影类型，比如这里的电影Jumanji，同时属于Adventure和Children。所以如果按照电影类别来对电影进行分类的话就会出现类别之间存在交集的情况。</p><hr><h4 id="交集表达式"><a href="#交集表达式" class="headerlink" title="交集表达式"></a>交集表达式</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expressionInput &lt;- c(one = <span class="number">2</span>, two = <span class="number">1</span>, three = <span class="number">2</span>, `one&amp;two` = <span class="number">1</span>, `one&amp;three` = <span class="number">4</span>, </span><br><span class="line">    `two&amp;three` = <span class="number">1</span>, `one&amp;two&amp;three` = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><hr><h4 id="named-vector"><a href="#named-vector" class="headerlink" title="named vector"></a>named vector</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listInput &lt;- list(one = c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>), two = c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, </span><br><span class="line">    <span class="number">10</span>), three = c(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>))</span><br></pre></td></tr></table></figure><hr><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><a class="btn" href="https://cran.r-project.org/web/packages/UpSetR/vignettes/basic.usage.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>basic usage(官方文档)</a><h4 id="数据框格式数据"><a href="#数据框格式数据" class="headerlink" title="数据框格式数据"></a>数据框格式数据</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">upset(movies, nsets = <span class="number">7</span>, nintersects = <span class="number">30</span>, mb.ratio = c(<span class="number">0.5</span>, <span class="number">0.5</span>),</span><br><span class="line">      order.by = c(<span class="string">"freq"</span>, <span class="string">"degree"</span>), decreasing = c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>))</span><br></pre></td></tr></table></figure><p>关键参数：</p><ul><li><code>nsets</code>：按照数据集的size从大到小来选取使用的数据集数目，也就是使用多少个数据集来看之间的intersects情况；选中的数据集不会看其与未选中数据集的intersects情况；默认值是5</li><li><code>sets</code>：指定需要看的数据集，如：<code>sets=c(&quot;Action&quot;,&quot;Drama&quot;,&quot;Horror&quot;)</code>会展示三者之间任意存在intersects情况</li><li><code>nintersects</code>：可视化的intersects数目，默认是展示40个；如果想展示全部的intersects，可以将其设置为<code>NA</code></li><li><code>keep.order</code>：逻辑值，是否按照输入的sets顺序来排列sets，默认的<code>FALSE</code>，按照sets的大小来进行排列；在使用了sets参数下有效</li><li><code>mb.ratio</code>：<code>bar plot</code>和<code>sets matrix</code>的比例</li><li><code>order.by</code>：按照什么进行排序：<ul><li><code>freq</code>：分类别的intersects按照overlap数目的大小进行排序，比如集合独有的元素大小、两个集合交集的大小、三个集合交集的大小</li><li><code>degree</code>：前面的freq是分类别的、在类别内部的排序，这里的degree是将上述排好序的类别再次进行排序</li></ul></li><li><code>decreasing</code>：是否降序，可以和前面的<code>order.by</code>参数对应</li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_simple1.png.png" alt="r_upset_simple1.png"></p><hr><h4 id="交集表达式-1"><a href="#交集表达式-1" class="headerlink" title="交集表达式"></a>交集表达式</h4><p>使用<code>fromExpression</code>函数将其转化为数据框的格式：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upset(fromExpression(expressionInput), order.by = <span class="string">"freq"</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_simple2.png.png" alt="r_upset_simple2.png"></p><h4 id="named-vector-1"><a href="#named-vector-1" class="headerlink" title="named vector"></a>named vector</h4><p>使用<code>fromList</code>函数将其转化为数据框的格式：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upset(fromList(listInput), order.by = <span class="string">"freq"</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_simple2.png.png" alt="r_upset_simple2.png"></p><hr><h3 id="设置查询并高亮显示"><a href="#设置查询并高亮显示" class="headerlink" title="设置查询并高亮显示"></a>设置查询并高亮显示</h3><p>在intersects结果中可以<strong>高亮显示部分查询的结果</strong>，比如在电影分类的intersects中可以查看指定1970-1980之间的电影分类intersect情况：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定年份的函数</span></span><br><span class="line"><span class="comment"># 写法类似apply只能怪函数的用法</span></span><br><span class="line">between &lt;- <span class="keyword">function</span>(row, min, max)&#123;</span><br><span class="line">  newData &lt;- (row[<span class="string">"ReleaseDate"</span>] &lt; max) &amp; (row[<span class="string">"ReleaseDate"</span>] &gt; min)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 将上述函数以及对应的参数传递给queries参数</span></span><br><span class="line">upset(movies, sets = c(<span class="string">"Drama"</span>, <span class="string">"Comedy"</span>, <span class="string">"Action"</span>, <span class="string">"Thriller"</span>, <span class="string">"Western"</span>, <span class="string">"Documentary"</span>),</span><br><span class="line">      queries = list(list(query = intersects, params = list(<span class="string">"Drama"</span>, <span class="string">"Action"</span>)),</span><br><span class="line">                     list(query = between, params = list(<span class="number">1970</span>, <span class="number">1980</span>), color = <span class="string">"red"</span>, active = <span class="literal">TRUE</span>)))</span><br></pre></td></tr></table></figure><p></p><p>关键参数：</p><ul><li><code>queries</code>：Entered as a list that contains a list of queries</li><li><code>query</code>：query的函数</li><li><code>params</code>：传递给query函数的参数，list的形式，不是向量</li><li><code>color</code>：查询结果的颜色</li><li><code>active</code>：如果设置为<code>TRUE</code>，就会展示成堆叠柱状图的形式，如下图中的年份查询结果；如果设置为<code>FALSE(默认)</code>，就会使用一个三角形表示查询结果的大小，如下图中”Drama”和”Action”两者相交的结果。</li><li><code>query.name</code>：设置query.name，用于<code>legend</code></li><li><code>query.legend</code>：<code>legend</code>的位置，可以为<code>query.legend = &quot;top&quot;</code></li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_queries1.png.png" alt="r_upset_queries1.png"></p><a class="btn" href="https://cran.r-project.org/web/packages/UpSetR/vignettes/queries.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Querying the Data(官方文档)</a><hr><h3 id="添加属性信息"><a href="#添加属性信息" class="headerlink" title="添加属性信息"></a>添加属性信息</h3><p>除了展示分类信息的intersect之外，如果还想展示其他属性的信息，比如上面电影除了分类之外还有上映时间以及评分信息等，如果想添加这两个信息可以使用<code>attribute.plots</code>参数进行添加。</p><a class="btn" href="https://cran.r-project.org/web/packages/UpSetR/vignettes/attribute.plots.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Attribute Plots(官方文档)</a><h4 id="自带的绘图函数"><a href="#自带的绘图函数" class="headerlink" title="自带的绘图函数"></a>自带的绘图函数</h4><p><code>attribute.plots</code>内置有柱形图(histogram)、散点图(scatter_plot)等:<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upset(movies,attribute.plots=list(gridrows=<span class="number">60</span>,</span><br><span class="line">                                  plots=list(list(plot=scatter_plot, x=<span class="string">"ReleaseDate"</span>, y=<span class="string">"AvgRating"</span>),</span><br><span class="line">                                             list(plot=scatter_plot, x=<span class="string">"ReleaseDate"</span>, y=<span class="string">"Watches"</span>),</span><br><span class="line">                                             list(plot=scatter_plot, x=<span class="string">"Watches"</span>, y=<span class="string">"AvgRating"</span>),</span><br><span class="line">                                             list(plot=histogram, x=<span class="string">"ReleaseDate"</span>)), </span><br><span class="line">                                  ncols = <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_attributeplots1.png.png" alt="r_upset_attributeplots1.png"></p><hr><h4 id="自定义绘图函数"><a href="#自定义绘图函数" class="headerlink" title="自定义绘图函数"></a>自定义绘图函数</h4><p>支持自定义ggplot2语法的绘图函数，并且可以和queries结合：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义的柱状图</span></span><br><span class="line">plot1 &lt;- <span class="keyword">function</span>(mydata, x)&#123;</span><br><span class="line">  myplot &lt;- (ggplot(mydata, aes_string(x= x, fill = <span class="string">"color"</span>))</span><br><span class="line">             + geom_histogram() + scale_fill_identity()</span><br><span class="line">             + theme(plot.margin = unit(c(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="string">"cm"</span>)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 自定义的散点图</span></span><br><span class="line">plot2 &lt;- <span class="keyword">function</span>(mydata, x, y)&#123;</span><br><span class="line">  myplot &lt;- (ggplot(data = mydata, aes_string(x=x, y=y, colour = <span class="string">"color"</span>), alpha = <span class="number">0.5</span>)</span><br><span class="line">             + geom_point() + scale_color_identity()</span><br><span class="line">             + theme_bw() + theme(plot.margin = unit(c(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="string">"cm"</span>)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这里可以设置queries参数来决定是不是将后面的queries信息应用到属性图中</span></span><br><span class="line">attributeplots &lt;- list(gridrows = <span class="number">55</span>,</span><br><span class="line">                       plots = list(list(plot = plot1, x= <span class="string">"ReleaseDate"</span>,  queries = <span class="literal">FALSE</span>),</span><br><span class="line">                                    list(plot = plot1, x= <span class="string">"ReleaseDate"</span>, queries = <span class="literal">TRUE</span>),</span><br><span class="line">                                    list(plot = plot2, x = <span class="string">"ReleaseDate"</span>, y = <span class="string">"AvgRating"</span>, queries = <span class="literal">FALSE</span>),</span><br><span class="line">                                    list(plot = plot2, x = <span class="string">"ReleaseDate"</span>, y = <span class="string">"AvgRating"</span>, queries = <span class="literal">TRUE</span>)),</span><br><span class="line">                       ncols = <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">upset(movies, attribute.plots = attributeplots,</span><br><span class="line">      queries = list(list(query = between, params = list(<span class="number">1920</span>, <span class="number">1940</span>),query.name=<span class="string">"query1"</span>),</span><br><span class="line">                     list(query = intersects, params = list(<span class="string">"Drama"</span>), color= <span class="string">"red"</span>,query.name=<span class="string">"query2"</span>),</span><br><span class="line">                     list(query = elements, params = list(<span class="string">"ReleaseDate"</span>, <span class="number">1990</span>, <span class="number">1991</span>, <span class="number">1992</span>),query.name=<span class="string">"query3"</span>)),</span><br><span class="line">      query.legend = <span class="string">"top"</span>,</span><br><span class="line">      main.bar.color = <span class="string">"yellow"</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_attributeplots2.png.png" alt="r_upset_attributeplots2.png"></p><hr><h3 id="添加meteadata"><a href="#添加meteadata" class="headerlink" title="添加meteadata"></a>添加meteadata</h3><p>还可以添加信息对分类信息进行注释：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sets &lt;- names(movies[<span class="number">3</span>:<span class="number">19</span>])</span><br><span class="line">avgRottenTomatoesScore &lt;- round(runif(<span class="number">17</span>, min = <span class="number">0</span>, max = <span class="number">90</span>))</span><br><span class="line">metadata &lt;- as.data.frame(cbind(sets, avgRottenTomatoesScore))</span><br><span class="line">names(metadata) &lt;- c(<span class="string">"sets"</span>, <span class="string">"avgRottenTomatoesScore"</span>)</span><br><span class="line"><span class="comment"># 保证这一列信息是数字，用于后续绘图</span></span><br><span class="line">metadata$avgRottenTomatoesScore &lt;- as.numeric(as.character(metadata$avgRottenTomatoesScore))</span><br><span class="line">head(metadata)</span><br><span class="line">          sets avgRottenTomatoesScore</span><br><span class="line">  <span class="number">1</span>      Action                     <span class="number">48</span></span><br><span class="line">  <span class="number">2</span>   Adventure                     <span class="number">31</span></span><br><span class="line">  <span class="number">3</span>    Children                     <span class="number">46</span></span><br><span class="line">  <span class="number">4</span>      Comedy                     <span class="number">71</span></span><br><span class="line">  <span class="number">5</span>       Crime                     <span class="number">40</span></span><br><span class="line">  <span class="number">6</span> Documentary                     <span class="number">26</span></span><br><span class="line">upset(movies, set.metadata = list(data = metadata, </span><br><span class="line">                                  plots = list(list(type = <span class="string">"hist"</span>, </span><br><span class="line">                                                    column = <span class="string">"avgRottenTomatoesScore"</span>, </span><br><span class="line">                                                    assign = <span class="number">20</span>))))</span><br></pre></td></tr></table></figure><p></p><p>关键参数：</p><ul><li><code>data</code>：数据框格式的数据，第一列为集合的名称，后续的列为metadata信息</li><li><code>plots</code>：<ul><li><code>type</code>：<ul><li>数据是数字：<code>bar plot (&quot;hist&quot;)</code> 或者 <code>heat map (&quot;heat&quot;)</code></li><li>数据是布尔型的：<code>&quot;bool&quot; heat map</code></li><li>数据的分类型的字符变量：<code>heat map (&quot;heat&quot;)</code> 或者 <code>text (&quot;text&quot;)</code></li></ul></li><li><code>column</code>：画图的数据信息</li><li><code>assign</code>：分配的metadate plot的大小，upset不加metadata之前是100x100的grid，这个如果设置为20，就会添加20用作画图，整个图就会变成100x120</li><li><code>colors</code>:<ul><li><code>bar plot</code>：只会接受一个颜色</li><li><code>&quot;heat&quot; or &quot;bool&quot;</code>：针对每一个分类变量都有一个color</li></ul></li></ul></li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_meteadata1.png.png" alt="r_upset_meteadata1.png"></p><a class="btn" href="https://cran.r-project.org/web/packages/UpSetR/vignettes/set.metadata.plots.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Incorporating Set Metadata(官方文档)</a><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了使用&lt;code&gt;VennDiagram&lt;/code&gt;包来进行韦恩图的绘制，并解决了&lt;code&gt;VennDiagram&lt;/code&gt;绘制维恩图中出现的 &lt;strong&gt;不能直接展示，必须要保存为文件才能查看&lt;/strong&gt;、&lt;strong&gt;每次运行都会产生log文件&lt;/strong&gt;两大缺点；随后也学习了使用&lt;code&gt;UpSetR&lt;/code&gt;绘制UpSet图。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Linux系列之挂载硬盘和USB设备</title>
    <link href="http://showteeth.tech/posts/31689.html"/>
    <id>http://showteeth.tech/posts/31689.html</id>
    <published>2020-04-02T08:48:47.000Z</published>
    <updated>2020-04-02T13:45:08.011Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了如何<strong>在Linux下挂载<code>exFAT</code>和<code>NTFS</code>文件系统的硬盘</strong>以及<strong>大致了解了文件系统</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实验室新到了一批数据，需要将其传到计算服务器上，并且实验室搭建了一个数据服务器，这台数据服务器和计算服务器之间是万兆网卡互联的，所以就想把移动硬盘挂载到数据服务器上，然后将其再传到计算服务器上，这样速度可能会快一些。</p><div class="note info"><p>补充一下<strong>网卡的传输速度换算</strong> ：</p><ul><li>一般我们听到的千兆或者万兆网卡其实并不是说传输速度可以达到1000MB/s或者10000MB/s，其单位其实上是<code>Mbps</code></li><li>和常规的存储大小的换算一样，<code>1B(Byte)=8b(bits)</code></li><li>所以实际上的速度应该是：<code>1000Mb/s / 8 = 125MB/s</code></li></ul></div><hr><h2 id="查看插入的设备信息"><a href="#查看插入的设备信息" class="headerlink" title="查看插入的设备信息"></a>查看插入的设备信息</h2><p>在向工作站上插入硬盘或者U盘之后可以通过<code>fdisk -l</code>命令查看所有的磁盘文件系统详细信息(最好在插入硬盘之前也运行一下，这样可以知道哪个硬盘是刚插入的那个硬盘)：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line">  Disk /dev/sda: 479.6 GB, 479559942144 bytes, 936640512 sectors</span><br><span class="line">  Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">  Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">  I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">  Disk label <span class="built_in">type</span>: dos</span><br><span class="line">  Disk identifier: 0x0004db96</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">  /dev/sda1            2048        6143        2048   83  Linux</span><br><span class="line">  /dev/sda2   *        6144     1030143      512000   83  Linux</span><br><span class="line">  /dev/sda3         1030144   695457791   347213824   83  Linux</span><br><span class="line">  /dev/sda4       695457792   936640511   120591360    5  Extended</span><br><span class="line">  /dev/sda5       695461888   905177087   104857600   83  Linux</span><br><span class="line">  /dev/sda6       905179136   920911871     7866368   8e  Linux LVM</span><br><span class="line">  WARNING: fdisk GPT support is currently new, and therefore <span class="keyword">in</span> an experimental phase. Use at your own discretion.</span><br><span class="line"></span><br><span class="line">  Disk /dev/sdb: 117558.6 GB, 117558623600640 bytes, 229606686720 sectors</span><br><span class="line">  Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">  Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">  I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">  Disk label <span class="built_in">type</span>: gpt</span><br><span class="line">  Disk identifier: 582F8C06-090A-4361-9645-978F49D9EB10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">#         Start          End    Size  Type            Name</span></span><br><span class="line">  1         2048     47192063   22.5G  Linux LVM       </span><br><span class="line">  2     47192064 229606684671  106.9T  Microsoft basic </span><br><span class="line"></span><br><span class="line">  Disk /dev/mapper/centos-swap: 32.2 GB, 32212254720 bytes, 62914560 sectors</span><br><span class="line">  Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">  Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">  I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Disk /dev/sdc: 1000.2 GB, 1000204885504 bytes, 1953525167 sectors</span><br><span class="line">  Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">  Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">  I/O size (minimum/optimal): 4096 bytes / 33553920 bytes</span><br><span class="line">  Disk label <span class="built_in">type</span>: dos</span><br><span class="line">  Disk identifier: 0x2358f016</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">  /dev/sdc1            2048  1953521663   976759808    7  HPFS/NTFS/exFAT</span><br></pre></td></tr></table></figure><p></p><p>这里结合硬盘大小可以发现最后的<code>/dev/sdc</code>是我们插入的硬盘设备，<code>/dev/sdc1</code>就是该硬盘的分区信息，这里只有一个分区，后续<strong>挂载硬盘实际上挂载的是分区</strong>，其文件系统采用的是<code>HPFS/NTFS/exFAT</code>，这个也非常重要，后续会针对不同的文件系统采用不同的处理方式。</p><div class="note info"><p>移动硬盘一般是<code>/dev/sdX1</code>的形式，比如<code>/dev/sdc1</code>。这里需要了解<code>sdX1</code>的含义，<code>sd</code>表示<code>可移动设备和SATA 设备</code>，<code>X表示设备的序号</code>，依次为 a、b、c 等，<code>最后的1表示这是该设备的第一个分区</code>。注意，如果你的储存设备只显示为<code>/dev/sdX</code>，<strong>没有最后的数字，表明这个设备没有分区。</strong></p></div><hr><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="文件系统简介"><a href="#文件系统简介" class="headerlink" title="文件系统简介"></a>文件系统简介</h3><p>为了了解不同文件系统的区别，这里补充一下关于文件系统的知识，大部分都摘自<a href="https://www.ruanyifeng.com/blog/2018/10/exfat.html" target="_blank" rel="noopener">exFAT 文件系统指南</a>。</p><p>所谓文件系统，就是<strong>文件的储存方式。简单说，它就是一个门牌系统，为储存设备划分门牌号，每个文件分配一个门牌，然后就能按照门牌找到文件。</strong></p><p>没有文件系统的硬盘，就是一块荒地。如果有人住在那里，你只能说那里有人住，精确位置你说不出来。只有划分了路牌，你才能说出，这个人住在”人民路15号”，这样才能精确定位。文件系统就是路牌的划分方法。</p><p><strong>储存设备都需要指定文件系统，计算机才能读写。所谓”格式化”，就是为硬盘安装文件系统。不同的操作系统有不同的文件系统(可以是某一种，也可以是多种)，如果计算机不认识某个文件系统，就会显示这块盘无法读写</strong>。</p><hr><h3 id="查看硬盘的文件系统类型"><a href="#查看硬盘的文件系统类型" class="headerlink" title="查看硬盘的文件系统类型"></a>查看硬盘的文件系统类型</h3><p>在Linux下可以使用<code>df -Th</code>来查看硬盘的文件系统类型：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df -T -h</span><br><span class="line">  Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">  /dev/sda5      xfs       100G  5.5G   95G   6% /</span><br><span class="line">  devtmpfs       devtmpfs   16G     0   16G   0% /dev</span><br><span class="line">  tmpfs          tmpfs      16G     0   16G   0% /dev/shm</span><br><span class="line">  tmpfs          tmpfs      16G   11M   16G   1% /run</span><br><span class="line">  tmpfs          tmpfs      16G     0   16G   0% /sys/fs/cgroup</span><br><span class="line">  /dev/sda3      xfs       331G  270M  331G   1% /home</span><br><span class="line">  /dev/sda2      xfs       494M  170M  325M  35% /boot</span><br><span class="line">  /dev/sdb2      xfs       107T   28G  107T   1% /data</span><br><span class="line">  tmpfs          tmpfs     3.1G     0  3.1G   0% /run/user/0</span><br><span class="line">  tmpfs          tmpfs     3.1G     0  3.1G   0% /run/user/1000</span><br><span class="line">  /dev/sdc1      fuseblk   932G  427G  506G  46% /mnt/200402data</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.ruanyifeng.com/blog/2018/10/exfat.html" target="_blank" rel="noopener">exFAT 文件系统指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/59747958" target="_blank" rel="noopener">移动硬盘使用什么文件系统格式</a></li></ul><hr><h2 id="exFAT文件系统硬盘挂载"><a href="#exFAT文件系统硬盘挂载" class="headerlink" title="exFAT文件系统硬盘挂载"></a>exFAT文件系统硬盘挂载</h2><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>带有<code>exFAT</code> 文件系统的硬盘挂载在Linux上是通过 <code>fuse (Filesystem in userspace )</code> 模块来支持的，这里需要先安装该模块：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常规安装会出现如下问题</span></span><br><span class="line"><span class="comment"># 显示没有这个包</span></span><br><span class="line">yum install exfat-utils fuse-exfat</span><br><span class="line">  No package exfat-utils available.</span><br><span class="line">  No package fuse-exfatsudo available.</span><br></pre></td></tr></table></figure><p></p><p>出现上述问题的原因是<code>exfat-utils</code>、<code>fuse-exfat</code>这两个包<strong>并不在yum默认的repo中，这里需要安装nux-dextop才可以实现yum的安装</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先安装epel</span></span><br><span class="line">yum -y install epel-release</span><br><span class="line"><span class="comment"># 安装nux-dextop</span></span><br><span class="line">yum -y install epel-release http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure><p></p><p>由于<strong>Nux Dextop仓库可能会与其他第三方库有冲突，所以建议默认情况下不启用Nux Dextop仓库,当需要使用Nux Dextop仓库时，显式启用仓库</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nux-dextop.repo</span><br><span class="line"><span class="comment"># 将"enabled=1" 修改为 "enabled=0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显式指定仓库安装</span></span><br><span class="line">yum --enablerepo=nux-dextop install &lt;package-name&gt;</span><br></pre></td></tr></table></figure><p></p><p>安装完成之后可以使用<code>yum repolist</code>查看：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">repo id                                                     repo name                                                                               status</span><br><span class="line">!base/7/x86_64                                              CentOS-7 - Base                                                                         10,097</span><br><span class="line">!epel/x86_64                                                Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - x86_64                                          13,229</span><br><span class="line">!extras/7/x86_64                                            CentOS-7 - Extras                                                                          341</span><br><span class="line">!nux-dextop/x86_64                                          Nux.Ro RPMs <span class="keyword">for</span> general desktop use                                                      2,717</span><br><span class="line">!updates/7/x86_64                                           CentOS-7 - Updates                                                                       1,787</span><br><span class="line">repolist: 28,171</span><br></pre></td></tr></table></figure><p></p><p>设置好repo之后就可以安装<code>exfat-utils</code>、<code>fuse-exfat</code>这两个包了：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install exfat-utils fuse-exfat</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>安装完所需要的依赖之后就可以进行挂载了：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -t指定文件系统类型</span></span><br><span class="line">mount -t exfat /dev/sdc1 /mnt/200402data</span><br><span class="line">  <span class="comment"># 挂载成功输出</span></span><br><span class="line">  FUSE exfat 1.2.7</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="ntfs文件系统硬盘挂载"><a href="#ntfs文件系统硬盘挂载" class="headerlink" title="ntfs文件系统硬盘挂载"></a>ntfs文件系统硬盘挂载</h2><p>有了前面的exfat文件系统的挂载学习，针对ntfs文件系统的挂载就简单很多。</p><p>安装依赖包：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖ntfs-3g</span></span><br><span class="line"><span class="comment">## ntfs-3g也不再默认的仓库中，需要先安装epel-release</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line"><span class="comment">## 再安装ntfs-3g</span></span><br><span class="line">yum install ntfs-3g -y</span><br></pre></td></tr></table></figure><p></p><p>挂载：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t ntfs-3g /dev/sdc1 /mnt/200402data</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="设置自动挂载"><a href="#设置自动挂载" class="headerlink" title="设置自动挂载"></a>设置自动挂载</h2><p>某个硬盘自动挂载在固定的目录。参考<a href="https://www.rootusers.com/how-to-mount-a-windows-ntfs-disk-in-linux/" target="_blank" rel="noopener">How To Mount A Windows NTFS Disk In Linux</a></p><hr><h2 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/86d16189832e" target="_blank" rel="noopener">在CentOS或RHEL上安装Nux Dextop仓库</a></li><li><a href="https://superuser.com/questions/960321/centos-yum-not-finding-packages" target="_blank" rel="noopener">CentOS Yum Not Finding Packages</a></li><li><a href="https://www.rootusers.com/how-to-mount-a-windows-ntfs-disk-in-linux/" target="_blank" rel="noopener">How To Mount A Windows NTFS Disk In Linux</a></li><li><a href="https://blog.51cto.com/xiaodongge/1845547" target="_blank" rel="noopener">Linux挂载NTFS硬盘错误解决办法</a></li><li><a href="https://unix.stackexchange.com/questions/476852/cannot-mount-sda1-the-device-dev-sda1-doesnt-seem-to-have-a-valid-ntfs" target="_blank" rel="noopener">Cannot mount sda1: “The device ‘/dev/sda1’ doesn’t seem to have a valid NTFS.”</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了如何&lt;strong&gt;在Linux下挂载&lt;code&gt;exFAT&lt;/code&gt;和&lt;code&gt;NTFS&lt;/code&gt;文件系统的硬盘&lt;/strong&gt;以及&lt;strong&gt;大致了解了文件系统&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="集群运维" scheme="http://showteeth.tech/categories/Linux/%E9%9B%86%E7%BE%A4%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="集群运维" scheme="http://showteeth.tech/tags/%E9%9B%86%E7%BE%A4%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>R系列之map函数家族</title>
    <link href="http://showteeth.tech/posts/57211.html"/>
    <id>http://showteeth.tech/posts/57211.html</id>
    <published>2020-03-27T01:37:20.000Z</published>
    <updated>2020-04-03T13:37:52.773Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要学习了<code>map</code>函数家族的各种函数用法。<code>map</code>家族的函数主要是用来<strong>将函数作用于传入数据(可以是向量，也可以是数据框)的每个元素</strong>的，这和主要<strong>针对数据框和列表的<code>apply</code>函数家族形成互补</strong>，主要实现的功能相近。同时也学习了<code>map</code>函数家族的变体，增强了其适用性。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在前面的文章<a href="http://showteeth.tech/posts/15576.html">R系列之apply函数家族</a>中已经学习了在代码中减少使用循环的方法，不过<strong>apply函数家族的函数大部分都是针对dataframe、array以及list设计的</strong>，而实际使用过程中经常会遇到需要<strong>将函数应用到vector中每个元素的情形</strong>，这种情况下就不能使用apply函数家族的函数或者使用比较麻烦。针对上述情况，我们可以<strong>使用map函数家族的函数来解决这个问题</strong>。</p><hr><h2 id="map函数家族简介"><a href="#map函数家族简介" class="headerlink" title="map函数家族简介"></a>map函数家族简介</h2><p><code>map</code>函数家族主要包括7个函数，都在<code>purr</code>包中(<code>purr</code>包又在<code>tidyverse</code>包中，使用的时候直接<code>library(tidyverse)</code>)，按照返回值数据结构的差异可以分为：</p><ul><li><code>map(.x, .f, ...)</code>：返回值为<strong>列表</strong></li><li><code>map_lgl()</code>、<code>map_int()</code>、<code>map_dbl()</code>、<code>map_chr()</code>：返回特定数据类型的<strong>向量</strong>，在使用<code>map_int()</code>时需要注意数据类型的自动提升问题</li><li><code>map_dfc()</code>、<code>map_dfr()</code>：对数据进行<code>col_binding</code>、<code>row_binding</code>得到<strong>数据框</strong></li></ul><hr><h2 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h2><p>将函数作用于每个元素，并且返回一个列表(函数在每个元素上的执行结果)：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对9、16、25执行开方操作，返回每个结果的列表</span></span><br><span class="line">map(c(<span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>), sqrt)</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">2</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">3</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">5</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="类型特异性的map函数"><a href="#类型特异性的map函数" class="headerlink" title="类型特异性的map函数"></a>类型特异性的map函数</h2><p>针对不同返回值的类型，map函数可以分为<code>map_lgl()</code>、<code>map_int()</code>、<code>map_dbl()</code>、<code>map_chr()</code>，分别作用与<code>逻辑值</code>、<code>整型数值</code>、<code>浮点型</code>、<code>字符串类型</code>，这些函数的<strong>返回值都是特定类型的向量</strong>。</p><h3 id="map-chr-返回字符型向量"><a href="#map-chr-返回字符型向量" class="headerlink" title="map_chr-返回字符型向量"></a>map_chr-返回字符型向量</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看生成的数据类型</span></span><br><span class="line"><span class="comment">## 直接生成的序列是整型的</span></span><br><span class="line">map_chr(<span class="number">1</span>:<span class="number">10</span>, typeof)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定的序列是double型的</span></span><br><span class="line">map_chr(c(<span class="number">1</span>,<span class="number">10</span>), typeof)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"double"</span> <span class="string">"double"</span></span><br></pre></td></tr></table></figure><hr><h3 id="map-dbl-返回浮点型向量"><a href="#map-dbl-返回浮点型向量" class="headerlink" title="map_dbl-返回浮点型向量"></a>map_dbl-返回浮点型向量</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map_dbl(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>),sqrt)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1.000000</span> <span class="number">1.414214</span> <span class="number">2.000000</span></span><br></pre></td></tr></table></figure><hr><h3 id="map-int-返回整型向量"><a href="#map-int-返回整型向量" class="headerlink" title="map_int-返回整型向量"></a>map_int-返回整型向量</h3><p>这里使用的时候需要注意，<code>purr</code>包对 <code>type checking</code>是非常严格的，在输出的时候会<strong>自动进行类型的提升(如果一个int乘上double，结果就是double型的数据)</strong>，不同数据类型的升级顺序为：<code>logical -&gt; integer -&gt; double -&gt; character</code>，注意这里<strong>只能从低到高，不能从高到低</strong>。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里生成的1-10的序列是整型的序列</span></span><br><span class="line">map_int(<span class="number">1</span>:<span class="number">10</span>, <span class="keyword">function</span>(x) x)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="comment"># 这里2*x中的2是浮点型的数据</span></span><br><span class="line"><span class="comment"># int*double的结果是double，所以这里报错</span></span><br><span class="line">map_int(<span class="number">1</span>:<span class="number">10</span>, <span class="keyword">function</span>(x) <span class="number">2</span>*x)</span><br><span class="line">  Error: Can<span class="string">'t coerce element 1 from a double to a integer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 声明这里的2是整型的数据，在后面加上L即可</span></span><br><span class="line"><span class="string">map_int(1:10, function(x) 2L*x)</span></span><br><span class="line"><span class="string">  [1]  2  4  6  8 10 12 14 16 18 20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 直接使用map_dbl即可</span></span><br><span class="line"><span class="string">map_dbl(1:10, function(x) 2*x)</span></span><br><span class="line"><span class="string"> [1]  2  4  6  8 10 12 14 16 18 20</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="map-lgl-返回逻辑向量"><a href="#map-lgl-返回逻辑向量" class="headerlink" title="map_lgl-返回逻辑向量"></a>map_lgl-返回逻辑向量</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map_lgl(c(<span class="number">1</span>,<span class="number">10</span>), is.double)</span><br><span class="line">  [<span class="number">1</span>] <span class="literal">TRUE</span> <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><hr><h2 id="输出数据框的map函数"><a href="#输出数据框的map函数" class="headerlink" title="输出数据框的map函数"></a>输出数据框的map函数</h2><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这里的~相当于function(x)</span></span><br><span class="line"><span class="comment"># ~ lm(mpg ~ wt, data = .x) 相当于 function(x) lm(mpg ~ wt, data = .x)</span></span><br><span class="line">mtcars %&gt;%</span><br><span class="line">  split(.$cyl) %&gt;%</span><br><span class="line">  map(~ lm(mpg ~ wt, data = .x)) %&gt;% </span><br><span class="line">  map(~ as.data.frame(t(as.matrix(coef(.)))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">  $`4`</span><br><span class="line">    (Intercept)        wt</span><br><span class="line">  <span class="number">1</span>     <span class="number">39.5712</span> -<span class="number">5.647025</span></span><br><span class="line"></span><br><span class="line">  $`6`</span><br><span class="line">    (Intercept)        wt</span><br><span class="line">  <span class="number">1</span>    <span class="number">28.40884</span> -<span class="number">2.780106</span></span><br><span class="line"></span><br><span class="line">  $`8`</span><br><span class="line">    (Intercept)        wt</span><br><span class="line">  <span class="number">1</span>    <span class="number">23.86803</span> -<span class="number">2.192438</span></span><br></pre></td></tr></table></figure><hr><h3 id="map-dfr-对输出进行row-binding得到dataframe"><a href="#map-dfr-对输出进行row-binding得到dataframe" class="headerlink" title="map_dfr-对输出进行row-binding得到dataframe"></a>map_dfr-对输出进行row-binding得到dataframe</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mtcars %&gt;%</span><br><span class="line">  split(.$cyl) %&gt;%</span><br><span class="line">  map(~ lm(mpg ~ wt, data = .x)) %&gt;% </span><br><span class="line">  map_dfr(~ as.data.frame(t(as.matrix(coef(.)))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">    (Intercept)        wt</span><br><span class="line">  <span class="number">1</span>    <span class="number">39.57120</span> -<span class="number">5.647025</span></span><br><span class="line">  <span class="number">2</span>    <span class="number">28.40884</span> -<span class="number">2.780106</span></span><br><span class="line">  <span class="number">3</span>    <span class="number">23.86803</span> -<span class="number">2.192438</span></span><br></pre></td></tr></table></figure><hr><h3 id="map-dfc-对输出进行col-binding得到dataframe"><a href="#map-dfc-对输出进行col-binding得到dataframe" class="headerlink" title="map_dfc-对输出进行col-binding得到dataframe"></a>map_dfc-对输出进行col-binding得到dataframe</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mtcars %&gt;%</span><br><span class="line">  split(.$cyl) %&gt;%</span><br><span class="line">  map(~ lm(mpg ~ wt, data = .x)) %&gt;% </span><br><span class="line">  map_dfc(~ as.data.frame(t(as.matrix(coef(.)))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="comment">## 重复的col name会加后缀区分</span></span><br><span class="line">  (Intercept)        wt (Intercept)<span class="number">1</span>       wt1 (Intercept)<span class="number">2</span>       wt2</span><br><span class="line">  <span class="number">1</span>     <span class="number">39.5712</span> -<span class="number">5.647025</span>     <span class="number">28.40884</span> -<span class="number">2.780106</span>     <span class="number">23.86803</span> -<span class="number">2.192438</span></span><br></pre></td></tr></table></figure><hr><h2 id="map函数的变体"><a href="#map函数的变体" class="headerlink" title="map函数的变体"></a>map函数的变体</h2><h3 id="变体简介"><a href="#变体简介" class="headerlink" title="变体简介"></a>变体简介</h3><table><thead><tr><th></th><th>List</th><th>Atomic</th><th>Same type</th><th>Nothing</th></tr></thead><tbody><tr><td>One argument</td><td><code>map()</code></td><td><code>map_lgl()</code>, …</td><td><code>modify()</code></td><td><code>walk()</code></td></tr><tr><td>Two arguments</td><td><code>map2()</code></td><td><code>map2_lgl()</code>, …</td><td><code>modify2()</code></td><td><code>walk2()</code></td></tr><tr><td>One argument + index</td><td><code>imap()</code></td><td><code>imap_lgl()</code>, …</td><td><code>imodify()</code></td><td><code>iwalk()</code></td></tr><tr><td>N arguments</td><td><code>pmap()</code></td><td><code>pmap_lgl()</code>, …</td><td>—</td><td><code>pwalk()</code></td></tr></tbody></table><hr><h3 id="modify-和输入数据格式相同"><a href="#modify-和输入数据格式相同" class="headerlink" title="modify-和输入数据格式相同"></a>modify-和输入数据格式相同</h3><p>如果想在使用map函数功能的同时不改变数据的格式(输出和输入数据格式相同)可以使用函数<code>modify()</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(</span><br><span class="line">  x = <span class="number">1</span>:<span class="number">3</span>,</span><br><span class="line">  y = <span class="number">6</span>:<span class="number">4</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 使用map函数会输出列表形式</span></span><br><span class="line">map(df, ~ .x * <span class="number">2</span>)</span><br><span class="line">  $x</span><br><span class="line">  [<span class="number">1</span>] <span class="number">2</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line">  $y</span><br><span class="line">  [<span class="number">1</span>] <span class="number">12</span> <span class="number">10</span>  <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用modify函数</span></span><br><span class="line"><span class="comment"># 输出和输入的数据格式相同</span></span><br><span class="line">modify(df, ~ .x * <span class="number">2</span>)</span><br><span class="line">    x  y</span><br><span class="line">  <span class="number">1</span> <span class="number">2</span> <span class="number">12</span></span><br><span class="line">  <span class="number">2</span> <span class="number">4</span> <span class="number">10</span></span><br><span class="line">  <span class="number">3</span> <span class="number">6</span>  <span class="number">8</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="map2-多参函数"><a href="#map2-多参函数" class="headerlink" title="map2-多参函数"></a>map2-多参函数</h3><p>前面<code>map</code>家族函数中使用的<code>.f</code>函数都是针对单个参数的向量化(每次向<code>.f</code>函数中传递单个参数)，<strong>如果需要每次向<code>.f</code>函数中传递多个参数则需要使用<code>map2</code>函数家族</strong>，下面演示计算<strong>加权平均数</strong>的方法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数值</span></span><br><span class="line">xs &lt;- map(<span class="number">1</span>:<span class="number">8</span>, ~ runif(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 修改其中一个数值为NA</span></span><br><span class="line">xs[[<span class="number">1</span>]][[<span class="number">1</span>]] &lt;- <span class="literal">NA</span></span><br><span class="line"><span class="comment"># 权重信息</span></span><br><span class="line">ws &lt;- map(<span class="number">1</span>:<span class="number">8</span>, ~ rpois(<span class="number">10</span>, <span class="number">5</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算简单的均值</span></span><br><span class="line">map_dbl(xs, mean)</span><br><span class="line">  <span class="comment"># 因为存在NA，所以有一行数据的结果为NA</span></span><br><span class="line">  [<span class="number">1</span>]        <span class="literal">NA</span> <span class="number">0.4835817</span> <span class="number">0.5543698</span> <span class="number">0.3183199</span> <span class="number">0.5054429</span> <span class="number">0.4311387</span> <span class="number">0.4268043</span> <span class="number">0.2760347</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给mean传递参数来去除na</span></span><br><span class="line"><span class="comment"># 注意这里的参数不是向量化的参数，是固定的参数，所以可以放在最后添加，这点和apply函数相同</span></span><br><span class="line">map_dbl(xs, mean,na.rm=<span class="literal">T</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0.5894843</span> <span class="number">0.4835817</span> <span class="number">0.5543698</span> <span class="number">0.3183199</span> <span class="number">0.5054429</span> <span class="number">0.4311387</span> <span class="number">0.4268043</span> <span class="number">0.2760347</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算加权平均数</span></span><br><span class="line"><span class="comment"># 将数值和权重这些需要向量化的参数放在函数之前，固定的参数放在函数之后</span></span><br><span class="line">map2_dbl(xs, ws, weighted.mean,na.rm=<span class="literal">T</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0.5369628</span> <span class="number">0.4876169</span> <span class="number">0.5852098</span> <span class="number">0.3186872</span> <span class="number">0.5118735</span> <span class="number">0.3620245</span> <span class="number">0.4655258</span> <span class="number">0.2537778</span></span><br></pre></td></tr></table></figure><p></p><p>三个及以上参数的向量化可以使用<code>pmap</code>函数家族，多个参数使用<code>list()</code>进行包裹传递给<code>pmap</code>函数家族的函数即可：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2个参数的向量化也可以使用这个函数</span></span><br><span class="line">pmap_dbl(list(xs, ws), weighted.mean,na.rm=<span class="literal">T</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0.5369628</span> <span class="number">0.4876169</span> <span class="number">0.5852098</span> <span class="number">0.3186872</span> <span class="number">0.5118735</span> <span class="number">0.3620245</span> <span class="number">0.4655258</span> <span class="number">0.2537778</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">官方文档——Apply a function to each element of a vector</a></li><li><a href="https://adv-r.hadley.nz/functionals.html" target="_blank" rel="noopener">Advanced R中的教程-Hadley Wickham自己写的</a></li><li><a href="https://r4ds.had.co.nz/iteration.html#the-map-functions" target="_blank" rel="noopener">R for Data Science——The map functions</a></li><li><a href="https://jennybc.github.io/purrr-tutorial/ls01_map-name-position-shortcuts.html" target="_blank" rel="noopener">Introduction to map(): extract elements</a></li><li><a href="https://zhuanlan.zhihu.com/p/26888325" target="_blank" rel="noopener">R语言函数式编程purrr的应用</a></li><li><a href="https://www.jianshu.com/p/ab78f1eab43c" target="_blank" rel="noopener">R中map循环函数学习</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要学习了&lt;code&gt;map&lt;/code&gt;函数家族的各种函数用法。&lt;code&gt;map&lt;/code&gt;家族的函数主要是用来&lt;strong&gt;将函数作用于传入数据(可以是向量，也可以是数据框)的每个元素&lt;/strong&gt;的，这和主要&lt;strong&gt;针对数据框和列表的&lt;code&gt;apply&lt;/code&gt;函数家族形成互补&lt;/strong&gt;，主要实现的功能相近。同时也学习了&lt;code&gt;map&lt;/code&gt;函数家族的变体，增强了其适用性。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之pandas常用技巧</title>
    <link href="http://showteeth.tech/posts/28398.html"/>
    <id>http://showteeth.tech/posts/28398.html</id>
    <published>2020-03-17T10:57:17.000Z</published>
    <updated>2020-04-03T07:26:49.600Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章总结了在使用Pandas包进行数据分析中的一些常用方法和技巧。</p></div><a id="more"></a><h2 id="对列顺序进行调整"><a href="#对列顺序进行调整" class="headerlink" title="对列顺序进行调整"></a>对列顺序进行调整</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将顺序调整为："id","Cluster","tSNE_1","tSNE_2"</span></span><br><span class="line">data=data[[<span class="string">"id"</span>,<span class="string">"Cluster"</span>,<span class="string">"tSNE_1"</span>,<span class="string">"tSNE_2"</span>]]</span><br></pre></td></tr></table></figure><hr><h2 id="删除index的name"><a href="#删除index的name" class="headerlink" title="删除index的name"></a>删除index的name</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: df</span><br><span class="line"><span class="comment"># 这里的foo就是index的name，看着不是很好看，并且会多出一行</span></span><br><span class="line">Out[<span class="number">10</span>]: </span><br><span class="line">         Column <span class="number">1</span></span><br><span class="line">foo              </span><br><span class="line">Apples          <span class="number">1</span></span><br><span class="line">Oranges         <span class="number">2</span></span><br><span class="line">Puppies         <span class="number">3</span></span><br><span class="line">Ducks           <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉这个index name</span></span><br><span class="line">df.index.name = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/29765548/remove-index-name-in-pandas" target="_blank" rel="noopener">Remove index name in pandas</a></p><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章总结了在使用Pandas包进行数据分析中的一些常用方法和技巧。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>统计学系列之多重检验的P值矫正</title>
    <link href="http://showteeth.tech/posts/6446.html"/>
    <id>http://showteeth.tech/posts/6446.html</id>
    <published>2020-03-13T13:25:40.000Z</published>
    <updated>2020-03-13T13:29:22.300Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这里写摘要，显示更好看</p></div><a id="more"></a><h2 id="开始于二级标题"><a href="#开始于二级标题" class="headerlink" title="开始于二级标题"></a>开始于二级标题</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.bioinfo-scrounger.com/archives/92/" target="_blank" rel="noopener">浅谈多重检验校正FDR</a></li><li><a href="https://zhuanlan.zhihu.com/p/26229438" target="_blank" rel="noopener">P值校正方法小汇总</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI3MTM3OTExNQ==&amp;mid=2247483940&amp;idx=1&amp;sn=be08093540e43b2cbc386fc5a6e2d934&amp;chksm=eac3fde0ddb474f65cdf50e0c14ec408eb796b7d3422f2c215b7fe5b32aa6790e2c281eeb835&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">人气推文p值、E值、FDR、q值…你晕菜了吗？续集来啦！</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这里写摘要，显示更好看&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="统计学" scheme="http://showteeth.tech/categories/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
      <category term="假设检验" scheme="http://showteeth.tech/categories/%E7%BB%9F%E8%AE%A1%E5%AD%A6/%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C/"/>
    
    
      <category term="P值矫正" scheme="http://showteeth.tech/tags/P%E5%80%BC%E7%9F%AB%E6%AD%A3/"/>
    
  </entry>
  
  <entry>
    <title>R系列之Rstudio快捷键</title>
    <link href="http://showteeth.tech/posts/63214.html"/>
    <id>http://showteeth.tech/posts/63214.html</id>
    <published>2020-02-26T11:33:37.000Z</published>
    <updated>2020-02-26T11:52:27.668Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录一下<code>Rstudio</code>使用过程中的一些快捷键，用于提高学习和工作效率。</p></div><a id="more"></a><h2 id="代码注释与层级结构"><a href="#代码注释与层级结构" class="headerlink" title="代码注释与层级结构"></a>代码注释与层级结构</h2><h3 id="声明代码块"><a href="#声明代码块" class="headerlink" title="声明代码块"></a>声明代码块</h3><p>使用快捷键<code>Ctrl</code>+<code>Shift</code>+<code>r</code>可以声明代码块，声明代码块的作用是可以对代码块的代码进行折叠，同时后面可以借助show document outline查看代码结构。</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/Rstudio_shoutcut_1.png" alt="Rstudio_shoutcut_1.png"></p><ul><li>可以<strong>不使用快捷键进行声明</strong>，可以直接使用<code>#+空格+空格+4个以上的#或-</code>形式创建</li></ul><h3 id="查看注释结构"><a href="#查看注释结构" class="headerlink" title="查看注释结构"></a>查看注释结构</h3><p>声明了代码块之后，后续可以通过快捷键<code>Control</code>+ <code>Shift</code> + <code>o</code>进行快速查看和定位代码结构：<br><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/Rstudio_shoutcut_2.png" alt="Rstudio_shoutcut_2.png"></p><h3 id="层级结构的代码"><a href="#层级结构的代码" class="headerlink" title="层级结构的代码"></a>层级结构的代码</h3><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/Rstudio_shoutcut_3.png" alt="Rstudio_shoutcut_3.png"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录一下&lt;code&gt;Rstudio&lt;/code&gt;使用过程中的一些快捷键，用于提高学习和工作效率。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Windows神器总结</title>
    <link href="http://showteeth.tech/posts/31625.html"/>
    <id>http://showteeth.tech/posts/31625.html</id>
    <published>2020-02-21T08:54:33.000Z</published>
    <updated>2020-02-22T06:16:02.542Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了在Windows使用过程中发现的一些可以提高效率的神器。</p></div><a id="more"></a><h2 id="office插件-officeTab"><a href="#office插件-officeTab" class="headerlink" title="office插件-officeTab"></a>office插件-officeTab</h2><p>在使用word、excel以及ppt的时候经常需要<strong>同时打开等多个文件</strong>，并且<strong>在不同文件之间切换</strong>，然后默认的word、excel以及ppt都不能像浏览器的不同网页一样将不同的文件通过不同的标签显示，这样在<strong>不同文件之间切换就会浪费大量的人力和物力</strong>，所以就有人开发了<a href="https://www.extendoffice.com/product/office-tab.html" target="_blank" rel="noopener">office插件-officeTab</a>，其<strong>支持将不同的文件以标签页的形式展示，方便切换和使用</strong>。</p><p>介绍完功能就下来就是具体使用了，使用起来其实非常方便，只是如果<strong>不花钱购买则只能打开三个标签页</strong>，本人在网上找到一个破解版的资源，具体<a href="http://www.dayanzai.me/office-tab.html" target="_blank" rel="noopener">下载链接</a>。</p><hr><h2 id="资源管理器工具-QTTabBar"><a href="#资源管理器工具-QTTabBar" class="headerlink" title="资源管理器工具-QTTabBar"></a>资源管理器工具-QTTabBar</h2><p>有了前面那个office插件-officeTab的用法和思想，很容易想到<strong>文件资源管理器是不是也可以以标签页的形式打开呢</strong>，答案是肯定的，有人开发了工具<strong>QTTabBar</strong>就是专门做这个事的，具体用法<a href="https://sspai.com/post/52521" target="_blank" rel="noopener">QTTabBar 「资源管理器」该有的样子</a>介绍地很详细，这里就不赘述了。</p><p>关于语言设置，我一直不能按照<a href="https://sspai.com/post/52521" target="_blank" rel="noopener">QTTabBar 「资源管理器」该有的样子</a>刷新出语言列表，所以就在<a href="https://github.com/yfdyh000/QTTabBar_zh-CN" target="_blank" rel="noopener">github上找到了一个repo</a>，实测可用。</p><p>大爱的功能：<strong>双击空白处返回上级目录</strong>。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了在Windows使用过程中发现的一些可以提高效率的神器。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="折腾" scheme="http://showteeth.tech/categories/%E6%8A%98%E8%85%BE/"/>
    
      <category term="工具" scheme="http://showteeth.tech/categories/%E6%8A%98%E8%85%BE/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="神器" scheme="http://showteeth.tech/tags/%E7%A5%9E%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>AWK系列之对行或者列进行累计求和</title>
    <link href="http://showteeth.tech/posts/19529.html"/>
    <id>http://showteeth.tech/posts/19529.html</id>
    <published>2020-02-20T12:16:19.000Z</published>
    <updated>2020-02-22T06:16:02.506Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了<strong>使用awk对行或者列进行累计求和</strong>的方法，包括<strong>对全部的行或者列</strong>，也包括<strong>对指定的行或者列</strong>。</p></div><a id="more"></a><h2 id="示例文件"><a href="#示例文件" class="headerlink" title="示例文件"></a>示例文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat cumsum.txt</span><br><span class="line">  1 2 3 4</span><br><span class="line">  2 5 6 7</span><br><span class="line">  2 3 6 5</span><br><span class="line">  1 2 1 2</span><br></pre></td></tr></table></figure><hr><h2 id="对列进行cumsum"><a href="#对列进行cumsum" class="headerlink" title="对列进行cumsum"></a>对列进行cumsum</h2><h3 id="对所有的列进行cumsum"><a href="#对所有的列进行cumsum" class="headerlink" title="对所有的列进行cumsum"></a>对所有的列进行cumsum</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;for(i=1;i&lt;=NF;i++)&#123;sum[i]+=$i;$i=sum[i]&#125;;print $0&#125;'</span> cumsum.txt</span><br><span class="line">  1 2 3 4</span><br><span class="line">  3 7 9 11</span><br><span class="line">  5 10 15 16</span><br><span class="line">  6 12 16 18</span><br></pre></td></tr></table></figure><hr><h3 id="对指定列进行cumsum"><a href="#对指定列进行cumsum" class="headerlink" title="对指定列进行cumsum"></a>对指定列进行cumsum</h3><p>按照上面的思路，如果想<strong>对指定列进行cumsum，其他列直接输出</strong>，可以增加一个判断语句：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅对第二列进行cumsum</span></span><br><span class="line">awk <span class="string">'&#123; for (i=1; i&lt;=NF; ++i) &#123; if(i==2)&#123;sum[i]+=$i; $i=sum[i]&#125; &#125;; print $0&#125;'</span> cumsum.txt</span><br><span class="line">  1 2 3 4</span><br><span class="line">  2 7 6 7</span><br><span class="line">  2 10 6 5</span><br><span class="line">  1 12 1 2</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="对行进行cumsum"><a href="#对行进行cumsum" class="headerlink" title="对行进行cumsum"></a>对行进行cumsum</h2><h3 id="对所有的行进行cumsum"><a href="#对所有的行进行cumsum" class="headerlink" title="对所有的行进行cumsum"></a>对所有的行进行cumsum</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;for(i=1;i&lt;=NF;i++)&#123;sum+=$i;$i=sum&#125;;print $0;sum=0&#125;'</span> cumsum.txt</span><br><span class="line">  1 3 6 10</span><br><span class="line">  2 7 13 20</span><br><span class="line">  2 5 11 16</span><br><span class="line">  1 3 4 6</span><br></pre></td></tr></table></figure><hr><h3 id="对指定行进行cumsum"><a href="#对指定行进行cumsum" class="headerlink" title="对指定行进行cumsum"></a>对指定行进行cumsum</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只对第二行进行cumsum</span></span><br><span class="line">awk <span class="string">'&#123;for(i=1;i&lt;=NF;i++)&#123;if(NR==2)&#123;sum+=$i;$i=sum&#125;&#125;;print $0;sum=0&#125;'</span> cumsum.txt</span><br><span class="line">  1 2 3 4</span><br><span class="line">  2 7 13 20</span><br><span class="line">  2 3 6 5</span><br><span class="line">  1 2 1 2</span><br></pre></td></tr></table></figure><hr><h3 id="截止到指定列"><a href="#截止到指定列" class="headerlink" title="截止到指定列"></a>截止到指定列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对每一行，累加到第三列</span></span><br><span class="line">awk <span class="string">'&#123;for(i=1;i&lt;=NF;i++)&#123;if(i&lt;=3)&#123;sum+=$i;$i=sum&#125;&#125;;print $0;sum=0&#125;'</span> cumsum.txt</span><br><span class="line">  1 3 6 4</span><br><span class="line">  2 7 13 7</span><br><span class="line">  2 5 11 5</span><br><span class="line">  1 3 4 2</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/48447694/awk-cumulative-sum-in-on-dimension" target="_blank" rel="noopener">awk cumulative sum in on dimension</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了&lt;strong&gt;使用awk对行或者列进行累计求和&lt;/strong&gt;的方法，包括&lt;strong&gt;对全部的行或者列&lt;/strong&gt;，也包括&lt;strong&gt;对指定的行或者列&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="AWK" scheme="http://showteeth.tech/categories/Linux/AWK/"/>
    
    
      <category term="AWK" scheme="http://showteeth.tech/tags/AWK/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之h5py-处理HDF5文件</title>
    <link href="http://showteeth.tech/posts/59458.html"/>
    <id>http://showteeth.tech/posts/59458.html</id>
    <published>2020-02-19T08:53:24.000Z</published>
    <updated>2020-02-22T06:16:02.556Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章<strong>学习了HDF5文件格式</strong>以及<strong>学习使用Python中的h5py模块来对HDF5文件进行创建/删除分组、数据集以及对属性的设置</strong>等。</p></div><a id="more"></a><h2 id="HDF5文件"><a href="#HDF5文件" class="headerlink" title="HDF5文件"></a>HDF5文件</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>HDF(Hierarchical Data Format)</code>指一种为<strong>存储和处理大容量科学数据设计的文件格式及相应库文件</strong>。<code>HDF</code> 最早由美国国家超级计算应用中心 <code>NCSA</code> 开发，目前在非盈利组织 <code>HDF</code> 小组维护下继续发展。当前流行的版本是 <code>HDF5</code>。<code>HDF5</code> 拥有一系列的优异特性，使其<strong>特别适合进行大量科学数据的存储和操作</strong>，如可存储各种类型的数据、灵活、通用、跨平台、可扩展、高效的 <code>I/O</code> 性能、支持几乎无限量(高达 <code>EB</code>)的单文件存储等，详见其<a href="https://support.hdfgroup.org/HDF5/" target="_blank" rel="noopener">官方</a>介绍，同时<a href="http://www.nsmc.org.cn/NSMC_EN/CMACast/docs/HDF5.0_chinese.pdf" target="_blank" rel="noopener">NSMC也有对其进行介绍(中文版的)</a>。</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/hdf5_overview_1.png" alt="hdf5_overview_1.png"></p><hr><h3 id="HDF5文件组织"><a href="#HDF5文件组织" class="headerlink" title="HDF5文件组织"></a>HDF5文件组织</h3><p>一个HDF5文件就是一个<strong>由两种基本的数据对象存放多种科学数据的容器</strong>，这两种数据对象为：</p><ul><li><code>group</code>：类似<strong>文件系统中目录的作用</strong>，其可以<strong>包含一个或多个 dataset 及其它的 group</strong>，group描述了数据集dataset的分类信息，通过group可以有效地将多种 dataset 进行管理和区分</li><li><code>dataset</code>：<strong>类似文件系统中的文件</strong>，是数据元素的一个<strong>多维数组</strong>，具体的数据信息</li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/hdf5_overview_2.png" alt="hdf5_overview_2.png"></p><p>接着类比文件系统，除了具体的文件和目录之外，文件系统还可以包括一些<strong>属性特征</strong>，如目录是合适创建的、权限如何，文件是合适创建的、权限如何，HDF5文件中对于<code>group</code>和<code>dataset</code>也有这种属性描述，使用的是<code>metadata</code>。</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/hdf5_overview_3.png" alt="hdf5_overview_3.png"></p><p>然后，文件系统中获取文件时需要知道文件的相对或者绝对位置，HDF5文件也是如此，HDF5文件会<strong>从一个名为<code>/(根目录)</code>的<code>group</code>开始</strong>，所有 <code>dataset</code> 和其它 <code>group</code> 都包含在此 <code>group</code> 下，当操作 HDF5 文件时，如果没有显式指定 <code>group</code> 的 <code>dataset</code> 都是默认指 <code>/(根目录)</code> 下的 <code>dataset</code>，另外类似相对文件路径的 <code>group</code> 名字都是相对于 <code>/(根目录)</code> 的。</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/hdf5_overview_4.png" alt="hdf5_overview_4.png"></p><hr><h2 id="使用h5py操作HDF5文件"><a href="#使用h5py操作HDF5文件" class="headerlink" title="使用h5py操作HDF5文件"></a>使用h5py操作HDF5文件</h2><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><p>常规的包的安装方法：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用pip安装</span></span><br><span class="line">pip install h5py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用conda安装</span></span><br><span class="line">conda install h5py</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="打开-创建文件"><a href="#打开-创建文件" class="headerlink" title="打开/创建文件"></a>打开/创建文件</h3><p>HDF5文件和Python标准文件的使用方法类似，都<strong>支持标准的mode</strong>，比如<code>r/w/a</code>，在<strong>不使用的时候也应该进行关闭</strong>，区别是<strong>HDF5文件没有文本和二进制文件的区别</strong>。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">h5py</span>.<span class="title">File</span><span class="params">(name, mode=None, driver=None, libver=None, userblock_size=None, swmr=False, rdcc_nslots=None, rdcc_nbytes=None, rdcc_w0=None, track_order=None, **kwds)</span></span></span><br></pre></td></tr></table></figure><p></p><p>这里列出HDF5文件支持的mode：<br><table><colgroup><col width="14%"><col width="86%"></colgroup><tbody valign="top"><tr class="row-odd"><td>r</td><td>Readonly, file must exist (default)</td></tr><tr class="row-even"><td>r+</td><td>Read/write, file must exist</td></tr><tr class="row-odd"><td>w</td><td>Create file, truncate if exists</td></tr><tr class="row-even"><td>w- or x</td><td>Create file, fail if exists</td></tr><tr class="row-odd"><td>a</td><td>Read/write if exists, create otherwise</td></tr></tbody></table></p><hr><h3 id="操作group"><a href="#操作group" class="headerlink" title="操作group"></a>操作group</h3><h4 id="group简介"><a href="#group简介" class="headerlink" title="group简介"></a>group简介</h4><p>之前介绍HDF5文件的时候说过HDF5文件内部其实类似文件管理系统，在Python中对HDF5文件进行操作类似字典的操作：</p><ul><li>key(键值)：对应于group中成员(包括子group以及dataset)的name</li><li>value：对应于<strong>key中包含的(属于key这个group的)</strong>group或者dataset</li><li>额外的，打开或者创建的HDF5文件还会使用<strong>name属性</strong>来<strong>存储当前key的路径</strong></li></ul><hr><h4 id="创建分组的函数"><a href="#创建分组的函数" class="headerlink" title="创建分组的函数"></a>创建分组的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File.create_group(name, track_order=<span class="keyword">None</span>)</span><br><span class="line">Group.create_group(name, track_order=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>name</code>：创建的group的名称，可以是绝对路径也可以是相对路径</li></ul><hr><h4 id="创建HDF5文件"><a href="#创建HDF5文件" class="headerlink" title="创建HDF5文件"></a>创建HDF5文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新文件用于写操作</span></span><br><span class="line">f = h5py.File(<span class="string">'foo.hdf5'</span>,<span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前group的name，也就是路径</span></span><br><span class="line">f.name</span><br><span class="line">  <span class="string">'/'</span></span><br><span class="line"><span class="comment"># 查看此时的key和value</span></span><br><span class="line">f.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br><span class="line">f.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 file <span class="string">"foo.hdf5"</span> (mode r+)&gt;)</span><br></pre></td></tr></table></figure><hr><h4 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在打开的文件中创建分组bar，默认这个是在/目录下的</span></span><br><span class="line">grp = f.create_group(<span class="string">"bar"</span>)</span><br><span class="line"><span class="comment"># 查看此时grp的路径</span></span><br><span class="line">grp.name</span><br><span class="line">  <span class="string">'/bar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看key和value</span></span><br><span class="line"><span class="comment">## 打开的HDF5文件下面出现了创建的分组bar</span></span><br><span class="line">f.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'bar'</span>]&gt;</span><br><span class="line"><span class="comment">## 打开的文件对象</span></span><br><span class="line">f.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 file <span class="string">"foo.hdf5"</span> (mode r+)&gt;)</span><br><span class="line"><span class="comment">## 新创建的分组还没有子group，所以还是空</span></span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br><span class="line"><span class="comment">## 新创建的分组下面还没有子分组或者dataset</span></span><br><span class="line">grp.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 group <span class="string">"/bar"</span> (<span class="number">0</span> members)&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续创建分组</span></span><br><span class="line">subgrp = grp.create_group(<span class="string">"baz"</span>)</span><br><span class="line">f.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'bar'</span>]&gt;</span><br><span class="line">f.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 file <span class="string">"foo.hdf5"</span> (mode r+)&gt;)</span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'baz'</span>]&gt;</span><br><span class="line"><span class="comment"># 因为grp已经有了子分组，所以value中出现了一个member</span></span><br><span class="line">grp.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 group <span class="string">"/bar"</span> (<span class="number">1</span> members)&gt;)</span><br><span class="line">subgrp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br><span class="line">subgrp.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 group <span class="string">"/bar/baz"</span> (<span class="number">0</span> members)&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以路径的形式创建</span></span><br><span class="line">grp2 = f.create_group(<span class="string">"/some/long/path"</span>)</span><br><span class="line">grp2.name</span><br><span class="line">  /some/long/path</span><br><span class="line"><span class="comment"># 此时的根目录下就有两个分组了</span></span><br><span class="line">f.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'bar'</span>, <span class="string">'some'</span>]&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>keys()中包含的只是当前分组的下级子分组，不会包含下级子分组的子分组，也就是说没有递进关系</strong></li><li><strong>values()中包含的是当前group下的value值，会显示绝对路径</strong></li></ul><hr><h4 id="删除分组"><a href="#删除分组" class="headerlink" title="删除分组"></a>删除分组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'baz'</span>]&gt;</span><br><span class="line"><span class="comment"># 不能直接删除不为空的分组</span></span><br><span class="line"><span class="keyword">del</span> grp[<span class="string">"bar"</span>]</span><br><span class="line">  KeyError: <span class="string">"Couldn't delete link (callback link pointer is NULL (specified link may be '.' or not exist))"</span></span><br><span class="line"><span class="comment"># 删除为空的分组</span></span><br><span class="line"><span class="keyword">del</span> grp[<span class="string">"baz"</span>]</span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="操作dataset"><a href="#操作dataset" class="headerlink" title="操作dataset"></a>操作dataset</h3><h4 id="dataset简介"><a href="#dataset简介" class="headerlink" title="dataset简介"></a>dataset简介</h4><p><strong>HDF5文件中的dataset和numpy的array非常类似</strong>，都可以支持<code>slice</code>操作，并且也拥有<code>shape</code>、<code>size</code>和<code>dtype</code>属性；和numpy数组的区别的，dataset可以有多种存储方式： <code>compression</code>、<code>error-detection</code>以及<code>chunked I/O</code>。</p><p>HDF5文件支持大部分的numpy的dtype，具体地支持的列表见<a href="http://docs.h5py.org/en/latest/high/dataset.html" target="_blank" rel="noopener">FAQ</a></p><hr><h4 id="创建dateset的函数"><a href="#创建dateset的函数" class="headerlink" title="创建dateset的函数"></a>创建dateset的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Group.create_dataset(name, shape=<span class="keyword">None</span>, dtype=<span class="keyword">None</span>, data=<span class="keyword">None</span>, **kwds)</span><br></pre></td></tr></table></figure><ul><li><code>name</code>：需要创建的dataset的名称，可以是相对路径或者绝对路径</li><li><code>shape</code>：以元组形式指定的数据的维度信息</li><li><code>dtype</code>：data的数据类型</li><li><code>data</code>：用于初始化dataset，是numpy array</li></ul><hr><h4 id="创建dataset"><a href="#创建dataset" class="headerlink" title="创建dataset"></a>创建dataset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dset = f.create_dataset(<span class="string">"default"</span>, (<span class="number">100</span>,))</span><br><span class="line">dset = f.create_dataset(<span class="string">"ints"</span>, (<span class="number">100</span>,), dtype=<span class="string">'i8'</span>)</span><br><span class="line"><span class="comment"># 查看HDF5文件的keys和values</span></span><br><span class="line"><span class="comment">## keys中显示的是当前group的所有member的名称，所以子分组和dataset的名称都显示了</span></span><br><span class="line">f.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'bar'</span>, <span class="string">'default'</span>, <span class="string">'ints'</span>, <span class="string">'some'</span>]&gt;</span><br><span class="line">f.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 file <span class="string">"foo.hdf5"</span> (mode r+)&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果重复运行会报错，不会产生覆盖的效果</span></span><br><span class="line">dset = f.create_dataset(<span class="string">"default"</span>, (<span class="number">100</span>,))</span><br><span class="line">  OSError: Unable to create link (name already exists)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接将已经存在的numpy数组传入</span></span><br><span class="line">arr = np.arange(<span class="number">100</span>)</span><br><span class="line">dset = f.create_dataset(<span class="string">"init"</span>, data=arr)</span><br><span class="line">dset </span><br><span class="line">  &lt;HDF5 dataset <span class="string">"init"</span>: shape (<span class="number">100</span>,), type <span class="string">"&lt;i8"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对分组创建</span></span><br><span class="line">grp.create_dataset(<span class="string">"init"</span>, data=arr)</span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'baz'</span>, <span class="string">'init'</span>]&gt;</span><br><span class="line"><span class="comment"># 2个member，分别是子分组以及init数据集</span></span><br><span class="line">grp.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 group <span class="string">"/bar"</span> (<span class="number">2</span> members)&gt;)</span><br></pre></td></tr></table></figure><p>也可以和字典一样直接创建：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grp[<span class="string">'data1'</span>] = np.random.rand(<span class="number">100</span>, <span class="number">1000</span>) - <span class="number">0.5</span></span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'init'</span>, <span class="string">'init2'</span>]&gt;</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="dataset的读写"><a href="#dataset的读写" class="headerlink" title="dataset的读写"></a>dataset的读写</h4><p>dataset的读写支持<code>slice</code>操作，主要识别的<code>slice</code>有以下几种：</p><ul><li><strong>索引</strong></li><li><code>slices</code>，如<code>[:]</code></li><li>字段名称(in the case of <strong>compound data</strong>)</li><li>最多一个的<code>Ellipsis(...)</code>对象</li><li>空的元组<code>()</code>用于<strong>得到所有的数据</strong></li><li><a href="http://docs.h5py.org/en/latest/high/dataset.html#dataset-fancy" target="_blank" rel="noopener">其他的Fancy indexing</a></li></ul><p>另外<code>dataset</code>还有<code>name</code>和<code>value</code>属性，其中<code>name</code>返回<code>dataset</code>的路径，而<code>value</code>返回所有值(用法和空元组相同)</p><h5 id="dataset读取"><a href="#dataset读取" class="headerlink" title="dataset读取"></a>dataset读取</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建多维数组</span></span><br><span class="line">arr2=np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 创建dataset</span></span><br><span class="line">dset = f.create_dataset(<span class="string">"MyDataSet"</span>, (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>), <span class="string">'f'</span>,data=arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据集特征</span></span><br><span class="line">dset.shape</span><br><span class="line">  (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">dset.size</span><br><span class="line">  <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据集路径</span></span><br><span class="line">dset.name</span><br><span class="line">  /MyDataSet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用空白元组查看所有内容</span></span><br><span class="line">dset[()]</span><br><span class="line">  array([[[<span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">          [<span class="number">2.</span>, <span class="number">3.</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">4.</span>, <span class="number">5.</span>],</span><br><span class="line">          [<span class="number">6.</span>, <span class="number">7.</span>]]], dtype=float32)</span><br><span class="line"><span class="comment"># 使用属性获取</span></span><br><span class="line">dset.value</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">f[<span class="string">'MyDataSet'</span>].value</span><br><span class="line">  array([[[<span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">          [<span class="number">2.</span>, <span class="number">3.</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">4.</span>, <span class="number">5.</span>],</span><br><span class="line">          [<span class="number">6.</span>, <span class="number">7.</span>]]], dtype=float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用索引位置查看元素</span></span><br><span class="line">dset[<span class="number">0</span>]</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">3.</span>]], dtype=float32)</span><br><span class="line">dset[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">  array([<span class="number">0.</span>, <span class="number">1.</span>], dtype=float32)</span><br><span class="line">dset[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">  <span class="number">0.0</span></span><br><span class="line">dset[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">  <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用slice查看</span></span><br><span class="line">dset[<span class="number">0</span>,<span class="number">1</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">  array([[<span class="number">2.</span>, <span class="number">3.</span>]], dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Ellipsis(...)</span></span><br><span class="line"><span class="comment">##这里等同于dset[0]</span></span><br><span class="line">dset[<span class="number">0</span>,...]</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">3.</span>]], dtype=float32)</span><br><span class="line"></span><br><span class="line">dset[...,<span class="number">1</span>]</span><br><span class="line">  array([[<span class="number">1.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">5.</span>, <span class="number">7.</span>]], dtype=float32)</span><br></pre></td></tr></table></figure><p><strong>字典风格使用</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到一个空的分组</span></span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">dset=grp.create_dataset(<span class="string">"init"</span>, data=arr)</span><br><span class="line">dset2=grp.create_dataset(<span class="string">"init2"</span>, data=arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典风格</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> grp.keys():</span><br><span class="line">    print(grp[key].name)</span><br><span class="line">    print(grp[key].value)</span><br><span class="line">  <span class="comment"># 输出数据路径</span></span><br><span class="line">  /bar/init</span><br><span class="line">  <span class="comment"># 输出具体的数据集</span></span><br><span class="line">  [ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span></span><br><span class="line">  <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">35</span> <span class="number">36</span> <span class="number">37</span> <span class="number">38</span> <span class="number">39</span> <span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span> <span class="number">44</span> <span class="number">45</span> <span class="number">46</span> <span class="number">47</span></span><br><span class="line">  <span class="number">48</span> <span class="number">49</span> <span class="number">50</span> <span class="number">51</span> <span class="number">52</span> <span class="number">53</span> <span class="number">54</span> <span class="number">55</span> <span class="number">56</span> <span class="number">57</span> <span class="number">58</span> <span class="number">59</span> <span class="number">60</span> <span class="number">61</span> <span class="number">62</span> <span class="number">63</span> <span class="number">64</span> <span class="number">65</span> <span class="number">66</span> <span class="number">67</span> <span class="number">68</span> <span class="number">69</span> <span class="number">70</span> <span class="number">71</span></span><br><span class="line">  <span class="number">72</span> <span class="number">73</span> <span class="number">74</span> <span class="number">75</span> <span class="number">76</span> <span class="number">77</span> <span class="number">78</span> <span class="number">79</span> <span class="number">80</span> <span class="number">81</span> <span class="number">82</span> <span class="number">83</span> <span class="number">84</span> <span class="number">85</span> <span class="number">86</span> <span class="number">87</span> <span class="number">88</span> <span class="number">89</span> <span class="number">90</span> <span class="number">91</span> <span class="number">92</span> <span class="number">93</span> <span class="number">94</span> <span class="number">95</span></span><br><span class="line">  <span class="number">96</span> <span class="number">97</span> <span class="number">98</span> <span class="number">99</span>]</span><br><span class="line">  /bar/init2</span><br><span class="line">  [[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line">    [<span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">  [[<span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">    [<span class="number">6</span> <span class="number">7</span>]]]</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 注意分组并没有value属性，所以存在分组的话就不能这么用</span></span><br></pre></td></tr></table></figure><p></p><hr><h5 id="dataset修改"><a href="#dataset修改" class="headerlink" title="dataset修改"></a>dataset修改</h5><p>修改dataset值的时候需要注意和numpy array的区别：<strong>就是不能使用多重索引来修改dataset中的值，在numpy array中却可以。原因是在dataset中，index一次之后就会将得到的array加载到memory中，所以再进行一次index就不会对原始的dataset进行修改了。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新的数据集</span></span><br><span class="line">dset = f.create_dataset(<span class="string">"Test"</span>, (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">dset[()]</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]], dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用多重索引修改值</span></span><br><span class="line">dset[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">3.0</span></span><br><span class="line"><span class="comment"># dataset中的值并没有改变</span></span><br><span class="line">dset[()]</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]], dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是numpy的数组</span></span><br><span class="line">arr3=np.zeros((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">arr3</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]])</span><br><span class="line"><span class="comment"># 多重索引修改值</span></span><br><span class="line">arr3[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">3.0</span></span><br><span class="line">arr3</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]])      </span><br><span class="line"></span><br><span class="line"><span class="comment"># dataset正确的做法</span></span><br><span class="line">dset[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">3.0</span></span><br><span class="line">dset[()]</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]], dtype=float32)</span><br></pre></td></tr></table></figure><p>dataset不能使用多重索引(<code>dset[0][1]</code>)来修改值，但是numpy的array却可以；两者都可以使用单层索引来修改值。</p><hr><h4 id="删除dataset"><a href="#删除dataset" class="headerlink" title="删除dataset"></a>删除dataset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'init'</span>]&gt;</span><br><span class="line"><span class="comment"># 删除dateset</span></span><br><span class="line"><span class="keyword">del</span> grp[<span class="string">'init'</span>]</span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="操作attribute"><a href="#操作attribute" class="headerlink" title="操作attribute"></a>操作attribute</h3><p>attribute是metadata的具体形式，<strong>group和dataset都可以添加attribute</strong>，添加的attribute存储在<code>group/dataset.attrs</code>中，我们可以像操作字典一样操作<code>group/dataset.attrs</code>。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加</span></span><br><span class="line">grp.attrs[<span class="string">'a'</span>]=<span class="string">'xyz'</span></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">grp.attrs[<span class="string">'a'</span>]</span><br><span class="line">  <span class="string">'xyz'</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://wenku.baidu.com/view/60ab43cb102de2bd960588c0.html?from=search" target="_blank" rel="noopener">HDF5 Tutorial</a></li><li><a href="http://docs.h5py.org/en/latest/quick.html" target="_blank" rel="noopener">h5py official doc</a></li><li><a href="https://zhuanlan.zhihu.com/p/34405536" target="_blank" rel="noopener">当Python遇上HDF5–性能优化实战</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章&lt;strong&gt;学习了HDF5文件格式&lt;/strong&gt;以及&lt;strong&gt;学习使用Python中的h5py模块来对HDF5文件进行创建/删除分组、数据集以及对属性的设置&lt;/strong&gt;等。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之collections-内建的集合模块</title>
    <link href="http://showteeth.tech/posts/46959.html"/>
    <id>http://showteeth.tech/posts/46959.html</id>
    <published>2020-02-18T13:23:40.000Z</published>
    <updated>2020-03-11T03:38:27.011Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这里写摘要，显示更好看</p></div><a id="more"></a><h2 id="开始于二级标题"><a href="#开始于二级标题" class="headerlink" title="开始于二级标题"></a>开始于二级标题</h2><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这里写摘要，显示更好看&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之tqdm-显示运行进度条</title>
    <link href="http://showteeth.tech/posts/32350.html"/>
    <id>http://showteeth.tech/posts/32350.html</id>
    <published>2020-02-18T13:18:04.000Z</published>
    <updated>2020-02-22T06:16:02.517Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<code>Python</code>中显示程序运行进度条的模块-<code>tqdm</code>，使用时可以<strong>将任意可迭代对象传入模块用于制作进度条</strong>，并且可以<strong>通过参数来静态或者动态的控制进度条前后的输出信息</strong>；同时其也<strong>针对<code>pandas</code>中常用的<code>apply</code>和<code>map</code>函数配置了专门的可以显示进度条的函数来替换</strong>；其<strong>也可以嵌入其他模块和工具</strong>，如<code>jupyter</code>中，使用非常方便。</p></div><a id="more"></a><h2 id="tqdm简介"><a href="#tqdm简介" class="headerlink" title="tqdm简介"></a>tqdm简介</h2><p>在运行较大程序的时候经常会出现等待程序运行的问题，同时由于时间过程，程序运行如果没有输出可能会出现焦虑的情况，比如想知道程序是不是真的正在运行以及运行到哪一步的，tqdm正是解决这个问题出现的一个模块，其可以显示程序运行的进度信息，盯着进度条比盯着命令行舒服多了。</p><p>当然，如果想自己输出程序的运行进度条，之前的<a href="http://showteeth.tech/posts/38536.html">这篇博客</a>也提到了使用<code>sys.stdout.write</code>配合<code>sys.stdout.flush</code>实现进度条的写法，但是使用比较麻烦，有好用的工具为啥不使用呢！</p><hr><h2 id="对可迭代对象使用"><a href="#对可迭代对象使用" class="headerlink" title="对可迭代对象使用"></a>对可迭代对象使用</h2><p>可以将<strong>任何可迭代对象传入tqdm进行使用</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">text = <span class="string">""</span></span><br><span class="line"><span class="comment"># 列表是可迭代的对象</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> tqdm([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]):</span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br><span class="line">    text = text + char</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为字符串本身就是可迭代对象，所以可以直接使用"abcd"</span></span><br><span class="line"><span class="comment"># 输出结果是相同的</span></span><br><span class="line">text = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> tqdm(<span class="string">"abcd"</span>):</span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br><span class="line">    text = text + char</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100%|██████████| 4/4 [00:01&lt;00:00,  3.98it/s]</span><br></pre></td></tr></table></figure><p></p><p>对于<code>range</code>，<code>tqdm</code>专门有一个函数为<code>trange</code>，相当于是<code>tqdm(range(i))</code>的简写：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">100</span>):</span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure><p></p><p>还可以<strong>手动设置进度条前显示的内容(可以直接在tqdm中进行设置)</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pbar = tqdm([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>])</span><br><span class="line"><span class="comment"># 自定义的信息，可以随着处理的过程而改变</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> pbar:</span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br><span class="line">    <span class="comment"># 输出的进度条前会显示处理的信息</span></span><br><span class="line">    pbar.set_description(<span class="string">"Processing %s"</span> % char)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置固定的信息</span></span><br><span class="line">pbar = tqdm([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>])</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> pbar:</span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br><span class="line">    <span class="comment"># 使用desc参数来设置固定的信息</span></span><br><span class="line">    pbar.set_description(desc=<span class="string">"Processing"</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 不使用set_description，直接在tqdm中设置</span></span><br><span class="line">pbar = tqdm([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>],desc=<span class="string">"Processing"</span>)</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> pbar:</span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随着处理信息改变而改变</span></span><br><span class="line">Processing d: 100%|██████████| 4/4 [00:01&lt;00:00,  3.97it/s]s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 固定的输出文字</span></span><br><span class="line">Processing: 100%|██████████| 4/4 [00:01&lt;00:00,  3.97it/s]</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="嵌套到pandas中进行使用"><a href="#嵌套到pandas中进行使用" class="headerlink" title="嵌套到pandas中进行使用"></a>嵌套到pandas中进行使用</h2><p>主要针对的是<code>pandas</code>中的<code>apply(datframe)</code>和<code>map(series)</code>函数：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建dataframe</span></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">100</span>, (<span class="number">100000</span>, <span class="number">6</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入pandas.progress_apply来代替原始的pandas.apply以及pandas.Series.map_apply来代替pandas.Series.map</span></span><br><span class="line"><span class="comment"># 后面直接使用这两个函数而不是单独的apply和map</span></span><br><span class="line"><span class="comment"># Register `pandas.progress_apply` and `pandas.Series.map_apply` with `tqdm`</span></span><br><span class="line"><span class="comment"># (can use `tqdm.gui.tqdm`, `tqdm.notebook.tqdm`, optional kwargs, etc.)</span></span><br><span class="line">tqdm.pandas(desc=<span class="string">"my bar!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now you can use `progress_apply` instead of `apply`</span></span><br><span class="line"><span class="comment"># and `progress_map` instead of `map`</span></span><br><span class="line">df.progress_apply(<span class="keyword">lambda</span> x: x**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my bar!: 100%|██████████| 6/6 [00:00&lt;00:00, 42.52it/s]</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><h3 id="设置信息输出"><a href="#设置信息输出" class="headerlink" title="设置信息输出"></a>设置信息输出</h3><p>前面提到了可以在<code>tqdm</code>中设置<code>desc</code>参数(静态的信息，不随程序运行改变)或者是使用<code>set_description</code>(可以是动态的信息，也可以是静态的信息)的方式<strong>在进度条前设置信息输出</strong>，这里可以使用<code>set_postfix</code>来设置进度条后的信息(<strong>可以是动态变化的信息，也可以是固定不变的信息</strong>)：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm, trange</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random, randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> trange(<span class="number">10</span>) <span class="keyword">as</span> t:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">        <span class="comment"># 动态变化的信息，显示在进度条的左侧</span></span><br><span class="line">        t.set_description(<span class="string">'GEN %i'</span> % i)</span><br><span class="line">        <span class="comment"># Postfix设置的信息会显示在进度条的右侧</span></span><br><span class="line">        <span class="comment"># formatted automatically based on argument's datatype</span></span><br><span class="line">        t.set_postfix(loss=random(), gen=randint(<span class="number">1</span>,<span class="number">999</span>), str=<span class="string">'h'</span>,</span><br><span class="line">                      lst=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GEN 9: 100%|██████████| 10/10 [00:01&lt;00:00,  9.71it/s, gen=185, loss=0.975, lst=[1, 2], str=h]</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/tqdm/tqdm#usage" target="_blank" rel="noopener">github的manual</a></li><li><a href="https://lorexxar.cn/2016/07/21/python-tqdm/" target="_blank" rel="noopener">源码解析和参数说明-python tqdm模块分析</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;code&gt;Python&lt;/code&gt;中显示程序运行进度条的模块-&lt;code&gt;tqdm&lt;/code&gt;，使用时可以&lt;strong&gt;将任意可迭代对象传入模块用于制作进度条&lt;/strong&gt;，并且可以&lt;strong&gt;通过参数来静态或者动态的控制进度条前后的输出信息&lt;/strong&gt;；同时其也&lt;strong&gt;针对&lt;code&gt;pandas&lt;/code&gt;中常用的&lt;code&gt;apply&lt;/code&gt;和&lt;code&gt;map&lt;/code&gt;函数配置了专门的可以显示进度条的函数来替换&lt;/strong&gt;；其&lt;strong&gt;也可以嵌入其他模块和工具&lt;/strong&gt;，如&lt;code&gt;jupyter&lt;/code&gt;中，使用非常方便。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之面向对象编程</title>
    <link href="http://showteeth.tech/posts/56428.html"/>
    <id>http://showteeth.tech/posts/56428.html</id>
    <published>2020-02-18T13:14:36.000Z</published>
    <updated>2020-03-02T08:37:24.010Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这里写摘要，显示更好看</p></div><a id="more"></a><h2 id="开始于二级标题"><a href="#开始于二级标题" class="headerlink" title="开始于二级标题"></a>开始于二级标题</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这里写摘要，显示更好看&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>R系列之指定加载包的路径</title>
    <link href="http://showteeth.tech/posts/44952.html"/>
    <id>http://showteeth.tech/posts/44952.html</id>
    <published>2020-02-10T07:54:47.000Z</published>
    <updated>2020-02-18T09:56:02.298Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了在安装了<code>Rstudio server</code>之后个人用户如何<strong>使用conda将包安装在虚拟环境的目录</strong>，并<strong>将这个目录添加到R的包加载路径</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在集群上安装了<code>Rstudio server</code>，公共包使用root安装，自己需要的包会安装在自己目录下。这样的话有些非常难安装的包如果使用各种安装方法都不能正确安装的话可以尝试创建和root下的R版本相同的R虚拟环境，然后在里面使用conda安装R包，安装完成后将其转移到实际使用的R包加载路径。每次转移包虽然是可行的，但是更为方便的做法是将虚拟环境的R包安装路径添加到实际使用的R的包加载路径中，这样就会方便很多，不用担心依赖包的转移问题。</p><h2 id="暂时的方法"><a href="#暂时的方法" class="headerlink" title="暂时的方法"></a>暂时的方法</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认的R包加载路径</span></span><br><span class="line">.libPaths()</span><br><span class="line">  <span class="comment"># 自己安装的R包的加载路径</span></span><br><span class="line">  [<span class="number">1</span>] <span class="string">"/home/user/R/x86_64-conda_cos6-linux-gnu-library/3.5"</span></span><br><span class="line">  <span class="comment"># 公共包的加载路径</span></span><br><span class="line">  [<span class="number">2</span>] <span class="string">"/home/softwares/anaconda3/envs/r351/lib/R/library"</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加R包的加载路径</span></span><br><span class="line">.libPaths(c(.libPaths(),<span class="string">'/home/user/anaconda3/envs/r-reticulate/lib/R/library'</span>))</span><br><span class="line">.libPaths()</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"/home/user/R/x86_64-conda_cos6-linux-gnu-library/3.5"</span></span><br><span class="line">  [<span class="number">2</span>] <span class="string">"/home/softwares/anaconda3/envs/r351/lib/R/library"</span>         </span><br><span class="line">  [<span class="number">3</span>] <span class="string">"/home/user/anaconda3/envs/r-reticulate/lib/R/library"</span></span><br></pre></td></tr></table></figure><hr><h2 id="永久的办法"><a href="#永久的办法" class="headerlink" title="永久的办法"></a>永久的办法</h2><h3 id="查看当前设置"><a href="#查看当前设置" class="headerlink" title="查看当前设置"></a>查看当前设置</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Sys.getenv()</span><br><span class="line">  CLICOLOR_FORCE               <span class="number">1</span></span><br><span class="line">  DISPLAY                      :<span class="number">0</span></span><br><span class="line">  EDITOR                       vi</span><br><span class="line">  GIT_ASKPASS                  rpostback-askpass</span><br><span class="line">  HOME                         /home/songyabing</span><br><span class="line">  LANG                         en_US.UTF-<span class="number">8</span></span><br><span class="line">  LD_LIBRARY_PATH              /home/softwares/anaconda3/envs/r351/lib/R/lib:</span><br><span class="line">  <span class="keyword">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中和安装包路径相关的设置R_LIBS_SITE、R_LIBS_USER  </span></span><br><span class="line">Sys.getenv()[ grep(<span class="string">"LIB|PATH"</span>, names(Sys.getenv())) ]</span><br><span class="line">  LD_LIBRARY_PATH              /home/softwares/anaconda3/envs/r351/lib/R/lib:</span><br><span class="line">  PATH                         /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin</span><br><span class="line">  <span class="comment"># 这个</span></span><br><span class="line">  R_LIBS_SITE                  </span><br><span class="line">  <span class="comment"># 还有这个</span></span><br><span class="line">  R_LIBS_USER                  ~/R/x86_64-conda_cos6-linux-gnu-<span class="keyword">library</span>/<span class="number">3.5</span></span><br><span class="line">  RMARKDOWN_MATHJAX_PATH       /usr/lib/rstudio-server/resources/mathjax-<span class="number">26</span></span><br><span class="line">  RS_RPOSTBACK_PATH            /usr/lib/rstudio-server/bin/rpostback</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line">Sys.setenv(JAVA_HOME=<span class="string">"/root/usr/Java/jre1.8.0_91"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="设置-Renviron"><a href="#设置-Renviron" class="headerlink" title="设置.Renviron"></a>设置.Renviron</h3><p>在家目录(<code>~</code>)下的<code>.Renviron</code>文件(如果没有就新建一个)中添加如下内容：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个路径之间使用:分割</span></span><br><span class="line">R_LIBS_USER=/home/user/R/x86_64-conda_cos6-linux-gnu-<span class="keyword">library</span>/<span class="number">3.5</span>:/home/user/anaconda3/envs/r-reticulate/lib/R/<span class="keyword">library</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://inneka.com/programming/r/change-r-default-library-path-using-libpaths-in-rprofile-site-fails-to-work/" target="_blank" rel="noopener">Change R default library path using .libPaths in Rprofile.site fails to work</a></li><li><a href="https://stackoverflow.com/questions/15170399/change-r-default-library-path-using-libpaths-in-rprofile-site-fails-to-work" target="_blank" rel="noopener">Change R default library path using .libPaths in Rprofile.site fails to work</a></li><li><a href="https://blog.revolutionanalytics.com/2015/11/r-projects.html" target="_blank" rel="noopener">Best practices for handling packages in R projects</a></li><li><a href="https://superuser.com/questions/749283/change-rstudio-library-path-at-home-directory" target="_blank" rel="noopener">Change RStudio library path at home directory</a></li><li><a href="https://stackoverflow.com/questions/31707941/how-do-i-change-the-default-library-path-for-r-packages/42643674" target="_blank" rel="noopener">How do I change the default library path for R packages</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了在安装了&lt;code&gt;Rstudio server&lt;/code&gt;之后个人用户如何&lt;strong&gt;使用conda将包安装在虚拟环境的目录&lt;/strong&gt;，并&lt;strong&gt;将这个目录添加到R的包加载路径&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R系列之apply函数家族</title>
    <link href="http://showteeth.tech/posts/15576.html"/>
    <id>http://showteeth.tech/posts/15576.html</id>
    <published>2020-01-31T05:17:35.000Z</published>
    <updated>2020-01-31T14:55:26.323Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<code>R</code>中常用的<code>apply</code>函数家族，主要包括<code>apply</code>(对矩阵、数据框和数组进行行列的操作)、<code>lapply</code>(作用于列表和数据框，对列表中的每个元素进行循环操作；如果是数据框，则是按列进行操作；最终都返回列表)、<code>sapply</code>(<code>lapply</code>的简化版，返回值是向量)、<code>vapply</code>(类似于<code>sapply</code>，提供了可以控制返回值行名的参数)、<code>mapply</code>(相当于多变量的<code>sapply</code>)、<code>tapply</code>(分组的循环运算，相当于group by)、<code>rapply</code>(<code>lapply</code>的递归版本，只会递归到二级列表)等。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>学习<code>R</code>中<code>apply</code>函数的用法主要出于两方面的考虑：一、使用<code>apply</code>函数可以<strong>降低代码量</strong>，二、可以<strong>提高代码的运行效率</strong>，大部分的循环都可以使用<code>apply</code>函数进行替换，而R中的循环操作是基于<code>R</code>语言本身来实现的，而使用<code>apply</code>函数进行的向量操作则是基于<code>C</code>语言的，<code>C</code>语言的计算效率比R语言本身的计算效率要高很多。</p><p>原本打算将<code>apply</code>函数的用法放在<a href="http://showteeth.tech/posts/64361.html">R系列之常用函数集合</a>，但是因为这个函数家族包括的函数众多，包括<code>apply</code>、<code>sapply</code>、<code>tapply</code>、<code>mapply</code>、<code>lapply</code>、<code>apply</code>、<code>vapply</code>、<code>eapply</code>等，所以就在这里单独开一篇文章将进行学习。</p><p>这篇文章主要是基于<a href="http://blog.fens.me/r-apply/" target="_blank" rel="noopener">掌握R语言中的apply函数族</a>的学习和理解。</p><hr><h2 id="apply家族函数简介"><a href="#apply家族函数简介" class="headerlink" title="apply家族函数简介"></a>apply家族函数简介</h2><p><code>apply</code>函数族是<code>R</code>语言中数据处理的一组核心函数，通过使用<code>apply</code>函数，我们可以实现对数据的<strong>循环</strong>、<strong>分组</strong>、<strong>过滤</strong>、<strong>类型控制</strong>等操作。但是，由于在R语言中<code>apply</code>函数与其他语言循环体的处理思路是完全不一样的，所以<code>apply</code>函数族一直是很多R使用者玩不转的一类核心函数。</p><p><code>apply</code>函数<strong>本身就是解决数据循环处理的问题</strong>，为了<strong>面向不同的数据类型</strong>，<strong>不同的返回值</strong>，<code>apply</code>函数组成了一个函数族，包括了<code>8</code>个功能类似的函数。这其中有些函数很相似，有些也不是太一样的。</p><p>下面列出了这8个apply函数家族的函数：<br><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/R_apply_function_family_1.png" alt="R_apply_function_family_1.png"></p><hr><h2 id="apply函数"><a href="#apply函数" class="headerlink" title="apply函数"></a>apply函数</h2><h3 id="apply函数作用"><a href="#apply函数作用" class="headerlink" title="apply函数作用"></a>apply函数作用</h3><p><code>apply</code>函数是<strong>最常用的代替<code>for</code>循环的函数</strong>。<code>apply</code>函数可以对<strong>矩阵</strong>、<strong>数据框</strong>、<strong>数组(二维、多维)</strong>，按<strong>行</strong>或<strong>列</strong>进行循环计算，<strong>对子元素进行迭代</strong>，并<strong>把子元素以参数传递的形式给自定义的FUN函数中</strong>，并以<strong>返回计算结果</strong>。</p><h3 id="apply函数用法及参数"><a href="#apply函数用法及参数" class="headerlink" title="apply函数用法及参数"></a>apply函数用法及参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">Returns a vector or array or list of values obtained by applying a <span class="keyword">function</span> to margins of an array or matrix.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">apply(X, MARGIN, FUN, ...)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>X</code>：<strong>数组</strong>、<strong>矩阵</strong>，如果是<strong>数据框</strong>的话会自动对其进行转换为矩阵</li><li><code>MARGIN</code>：按行计算或按按列计算，<strong>1表示按行</strong>，<strong>2表示按列</strong></li><li><code>FUN</code>：调用的函数名称</li><li><code>…</code>：适用于为函数<code>FUN</code>的提供额外参数。具体的说就是<strong>如果一个函数有多个参数</strong>，那么<code>...</code>就是负责传入<strong>除了第一个参数以外的其他参数</strong></li></ul><hr><h3 id="apply函数的具体使用"><a href="#apply函数的具体使用" class="headerlink" title="apply函数的具体使用"></a>apply函数的具体使用</h3><h4 id="使用内建的函数"><a href="#使用内建的函数" class="headerlink" title="使用内建的函数"></a>使用内建的函数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到一个三行四列的矩阵</span></span><br><span class="line">x&lt;-matrix(<span class="number">1</span>:<span class="number">12</span>,ncol=<span class="number">3</span>)</span><br><span class="line">x</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">5</span>    <span class="number">9</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">6</span>   <span class="number">10</span></span><br><span class="line">  [<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">7</span>   <span class="number">11</span></span><br><span class="line">  [<span class="number">4</span>,]    <span class="number">4</span>    <span class="number">8</span>   <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对矩阵按行求和</span></span><br><span class="line">apply(x,<span class="number">1</span>,sum)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">15</span> <span class="number">18</span> <span class="number">21</span> <span class="number">24</span></span><br><span class="line"><span class="comment"># 对矩阵按列求和</span></span><br><span class="line">apply(x,<span class="number">2</span>,sum)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">10</span> <span class="number">26</span> <span class="number">42</span></span><br></pre></td></tr></table></figure><hr><h4 id="传递其他参数"><a href="#传递其他参数" class="headerlink" title="传递其他参数"></a>传递其他参数</h4><p>参数说明中，<code>...</code>适用于为函数的提供额外参数。具体的说就是如果一个函数有多个参数，那么<code>...</code>就是负责传入除了第一个参数以外的其他参数。比如说<code>sum(..., na.rm = FALSE)</code>，就有一个如何处理<code>na</code>值的参数。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个na值</span></span><br><span class="line">x[<span class="number">1</span>,<span class="number">1</span>]=<span class="literal">NA</span></span><br><span class="line">x</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">  [<span class="number">1</span>,]   <span class="literal">NA</span>    <span class="number">5</span>    <span class="number">9</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">6</span>   <span class="number">10</span></span><br><span class="line">  [<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">7</span>   <span class="number">11</span></span><br><span class="line">  [<span class="number">4</span>,]    <span class="number">4</span>    <span class="number">8</span>   <span class="number">12</span></span><br><span class="line"><span class="comment"># 直接使用apply函数，会因为存在na值而不能正常计算</span></span><br><span class="line">apply(x,<span class="number">1</span>,sum)</span><br><span class="line">  [<span class="number">1</span>] <span class="literal">NA</span> <span class="number">18</span> <span class="number">21</span> <span class="number">24</span></span><br><span class="line"><span class="comment"># 给sum函数传递额外的参数，na.rm=TRUE便可以正常计算</span></span><br><span class="line">apply(x,<span class="number">1</span>,sum,na.rm=<span class="literal">TRUE</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">14</span> <span class="number">18</span> <span class="number">21</span> <span class="number">24</span></span><br></pre></td></tr></table></figure><p></p><hr><h4 id="使用自定义的函数"><a href="#使用自定义的函数" class="headerlink" title="使用自定义的函数"></a>使用自定义的函数</h4><p>计算：让数据框的<code>x1</code>列加1，并计算出<code>x1</code>、<code>x2</code>列的均值<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到数据框</span></span><br><span class="line">x &lt;- cbind(x1 = <span class="number">3</span>, x2 = c(<span class="number">4</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">5</span>))</span><br><span class="line">x</span><br><span class="line">      x1 x2</span><br><span class="line">  [<span class="number">1</span>,]  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">2</span>,]  <span class="number">3</span>  <span class="number">3</span></span><br><span class="line">  [<span class="number">3</span>,]  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  [<span class="number">4</span>,]  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">5</span>,]  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  [<span class="number">6</span>,]  <span class="number">3</span>  <span class="number">3</span></span><br><span class="line">  [<span class="number">7</span>,]  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">8</span>,]  <span class="number">3</span>  <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line">myFUN&lt;- <span class="keyword">function</span>(x, c1, c2) &#123;</span><br><span class="line">  <span class="comment"># 这个相当于函数的返回值</span></span><br><span class="line">  <span class="keyword">return</span>(c(sum(x[c1],<span class="number">1</span>), mean(x[c2])))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用apply</span></span><br><span class="line">apply(x,<span class="number">1</span>,myFUN,c1=<span class="string">'x1'</span>,c2=c(<span class="string">'x1'</span>,<span class="string">'x2'</span>))</span><br><span class="line">       [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>] [,<span class="number">6</span>] [,<span class="number">7</span>] [,<span class="number">8</span>]</span><br><span class="line">  [<span class="number">1</span>,]  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span></span><br><span class="line">  [<span class="number">2</span>,]  <span class="number">3.5</span>    <span class="number">3</span>  <span class="number">2.5</span>    <span class="number">2</span>  <span class="number">2.5</span>    <span class="number">3</span>  <span class="number">3.5</span>    <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要注意的是不管是matrix还是array，都不能通过x['x1']这种方式得到某一列的值</span></span><br><span class="line"><span class="comment"># 但是前面自定义的myFUN中就是这种，因为apply是对每一行进行的循环，matrix和array的每一行都是一个带name的vector</span></span><br><span class="line">x[<span class="number">1</span>,]</span><br><span class="line">  x1 x2 </span><br><span class="line">  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">x[<span class="number">1</span>,][<span class="string">'x1'</span>]</span><br><span class="line">  x1 </span><br><span class="line">  <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以直接使用数字替代</span></span><br><span class="line">apply(x,<span class="number">1</span>,myFUN,c1=<span class="number">1</span>,c2=c(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">       [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>] [,<span class="number">6</span>] [,<span class="number">7</span>] [,<span class="number">8</span>]</span><br><span class="line">  [<span class="number">1</span>,]  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span></span><br><span class="line">  [<span class="number">2</span>,]  <span class="number">3.5</span>    <span class="number">3</span>  <span class="number">2.5</span>    <span class="number">2</span>  <span class="number">2.5</span>    <span class="number">3</span>  <span class="number">3.5</span>    <span class="number">4</span></span><br><span class="line">x[<span class="number">1</span>,][<span class="number">1</span>]</span><br><span class="line">  x1 </span><br><span class="line">  <span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><h4 id="关于计算效率"><a href="#关于计算效率" class="headerlink" title="关于计算效率"></a>关于计算效率</h4><p>对于上面的问题可以使用三种方法解决，这里比较三种方法的耗时：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># R语言内置的向量计算</span></span><br><span class="line">data.frame(x1=x[,<span class="number">1</span>]+<span class="number">1</span>,x2=rowMeans(x))</span><br><span class="line">    x1  x2</span><br><span class="line">  <span class="number">1</span>  <span class="number">4</span> <span class="number">3.5</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">4</span> <span class="number">3.0</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">4</span> <span class="number">2.5</span></span><br><span class="line">  <span class="number">4</span>  <span class="number">4</span> <span class="number">2.0</span></span><br><span class="line">  <span class="number">5</span>  <span class="number">4</span> <span class="number">2.5</span></span><br><span class="line">  <span class="number">6</span>  <span class="number">4</span> <span class="number">3.0</span></span><br><span class="line">  <span class="number">7</span>  <span class="number">4</span> <span class="number">3.5</span></span><br><span class="line">  <span class="number">8</span>  <span class="number">4</span> <span class="number">4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环</span></span><br><span class="line"><span class="comment">## 定义一个结果的数据框</span></span><br><span class="line">df&lt;-data.frame()</span><br><span class="line"><span class="comment">## 定义for循环</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:nrow(x))&#123;</span><br><span class="line">  row&lt;-x[i,]                                         <span class="comment"># 每行的值</span></span><br><span class="line">  df&lt;-rbind(df,rbind(c(sum(row[<span class="number">1</span>],<span class="number">1</span>), mean(row))))   <span class="comment"># 计算，并赋值到结果数据框</span></span><br><span class="line">  &#125;</span><br><span class="line">df</span><br><span class="line">    V1  V2</span><br><span class="line">  <span class="number">1</span>  <span class="number">4</span> <span class="number">3.5</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">4</span> <span class="number">3.0</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">4</span> <span class="number">2.5</span></span><br><span class="line">  <span class="number">4</span>  <span class="number">4</span> <span class="number">2.0</span></span><br><span class="line">  <span class="number">5</span>  <span class="number">4</span> <span class="number">2.5</span></span><br><span class="line">  <span class="number">6</span>  <span class="number">4</span> <span class="number">3.0</span></span><br><span class="line">  <span class="number">7</span>  <span class="number">4</span> <span class="number">3.5</span></span><br><span class="line">  <span class="number">8</span>  <span class="number">4</span> <span class="number">4.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较效率</span></span><br><span class="line">rm(list=ls())</span><br><span class="line"><span class="comment">## 封装fun1-&gt;使用apply进行计算</span></span><br><span class="line">fun1&lt;-<span class="keyword">function</span>(x)&#123;</span><br><span class="line">  myFUN&lt;- <span class="keyword">function</span>(x, c1, c2) &#123;</span><br><span class="line">    c(sum(x[c1],<span class="number">1</span>), mean(x[c2])) </span><br><span class="line">    &#125;</span><br><span class="line">  apply(x,<span class="number">1</span>,myFUN,c1=<span class="string">'x1'</span>,c2=c(<span class="string">'x1'</span>,<span class="string">'x2'</span>))</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">## 封装fun2-&gt;使用for循环</span></span><br><span class="line">fun2&lt;-<span class="keyword">function</span>(x)&#123;</span><br><span class="line">  df&lt;-data.frame()</span><br><span class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:nrow(x))&#123;</span><br><span class="line">    row&lt;-x[i,]</span><br><span class="line">    df&lt;-rbind(df,rbind(c(sum(row[<span class="number">1</span>],<span class="number">1</span>), mean(row))))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">## 封装fun3-&gt;使用内置的向量运算</span></span><br><span class="line">fun3&lt;-<span class="keyword">function</span>(x)&#123;</span><br><span class="line">  data.frame(x1=x[,<span class="number">1</span>]+<span class="number">1</span>,x2=rowMeans(x))</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">## 生成数据集</span></span><br><span class="line">x &lt;- cbind(x1=<span class="number">3</span>, x2 = c(<span class="number">400</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">500</span>))</span><br><span class="line">system.time(fun1(x))</span><br><span class="line">   user  system elapsed </span><br><span class="line">  <span class="number">0.018</span>   <span class="number">0.000</span>   <span class="number">0.018</span> </span><br><span class="line">system.time(fun2(x))</span><br><span class="line">   user  system elapsed </span><br><span class="line">  <span class="number">0.643</span>   <span class="number">0.000</span>   <span class="number">0.643</span> </span><br><span class="line">system.time(fun3(x))</span><br><span class="line">   user  system elapsed </span><br><span class="line">  <span class="number">0.002</span>   <span class="number">0.000</span>   <span class="number">0.002</span></span><br></pre></td></tr></table></figure><p></p><p>从耗时结果来看，用<strong>for循环实现的计算是耗时最长的</strong>，<strong>apply实现的循环耗时很短</strong>，而<strong>直接使用R语言内置的向量计算的操作几乎不耗时</strong>。通过上面的测试，<mark>对同一个计算来说，优先考虑R语言内置的向量计算，必须要用到循环时则使用apply函数，应该尽量避免显示的使用for,while等操作方法。</mark></p><hr><p><br></p><h2 id="lapply函数"><a href="#lapply函数" class="headerlink" title="lapply函数"></a>lapply函数</h2><h3 id="lapply函数作用"><a href="#lapply函数作用" class="headerlink" title="lapply函数作用"></a>lapply函数作用</h3><p><code>lapply</code>函数是一个最基础循环操作函数之一，用来对<code>list</code>、<code>data.frame</code>数据集进行循环，并<strong>返回和<code>X</code>长度同样的<code>list</code>结构作为结果集</strong>，通过<code>lapply</code>的开头的第一个字母<code>l</code>就可以判断返回结果集的类型。</p><hr><h3 id="lapply函数用法及参数"><a href="#lapply函数用法及参数" class="headerlink" title="lapply函数用法及参数"></a>lapply函数用法及参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">lapply returns a list of the same length as X, each element of <span class="built_in">which</span> is the result of applying FUN to the corresponding element of X.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">lapply(X, FUN, ...)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>X</code>：<code>list</code>、<code>data.frame</code>数据</li><li><code>FUN</code>：调用的函数名称</li><li><code>...</code>：传递给<code>FUN</code>的<strong>额外参数</strong></li><li>因为<code>list</code>不存在行和列，所以没有<code>MARGIN</code>参数</li></ul><hr><h3 id="lapply函数的具体使用"><a href="#lapply函数的具体使用" class="headerlink" title="lapply函数的具体使用"></a>lapply函数的具体使用</h3><h4 id="处理列表数据"><a href="#处理列表数据" class="headerlink" title="处理列表数据"></a>处理列表数据</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建一个列表</span></span><br><span class="line">x &lt;- list(a = <span class="number">1</span>:<span class="number">10</span>, b = rnorm(<span class="number">6</span>,<span class="number">10</span>,<span class="number">5</span>), c = c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>,<span class="literal">TRUE</span>))</span><br><span class="line">x</span><br><span class="line">  $a</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  $b</span><br><span class="line">  [<span class="number">1</span>] <span class="number">22.7651306</span>  <span class="number">0.6988621</span> <span class="number">15.6552733</span>  <span class="number">7.3638287</span> <span class="number">18.3299545</span>  <span class="number">4.3039968</span></span><br><span class="line"></span><br><span class="line">  $c</span><br><span class="line">  [<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到列表中每个元素的特征数，包括minimum, lower-hinge, median, upper-hinge, maximum</span></span><br><span class="line">lapply(x,fivenum)</span><br><span class="line">  $a</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1.0</span>  <span class="number">3.0</span>  <span class="number">5.5</span>  <span class="number">8.0</span> <span class="number">10.0</span></span><br><span class="line"></span><br><span class="line">  $b</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">0.6988621</span>  <span class="number">4.3039968</span> <span class="number">11.5095510</span> <span class="number">18.3299545</span> <span class="number">22.7651306</span></span><br><span class="line"></span><br><span class="line">  $c</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.5</span> <span class="number">1.0</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure><hr><h4 id="处理dataframe数据"><a href="#处理dataframe数据" class="headerlink" title="处理dataframe数据"></a>处理dataframe数据</h4><p>针对<code>dataframe</code>的数据，<code>lapply</code>会自动<strong>把数据框按列进行分组</strong>，<strong>再进行计算</strong>，<strong>返回的结果仍然是列表</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到数据</span></span><br><span class="line">x &lt;- cbind(x1=<span class="number">3</span>, x2=c(<span class="number">2</span>:<span class="number">1</span>,<span class="number">4</span>:<span class="number">5</span>))</span><br><span class="line">x</span><br><span class="line">        x1 x2</span><br><span class="line">  [<span class="number">1</span>,]  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  [<span class="number">2</span>,]  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">3</span>,]  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">4</span>,]  <span class="number">3</span>  <span class="number">5</span></span><br><span class="line"><span class="comment"># 查看x的数据结构类型</span></span><br><span class="line">class(x)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"matrix"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对dataframe对象执行lapply操作</span></span><br><span class="line">lapply(data.frame(x), sum)</span><br><span class="line">  $x1</span><br><span class="line">  [<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">  $x2</span><br><span class="line">  [<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"><span class="comment"># 返回的类型为列表</span></span><br><span class="line">class(lapply(data.frame(x), sum))</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"list"</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="sapply函数"><a href="#sapply函数" class="headerlink" title="sapply函数"></a>sapply函数</h2><h3 id="sapply函数作用"><a href="#sapply函数作用" class="headerlink" title="sapply函数作用"></a>sapply函数作用</h3><p><code>sapply</code>函数是一个简化版的<code>lapply</code>，<code>sapply</code>增加了2个参数<code>simplify</code>和<code>USE.NAMES</code>，主要就是<strong>让输出看起来更友好</strong>，<strong>返回值为向量</strong>，<strong>而不是list对象</strong>。</p><hr><h3 id="sapply函数参数及用法"><a href="#sapply函数参数及用法" class="headerlink" title="sapply函数参数及用法"></a>sapply函数参数及用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">sapply is a user-friendly version and wrapper of lapply by default returning a vector, matrix or, <span class="keyword">if</span> simplify = <span class="string">"array"</span>, an array <span class="keyword">if</span> appropriate, by applying simplify2array(). sapply(x, f, simplify = FALSE, USE.NAMES = FALSE) is the same as lapply(x, f).</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>X</code>：<code>list</code>、<code>data.frame</code>数据</li><li><code>FUN</code>：调用的函数名称</li><li><code>...</code>：传递给<code>FUN</code>的<strong>额外参数</strong></li><li><code>simplify</code>：是否数组化，当值<code>array</code>时，输出结果按数组进行分组</li><li><code>USE.NAMES</code>：如果<code>X</code>为字符串，<code>TRUE</code>设置字符串为数据名，<code>FALSE</code>不设置</li></ul><hr><h3 id="sapply函数的具体使用"><a href="#sapply函数的具体使用" class="headerlink" title="sapply函数的具体使用"></a>sapply函数的具体使用</h3><h4 id="对dataframe数据"><a href="#对dataframe数据" class="headerlink" title="对dataframe数据"></a>对dataframe数据</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到数据</span></span><br><span class="line">x &lt;- cbind(x1=<span class="number">3</span>, x2=c(<span class="number">2</span>:<span class="number">1</span>,<span class="number">4</span>:<span class="number">5</span>))</span><br><span class="line">x</span><br><span class="line">        x1 x2</span><br><span class="line">  [<span class="number">1</span>,]  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  [<span class="number">2</span>,]  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">3</span>,]  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">4</span>,]  <span class="number">3</span>  <span class="number">5</span></span><br><span class="line"><span class="comment"># 查看x的数据结构类型</span></span><br><span class="line">class(x)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"matrix"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sapply</span></span><br><span class="line">sapply(data.frame(x), sum)</span><br><span class="line">  x1 x2 </span><br><span class="line">  <span class="number">12</span> <span class="number">12</span> </span><br><span class="line"><span class="comment"># 返回结果的数据类型为带name的向量</span></span><br><span class="line">class(sapply(data.frame(x), sum))</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"numeric"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 而之前的lapply返回的是列表数据</span></span><br><span class="line">class(lapply(data.frame(x), sum))</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"list"</span></span><br></pre></td></tr></table></figure><p>如果设置<code>simplify=FALSE</code>和<code>USE.NAMES=FALSE</code>，那么完全<code>sapply</code>函数就等于<code>lapply</code>函数了：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sapply(data.frame(x), sum, simplify=<span class="literal">FALSE</span>, USE.NAMES=<span class="literal">FALSE</span>)</span><br><span class="line">  $x1</span><br><span class="line">  [<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">  $x2</span><br><span class="line">  [<span class="number">1</span>] <span class="number">12</span></span><br></pre></td></tr></table></figure><p></p><p>如果设置了<code>simplify=array</code>，输出结果按数组进行分组：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a&lt;-<span class="number">1</span>:<span class="number">2</span></span><br><span class="line">sapply(a,<span class="keyword">function</span>(x) matrix(x,<span class="number">2</span>,<span class="number">2</span>), simplify=<span class="string">'array'</span>)</span><br><span class="line">  , , <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>]</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">1</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  , , <span class="number">2</span></span><br><span class="line"></span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>]</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况，则自动合并分组</span></span><br><span class="line">sapply(a,<span class="keyword">function</span>(x) matrix(x,<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>]</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">  [<span class="number">3</span>,]    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">  [<span class="number">4</span>,]    <span class="number">1</span>    <span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><hr><h4 id="对于字符串数据"><a href="#对于字符串数据" class="headerlink" title="对于字符串数据"></a>对于字符串数据</h4><p>对于字符串的向量，会<strong>自动生成数据名得到带名称的向量</strong>:<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val&lt;-head(letters)</span><br><span class="line">val</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"d"</span> <span class="string">"e"</span> <span class="string">"f"</span></span><br><span class="line"><span class="comment"># 得到带名称的向量</span></span><br><span class="line">sapply(val,paste,USE.NAMES=<span class="literal">TRUE</span>)</span><br><span class="line">    a   b   c   d   e   f </span><br><span class="line">  <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"d"</span> <span class="string">"e"</span> <span class="string">"f"</span> </span><br><span class="line"><span class="comment"># 取消设置向量名称</span></span><br><span class="line">sapply(val,paste,USE.NAMES=<span class="literal">FALSE</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"d"</span> <span class="string">"e"</span> <span class="string">"f"</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="vapply函数"><a href="#vapply函数" class="headerlink" title="vapply函数"></a>vapply函数</h2><h3 id="vapply函数作用"><a href="#vapply函数作用" class="headerlink" title="vapply函数作用"></a>vapply函数作用</h3><p><code>vapply</code>作用类似于<code>sapply</code>，其提供了<code>FUN.VALUE</code>参数，用来控制返回值的行名。</p><hr><h3 id="vapply函数参数及用法"><a href="#vapply函数参数及用法" class="headerlink" title="vapply函数参数及用法"></a>vapply函数参数及用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">vapply is similar to sapply, but has a pre-specified <span class="built_in">type</span> of <span class="built_in">return</span> value, so it can be safer (and sometimes faster) to use.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>X</code>：<code>list</code>、<code>data.frame</code>数据</li><li><code>FUN</code>：调用的函数名称</li><li><code>FUN.VALUE</code>： 定义返回值的行名row.names</li><li><code>...</code>：传递给<code>FUN</code>的<strong>额外参数</strong></li><li><code>USE.NAMES</code>：如果<code>X</code>为字符串，<code>TRUE</code>设置字符串为数据名，<code>FALSE</code>不设置</li></ul><hr><h3 id="vapply函数的具体用法"><a href="#vapply函数的具体用法" class="headerlink" title="vapply函数的具体用法"></a>vapply函数的具体用法</h3><p><code>vapply</code>同样是<strong>对列</strong>进行的运算：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接得到数据框</span></span><br><span class="line">x &lt;- data.frame(cbind(x1=<span class="number">3</span>, x2=c(<span class="number">2</span>:<span class="number">1</span>,<span class="number">4</span>:<span class="number">5</span>)))</span><br><span class="line">x</span><br><span class="line">    x1 x2</span><br><span class="line">  <span class="number">1</span>  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">  <span class="number">4</span>  <span class="number">3</span>  <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置行名，4行分别为a,b,c,d</span></span><br><span class="line">vapply(x,cumsum,FUN.VALUE=c(<span class="string">'a'</span>=<span class="number">0</span>,<span class="string">'b'</span>=<span class="number">0</span>,<span class="string">'c'</span>=<span class="number">0</span>,<span class="string">'d'</span>=<span class="number">0</span>))</span><br><span class="line">    x1 x2</span><br><span class="line">  a  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  b  <span class="number">6</span>  <span class="number">3</span></span><br><span class="line">  c  <span class="number">9</span>  <span class="number">7</span></span><br><span class="line">  d <span class="number">12</span> <span class="number">12</span></span><br><span class="line"><span class="comment"># 不能缺失FUN.VALUE</span></span><br><span class="line">vapply(x,cumsum)</span><br><span class="line">  Error <span class="keyword">in</span> vapply(x, cumsum) : </span><br><span class="line">    argument <span class="string">"FUN.VALUE"</span> is missing, with no default</span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="mapply函数"><a href="#mapply函数" class="headerlink" title="mapply函数"></a>mapply函数</h2><h3 id="mapply函数作用"><a href="#mapply函数作用" class="headerlink" title="mapply函数作用"></a>mapply函数作用</h3><p><code>mapply</code>也是<code>sapply</code>的变形函数，类似多变量的<code>sapply</code>，但是<strong>参数定义有些变化</strong>。<strong>第一参数为自定义的FUN函数</strong>，<strong>第二个参数…可以接收多个数据，作为FUN函数的参数调用</strong>。</p><blockquote><p>Apply a Function to <strong>Multiple</strong> <strong>List</strong> or <strong>Vector</strong> Arguments</p></blockquote><p>具体来说就是：<strong>将多个参数(向量或者列表对应位置的元素作为参数)传递给函数FUN进行计算</strong>。其实大部分使用<code>mapply</code>函数的场景都可以先将向量转换为<code>dataframe</code>，然后再使用<code>apply</code>函数进行操作，但是直接使用<code>mapply</code>可以减少步骤，不用转换为<code>dataframe</code>。</p><hr><h3 id="mapply函数参数及用法"><a href="#mapply函数参数及用法" class="headerlink" title="mapply函数参数及用法"></a>mapply函数参数及用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">mapply is a multivariate version of sapply. mapply applies FUN to the first elements of each ... argument, the second elements, the third elements, and so on. Arguments are recycled <span class="keyword">if</span> necessary.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE,</span><br><span class="line">       USE.NAMES = TRUE)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>FUN</code>: 调用的函数</li><li><code>...</code>: 传递给<code>FUN</code>的<strong>额外参数</strong></li><li><code>MoreArgs</code>: 参数列表</li><li><code>SIMPLIFY</code>: 是否数组化，当值<code>array</code>时，<strong>输出结果按数组进行分组</strong></li><li><code>USE.NAMES</code>: 如果<code>X</code>为<strong>字符串</strong>，<code>TRUE</code>设置字符串为数据名，<code>FALSE</code>不设置</li></ul><hr><h3 id="mapply函数的具体用法"><a href="#mapply函数的具体用法" class="headerlink" title="mapply函数的具体用法"></a>mapply函数的具体用法</h3><p>比较3个向量大小，按索引顺序取较大的值：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">set.seed(<span class="number">1</span>)</span><br><span class="line">x&lt;-<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">y&lt;-<span class="number">5</span>:-<span class="number">4</span></span><br><span class="line">z&lt;-round(runif(<span class="number">10</span>,-<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">x</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line">y</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">5</span>  <span class="number">4</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span> -<span class="number">1</span> -<span class="number">2</span> -<span class="number">3</span> -<span class="number">4</span></span><br><span class="line">z</span><br><span class="line">  [<span class="number">1</span>] -<span class="number">2</span> -<span class="number">1</span>  <span class="number">1</span>  <span class="number">4</span> -<span class="number">3</span>  <span class="number">4</span>  <span class="number">4</span>  <span class="number">2</span>  <span class="number">1</span> -<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按索引顺序取较大的值</span></span><br><span class="line"><span class="comment"># 其实就是将x、y、z三个向量对应位置的值作为参数传递给max函数</span></span><br><span class="line">mapply(max,x,y,z)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">5</span>  <span class="number">4</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用apply</span></span><br><span class="line">df=data.frame(x=x,y=y,z=z)</span><br><span class="line">df</span><br><span class="line">      x  y  z</span><br><span class="line">  <span class="number">1</span>   <span class="number">1</span>  <span class="number">5</span> -<span class="number">2</span></span><br><span class="line">  <span class="number">2</span>   <span class="number">2</span>  <span class="number">4</span> -<span class="number">1</span></span><br><span class="line">  <span class="number">3</span>   <span class="number">3</span>  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  <span class="number">4</span>   <span class="number">4</span>  <span class="number">2</span>  <span class="number">4</span></span><br><span class="line">  <span class="number">5</span>   <span class="number">5</span>  <span class="number">1</span> -<span class="number">3</span></span><br><span class="line">  <span class="number">6</span>   <span class="number">6</span>  <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  <span class="number">7</span>   <span class="number">7</span> -<span class="number">1</span>  <span class="number">4</span></span><br><span class="line">  <span class="number">8</span>   <span class="number">8</span> -<span class="number">2</span>  <span class="number">2</span></span><br><span class="line">  <span class="number">9</span>   <span class="number">9</span> -<span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  <span class="number">10</span> <span class="number">10</span> -<span class="number">4</span> -<span class="number">4</span></span><br><span class="line"><span class="comment"># 直接使用apply函数得到每行的最大值</span></span><br><span class="line">apply(df,<span class="number">1</span>,max)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">5</span>  <span class="number">4</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p></p><p>生成4个符合正态分布的数据集，分别对应的均值和方差为<code>c(1,10,100,1000)</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set.seed(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 长度为4</span></span><br><span class="line">n&lt;-rep(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m为均值，v为方差</span></span><br><span class="line">m&lt;-v&lt;-c(<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成4组数据，按列分组</span></span><br><span class="line">mapply(rnorm,n,m,v)</span><br><span class="line">            [,<span class="number">1</span>]      [,<span class="number">2</span>]      [,<span class="number">3</span>]       [,<span class="number">4</span>]</span><br><span class="line">  [<span class="number">1</span>,] <span class="number">0.3735462</span> <span class="number">13.295078</span> <span class="number">157.57814</span>   <span class="number">378.7594</span></span><br><span class="line">  [<span class="number">2</span>,] <span class="number">1.1836433</span>  <span class="number">1.795316</span>  <span class="number">69.46116</span> -<span class="number">1214.6999</span></span><br><span class="line">  [<span class="number">3</span>,] <span class="number">0.1643714</span> <span class="number">14.874291</span> <span class="number">251.17812</span>  <span class="number">2124.9309</span></span><br><span class="line">  [<span class="number">4</span>,] <span class="number">2.5952808</span> <span class="number">17.383247</span> <span class="number">138.98432</span>   <span class="number">955.0664</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="tapply函数"><a href="#tapply函数" class="headerlink" title="tapply函数"></a>tapply函数</h2><h3 id="tapply函数的作用"><a href="#tapply函数的作用" class="headerlink" title="tapply函数的作用"></a>tapply函数的作用</h3><p><code>tapply</code>用于<strong>分组的循环计算</strong>，通过<code>INDEX</code>参数可以把数据集<code>X</code>进行分组，相当于<code>group by</code>的操作。</p><blockquote><p>Apply a Function Over a Ragged Array</p></blockquote><hr><h3 id="tapply函数参数及用法"><a href="#tapply函数参数及用法" class="headerlink" title="tapply函数参数及用法"></a>tapply函数参数及用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">Apply a <span class="keyword">function</span> to each cell of a ragged array, that is to each (non-empty) group of values given by a unique combination of the levels of certain factors.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">tapply(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>X</code>: <strong>向量</strong>，注意这里<strong>不是前面的列表、数据框和数组类型</strong></li><li><code>INDEX</code>: 用于分组的索引</li><li><code>FUN</code>: 调用的函数</li><li><code>...</code>: 传递给<code>FUN</code>的<strong>额外参数</strong></li><li><code>simplify</code>: 是否数组化，当值<code>array</code>时，<strong>输出结果按数组进行分组</strong></li></ul><hr><h3 id="tapply函数的具体用法"><a href="#tapply函数的具体用法" class="headerlink" title="tapply函数的具体用法"></a>tapply函数的具体用法</h3><p>计算<strong>不同品种</strong>的鸢尾花的<strong>花瓣(iris)长度的均值</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看示例数据</span></span><br><span class="line">str(iris)</span><br><span class="line">  <span class="string">'data.frame'</span>:<span class="number">150</span> obs. of  <span class="number">5</span> variables:</span><br><span class="line">  $ Sepal.Length: num  <span class="number">5.1</span> <span class="number">4.9</span> <span class="number">4.7</span> <span class="number">4.6</span> <span class="number">5</span> <span class="number">5.4</span> <span class="number">4.6</span> <span class="number">5</span> <span class="number">4.4</span> <span class="number">4.9</span> <span class="keyword">...</span></span><br><span class="line">  $ Sepal.Width : num  <span class="number">3.5</span> <span class="number">3</span> <span class="number">3.2</span> <span class="number">3.1</span> <span class="number">3.6</span> <span class="number">3.9</span> <span class="number">3.4</span> <span class="number">3.4</span> <span class="number">2.9</span> <span class="number">3.1</span> <span class="keyword">...</span></span><br><span class="line">  $ Petal.Length: num  <span class="number">1.4</span> <span class="number">1.4</span> <span class="number">1.3</span> <span class="number">1.5</span> <span class="number">1.4</span> <span class="number">1.7</span> <span class="number">1.4</span> <span class="number">1.5</span> <span class="number">1.4</span> <span class="number">1.5</span> <span class="keyword">...</span></span><br><span class="line">  $ Petal.Width : num  <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.4</span> <span class="number">0.3</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.1</span> <span class="keyword">...</span></span><br><span class="line">  $ Species     : Factor w/ <span class="number">3</span> levels <span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,..: <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="keyword">...</span></span><br><span class="line"><span class="comment"># 按照Species进行分组计算Petal.Length的平均值</span></span><br><span class="line">tapply(iris$Petal.Length,iris$Species,mean)</span><br><span class="line">      setosa versicolor  virginica </span><br><span class="line">      <span class="number">1.462</span>      <span class="number">4.260</span>      <span class="number">5.552</span></span><br></pre></td></tr></table></figure><p></p><p>对向量x<strong>以向量t为索引进行分组</strong>求和：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">set.seed(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 定义x,y向量</span></span><br><span class="line">x&lt;-<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">x</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="comment"># 设置分组索引t</span></span><br><span class="line">t&lt;-round(runif(<span class="number">10</span>,<span class="number">1</span>,<span class="number">100</span>)%%<span class="number">2</span>)</span><br><span class="line">t</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 对x进行分组求和</span></span><br><span class="line">tapply(x,t,sum)</span><br><span class="line">  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span> </span><br><span class="line">  <span class="number">8</span> <span class="number">36</span> <span class="number">11</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="rapply函数"><a href="#rapply函数" class="headerlink" title="rapply函数"></a>rapply函数</h2><h3 id="rapply函数作用"><a href="#rapply函数作用" class="headerlink" title="rapply函数作用"></a>rapply函数作用</h3><p><code>rapply</code>是一个<strong>递归版本的<code>lapply</code></strong>，它<strong>只处理list类型数据</strong>，<strong>对list的每个元素进行递归遍历，如果list包括子元素则继续遍历</strong>。</p><blockquote><p>Recursively Apply a Function to a List</p></blockquote><hr><h3 id="rapply函数参数及用法"><a href="#rapply函数参数及用法" class="headerlink" title="rapply函数参数及用法"></a>rapply函数参数及用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">rapply is a recursive version of lapply.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">rapply(object, f, classes = <span class="string">"ANY"</span>, deflt = NULL,</span><br><span class="line">       how = c(<span class="string">"unlist"</span>, <span class="string">"replace"</span>, <span class="string">"list"</span>), ...)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>object</code>：<strong>list数据</strong></li><li><code>f</code>：调用的函数</li><li><code>classes</code>：匹配类型, <code>ANY</code>为所有类型</li><li><code>deflt</code>：非匹配类型的默认值</li><li><code>how</code>：3种操作方式，<ul><li>当为<code>replace</code>时，则用调用<code>f</code>后的结果替换原<code>list</code>中原来的元素；</li><li>当为<code>list</code>时，新建一个<code>list</code>，类型匹配调用<code>f</code>函数，不匹配赋值为<code>deflt</code>；</li><li>当为<code>unlist</code>时，会执行一次<code>unlist(recursive = TRUE)</code>的操作</li></ul></li><li><code>...</code>：更多参数，可选</li></ul><hr><h3 id="rapply函数的具体用法"><a href="#rapply函数的具体用法" class="headerlink" title="rapply函数的具体用法"></a>rapply函数的具体用法</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- list(</span><br><span class="line">  list(</span><br><span class="line">    a = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), </span><br><span class="line">    b = list(</span><br><span class="line">      c = c(<span class="number">1</span>:<span class="number">4</span>),</span><br><span class="line">      d=list(</span><br><span class="line">        m=c(<span class="number">1</span>:<span class="number">4</span>))</span><br><span class="line">    )</span><br><span class="line">  ), </span><br><span class="line">  d = <span class="string">"a test"</span>)</span><br><span class="line">x</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [[<span class="number">1</span>]]$a</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">1</span>]]$b</span><br><span class="line">  [[<span class="number">1</span>]]$b$c</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">1</span>]]$b$d</span><br><span class="line">  [[<span class="number">1</span>]]$b$d$m</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  $d</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"a test"</span></span><br><span class="line">rapply(x, sqrt, classes = <span class="string">"numeric"</span>, how = <span class="string">"replace"</span>)</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [[<span class="number">1</span>]]$a</span><br><span class="line">  <span class="comment"># 针对这一层的列表进行了sqrt操作</span></span><br><span class="line">  [<span class="number">1</span>] <span class="number">1.000000</span> <span class="number">1.414214</span> <span class="number">1.732051</span> <span class="number">2.000000</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 这一层的列表并没有进行任何操作</span></span><br><span class="line">  [[<span class="number">1</span>]]$b</span><br><span class="line">  [[<span class="number">1</span>]]$b$c</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">1</span>]]$b$d</span><br><span class="line">  [[<span class="number">1</span>]]$b$d$m</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  $d</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"a test"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接使用lapply</span></span><br><span class="line">lapply(x,sqrt)</span><br><span class="line">  Error <span class="keyword">in</span> FUN(X[[i]], <span class="keyword">...</span>) : non-numeric argument to mathematical <span class="keyword">function</span></span><br></pre></td></tr></table></figure><p>所以，<strong>貌似rapply只能对第二层的嵌套list进行操作，第三层的嵌套不会被继续计算？？？先留个坑吧。</strong></p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://blog.fens.me/r-apply/" target="_blank" rel="noopener">掌握R语言中的apply函数族</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;code&gt;R&lt;/code&gt;中常用的&lt;code&gt;apply&lt;/code&gt;函数家族，主要包括&lt;code&gt;apply&lt;/code&gt;(对矩阵、数据框和数组进行行列的操作)、&lt;code&gt;lapply&lt;/code&gt;(作用于列表和数据框，对列表中的每个元素进行循环操作；如果是数据框，则是按列进行操作；最终都返回列表)、&lt;code&gt;sapply&lt;/code&gt;(&lt;code&gt;lapply&lt;/code&gt;的简化版，返回值是向量)、&lt;code&gt;vapply&lt;/code&gt;(类似于&lt;code&gt;sapply&lt;/code&gt;，提供了可以控制返回值行名的参数)、&lt;code&gt;mapply&lt;/code&gt;(相当于多变量的&lt;code&gt;sapply&lt;/code&gt;)、&lt;code&gt;tapply&lt;/code&gt;(分组的循环运算，相当于group by)、&lt;code&gt;rapply&lt;/code&gt;(&lt;code&gt;lapply&lt;/code&gt;的递归版本，只会递归到二级列表)等。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>shell系列之运算符优先级</title>
    <link href="http://showteeth.tech/posts/28801.html"/>
    <id>http://showteeth.tech/posts/28801.html</id>
    <published>2020-01-08T15:09:26.000Z</published>
    <updated>2020-01-09T15:06:58.372Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章总结了<code>shell</code>和<code>AWK</code>中常见的运算符的优先级。在<code>shell</code>中总结出来是：<mark>取反&gt;算术&gt;条件&gt;逻辑&gt;赋值运算符</mark>；在<code>AWK</code>中总结出来是：<mark>Field reference(<code>$</code>)&gt;取反&gt;算术&gt;String concatenation&gt;条件&gt;正则匹配(<code>!~</code>, <code>~</code>)&gt;Array membership(<code>in</code>)&gt;逻辑&gt;赋值</mark></p></div><a id="more"></a><h2 id="shell中运算符的优先级"><a href="#shell中运算符的优先级" class="headerlink" title="shell中运算符的优先级"></a>shell中运算符的优先级</h2><p>虽然在<code>Python</code>和<code>C++</code>中都学习过运算符的优先级，已经有过一些基础，但是<code>shell</code>毕竟是一门新的脚本语言，学习<code>shell</code>中的运算符优先级一来可以了解<code>shell</code>在运算符方面的特性，二来可以巩固自己已有的知识(虽然可能很多都忘记了)，何乐而不为呢。</p><p>所谓的运算符优先级就是在脚本中，<strong>运算执行的顺序</strong>，一般而言<strong>高优先级的操作会比低优先级的操作先执行</strong>。</p><h3 id="运算符优先级的总结"><a href="#运算符优先级的总结" class="headerlink" title="运算符优先级的总结"></a>运算符优先级的总结</h3><p>实际上，<mark>只需要记住以下规则就可以了</mark>:</p><ul><li><strong>取反(逻辑或者按位)</strong>优先级很高，仅次于自加和自减操作</li><li>算数运算:先<strong>幂运算</strong>，<strong>后乘除取余</strong>，<strong>最后加减</strong></li><li>条件测试：先判断<strong>字符串空</strong>、后<strong>文件测试</strong>、再后<strong>整数比较(大于小于大于等于和小于等于)</strong>、最后是<strong>等于和不等于</strong></li><li>逻辑运算符：先<code>&amp;&amp;(-a)</code>、后<code>||(-o)</code></li><li>赋值运算符：先<strong>直接赋值(=)</strong>、后<strong>运算赋值(+=)</strong></li><li>上述按照<strong>优先级从高到低排列</strong>，也就是<mark>取反&gt;算术&gt;条件&gt;逻辑&gt;赋值运算符</mark></li><li><strong>优先级相同的操作按从左至右顺序求值</strong></li><li>可以<strong>使用括号来改变运算符的优先级</strong></li></ul><p>下面详细地列出了<code>shell</code>中常见的运算符的优先级(<strong>从高到低</strong>)：<br><table><thead><tr><th>运算符</th><th>含义</th><th>注解</th></tr></thead><tbody><tr><td>var++, var--</td><td>后缀自增, 自减</td><td>C风格运算符</td></tr><tr><td>++var, --var</td><td>前缀自增, 自减</td><td></td></tr><tr><td>!, ~</td><td>逻辑取反, 按位取反</td><td>对逻辑判断的结果取反, 对每一比特位取反</td></tr><tr><td>**</td><td>幂运算</td><td>算数运算符</td></tr><tr><td>*, /, %</td><td>乘, 除, 取余</td><td>算数运算符</td></tr><tr><td>+, -</td><td>加, 减</td><td>算数运算符</td></tr><tr><td>&lt;&lt;, &gt;&gt;</td><td>左移, 右移</td><td>比特位运算符</td></tr><tr><td>-z, -n</td><td>一元比较</td><td>若 string 为空字串(空格不为空)，则为 true; 若 string 为空字串，则为 false</td></tr><tr><td>-e, -f, -t, -x, etc</td><td>一元比较</td><td>文件测试</td></tr><tr><td>-lt, -gt, -le, -ge</td><td>复合比较</td><td>整数/字符串比较</td></tr><tr><td>-nt, -ot, -ef</td><td>复合比较</td><td>判断 file1 是否比 file2 新,判断 file1 是否比 file2 旧,判断 file1 与 file2 是否为同一文件</td></tr><tr><td>==, -eq, !=, -ne</td><td>复合比较</td><td>整数/字符串比较</td></tr><tr><td>&amp;</td><td>AND(按位与)</td><td>按位与操作</td></tr><tr><td>^</td><td>XOR(按位异或)</td><td>按位异或操作</td></tr><tr><td>|</td><td>OR(按位或)</td><td>按位或操作</td></tr><tr><td>&amp;&amp;, -a</td><td>AND(逻辑与)</td><td>逻辑与</td></tr><tr><td>||, -o</td><td>OR(逻辑或)</td><td>逻辑或</td></tr><tr><td>? :</td><td>if/else三目运算符</td><td>C风格运算符</td></tr><tr><td>=</td><td>赋值</td><td>不要与test中的等号(-eq)混淆</td></tr><tr><td>*=, /=, %=, +=, -=, &lt;&lt;=, &gt;&gt;=, &amp;=</td><td>赋值运算</td><td>先运算后赋值</td></tr><tr><td>,</td><td>逗号运算符</td><td>连接一系列语句</td></tr></tbody></table></p><hr><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先进行了幂运算，然后进行了乘法运算</span></span><br><span class="line"><span class="built_in">echo</span> $((10**2 *2))</span><br><span class="line">  200</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$remaining</span>"</span> -a <span class="string">"<span class="variable">$retry</span>"</span> -gt 0 ]; <span class="keyword">do</span></span><br><span class="line"><span class="comment"># 初看之下很恐怖...</span></span><br><span class="line"><span class="comment"># 分开来分析</span></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$remaining</span>"</span> -a <span class="string">"<span class="variable">$retry</span>"</span> -gt 0 ]; <span class="keyword">do</span></span><br><span class="line"><span class="comment">#       --condition 1-- ^^ --condition 2-</span></span><br><span class="line"><span class="comment">#  如果变量"$remaining" 长度不为0</span></span><br><span class="line"><span class="comment">#+      并且AND (-a)</span></span><br><span class="line"><span class="comment">#+ 变量 "$retry" 大于0</span></span><br><span class="line"><span class="comment">#+ 那么</span></span><br><span class="line"><span class="comment">#+ [ 方括号表达式 ] 返回成功(0)</span></span><br><span class="line"><span class="comment">#+ while-loop 开始迭代执行语句。</span></span><br><span class="line"><span class="comment">#  ==============================================================</span></span><br><span class="line"><span class="comment">#  "condition 1" 和 "condition 2" 在 AND之前执行，为什么？</span></span><br><span class="line"><span class="comment">#  因为AND(-a)优先级比-n,-gt来得低，逻辑与会在最后求值。</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://tldp.org/LDP/abs/html/opprecedence.html#AEN4294" target="_blank" rel="noopener">Table 8-1. Operator Precedence</a></li><li><a href="https://www.bookstack.cn/read/Advanced-Bash-Scripting-Guide-in-Chinese/source-part2-08_4_operator_precedence.md" target="_blank" rel="noopener">有些不是很准确-高级Bash脚本编程指南（Advanced Bash-Scripting Guide）</a></li></ul><hr><p><br></p><h2 id="awk中运算符的优先级"><a href="#awk中运算符的优先级" class="headerlink" title="awk中运算符的优先级"></a>awk中运算符的优先级</h2><h3 id="运算符优先级的总结-1"><a href="#运算符优先级的总结-1" class="headerlink" title="运算符优先级的总结"></a>运算符优先级的总结</h3><p>虽然大部分的<code>awk</code>的运算符优先级和<code>shell</code>中的相同，但是也<strong>还有一些特殊的运算符</strong>：</p><ul><li><mark>Field reference(<code>$</code>)&gt;取反&gt;算术&gt;String concatenation&gt;条件&gt;正则匹配(<code>!~</code>, <code>~</code>)&gt;Array membership(<code>in</code>)&gt;逻辑&gt;赋值</mark></li></ul><p>下面详细地列出了<code>awk</code>中常见的运算符的优先级(<strong>从高到低</strong>)：<br><table><colgroup><col><col></colgroup><tbody><tr><td><p><span class="strong"><strong>Operator</strong></span></p></td><td><p><span class="strong"><strong>Description</strong></span></p></td></tr><tr><td><p><code>(…)</code></p></td><td><p>Grouping，改变运算符的优先级</p></td></tr><tr><td><p><code>$</code></p></td><td><p>Field reference</p></td></tr><tr><td><p><code>++</code>&nbsp;or&nbsp;<code>- -</code></p></td><td><p>Increment, decrement</p></td></tr><tr><td><p><code>^</code>&nbsp;or&nbsp;<code>\*\*</code></p></td><td><p>Exponentiation，幂运算</p></td></tr><tr><td><p><code>+</code>,&nbsp;&nbsp;<code>-</code>,&nbsp;&nbsp;<code>!</code></p></td><td><p>Unary plus(正号), minus(负号), logical not(取反)，前两个需要和后面的加法和减法区分</p></td></tr><tr><td><p><code>\*</code>,&nbsp;<code>/</code>,&nbsp;&nbsp;<code>%</code></p></td><td><p>Multiplication, division or remainder</p></td></tr><tr><td><p><code>+</code>,&nbsp;<code>-</code></p></td><td><p>Addition, subtraction</p></td></tr><tr><td><p>Space</p></td><td><p>String concatenation</p></td></tr><tr><td><p><code>&amp;lt; &amp;lt;= == != &gt; &gt;= &gt;&gt;</code></p></td><td><p>Relational operators</p></td></tr><tr><td><p><code>~ !~</code></p></td><td><p>Match and no match operator</p></td></tr><tr><td><p><code>in</code></p></td><td><p>Array membership</p></td></tr><tr><td><p><code>&amp;&amp;</code></p></td><td><p>Logical and</p></td></tr><tr><td><p><code>||</code></p></td><td><p>Logical or</p></td></tr><tr><td><p><code>?:</code></p></td><td><p>Ternary operator</p></td></tr><tr><td><p><code>= += -= *= /= %= ^= **=</code></p></td><td><p>Assignment operators group right to left</p></td></tr></tbody></table></p><hr><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.gnu.org/software/gawk/manual/html_node/Precedence.html" target="_blank" rel="noopener">6.5 Operator Precedence (How Operators Nest)</a></li><li><a href="https://github.com/acmeism/RosettaCodeData/blob/master/Task/Operator-precedence/AWK/operator-precedence.awk" target="_blank" rel="noopener">operator-precedence.awk</a></li><li><a href="https://pubs.opengroup.org/onlinepubs/007908799/xcu/awk.html" target="_blank" rel="noopener">Expressions in awk</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章总结了&lt;code&gt;shell&lt;/code&gt;和&lt;code&gt;AWK&lt;/code&gt;中常见的运算符的优先级。在&lt;code&gt;shell&lt;/code&gt;中总结出来是：&lt;mark&gt;取反&amp;gt;算术&amp;gt;条件&amp;gt;逻辑&amp;gt;赋值运算符&lt;/mark&gt;；在&lt;code&gt;AWK&lt;/code&gt;中总结出来是：&lt;mark&gt;Field reference(&lt;code&gt;$&lt;/code&gt;)&amp;gt;取反&amp;gt;算术&amp;gt;String concatenation&amp;gt;条件&amp;gt;正则匹配(&lt;code&gt;!~&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;)&amp;gt;Array membership(&lt;code&gt;in&lt;/code&gt;)&amp;gt;逻辑&amp;gt;赋值&lt;/mark&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列之ComplexHeatmap使用记录</title>
    <link href="http://showteeth.tech/posts/31202.html"/>
    <id>http://showteeth.tech/posts/31202.html</id>
    <published>2019-12-19T13:13:09.000Z</published>
    <updated>2020-02-03T04:26:01.096Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要学习了使用<code>ComplexHeatmap</code>来绘制想要的热图的过程，首先以<strong>绘制差异表达基因的热图</strong>为例学习了常规热图的绘制方法，后续又<strong>详细学习了使用<code>oncoPrint</code>绘制突变谱的方法</strong>。</p></div><a id="more"></a><h2 id="输入数据类型"><a href="#输入数据类型" class="headerlink" title="输入数据类型"></a>输入数据类型</h2><p><strong>最好是矩阵</strong>，如果是<code>dataframe</code>可能会出现<code>warning</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning message:</span><br><span class="line">The input is a data frame, convert it to the matrix.</span><br></pre></td></tr></table></figure><p></p><p>如果想<strong>颠倒横纵坐标画图</strong>，可以直接使用<code>t(matrix)</code>进行转置。</p><hr><h2 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h2><p>设置颜色有多种方式，可以使用<code>ComplexHeatmap</code>推荐的<code>colorRamp2</code>函数，其优点在于<strong>可以设置不同的breaks对应的颜色值</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(circlize)</span><br><span class="line">red_green=colorRamp2(breaks=c(min(diff_genes_matrix), </span><br><span class="line">                       mean(diff_genes_matrix), </span><br><span class="line">                       max(diff_genes_matrix)),</span><br><span class="line">                       colors=c(<span class="string">"red"</span>, <span class="string">"black"</span>, <span class="string">"green"</span>))</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="设置legend"><a href="#设置legend" class="headerlink" title="设置legend"></a>设置legend</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">heatmap_legend_param = list(color_bar = <span class="string">"continuous"</span>, </span><br><span class="line">                            at = quantile(diff_genes_matrix, c(<span class="number">0</span>,<span class="number">1</span>)), </span><br><span class="line">                            labels = c(<span class="string">"Min"</span>, <span class="string">"Max"</span>),</span><br><span class="line">                            legend_height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">                            title_position = <span class="string">"leftcenter-rot"</span>)</span><br></pre></td></tr></table></figure><ul><li><code>color_bar</code>: 连续的</li><li><code>at</code>和后面的<code>labels</code>连用，在什么地方标注什么</li><li><code>legend_height</code>设置legend高度</li><li><code>title_position</code>：设置<code>legend</code>名称的位置，这个需要和<code>Heatmap</code>的参数<code>name</code>连用来控制<code>legend</code>名称，在垂直的<code>legend</code>下可用的包括<code>&#39;topleft&#39;</code>, <code>&#39;topcenter&#39;</code>, <code>&#39;leftcenter-rot&#39;</code> and <code>&#39;lefttop-rot&#39;</code></li><li><code>legend_direction = &quot;horizontal&quot;</code>：设置legend横置</li></ul><p>参考链接：</p><ul><li><a href="https://jokergoo.github.io/blog/html/more_legends.html" target="_blank" rel="noopener">ComplexHeatmap Supports More Types of Legends</a></li><li><a href="https://jokergoo.github.io/ComplexHeatmap-reference/book/legends.html" target="_blank" rel="noopener">Heatmap and annotation legends</a></li></ul><hr><h2 id="设置row和col名称的顺序"><a href="#设置row和col名称的顺序" class="headerlink" title="设置row和col名称的顺序"></a>设置row和col名称的顺序</h2><p>在设置<code>row</code>和<code>col</code>名称的顺序时，<strong>行和列的聚类自动会去除</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># row1、row10、row11、row2...</span></span><br><span class="line">row_order = sort(rownames(diff_genes_matrix))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接指定顺序：</span></span><br><span class="line">my_order=c(<span class="string">"row1"</span>,<span class="string">"row2"</span>,<span class="string">"row10"</span>,<span class="string">"row11"</span>)</span><br><span class="line">row_order = my_order</span><br></pre></td></tr></table></figure><p></p><p>参考链接：</p><ul><li><a href="https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html#row-and_column_orders" target="_blank" rel="noopener">row-and_column_orders</a></li></ul><p>需要注意的是：<mark>如果在<strong>设置了顺序的同时也设置了<code>row_split</code></strong>，那么<strong>手动设置的<code>row_order</code>就会失效</strong>；在设置了<code>cluster_rows = FALSE</code>的情况下，默认的顺序就是<code>matrix</code>行名的顺序</mark>，参考<a href="https://github.com/jokergoo/ComplexHeatmap/issues/299" target="_blank" rel="noopener">How to avoid reordering of matrix components with Split?</a>，所以正确的做法是：</p><ul><li>先修改<code>matrix</code>的顺序，可以参考<a href="http://showteeth.tech/posts/30224.html">R系列之向量、矩阵、数组、数据框和列表</a></li><li>关闭<code>cluster_rows</code>参数，直接绘图即可<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原始的矩阵顺序</span></span><br><span class="line">rownames(diff_genes_matrix)</span><br><span class="line">        [<span class="number">1</span>] <span class="string">"BE_W_1"</span>    <span class="string">"BE_W_3"</span>    <span class="string">"BE_W_6"</span>    <span class="string">"BE_C_2"</span>    <span class="string">"BE_C_4"</span>    <span class="string">"BE_C_5"</span>    <span class="string">"Mutation1"</span> <span class="string">"Mutation2"</span> <span class="string">"Mutation3"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先修改matrix顺序</span></span><br><span class="line">diff_genes_matrix_sort=diff_genes_matrix[c(<span class="string">"BE_W_1"</span>,<span class="string">"BE_W_3"</span>,<span class="string">"BE_W_6"</span>,<span class="string">"Mutation1"</span>,<span class="string">"Mutation2"</span>,<span class="string">"Mutation3"</span>,<span class="string">"BE_C_2"</span>,<span class="string">"BE_C_4"</span>,<span class="string">"BE_C_5"</span>),]</span><br><span class="line">rownames(diff_genes_matrix_sort)</span><br><span class="line">        [<span class="number">1</span>] <span class="string">"BE_W_1"</span>    <span class="string">"BE_W_3"</span>    <span class="string">"BE_W_6"</span>    <span class="string">"Mutation1"</span> <span class="string">"Mutation2"</span> <span class="string">"Mutation3"</span> <span class="string">"BE_C_2"</span>    <span class="string">"BE_C_4"</span>    <span class="string">"BE_C_5"</span></span><br><span class="line"></span><br><span class="line">Heatmap(diff_genes_matrix_sort, show_column_names = <span class="literal">FALSE</span>, </span><br><span class="line">        show_row_dend = <span class="literal">FALSE</span>, show_column_dend = <span class="literal">F</span>, </span><br><span class="line">        col=red_green,</span><br><span class="line">        name=<span class="string">"Expression level"</span>,</span><br><span class="line">        </span><br><span class="line">        row_names_side = <span class="string">"left"</span>,</span><br><span class="line">        cluster_rows = <span class="literal">FALSE</span>,</span><br><span class="line">        heatmap_width = unit(<span class="number">24</span>, <span class="string">"cm"</span>), heatmap_height = unit(<span class="number">8</span>, <span class="string">"cm"</span>),</span><br><span class="line">        row_split = split,</span><br><span class="line">        row_title = <span class="literal">NULL</span>,</span><br><span class="line">        row_gap = unit(<span class="number">0.5</span>, <span class="string">"mm"</span>),</span><br><span class="line">        heatmap_legend_param = list(color_bar = <span class="string">"continuous"</span>, </span><br><span class="line">                                    at = quantile(diff_genes_matrix, c(<span class="number">0</span>,<span class="number">1</span>)), </span><br><span class="line">                                    labels = c(<span class="string">"Min"</span>, <span class="string">"Max"</span>),legend_height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">                                    title_position = <span class="string">"leftcenter-rot"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_order_row_and_split.png" alt="complexheatmap_order_row_and_split.png"></p><hr><h2 id="设置rowname的左右"><a href="#设置rowname的左右" class="headerlink" title="设置rowname的左右"></a>设置rowname的左右</h2><p><strong>默认情况下rowname是在右边，而聚类是在左边</strong>，如果想修改这顺序可以使用：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">row_names_side = <span class="string">"left"</span>, row_dend_side = <span class="string">"right"</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="设置cell的大小"><a href="#设置cell的大小" class="headerlink" title="设置cell的大小"></a>设置cell的大小</h2><p><code>ComplexHeatmap</code>没有直接设置cell大小的参数，但是可以通过设置整个heatmap的大小来达到目的：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Heatmap(mat, <span class="keyword">...</span>, heatmap_height = unit(<span class="number">1</span>, <span class="string">"cm"</span>)*nrow(mat))</span><br></pre></td></tr></table></figure><p></p><p><code>width</code> ， <code>heatmap_width</code> ， <code>height</code> 和 <code>heatmap_height</code> 都用于<strong>控制热图的大小</strong>。默认情况下，<strong>所有热图组件都具有固定的宽度或高度，例如 行树形图的宽度为 1cm</strong> 。<code>heatmap_width</code> 和 <code>heatmap_height</code> 控制<strong>整个热图的宽度/高度</strong>，<strong>包括所有热图组件（不包括图例）</strong>，而 <code>width</code> 和 <code>height</code> 仅控制 <strong>heamtap 主体的宽度/高度</strong>.</p><hr><h2 id="对某些行名和列名进行注释"><a href="#对某些行名和列名进行注释" class="headerlink" title="对某些行名和列名进行注释"></a>对某些行名和列名进行注释</h2><p>有时候显示全部的行名或者列名可能会比较杂乱，特别是行或者列很多的情况下，这个时候可以选择一些比较重要的进行展示：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Heatmap中添加如下</span></span><br><span class="line"><span class="comment"># link_height:控制线的长短</span></span><br><span class="line">labels = <span class="string">"Spp1"</span></span><br><span class="line">top_annotation = columnAnnotation(link = anno_mark(at = c(<span class="number">33</span>), </span><br><span class="line">                                                   labels = labels,</span><br><span class="line">                                                   link_height = unit(<span class="number">4</span>, <span class="string">"mm"</span>))</span><br><span class="line">                                  )</span><br></pre></td></tr></table></figure><p></p><p>注意：这个<strong>只能放在<code>top_annotation</code></strong>，如果是<code>bottom_annotation</code>会发现那个连接线会出现在下方，而不是个热图连接起来，其实还是比较适合<strong>在行上进行注释，会比较好看一些</strong>。</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_anno_col_row_names.png" alt="complexheatmap_anno_col_row_names.png"></p><hr><h2 id="在行或者列添加注释块"><a href="#在行或者列添加注释块" class="headerlink" title="在行或者列添加注释块"></a>在行或者列添加注释块</h2><p>在做热图中不可避免地会遇到需要<strong>将多个重复或者一类的样本进行标记的需求</strong>，这里就学习在行或者列上添加这种<strong>注释块</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先得到注释块的大小和颜色等信息</span></span><br><span class="line"><span class="comment"># 这里的a、b、c会显示成legend的名称</span></span><br><span class="line"><span class="comment"># gap：注释块与热图之间的距离</span></span><br><span class="line">df = data.frame(type = c(rep(<span class="string">"a"</span>, <span class="number">3</span>), rep(<span class="string">"b"</span>, <span class="number">3</span>), rep(<span class="string">"c"</span>, <span class="number">3</span>)))</span><br><span class="line">ha = rowAnnotation(df = df, col = list(type = c(<span class="string">"a"</span> = <span class="string">"red"</span>, <span class="string">"b"</span> = <span class="string">"blue"</span>,<span class="string">"c"</span>=<span class="string">"black"</span>)),show_legend = <span class="literal">F</span>,</span><br><span class="line">                   width = unit(<span class="number">1</span>, <span class="string">"cm"</span>),show_annotation_name = <span class="literal">F</span>, gap = unit(<span class="number">1</span>, <span class="string">"points"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Heatmap中添加如下</span></span><br><span class="line">left_annotation = ha</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整版</span></span><br><span class="line">df = data.frame(type = c(rep(<span class="string">"a"</span>, <span class="number">3</span>), rep(<span class="string">"b"</span>, <span class="number">3</span>), rep(<span class="string">"c"</span>, <span class="number">3</span>)))</span><br><span class="line">ha = rowAnnotation(df = df, col = list(type = c(<span class="string">"a"</span> = <span class="string">"red"</span>, <span class="string">"b"</span> = <span class="string">"blue"</span>,<span class="string">"c"</span>=<span class="string">"black"</span>)),show_legend = <span class="literal">F</span>,</span><br><span class="line">                   width = unit(<span class="number">1</span>, <span class="string">"cm"</span>),show_annotation_name = <span class="literal">F</span>,gap = unit(<span class="number">1</span>, <span class="string">"points"</span>))</span><br><span class="line"></span><br><span class="line">Heatmap(diff_genes_matrix, show_column_names = <span class="literal">FALSE</span>, </span><br><span class="line">        show_row_dend = <span class="literal">FALSE</span>, show_column_dend = <span class="literal">F</span>, </span><br><span class="line">        col=red_green,</span><br><span class="line">        name=<span class="string">"Expression level"</span>,</span><br><span class="line">        row_order = sort(rownames(diff_genes_matrix)),</span><br><span class="line">        row_names_side = <span class="string">"left"</span>,</span><br><span class="line">        heatmap_width = unit(<span class="number">24</span>, <span class="string">"cm"</span>), heatmap_height = unit(<span class="number">8</span>, <span class="string">"cm"</span>),</span><br><span class="line">        top_annotation = columnAnnotation(link = anno_mark(at = c(<span class="number">33</span>), </span><br><span class="line">                                                           labels = labels,</span><br><span class="line">                                                           link_height = unit(<span class="number">4</span>, <span class="string">"mm"</span>)</span><br><span class="line">                                                           )</span><br><span class="line">                                          ),</span><br><span class="line">        left_annotation = ha,</span><br><span class="line">        heatmap_legend_param = list(color_bar = <span class="string">"continuous"</span>, </span><br><span class="line">                                    at = quantile(diff_genes_matrix, c(<span class="number">0</span>,<span class="number">1</span>)), </span><br><span class="line">                                    labels = c(<span class="string">"Min"</span>, <span class="string">"Max"</span>),legend_height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">                                    title_position = <span class="string">"leftcenter-rot"</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_anno_block.png" alt="complexheatmap_anno_block.png"></p><hr><h2 id="将不同的注释块分开"><a href="#将不同的注释块分开" class="headerlink" title="将不同的注释块分开"></a>将不同的注释块分开</h2><p>在上一步得到不同的注释块了之后可以进一步地将不同的注释块之间分开：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置分开的dataframe</span></span><br><span class="line">split = data.frame(rep(c(<span class="string">"A"</span>, <span class="string">"B"</span>,<span class="string">"C"</span>), each=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Heatmap中相关设置</span></span><br><span class="line"><span class="comment">## 设置分隔</span></span><br><span class="line">row_split = split,</span><br><span class="line"><span class="comment">## 去除分隔后添加的title：A、B、C</span></span><br><span class="line">row_title = <span class="literal">NULL</span>,</span><br><span class="line"><span class="comment">## 设置分隔的间隔大小</span></span><br><span class="line">row_gap = unit(<span class="number">5</span>, <span class="string">"mm"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整设置</span></span><br><span class="line">split = data.frame(rep(c(<span class="string">"A"</span>, <span class="string">"B"</span>,<span class="string">"C"</span>), each=<span class="number">3</span>))</span><br><span class="line">Heatmap(diff_genes_matrix, show_column_names = <span class="literal">FALSE</span>, </span><br><span class="line">        show_row_dend = <span class="literal">FALSE</span>, show_column_dend = <span class="literal">F</span>, </span><br><span class="line">        col=red_green,</span><br><span class="line">        name=<span class="string">"Expression level"</span>,</span><br><span class="line">        row_order = sort(rownames(diff_genes_matrix)),</span><br><span class="line">        row_names_side = <span class="string">"left"</span>,</span><br><span class="line">        heatmap_width = unit(<span class="number">24</span>, <span class="string">"cm"</span>), heatmap_height = unit(<span class="number">8</span>, <span class="string">"cm"</span>),</span><br><span class="line">        top_annotation = columnAnnotation(link = anno_mark(at = c(<span class="number">33</span>), </span><br><span class="line">                                                           labels = labels,</span><br><span class="line">                                                           link_height = unit(<span class="number">4</span>, <span class="string">"mm"</span>)</span><br><span class="line">                                                           )</span><br><span class="line">                                          ),</span><br><span class="line">        left_annotation = ha,</span><br><span class="line">        row_split = split,</span><br><span class="line">        row_title = <span class="literal">NULL</span>,</span><br><span class="line">        row_gap = unit(<span class="number">5</span>, <span class="string">"mm"</span>),</span><br><span class="line">        heatmap_legend_param = list(color_bar = <span class="string">"continuous"</span>, </span><br><span class="line">                                    at = quantile(diff_genes_matrix, c(<span class="number">0</span>,<span class="number">1</span>)), </span><br><span class="line">                                    labels = c(<span class="string">"Min"</span>, <span class="string">"Max"</span>),legend_height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">                                    title_position = <span class="string">"leftcenter-rot"</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_anno_block_split.png" alt="complexheatmap_anno_block_split.png"></p><hr><h2 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(ComplexHeatmap)</span><br><span class="line"><span class="keyword">library</span>(circlize)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对counts做了变换，log2(normalization + 1)</span></span><br><span class="line">diff_genes_matrix=t(as.matrix(log2(diff_genes_df+<span class="number">1</span>)))</span><br><span class="line">diff_genes_matrix</span><br><span class="line">            Cdh4   Sema6b    Meox1   Col1a1     Ell2    Tcea3   Arrdc2    Casq1    Bcl2l1   Piezo1   Mov10l1</span><br><span class="line">  BE_W_1 <span class="number">5.674636</span> <span class="number">8.992203</span> <span class="number">8.271125</span> <span class="number">10.80915</span> <span class="number">9.010202</span> <span class="number">10.84969</span> <span class="number">8.550702</span> <span class="number">6.719983</span> <span class="number">10.534402</span> <span class="number">9.251238</span>  <span class="number">9.815931</span></span><br><span class="line">  BE_W_3 <span class="number">6.278332</span> <span class="number">8.937379</span> <span class="number">7.755463</span> <span class="number">10.48085</span> <span class="number">8.901625</span> <span class="number">10.94128</span> <span class="number">8.931936</span> <span class="number">6.613638</span> <span class="number">10.654491</span> <span class="number">9.340083</span> <span class="number">10.054614</span></span><br><span class="line">  BE_W_6 <span class="number">6.053069</span> <span class="number">9.046550</span> <span class="number">8.143926</span> <span class="number">10.77555</span> <span class="number">9.108047</span> <span class="number">10.90593</span> <span class="number">9.411026</span> <span class="number">6.555065</span> <span class="number">10.923830</span> <span class="number">9.369440</span> <span class="number">10.122322</span></span><br><span class="line">  BE_C_2 <span class="number">6.970798</span> <span class="number">8.712448</span> <span class="number">7.825648</span> <span class="number">10.61191</span> <span class="number">8.854695</span> <span class="number">10.90589</span> <span class="number">8.221351</span> <span class="number">6.415780</span> <span class="number">10.006843</span> <span class="number">9.411790</span>  <span class="number">9.938315</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">labels = <span class="string">"Spp1"</span></span><br><span class="line"></span><br><span class="line">red_green=colorRamp2(breaks=c(min(diff_genes_matrix), </span><br><span class="line">                       mean(diff_genes_matrix), </span><br><span class="line">                       max(diff_genes_matrix)),</span><br><span class="line">                       colors=c(<span class="string">"red"</span>, <span class="string">"black"</span>, <span class="string">"green"</span>))</span><br><span class="line"></span><br><span class="line">df = data.frame(type = c(rep(<span class="string">"a"</span>, <span class="number">3</span>), rep(<span class="string">"b"</span>, <span class="number">3</span>), rep(<span class="string">"c"</span>, <span class="number">3</span>)))</span><br><span class="line">ha = rowAnnotation(df = df, col = list(type = c(<span class="string">"a"</span> = <span class="string">"red"</span>, <span class="string">"b"</span> = <span class="string">"blue"</span>,<span class="string">"c"</span>=<span class="string">"black"</span>)),show_legend = <span class="literal">F</span>,</span><br><span class="line">                   width = unit(<span class="number">1</span>, <span class="string">"cm"</span>),show_annotation_name = <span class="literal">F</span>,gap = unit(<span class="number">1</span>, <span class="string">"points"</span>))</span><br><span class="line"></span><br><span class="line">split = data.frame(rep(c(<span class="string">"A"</span>, <span class="string">"B"</span>,<span class="string">"C"</span>), each=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">Heatmap(diff_genes_matrix, show_column_names = <span class="literal">FALSE</span>, </span><br><span class="line">        show_row_dend = <span class="literal">FALSE</span>, show_column_dend = <span class="literal">F</span>, </span><br><span class="line">        col=red_green,</span><br><span class="line">        name=<span class="string">"Expression level"</span>,</span><br><span class="line">        row_order = sort(rownames(diff_genes_matrix)),</span><br><span class="line">        row_names_side = <span class="string">"left"</span>,</span><br><span class="line">        heatmap_width = unit(<span class="number">24</span>, <span class="string">"cm"</span>), heatmap_height = unit(<span class="number">8</span>, <span class="string">"cm"</span>),</span><br><span class="line">        top_annotation = columnAnnotation(link = anno_mark(at = c(<span class="number">33</span>), </span><br><span class="line">                                                           labels = labels,</span><br><span class="line">                                                           link_height = unit(<span class="number">4</span>, <span class="string">"mm"</span>)</span><br><span class="line">                                                           )</span><br><span class="line">                                          ),</span><br><span class="line">        left_annotation = ha,</span><br><span class="line">        row_split = split,</span><br><span class="line">        row_title = <span class="literal">NULL</span>,</span><br><span class="line">        row_gap = unit(<span class="number">2</span>, <span class="string">"mm"</span>),</span><br><span class="line">        heatmap_legend_param = list(color_bar = <span class="string">"continuous"</span>, </span><br><span class="line">                                    at = quantile(diff_genes_matrix, c(<span class="number">0</span>,<span class="number">1</span>)), </span><br><span class="line">                                    labels = c(<span class="string">"Min"</span>, <span class="string">"Max"</span>),legend_height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">                                    title_position = <span class="string">"leftcenter-rot"</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>最终版的图见上！</p><hr><h2 id="oncoPrint-适合展示突变"><a href="#oncoPrint-适合展示突变" class="headerlink" title="oncoPrint-适合展示突变"></a>oncoPrint-适合展示突变</h2><p><code>ComplexHeatmap</code>专门做了个<a href="https://jokergoo.github.io/ComplexHeatmap-reference/book/oncoprint.html#" target="_blank" rel="noopener">oncoPrint函数</a>来<strong>绘制突变相关信息</strong>，感觉和<a href="https://github.com/PoisonAlien/maftools" target="_blank" rel="noopener">maftools</a>的作用很类似，后续可以重点学习和使用一下。</p><h3 id="输入数据"><a href="#输入数据" class="headerlink" title="输入数据"></a>输入数据</h3><h4 id="使用分隔符分割的多种突变名称"><a href="#使用分隔符分割的多种突变名称" class="headerlink" title="使用分隔符分割的多种突变名称"></a>使用分隔符分割的多种突变名称</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">mat = read.table(textConnection(</span><br><span class="line">  <span class="string">"s1,s2,s3</span></span><br><span class="line"><span class="string">g1,snv;indel,snv,indel</span></span><br><span class="line"><span class="string">g2,,snv;indel,snv</span></span><br><span class="line"><span class="string">g3,snv,,indel;snv"</span>), row.names = <span class="number">1</span>, header = <span class="literal">TRUE</span>, sep = <span class="string">","</span>, stringsAsFactors = <span class="literal">FALSE</span>)</span><br><span class="line">mat = as.matrix(mat)</span><br><span class="line">mat</span><br><span class="line">                s1          s2          s3         </span><br><span class="line">        g1 <span class="string">"snv;indel"</span> <span class="string">"snv"</span>       <span class="string">"indel"</span>    </span><br><span class="line">        g2 <span class="string">""</span>          <span class="string">"snv;indel"</span> <span class="string">"snv"</span>      </span><br><span class="line">        g3 <span class="string">"snv"</span>       <span class="string">""</span>          <span class="string">"indel;snv"</span></span><br></pre></td></tr></table></figure><hr><h4 id="使用0-1表示的多个variant列表"><a href="#使用0-1表示的多个variant列表" class="headerlink" title="使用0/1表示的多个variant列表"></a>使用0/1表示的多个variant列表</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mat_list = list(snv = matrix(c(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>), nrow = <span class="number">3</span>),</span><br><span class="line">                indel = matrix(c(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), nrow = <span class="number">3</span>))</span><br><span class="line">rownames(mat_list$snv) = rownames(mat_list$indel) = c(<span class="string">"g1"</span>, <span class="string">"g2"</span>, <span class="string">"g3"</span>)</span><br><span class="line">colnames(mat_list$snv) = colnames(mat_list$indel) = c(<span class="string">"s1"</span>, <span class="string">"s2"</span>, <span class="string">"s3"</span>)</span><br><span class="line">mat_list</span><br><span class="line">        $snv</span><br><span class="line">           s1 s2 s3</span><br><span class="line">        g1  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line">        g2  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line">        g3  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        $indel</span><br><span class="line">           s1 s2 s3</span><br><span class="line">        g1  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">        g2  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line">        g3  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure><div class="note info"><p><code>oncoPrint()</code>要求<code>mat_list</code>中的<strong>所有元素都有相同的行名和列名</strong>，并且绘图也不用添加<code>get_type</code>参数。</p></div><hr><h3 id="得到突变类别"><a href="#得到突变类别" class="headerlink" title="得到突变类别"></a>得到突变类别</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例数据中一个基因可能同时存在多种突变类别，多种突变类别是使用;分割的</span></span><br><span class="line"><span class="comment"># 得到突变类别的方法</span></span><br><span class="line">get_type_fun = <span class="keyword">function</span>(x) strsplit(x, <span class="string">";"</span>)[[<span class="number">1</span>]]</span><br><span class="line">get_type_fun(mat[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">        [<span class="number">1</span>] <span class="string">"snv"</span>   <span class="string">"indel"</span></span><br></pre></td></tr></table></figure><div class="note info"><p>针对常见的一些分隔符，如<code>;</code>、<code>:</code>、<code>,</code>、<code>|</code>，<code>oncoPrint()</code>都会自动的将其分割，不用单独指定；如果自己数据中的分隔符不在常见分隔符中，需要自定义<code>get_type_fun</code>，并将其传递给<code>oncoPrint()</code>的<code>get_type</code>参数。</p></div><hr><h3 id="设置variant的颜色"><a href="#设置variant的颜色" class="headerlink" title="设置variant的颜色"></a>设置variant的颜色</h3><p>不同类型variant的颜色可以使用<code>oncoPrint()</code>的col参数进行设置，col参数是一个带名称的向量：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 带名称的向量</span></span><br><span class="line">col = c(snv = <span class="string">"red"</span>, indel = <span class="string">"blue"</span>)</span><br><span class="line">col</span><br><span class="line">        snv  indel </span><br><span class="line">        <span class="string">"red"</span> <span class="string">"blue"</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="设置variant的形状"><a href="#设置variant的形状" class="headerlink" title="设置variant的形状"></a>设置variant的形状</h3><p>一个样本的一个基因可能会存在多种突变形式，在画图的时候如果不做区别就会<strong>出现重叠</strong>的现象，<code>oncoPrint()</code>提供了<code>alter_fun</code>参数来修改不同突变的展示形状，便于区分。</p><p><code>alter_fun</code>可以是一个包含了逐层添加图形的函数列表(比如：先画snv的图层，接着画indel的图层)，这种情况下<code>alter_fun</code>中的函数应该包含四个参数：</p><ul><li><code>x</code>和<code>y</code>表示坐标位置：positions of the grids on the oncoPrint (x and y)</li><li><code>w</code>和<code>h</code>表示宽度和高度：widths and heights of the grids (w and h, which is measured in <code>npc unit</code>)</li></ul><p>同时，<code>alter_fun</code>也可以通过一个单一的函数来指定，这种情况下<code>alter_fun</code>不再是一个函数的列表，而是一个<strong>包含了五个参数的函数</strong>，增加的参数是<code>v</code>，这个参数是一个<strong>逻辑值</strong>，用于<strong>判断某个样本中的某个基因是不是包含了某个突变</strong>，其也是一个带名称的向量：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 某个样本的某个基因的v参数示例</span></span><br><span class="line"><span class="comment"># 只包括一个snv</span></span><br><span class="line">snv indel </span><br><span class="line"><span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure><p></p><p>使用<strong>函数列表</strong>以及<strong>使用单个函数</strong>的示例：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用函数列表，包含四个参数</span></span><br><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = list(</span><br><span class="line">        snv = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="literal">NA</span>)),</span><br><span class="line">        indel = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.4</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    ), col = col)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用单个函数，添加了v作为逻辑值来判断</span></span><br><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = <span class="keyword">function</span>(x, y, w, h, v) &#123;</span><br><span class="line">        <span class="keyword">if</span>(v[<span class="string">"snv"</span>]) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, <span class="comment"># v["snv"] is a logical value</span></span><br><span class="line">            gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">        <span class="keyword">if</span>(v[<span class="string">"indel"</span>]) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.4</span>, <span class="comment"># v["indel"] is a logical value</span></span><br><span class="line">            gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    &#125;, col = col)</span><br></pre></td></tr></table></figure><p></p><h4 id="关于grid的位置参数"><a href="#关于grid的位置参数" class="headerlink" title="关于grid的位置参数"></a>关于grid的位置参数</h4><p>因为绘图需要涉及到x、y、w、h四个grid绘图语法的参数，因为自身对grid语法并不是很了解，所以这里补充一下：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(grid)</span><br><span class="line">grid.show.viewport(viewport(</span><br><span class="line">  x = <span class="number">0.6</span>, y = <span class="number">0.6</span>,</span><br><span class="line">  w = unit(<span class="number">1</span>, <span class="string">"inches"</span>), h = unit(<span class="number">1</span>, <span class="string">"inches"</span>)</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_grid.png" alt="complexheatmap_oncoprint_grid.png"></p><p>从图形中可以看出，<code>(x,y)</code>其实是单个grid的中心点，其实这个主要是由参数<code>just</code>控制的，默认<code>just</code>为<code>centre</code>表明<code>(x,y)</code>位于grid的中心位置。</p><p>修改参数<code>just</code>值可以很明显看出来区别：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置(x,y)位于top，也就是上中</span></span><br><span class="line">grid.show.viewport(viewport(</span><br><span class="line">  x = <span class="number">0.6</span>, y = <span class="number">0.6</span>,</span><br><span class="line">  w = unit(<span class="number">1</span>, <span class="string">"inches"</span>), h = unit(<span class="number">1</span>, <span class="string">"inches"</span>),</span><br><span class="line">  just=<span class="string">"top"</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_grid_2.png" alt="complexheatmap_oncoprint_grid_2.png"></p><hr><h4 id="按比例绘图"><a href="#按比例绘图" class="headerlink" title="按比例绘图"></a>按比例绘图</h4><p>使用单个的函数来绘制图形可以更方便的定制化：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按比例画图</span></span><br><span class="line"><span class="comment"># 可以直接将mat替换为前面出现过的mat_list</span></span><br><span class="line">oncoPrint(mat,</span><br><span class="line">          alter_fun = <span class="keyword">function</span>(x, y, w, h, v) &#123;</span><br><span class="line">            n = sum(v)  <span class="comment"># how many alterations for current gene in current sample</span></span><br><span class="line">            h = h*<span class="number">0.9</span></span><br><span class="line">            <span class="comment"># use `names(which(v))` to correctly map between `v` and `col`</span></span><br><span class="line">            <span class="keyword">if</span>(n) grid.rect(x, y - h*<span class="number">0.5</span> + <span class="number">1</span>:n/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                            gp = gpar(fill = col[names(which(v))], col = <span class="literal">NA</span>), just = <span class="string">"top"</span>)</span><br><span class="line">          &#125;, col = col)</span><br></pre></td></tr></table></figure><p></p><p>解释一下：</p><ul><li><code>n = sum(v)</code>：某个样本在某个基因上的突变数目(不进行类别上的区分)</li><li><code>h = h*0.9</code>：设置的是每个图形显示的大小，后面的那个h应该是某个grid的完整大小，0.9倍用于分隔不同的基因。</li><li><strong>最后的if语句</strong>：假定是一个存在一个snv和一个indel的基因，此时的<code>n=2</code>，另个小grid的坐标分别是<code>(x,y)</code>、<code>(x,y+h/2)</code>，需要注意的是这里的<code>just</code>参数的值是<code>top</code>，也就是这里的坐标都是<strong>上中的坐标</strong>。</li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_pro_1.png" alt="complexheatmap_oncoprint_pro_1.png"></p><hr><h4 id="绘制三角形图案"><a href="#绘制三角形图案" class="headerlink" title="绘制三角形图案"></a>绘制三角形图案</h4><p>三角形图案的优点在于<strong>更加直观</strong>相比于成比例的块状图案，但是其<strong>表征的variant种类会更加少一些</strong>，因为一个grid分为两个三角形(更复杂的图案就比较难了)，而块状图案可以按比例分为很多小块；并且<strong>使用的话也就更加复杂一些</strong>，首先是要使用到<code>grid.polygon</code>这个函数，其主要是用于绘制多边形，用其来绘制三角形图案的时候需要提供的<code>x</code>和<code>y</code>都是<strong>三个参数的向量</strong>，所以比较复杂。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = list(</span><br><span class="line">        background = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">            grid.polygon(</span><br><span class="line">                <span class="comment"># unit.c(x - 0.5*w, x - 0.5*w, x + 0.5*w)是一组x的坐标，其中每个与后面的unit.c(y - 0.5*h, y + 0.5*h, y - 0.5*h)一一对应</span></span><br><span class="line">                unit.c(x - <span class="number">0.5</span>*w, x - <span class="number">0.5</span>*w, x + <span class="number">0.5</span>*w), </span><br><span class="line">                unit.c(y - <span class="number">0.5</span>*h, y + <span class="number">0.5</span>*h, y - <span class="number">0.5</span>*h),</span><br><span class="line">                gp = gpar(fill = <span class="string">"grey"</span>, col = <span class="string">"white"</span>))</span><br><span class="line">            grid.polygon(</span><br><span class="line">                unit.c(x + <span class="number">0.5</span>*w, x + <span class="number">0.5</span>*w, x - <span class="number">0.5</span>*w), </span><br><span class="line">                unit.c(y + <span class="number">0.5</span>*h, y - <span class="number">0.5</span>*h, y + <span class="number">0.5</span>*h),</span><br><span class="line">                gp = gpar(fill = <span class="string">"grey"</span>, col = <span class="string">"white"</span>))</span><br><span class="line">        &#125;,</span><br><span class="line">        snv = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">            grid.polygon(</span><br><span class="line">                unit.c(x - <span class="number">0.5</span>*w, x - <span class="number">0.5</span>*w, x + <span class="number">0.5</span>*w), </span><br><span class="line">                unit.c(y - <span class="number">0.5</span>*h, y + <span class="number">0.5</span>*h, y - <span class="number">0.5</span>*h),</span><br><span class="line">                gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="string">"white"</span>))</span><br><span class="line">        &#125;,</span><br><span class="line">        indel = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">            grid.polygon(</span><br><span class="line">                unit.c(x + <span class="number">0.5</span>*w, x + <span class="number">0.5</span>*w, x - <span class="number">0.5</span>*w), </span><br><span class="line">                unit.c(y + <span class="number">0.5</span>*h, y - <span class="number">0.5</span>*h, y + <span class="number">0.5</span>*h),</span><br><span class="line">                gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="string">"white"</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    ), col = col)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_tri.png" alt="complexheatmap_oncoprint_tri.png"></p><hr><h4 id="用于支持更多variant类型"><a href="#用于支持更多variant类型" class="headerlink" title="用于支持更多variant类型"></a>用于支持更多variant类型</h4><p>某个样本的某个基因出现多种突变类型是很常见的事，所以如何在单个grid中表征更多的突变类型就非常关键，<code>oncoPrint</code>针对这种情况设计了<code>test_alter_fun()</code>函数来查看设计的<code>alter_fun</code>形状。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">alter_fun = list(</span><br><span class="line">    mut1 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w, h, gp = gpar(fill = <span class="string">"red"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    mut2 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w, h, gp = gpar(fill = <span class="string">"blue"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    mut3 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w, h, gp = gpar(fill = <span class="string">"yellow"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    mut4 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w, h, gp = gpar(fill = <span class="string">"purple"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    mut5 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w, h, gp = gpar(fill = <span class="literal">NA</span>, lwd = <span class="number">2</span>)),</span><br><span class="line">    mut6 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.points(x, y, pch = <span class="number">16</span>),</span><br><span class="line">    mut7 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.segments(x - w*<span class="number">0.5</span>, y - h*<span class="number">0.5</span>, x + w*<span class="number">0.5</span>, y + h*<span class="number">0.5</span>, gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">)</span><br><span class="line">test_alter_fun(alter_fun)</span><br></pre></td></tr></table></figure><p></p><p>虽然下面这种给出了14中不同的组合类型，但是<strong>其实存在一些问题</strong>，比如<strong>前4中mut类型之间如果存在重叠的话就会出现相互遮挡的问题</strong>，比较好的解决方法就是使用前面的按比例分配。所以个人的想法是：<mark>纯色的用来表征不同的突变类型，然后剩下的几种框、点、线用于表征其他信息，比如表达值、CNV信息。</mark></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_test_alter_1.png" alt="complexheatmap_oncoprint_test_alter_1.png"></p><hr><h3 id="设置grid背景颜色"><a href="#设置grid背景颜色" class="headerlink" title="设置grid背景颜色"></a>设置grid背景颜色</h3><p>在以函数列表形式设置<code>alter_fun</code>参数的时候，不同的图形是按顺序加上了，所以如果想给每个grid添加背景的话可以在函数列表中第一个就添加一个<code>background</code>函数用于设置grid的背景颜色。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置背景颜色为light green，并且添加了框线</span></span><br><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = list(</span><br><span class="line">        background = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w, h, </span><br><span class="line">            gp = gpar(fill = <span class="string">"#00FF0020"</span>)),</span><br><span class="line">        snv = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="literal">NA</span>)),</span><br><span class="line">        indel = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.4</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    ), col = col)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_bg_2.png" alt="complexheatmap_oncoprint_bg_2.png"></p><p>如果想去除任何的框线以及颜色背景，可以将<code>background</code>设置为<code>NULL</code>:<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = list(</span><br><span class="line">        <span class="comment"># 设置背景为NULL</span></span><br><span class="line">        background = <span class="keyword">function</span>(<span class="keyword">...</span>) <span class="literal">NULL</span>,</span><br><span class="line">        snv = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="literal">NA</span>)),</span><br><span class="line">        indel = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.4</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    ), col = col)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_bg_1.png" alt="complexheatmap_oncoprint_bg_1.png"></p><hr><h3 id="按重要性绘制图层"><a href="#按重要性绘制图层" class="headerlink" title="按重要性绘制图层"></a>按重要性绘制图层</h3><p>在绘图时有些信息是主要信息，有些信息可能是次要信息，但是都是必须要展示的图形，这种情况下其实就是前面<a href="#%e7%94%a8%e4%ba%8e%e6%94%af%e6%8c%81%e6%9b%b4%e5%a4%9avariant%e7%b1%bb%e5%9e%8b">用于支持更多variant类型</a>最后我提到的用纯色表示不同的突变类型，然后剩下的几种框、点、线用于表征其他信息，比如表达值、CNV信息。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成虚拟数据</span></span><br><span class="line">set.seed(<span class="number">123</span>)</span><br><span class="line">x1 = sample(c(<span class="string">""</span>, <span class="string">"snv"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">8</span>, <span class="number">2</span>))</span><br><span class="line">x2 = sample(c(<span class="string">""</span>, <span class="string">"indel"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">8</span>, <span class="number">2</span>))</span><br><span class="line">x2[x1 == <span class="string">"snv"</span>] = <span class="string">""</span></span><br><span class="line">x3 = sample(c(<span class="string">""</span>, <span class="string">"intronic"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">x4 = sample(c(<span class="string">""</span>, <span class="string">"exonic"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">x3[x1 == <span class="string">""</span> &amp; x2 == <span class="string">""</span>] = <span class="string">""</span></span><br><span class="line">x4[x1 == <span class="string">""</span> &amp; x2 == <span class="string">""</span>] = <span class="string">""</span></span><br><span class="line">x4[x3 == <span class="string">"intronic"</span>] = <span class="string">""</span></span><br><span class="line">x = apply(cbind(x1, x2, x3, x4), <span class="number">1</span>, <span class="keyword">function</span>(x) &#123;</span><br><span class="line">    x = x[x != <span class="string">""</span>]</span><br><span class="line">    paste(x, collapse = <span class="string">";"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">m = matrix(x, nrow = <span class="number">10</span>, ncol = <span class="number">10</span>, dimnames = list(paste0(<span class="string">"g"</span>, <span class="number">1</span>:<span class="number">10</span>), paste0(<span class="string">"s"</span>, <span class="number">1</span>:<span class="number">10</span>)))</span><br><span class="line">m[<span class="number">1</span>:<span class="number">4</span>, <span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">           s1    s2             s3             s4            </span><br><span class="line">        g1 <span class="string">""</span>    <span class="string">"snv;intronic"</span> <span class="string">"snv;intronic"</span> <span class="string">"snv"</span>         </span><br><span class="line">        g2 <span class="string">""</span>    <span class="string">""</span>             <span class="string">""</span>             <span class="string">"snv;intronic"</span></span><br><span class="line">        g3 <span class="string">""</span>    <span class="string">""</span>             <span class="string">""</span>             <span class="string">""</span>            </span><br><span class="line">        g4 <span class="string">"snv"</span> <span class="string">"indel;exonic"</span> <span class="string">"snv"</span>          <span class="string">""</span>      </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置alter_fun</span></span><br><span class="line">alter_fun = list(</span><br><span class="line">    background = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, gp = gpar(fill = <span class="string">"#CCCCCC"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    <span class="comment"># red rectangles</span></span><br><span class="line">    snv = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, gp = gpar(fill = <span class="string">"red"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    <span class="comment"># blue rectangles</span></span><br><span class="line">    indel = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, gp = gpar(fill = <span class="string">"blue"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    <span class="comment"># dots</span></span><br><span class="line">    intronic = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.points(x, y, pch = <span class="number">16</span>),</span><br><span class="line">    <span class="comment"># crossed lines</span></span><br><span class="line">    exonic = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">        grid.segments(x - w*<span class="number">0.4</span>, y - h*<span class="number">0.4</span>, x + w*<span class="number">0.4</span>, y + h*<span class="number">0.4</span>, gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">        grid.segments(x + w*<span class="number">0.4</span>, y - h*<span class="number">0.4</span>, x - w*<span class="number">0.4</span>, y + h*<span class="number">0.4</span>, gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终绘图</span></span><br><span class="line"><span class="comment"># we only define color for snv and indel, so barplot annotations only show snv and indel</span></span><br><span class="line">ht = oncoPrint(m, alter_fun = alter_fun, col = c(snv = <span class="string">"red"</span>, indel = <span class="string">"blue"</span>))</span><br><span class="line">draw(ht, heatmap_legend_list = list(</span><br><span class="line">    Legend(labels = c(<span class="string">"intronic"</span>, <span class="string">"exonic"</span>), type = <span class="string">"points"</span>, pch = c(<span class="number">16</span>, <span class="number">28</span>))</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_intron_exon_1.png" alt="complexheatmap_oncoprint_intron_exon_1.png"></p><p>在单个函数中实现上述类似的用法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">oncoPrint(mat_list,</span><br><span class="line">          alter_fun = <span class="keyword">function</span>(x, y, w, h, v) &#123;</span><br><span class="line">            n = sum(v)  <span class="comment"># how many alterations for current gene in current sample</span></span><br><span class="line">            h = h*<span class="number">0.9</span></span><br><span class="line">            <span class="comment"># use `names(which(v))` to correctly map between `v` and `col`</span></span><br><span class="line">            <span class="keyword">if</span>(n) grid.rect(x, y - h*<span class="number">0.5</span> + <span class="number">1</span>:n/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                            gp = gpar(fill = col[names(which(v))], col = <span class="literal">NA</span>), just = <span class="string">"top"</span>)</span><br><span class="line">            <span class="comment"># 判断总的variant的数目，用于得到正确的坐标</span></span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">            <span class="comment"># 判断snv类型是不是存在，如果存在indel就会在上层，如果不存在indel就会出现在下层(存在第三种突变的情况)</span></span><br><span class="line">            flag_log=<span class="number">0</span></span><br><span class="line">            <span class="comment"># 因为原始的数据中，snv出现在indel之前，所以在indel上增加各种操作会比较麻烦</span></span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> names(v))&#123;</span><br><span class="line">              <span class="keyword">if</span> (i ==<span class="string">"snv"</span> &amp; v[i]) &#123;</span><br><span class="line">                grid.rect(x, y - h*<span class="number">0.5</span> + flag/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                                              gp = gpar(fill = <span class="literal">NA</span>, lwd = <span class="number">2</span>), just = <span class="string">"top"</span>)</span><br><span class="line">                <span class="comment"># 在snv上实现画斜线还是很简单的</span></span><br><span class="line">                grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                              y - h*<span class="number">0.5</span>,</span><br><span class="line">                              x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                              y - h*<span class="number">0.5</span> + <span class="number">1</span>/n*h, </span><br><span class="line">                              gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">                flag=flag+<span class="number">1</span></span><br><span class="line">                flag_log=<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment"># 在indel上实现画斜线就很复杂</span></span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span>(flag_log)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i ==<span class="string">"indel"</span> &amp; v[i] &amp; n==<span class="number">2</span>) &#123;</span><br><span class="line">                  grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y - h*<span class="number">0.5</span> + <span class="number">1</span>/n*h,</span><br><span class="line">                                x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y + h*<span class="number">0.5</span>, </span><br><span class="line">                                gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">              &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i ==<span class="string">"indel"</span> &amp; v[i]) &#123;</span><br><span class="line">                  grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y - h*<span class="number">0.5</span> + <span class="number">1</span>/n*h,</span><br><span class="line">                                x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y + h*<span class="number">0.5</span> - <span class="number">1</span>/n*h, </span><br><span class="line">                                gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span>(flag_log==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i ==<span class="string">"indel"</span> &amp; v[i] &amp; n==<span class="number">1</span>) &#123;</span><br><span class="line">                  grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y - h*<span class="number">0.5</span>,</span><br><span class="line">                                x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y + h*<span class="number">0.5</span>, </span><br><span class="line">                                gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i ==<span class="string">"indel"</span> &amp; v[i] &amp; n&gt;<span class="number">1</span>) &#123;</span><br><span class="line">                  grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y - h*<span class="number">0.5</span>,</span><br><span class="line">                                x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y - h*<span class="number">0.5</span> + <span class="number">1</span>/n*h, </span><br><span class="line">                                gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, col = col)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_intron_exon_2.png" alt="complexheatmap_oncoprint_intron_exon_2.png"></p><p>在indel上仅添加框线会更加简单一些：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">oncoPrint(mat_list,</span><br><span class="line">          alter_fun = <span class="keyword">function</span>(x, y, w, h, v) &#123;</span><br><span class="line">            n = sum(v)  <span class="comment"># how many alterations for current gene in current sample</span></span><br><span class="line">            h = h*<span class="number">0.9</span></span><br><span class="line">            <span class="comment"># use `names(which(v))` to correctly map between `v` and `col`</span></span><br><span class="line">            <span class="keyword">if</span>(n) grid.rect(x, y - h*<span class="number">0.5</span> + <span class="number">1</span>:n/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                            gp = gpar(fill = col[names(which(v))], col = <span class="literal">NA</span>), just = <span class="string">"top"</span>)</span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> names(v))&#123;</span><br><span class="line">              <span class="keyword">if</span> (i ==<span class="string">"snv"</span> &amp; v[i]) &#123;</span><br><span class="line">                grid.rect(x, y - h*<span class="number">0.5</span> + flag/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                                              gp = gpar(fill = <span class="literal">NA</span>, lwd = <span class="number">2</span>), just = <span class="string">"top"</span>)</span><br><span class="line">                grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                              y - h*<span class="number">0.5</span>,</span><br><span class="line">                              x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                              y - h*<span class="number">0.5</span> + <span class="number">1</span>/n*h, </span><br><span class="line">                              gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">                flag=flag+<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (i ==<span class="string">"indel"</span> &amp; v[i])&#123;</span><br><span class="line">                grid.rect(x, y - h*<span class="number">0.5</span> + flag/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                          gp = gpar(fill = <span class="literal">NA</span>, lwd = <span class="number">2</span>), just = <span class="string">"top"</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, col = col)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_intron_exon_3.png" alt="complexheatmap_oncoprint_intron_exon_3.png"></p><hr><h3 id="其他相关参数"><a href="#其他相关参数" class="headerlink" title="其他相关参数"></a>其他相关参数</h3><ul><li><strong>控制列名(通常是样本名)</strong>：默认情况是<strong>不会显示</strong>的，可以通过参数<code>show_column_names = TRUE</code>来显示</li><li><strong>控制行名(通常是基因名)</strong>：默认情况是<strong>显示</strong>的，可以通过参数<code>show_row_names</code>来控制</li><li><strong>控制百分比</strong>：默认情况是显示的，可以通过参数<code>show_pct</code>来控制</li><li><strong>控制行名和百分比的显示方位</strong>：<code>pct_side</code>、<code>row_names_side</code></li><li><strong>控制百分比的小数点位数</strong>：<code>pct_digits</code></li><li><strong>控制barplot</strong>：<code>anno_oncoprint_barplot()</code>，具体示例请看帮助文档。</li><li><code>oncoPrint</code>也是热图，所以<strong>所有热图的参数这里也能使用</strong>，比如控制<code>legend</code>的参数<code>heatmap_legend_param</code></li><li><strong>删除没有突变的行或者列</strong>：默认情况下即使某行或者某列是没有突变也会显示出来，但是可以通过设置<code>remove_empty_columns</code>和<code>remove_empty_rows</code>为<code>TRUE</code>来进行删除。<strong>删除空行或者空列的操作最好在使用<code>oncoPrint</code>函数之前进行操作</strong>，防止在将<code>oncoPrint</code>结果和其他热图进行并列显示的时候出现问题。</li><li><strong>对行或者列重新排序</strong>：和前面热图的函数相同，可以使用<code>row_order</code>和<code>column_order</code>来控制进行控制。s</li></ul><h3 id="复杂oncoprint示例"><a href="#复杂oncoprint示例" class="headerlink" title="复杂oncoprint示例"></a>复杂oncoprint示例</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入数据准备</span></span><br><span class="line">mat = read.table(system.file(<span class="string">"extdata"</span>, package = <span class="string">"ComplexHeatmap"</span>, </span><br><span class="line">                             <span class="string">"tcga_lung_adenocarcinoma_provisional_ras_raf_mek_jnk_signalling.txt"</span>), </span><br><span class="line">                 header = <span class="literal">TRUE</span>, stringsAsFactors = <span class="literal">FALSE</span>, sep = <span class="string">"\t"</span>)</span><br><span class="line">mat[is.na(mat)] = <span class="string">""</span></span><br><span class="line">rownames(mat) = mat[, <span class="number">1</span>]</span><br><span class="line">mat = mat[, -<span class="number">1</span>]</span><br><span class="line">mat=  mat[, -ncol(mat)]</span><br><span class="line">mat = t(as.matrix(mat))</span><br><span class="line">mat[<span class="number">1</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">            TCGA-<span class="number">05</span>-<span class="number">4384</span>-<span class="number">01</span> TCGA-<span class="number">05</span>-<span class="number">4390</span>-<span class="number">01</span> TCGA-<span class="number">05</span>-<span class="number">4425</span>-<span class="number">01</span></span><br><span class="line">        KRAS <span class="string">"  "</span>            <span class="string">"MUT;"</span>          <span class="string">"  "</span>           </span><br><span class="line">        HRAS <span class="string">"  "</span>            <span class="string">"  "</span>            <span class="string">"  "</span>           </span><br><span class="line">        BRAF <span class="string">"  "</span>            <span class="string">"  "</span>            <span class="string">"  "</span>   </span><br><span class="line"><span class="comment"># 设置alter_fun</span></span><br><span class="line">col = c(<span class="string">"HOMDEL"</span> = <span class="string">"blue"</span>, <span class="string">"AMP"</span> = <span class="string">"red"</span>, <span class="string">"MUT"</span> = <span class="string">"#008000"</span>)</span><br><span class="line">alter_fun = list(</span><br><span class="line">  background = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), </span><br><span class="line">              gp = gpar(fill = <span class="string">"#CCCCCC"</span>, col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># big blue</span></span><br><span class="line">  HOMDEL = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), </span><br><span class="line">              gp = gpar(fill = col[<span class="string">"HOMDEL"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># bug red</span></span><br><span class="line">  AMP = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), </span><br><span class="line">              gp = gpar(fill = col[<span class="string">"AMP"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># small green</span></span><br><span class="line">  MUT = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h*<span class="number">0.33</span>, </span><br><span class="line">              gp = gpar(fill = col[<span class="string">"MUT"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">column_title = <span class="string">"OncoPrint for TCGA Lung Adenocarcinoma, genes in Ras Raf MEK JNK signalling"</span></span><br><span class="line">heatmap_legend_param = list(title = <span class="string">"Alternations"</span>, at = c(<span class="string">"HOMDEL"</span>, <span class="string">"AMP"</span>, <span class="string">"MUT"</span>), </span><br><span class="line">                            labels = c(<span class="string">"Deep deletion"</span>, <span class="string">"Amplification"</span>, <span class="string">"Mutation"</span>))</span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">oncoPrint(mat,</span><br><span class="line">          alter_fun = alter_fun, col = col, </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,</span><br><span class="line">          <span class="comment"># 这里添加了三个注释，一个是bar图</span></span><br><span class="line">          <span class="comment"># 一个是1到172的热图，其实172是样本的数目</span></span><br><span class="line">          top_annotation = HeatmapAnnotation(cbar = anno_oncoprint_barplot(),</span><br><span class="line">                                             foo1 = <span class="number">1</span>:<span class="number">172</span>,</span><br><span class="line">                                             bar1 = anno_points(<span class="number">1</span>:<span class="number">172</span>)),</span><br><span class="line">          left_annotation = rowAnnotation(foo2 = <span class="number">1</span>:<span class="number">26</span>),</span><br><span class="line">          <span class="comment"># 26为基因的数目</span></span><br><span class="line">          right_annotation = rowAnnotation(bar2 = anno_barplot(<span class="number">1</span>:<span class="number">26</span>)),</span><br><span class="line">          column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_complex_1.png" alt="complexheatmap_oncoprint_complex_1.png"></p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://jokergoo.github.io/ComplexHeatmap-reference/book/index.html" target="_blank" rel="noopener">ComplexHeatmap-reference</a></li><li><a href="https://www.xiangyunhuang.com.cn/2019/08/grid/" target="_blank" rel="noopener">grid-栅格图形系统</a></li><li><a href="https://www.01hai.com/note/av133949" target="_blank" rel="noopener">R实战 第七篇：网格（grid）</a></li><li><a href="https://www.jianshu.com/nb/31400432" target="_blank" rel="noopener">ComplexHeatmap学习笔记系列</a></li><li><a href="https://www.jianshu.com/p/42adf881e587" target="_blank" rel="noopener">【r&lt;-包】ComplexHeatmap</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要学习了使用&lt;code&gt;ComplexHeatmap&lt;/code&gt;来绘制想要的热图的过程，首先以&lt;strong&gt;绘制差异表达基因的热图&lt;/strong&gt;为例学习了常规热图的绘制方法，后续又&lt;strong&gt;详细学习了使用&lt;code&gt;oncoPrint&lt;/code&gt;绘制突变谱的方法&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R系列之在函数中保存图片</title>
    <link href="http://showteeth.tech/posts/55762.html"/>
    <id>http://showteeth.tech/posts/55762.html</id>
    <published>2019-12-06T02:13:04.000Z</published>
    <updated>2020-01-08T15:26:05.289Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了<strong>在函数中</strong>保存<code>ggplot2</code>绘制的图像的方法：使用<code>ggsave</code>，因为使用常规的<code>pdf()+dev.off()</code>不能在函数中保存图片。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近想把日常工作用经常需要使用的一些代码写成函数，其中包括一些生成图片的过程，但是使用之前的<code>pdf()+dev.off()</code>的方法不能得到想要的结果，最后得到的图片只有3.6K，这显然是不对的，这篇文章记录了<strong>如果解决在函数中不出图的问题</strong>。</p><h2 id="保存各种图片"><a href="#保存各种图片" class="headerlink" title="保存各种图片"></a>保存各种图片</h2><p>正常情况下可以使用<code>pdf()</code>, <code>png()</code>, <code>jpeg()</code>, <code>tiff()</code>等加上<code>dev.off()</code>来保存图片，这种可以保存各种绘图工具绘制的图片，这也是我一直使用的工具。</p><p><strong>针对ggplot2绘制的图片</strong>，可以使用<code>ggsave</code>，看着带着gg两个字母就知道这是<code>ggplot2</code>的亲儿子，这里解决问题就是用的<code>ggsave</code>，其默认会保存最后一次展示的图片，当然也可以使用<code>plot =</code>来指定：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ggsave(filename, plot = last_plot(), device = <span class="literal">NULL</span>, path = <span class="literal">NULL</span>,</span><br><span class="line">  scale = <span class="number">1</span>, width = <span class="literal">NA</span>, height = <span class="literal">NA</span>, units = c(<span class="string">"in"</span>, <span class="string">"cm"</span>, <span class="string">"mm"</span>),</span><br><span class="line">  dpi = <span class="number">300</span>, limitsize = <span class="literal">TRUE</span>, <span class="keyword">...</span>)</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>如果图片不是使用<code>ggplot2</code>绘制的，也可以使用<a href="https://cran.r-project.org/web/packages/ggplotify/vignettes/ggplotify.html" target="_blank" rel="noopener">ggplotify</a>包中的<code>as.ggplot</code>函数将其转化为<code>ggplot</code>对象.</p></div><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">Save a ggplot (or other grid object) with sensible defaults</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了&lt;strong&gt;在函数中&lt;/strong&gt;保存&lt;code&gt;ggplot2&lt;/code&gt;绘制的图像的方法：使用&lt;code&gt;ggsave&lt;/code&gt;，因为使用常规的&lt;code&gt;pdf()+dev.off()&lt;/code&gt;不能在函数中保存图片。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之eval和exec用法</title>
    <link href="http://showteeth.tech/posts/1474.html"/>
    <id>http://showteeth.tech/posts/1474.html</id>
    <published>2019-12-02T09:37:28.000Z</published>
    <updated>2020-01-31T04:35:22.448Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章起源于<a href="http://showteeth.tech/posts/14356.html">R系列之将字符串转化为变量</a>，主要学习了<code>Python</code>中将字符串转换为变量相关的两个函数<code>eval</code>和<code>exec</code>。<code>eval</code>可以得到字符串对应的变量的值，并且可以执行简单的计算，返回计算得到的结果，但是不能包括赋值和循环等操作；而<code>exec</code>可以执行复杂的计算，可以包括赋值和循环，但是返回值始终是<code>None</code>，不会是计算得到的结果。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这篇文章对应的是<a href="http://showteeth.tech/posts/14356.html">R系列之将字符串转化为变量</a></p><h2 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h2><h3 id="eval函数的作用"><a href="#eval函数的作用" class="headerlink" title="eval函数的作用"></a>eval函数的作用</h3><p><strong>计算</strong>指定表达式的值，这里的关键词是计算，其主要有以下几个要点：</p><ul><li>可以是<strong>常规的数值计算</strong>，如将变量进行替换然后进行计算：<code>print(eval(&quot;a+1&quot;))</code>，需要注意的是这里的计算是简单的计算，包括了<code>__builtins__</code>中的一些函数，<a href="#%e5%be%97%e5%88%b0%e5%ad%97%e7%ac%a6%e4%b8%b2%e8%a1%a8%e8%be%be%e5%bc%8f%e7%9a%84%e5%80%bc">具体列表如下</a>，所以<strong>计算的表达式中不支持复杂的代码逻辑，例如赋值操作、循环语句等等</strong>。</li><li>可以是<strong>解析字符串</strong>，这里的解析简单来说就是<strong>将字符串的引号去掉，得到对应的数据结构</strong>，如<code>eval(&quot;[[1,2], [3,4], [5,6], [7,8], [9,0]]&quot;)</code></li><li>注意和<a href="http://showteeth.tech/posts/14356.html">R中的get函数</a>的区别，<code>get</code>强调的是获取、得到值，不会通过计算；而这里的<code>eval</code>函数的作用包含上述<code>get</code>的作用，并且也会进行变量替换和计算，<strong>起到了部分<code>R</code>中<code>assign</code>的作用</strong>，但是存在局限：<strong>不能赋值</strong>以及<strong>不能执行复杂的计算</strong>，如读取文件。</li></ul><hr><h3 id="eval用法及参数"><a href="#eval用法及参数" class="headerlink" title="eval用法及参数"></a>eval用法及参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(expression[, globals[, locals]])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>expression</code>：<strong>字符串表示的表达式，该表达式会被解析并求值</strong>，该表达式中的参数的命名空间可以使用后面的<code>globals</code>和<code>locals</code>进行限定</li><li><code>globals</code>：变量作用域，<strong>全局</strong>命名空间(存放全局变量)，如果提供，则<strong>必须是一个字典对象</strong><ul><li>可以使用<code>__builtins__</code>的一些函数对<code>expression</code>进行解析，如<code>abs</code>、<code>int</code>、<code>str</code>等。</li><li><strong>If the globals dictionary is present and does not contain a value for the key <code>__builtins__</code></strong>, a reference to the dictionary of the <code>built-in module builtins</code> is inserted under that key before expression is parsed.</li></ul></li><li><code>locals</code>：变量作用域，<strong>局部</strong>命名空间(存放局部变量)，如果被提供，<strong>可以是任何映射对象</strong>。当它和<code>globals</code>中有重复的部分时，<code>locals</code>里的定义会覆盖掉<code>globals</code>中的，也就是<strong>当<code>globals</code>和<code>locals</code>中有冲突的部分时，<code>locals</code>说了算，它有决定权，以它的为准</strong>。如果<code>locals</code>没有被提供的话，则默认为<code>globals</code>。</li><li><code>shell</code>中也有<code>eval</code>命令，可以参考<a href="http://showteeth.tech/posts/13990.html">shell系列之eval、printf和组合数</a></li></ul><hr><h3 id="eval具体用法"><a href="#eval具体用法" class="headerlink" title="eval具体用法"></a>eval具体用法</h3><h4 id="得到字符串表达式的值"><a href="#得到字符串表达式的值" class="headerlink" title="得到字符串表达式的值"></a>得到字符串表达式的值</h4><p>这个功能类似于<a href="http://showteeth.tech/posts/14356.html">R系列之将字符串转化为变量</a>中的<code>get</code>函数，但是<strong>也存在区别</strong>，<mark>R中的get函数只能得到字符串对应的变量的值，并不能对字符串进行运算，但是这里的eval可以先得到字符串对应的值，然后进行运算。</mark><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br><span class="line"><span class="comment"># 这里并没有指定globals和locals参数</span></span><br><span class="line"><span class="comment"># 使用的当前作用域，也就是a=10</span></span><br><span class="line">print(eval(<span class="string">"a+1"</span>))</span><br><span class="line">  <span class="number">11</span></span><br><span class="line"><span class="comment"># 使用内建模块中的abs函数进行运算</span></span><br><span class="line">s=<span class="string">'abs(10)'</span></span><br><span class="line">print(eval(s))</span><br><span class="line"> <span class="number">10</span></span><br><span class="line"><span class="comment"># __builtins__模块包含的内容</span></span><br><span class="line">print(dir(__builtins__))</span><br><span class="line">  [<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>, <span class="string">'BlockingIOError'</span>, <span class="string">'BrokenPipeError'</span>, <span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>, <span class="string">'ChildProcessError'</span>, <span class="string">'ConnectionAbortedError'</span>, <span class="string">'ConnectionError'</span>, <span class="string">'ConnectionRefusedError'</span>, <span class="string">'ConnectionResetError'</span>, <span class="string">'DeprecationWarning'</span>, <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>, <span class="string">'FileExistsError'</span>, <span class="string">'FileNotFoundError'</span>, <span class="string">'FloatingPointError'</span>, <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>, <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'InterruptedError'</span>, <span class="string">'IsADirectoryError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>, <span class="string">'MemoryError'</span>, <span class="string">'ModuleNotFoundError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotADirectoryError'</span>, <span class="string">'NotImplemented'</span>, <span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>, <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'PermissionError'</span>, <span class="string">'ProcessLookupError'</span>, <span class="string">'RecursionError'</span>, <span class="string">'ReferenceError'</span>, <span class="string">'ResourceWarning'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>, <span class="string">'StopAsyncIteration'</span>, <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>, <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>, <span class="string">'TimeoutError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>, <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>, <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>, <span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'__IPYTHON__'</span>, <span class="string">'__build_class__'</span>, <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'abs'</span>, <span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'ascii'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'breakpoint'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>, <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>, <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'display'</span>, <span class="string">'divmod'</span>, <span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'get_ipython'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>, <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>, <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>, <span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>, <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>, <span class="string">'range'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>, <span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'vars'</span>, <span class="string">'zip'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义globals</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">g=&#123;<span class="string">'a'</span>:<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 此时的作用域是g，前面的a=10被屏蔽掉了</span></span><br><span class="line">print(eval(<span class="string">"a+1"</span>,g))</span><br><span class="line">  <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时定义globals和locals</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line">c=<span class="number">30</span></span><br><span class="line">g=&#123;<span class="string">'a'</span>:<span class="number">6</span>,<span class="string">'b'</span>:<span class="number">8</span>&#125;</span><br><span class="line">t=&#123;<span class="string">'b'</span>:<span class="number">100</span>,<span class="string">'c'</span>:<span class="number">10</span>&#125;</span><br><span class="line"><span class="comment"># globals和locals中存在冲突的b值，以locals中的为准</span></span><br><span class="line"><span class="comment"># 所以是t中的b、c和g中的a相加</span></span><br><span class="line">print(eval(<span class="string">'a+b+c'</span>,g,t))</span><br><span class="line">  <span class="number">116</span></span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>作用域的优先级：<strong><code>locals</code>&gt;<code>globals</code>&gt;<code>默认的globals</code></strong></p></div><hr><h4 id="将字符串转换为列表、字典和元组"><a href="#将字符串转换为列表、字典和元组" class="headerlink" title="将字符串转换为列表、字典和元组"></a>将字符串转换为列表、字典和元组</h4><p><strong>当<code>eval</code>解析表达式的时候发现去除引号(字符串标志；同时存在单双引号会先去除同一级的，不同同时去除)之后并不能进行进一步的计算，那么就会将去除引号之后的内容进行输出，从而可以得到列表、字典和元组等各种数据结构</strong>。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去除单层引号</span></span><br><span class="line">a=<span class="string">'"sas"'</span></span><br><span class="line">b=eval(a)</span><br><span class="line">  <span class="string">'sas'</span></span><br><span class="line">type(b)</span><br><span class="line">  str</span><br><span class="line"><span class="comment"># 将字符串转换为列表</span></span><br><span class="line">a = <span class="string">"[[1,2], [3,4], [5,6], [7,8], [9,0]]"</span></span><br><span class="line">b = eval(a)</span><br><span class="line">b</span><br><span class="line">  [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">0</span>]]</span><br><span class="line">type(b)</span><br><span class="line">  list</span><br><span class="line"><span class="comment"># 将字符串转换为字典</span></span><br><span class="line">a = <span class="string">"&#123;1: 'a', 2: 'b'&#125;"</span></span><br><span class="line">b = eval(a)</span><br><span class="line">b</span><br><span class="line">  &#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>&#125;</span><br><span class="line">type(b)</span><br><span class="line">  dict</span><br><span class="line"><span class="comment"># 将字符串转换为元组</span></span><br><span class="line">a = <span class="string">"([1,2], [3,4], [5,6], [7,8], (9,0))"</span></span><br><span class="line">b = eval(a)</span><br><span class="line">b</span><br><span class="line">  ([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], (<span class="number">9</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="exec函数"><a href="#exec函数" class="headerlink" title="exec函数"></a>exec函数</h2><h3 id="exec函数的作用"><a href="#exec函数的作用" class="headerlink" title="exec函数的作用"></a>exec函数的作用</h3><p>动态执行Python代码。<mark>也就是说<code>exec</code>可以执行复杂的Python代码，而不像<code>eval</code>函数那么样只能计算一个表达式的值。需要注意的是<code>exec</code>的<strong>返回值</strong>永远都是<code>None</code></mark></p><hr><h3 id="exec用法及参数"><a href="#exec用法及参数" class="headerlink" title="exec用法及参数"></a>exec用法及参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(object[, globals[, locals]])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>object：必选参数，表示需要被指定的Python代码。它<strong>必须是字符串或code对象</strong>。如果<strong>object是一个字符串</strong>，该字符串会<strong>先被解析为一组Python语句，然后再执行（除非发生语法错误）</strong>。如果<strong>object是一个code对象</strong>，那么它<strong>只是被简单的执行</strong>。</li><li><code>globals</code>和<code>locals</code>同上</li></ul><hr><h3 id="exec具体用法"><a href="#exec具体用法" class="headerlink" title="exec具体用法"></a>exec具体用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用的是当前的工作域</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">20</span></span><br><span class="line">exec(<span class="string">"answer=x+y"</span>)</span><br><span class="line">answer</span><br><span class="line">  <span class="number">30</span></span><br><span class="line"><span class="comment">## 得到列表</span></span><br><span class="line">a = <span class="string">"my_list=[[1,2], [3,4], [5,6], [7,8], [9,0]]"</span></span><br><span class="line">exec(a)</span><br><span class="line">my_list</span><br><span class="line">  [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定globals参数</span></span><br><span class="line">exec(<span class="string">"answer=x+y"</span>,&#123;<span class="string">"x"</span>:<span class="number">1</span>,<span class="string">"y"</span>:<span class="number">1</span>&#125;)</span><br><span class="line">answer</span><br><span class="line">  <span class="number">30</span></span><br><span class="line"><span class="comment">## 上面的输出结果还是30，和认知不符，肯定是某个地方出现了问题</span></span><br><span class="line">exec(<span class="string">"answer=x+y\nprint(answer)"</span>,&#123;<span class="string">"x"</span>:<span class="number">1</span>,<span class="string">"y"</span>:<span class="number">1</span>&#125;)</span><br><span class="line">answer</span><br><span class="line">  <span class="number">2</span></span><br><span class="line">  <span class="number">30</span></span><br><span class="line"><span class="comment">## 原因：指定globals之后，参数的工作域就不是当前工作域了，输出的结果还是直接当前工作域计算的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定globals参数的同时指定locals参数</span></span><br><span class="line">exec(<span class="string">"answer=x+y\nprint(answer)"</span>,&#123;<span class="string">"x"</span>:<span class="number">1</span>,<span class="string">"y"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"x"</span>:<span class="number">5</span>,<span class="string">"y"</span>:<span class="number">6</span>&#125;)</span><br><span class="line">  <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 汇总</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="comment">## 这里是字符串形式的代码</span></span><br><span class="line">expr = <span class="string">"""</span></span><br><span class="line"><span class="string">z = 30</span></span><br><span class="line"><span class="string">sum = x + y + z</span></span><br><span class="line"><span class="string">print(sum)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">20</span></span><br><span class="line">    exec(expr)</span><br><span class="line">    exec(expr, &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    exec(expr, &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;, &#123;<span class="string">'y'</span>: <span class="number">3</span>, <span class="string">'z'</span>: <span class="number">4</span>&#125;)</span><br><span class="line">    </span><br><span class="line">func()</span><br><span class="line">  <span class="number">60</span></span><br><span class="line">  <span class="number">33</span></span><br><span class="line">  <span class="number">34</span></span><br></pre></td></tr></table></figure><p>针对之前<a href="http://showteeth.tech/posts/14356.html">R系列之将字符串转化为变量</a>中的问题：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(data_folder):</span><br><span class="line">    filename=os.path.join(data_folder,i)</span><br><span class="line">    print(filename)</span><br><span class="line">    code_string=<span class="string">'''import pandas as pd\n&#123;var_name&#125;=pd.read_csv("&#123;filename&#125;")'''</span>.format(var_name=os.path.splitext(i)[<span class="number">0</span>],filename=filename)</span><br><span class="line">    print(code_string)</span><br><span class="line">    exec(code_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出内容，此时data_1已经写入了当前的环境变量中</span></span><br><span class="line">  /home/user/learn/r_learn/data/chr2var/data_1.txt</span><br><span class="line">  <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">  data_1=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_1.txt"</span>)</span><br><span class="line">  /home/user/learn/r_learn/data/chr2var/data_2.txt</span><br><span class="line">  <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">  data_2=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_2.txt"</span>)</span><br><span class="line">  /home/user/learn/r_learn/data/chr2var/data_3.txt</span><br><span class="line">  <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">  data_3=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_3.txt"</span>)</span><br><span class="line">  /home/user/learn/r_learn/data/chr2var/data_4.txt</span><br><span class="line">  <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">  data_4=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_4.txt"</span>)</span><br><span class="line">  /home/user/learn/r_learn/data/chr2var/data_5.txt</span><br><span class="line">  <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">  data_5=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_5.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时可以使用eval返回data_1的数值</span></span><br><span class="line">eval(<span class="string">'data_1'</span>)</span><br><span class="line">  <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="使用globals和locals函数"><a href="#使用globals和locals函数" class="headerlink" title="使用globals和locals函数"></a>使用globals和locals函数</h3><ul><li><code>globals()</code>函数<strong>以字典的形式</strong>返回的定义该函数的模块内的<strong>全局作用域下的所有标识符（变量、常量等）</strong></li><li><code>locals()</code>函数<strong>以字典的形式</strong>返回当前函数内的<strong>局域作用域</strong>下的所有标识符(会包括前面的全局变量)</li><li>如果直接在模块中调用<code>globals()</code>和<code>locals()</code>函数，它们的返回值是相同的</li><li>参考链接：<a href="https://www.cnblogs.com/yyds/p/6276746.html" target="_blank" rel="noopener">Python中的eval()、exec()及其相关函数</a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接向全局变量中添加变量，以字典的方式</span></span><br><span class="line">globals()[<span class="string">'data_6'</span>] = pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_1.txt"</span>)</span><br><span class="line">data_6</span><br><span class="line">  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接向局部变量中添加变量，以字典的方式</span></span><br><span class="line">locals()[<span class="string">'data_7'</span>] = pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_1.txt"</span>)</span><br><span class="line">data_7</span><br><span class="line">  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 借鉴前面的字典做法，直接将其存储在字典中</span></span><br><span class="line">a=&#123;&#125;</span><br><span class="line">a[<span class="string">"data_8"</span>]=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_1.txt"</span>)</span><br><span class="line">a</span><br><span class="line">  &#123;<span class="string">'data_8'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">1</span>]</span><br><span class="line">  Index: []&#125;</span><br><span class="line"><span class="comment"># 前面的问题</span></span><br><span class="line">re_dic=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(data_folder):</span><br><span class="line">    filename=os.path.join(data_folder,i)</span><br><span class="line">    print(filename)</span><br><span class="line">    re_dic[os.path.splitext(i)[<span class="number">0</span>]]=pd.read_csv(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出的结果</span></span><br><span class="line">  &#123;<span class="string">'data_1'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">1</span>]</span><br><span class="line">  Index: [], <span class="string">'data_2'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">2</span>]</span><br><span class="line">  Index: [], <span class="string">'data_3'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">3</span>]</span><br><span class="line">  Index: [], <span class="string">'data_4'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">4</span>]</span><br><span class="line">  Index: [], <span class="string">'data_5'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">5</span>]</span><br><span class="line">  Index: []&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="eval、exec以及get、assign"><a href="#eval、exec以及get、assign" class="headerlink" title="eval、exec以及get、assign"></a>eval、exec以及get、assign</h2><h3 id="eval和exec的区别"><a href="#eval和exec的区别" class="headerlink" title="eval和exec的区别"></a>eval和exec的区别</h3><ul><li>计算能力的区别：<code>eval()</code>函数只能<strong>计算单个表达式</strong>的值，而<code>exec()</code>函数可以动态<strong>运行代码段</strong></li><li>返回指定区别：<code>eval()</code>函数<strong>返回计算表达式的结果</strong>，而<code>exec()</code>函数<strong>返回值永远为None</strong></li></ul><hr><h3 id="python和R中对应的问题"><a href="#python和R中对应的问题" class="headerlink" title="python和R中对应的问题"></a>python和R中对应的问题</h3><p><code>R</code>中<code>get</code>函数和<code>assign</code>函数功能很明确，<code>get</code>就是得到字符串对应的变量的值，而<code>assign</code>就是将字符串变为变量来存储值；而在<code>Python</code>中，<code>eval</code>类似于<code>R</code>中的<code>get</code>，但是功能比<code>get</code>强大，其可以执行一些简单的计算，而<code>exec</code>则更类似于<code>assign</code>，可以执行复杂的计算。</p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.python.org/3/library/functions.html#eval" target="_blank" rel="noopener">Built-in Functions-eval</a></li><li><a href="https://docs.python.org/3/library/functions.html#exec" target="_blank" rel="noopener">Built-in Functions-exec</a></li><li><a href="https://www.cnblogs.com/yyds/p/6276746.html" target="_blank" rel="noopener">很好的文章-Python中的eval()、exec()及其相关函数</a></li><li><a href="https://www.runoob.com/python/python-func-eval.html" target="_blank" rel="noopener">Python eval() 函数</a></li><li><a href="https://blog.csdn.net/qq_29883591/article/details/53443062" target="_blank" rel="noopener">python3中eval函数用法简介</a></li><li><a href="https://juejin.im/post/5c97885b6fb9a070c11f929e" target="_blank" rel="noopener">深度辨析 Python 的 eval() 与 exec()</a></li><li><a href="https://stackoverflow.com/questions/51747277/python-equivalent-of-r-assign" target="_blank" rel="noopener">Python equivalent of R assign</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章起源于&lt;a href=&quot;http://showteeth.tech/posts/14356.html&quot;&gt;R系列之将字符串转化为变量&lt;/a&gt;，主要学习了&lt;code&gt;Python&lt;/code&gt;中将字符串转换为变量相关的两个函数&lt;code&gt;eval&lt;/code&gt;和&lt;code&gt;exec&lt;/code&gt;。&lt;code&gt;eval&lt;/code&gt;可以得到字符串对应的变量的值，并且可以执行简单的计算，返回计算得到的结果，但是不能包括赋值和循环等操作；而&lt;code&gt;exec&lt;/code&gt;可以执行复杂的计算，可以包括赋值和循环，但是返回值始终是&lt;code&gt;None&lt;/code&gt;，不会是计算得到的结果。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
