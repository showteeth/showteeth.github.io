<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>showteeth&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://showteeth.tech/"/>
  <updated>2020-05-23T05:43:52.201Z</updated>
  <id>http://showteeth.tech/</id>
  
  <author>
    <name>showteeth</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python系列之装饰器的使用</title>
    <link href="http://showteeth.tech/posts/16624.html"/>
    <id>http://showteeth.tech/posts/16624.html</id>
    <published>2020-05-23T05:17:12.000Z</published>
    <updated>2020-05-23T05:43:52.201Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<strong>Python中装饰器的用法</strong>，主要学习了<strong>装饰器的作用</strong>、<strong>使用形式</strong>、<strong>多个装饰器的使用</strong>、<strong>对带参数的函数进行装饰</strong>、<strong>带参数的装饰器</strong>、<strong>基于类的装饰器</strong>以及<strong>装饰器的副作用与解决办法</strong>。</p></div><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>装饰器本质上是一个 <code>Python</code> 函数或类，它可以<strong>让其他函数或类在不需要做任何代码修改的前提下增加额外功能</strong>，装饰器的<strong>返回值也是一个函数/类对象</strong>。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景，装饰器是解决这类问题的绝佳设计。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。<strong>概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能</strong>。</p><hr><h2 id="装饰器示例"><a href="#装饰器示例" class="headerlink" title="装饰器示例"></a>装饰器示例</h2><p>为了更好地理解装饰器，我们先从一个简单的例子开始，假设有下面的函数：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><p></p><p>现在我们想<strong>增强 <code>hello()</code> 函数的功能</strong>，希望给返回加上 <code>HTML</code> 标签，比如 <code>&lt;i&gt;hello world&lt;/i&gt;</code>，但是有一个要求，不改变原来 <code>hello()</code> 函数的定义。这里当然有很多种方法，下面给出一种跟本文相关的方法：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeitalic</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;i&gt;"</span> + func() + <span class="string">"&lt;/i&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br></pre></td></tr></table></figure><p></p><p>在上面的代码中，我们定义了一个函数 <code>makeitalic</code>，该函数有一个参数 <code>func</code>，它是一个函数；在 <code>makeitalic</code> 函数里面我们又定义了一个内部函数 <code>wrapped</code>，并<strong>将该函数作为返回</strong>。</p><p>现在，我们就可以不改变 <code>hello()</code> 函数的定义，给返回加上 <code>HTML</code> 标签了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello = makeitalic(hello)</span><br><span class="line">hello()</span><br><span class="line">  <span class="string">'&lt;i&gt;hello world&lt;/i&gt;'</span></span><br></pre></td></tr></table></figure><p>在上面，我们将 <code>hello</code> 函数传给 <code>makeitalic</code>，再将返回赋给 <code>hello</code>，此时调用 <code>hello()</code> 就得到了我们想要的结果。</p><p>不过要注意的是，由于我们将 <code>makeitalic</code> 的返回赋给了 <code>hello</code>，此时 <code>hello()</code> 函数仍然存在，但是它的函数名不再是 <code>hello</code> 了，而是 <code>wrapped</code>，正是 <code>makeitalic</code> 返回函数的名称，可以验证一下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前hello函数的名称</span></span><br><span class="line">hello.__name__</span><br><span class="line">  <span class="string">'wrapped'</span></span><br></pre></td></tr></table></figure><p></p><p>对于这个小瑕疵，后文将会给出解决方法。</p><p>现在，我们梳理一下上面的例子，为了增强原函数 <code>hello</code> 的功能，我们定义了一个函数，它接收原函数作为参数，并返回一个新的函数，完整的代码如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeitalic</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;i&gt;"</span> + func() + <span class="string">"&lt;/i&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时的hello是增强之后的hello</span></span><br><span class="line">hello = makeitalic(hello)</span><br></pre></td></tr></table></figure><p></p><p>事实上，<code>makeitalic</code> 就是一个装饰器（<code>decorator</code>），它『装饰』了函数 <code>hello</code>，并返回一个函数，将其赋给 <code>hello</code>。</p><p>一般情况下，我们使用装饰器提供的 <code>@</code> 语法糖（<code>Syntactic Sugar</code>），来简化上面的写法：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeitalic</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;i&gt;"</span> + func() + <span class="string">"&lt;/i&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeitalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><p></p><p>像上面的情况，可以<strong>动态修改函数（或类）功能的函数就是装饰器</strong>。本质上，它是一个高阶函数，<strong>以被装饰的函数（比如上面的 hello）为参数</strong>，并<strong>返回一个包装后的函数（比如上面的 wrapped）给被装饰函数（hello）</strong>。</p><hr><h2 id="装饰器的使用形式"><a href="#装饰器的使用形式" class="headerlink" title="装饰器的使用形式"></a>装饰器的使用形式</h2><h3 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h3><p>装饰器的一般使用形式如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p></p><p>等价于下面的形式：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">func = decorator(func)</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="多个装饰器"><a href="#多个装饰器" class="headerlink" title="多个装饰器"></a>多个装饰器</h3><p>装饰器可以定义多个，离函数定义最近的装饰器先被调用，比如：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator_one</span></span><br><span class="line"><span class="meta">@decorator_two</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p></p><p>等价于下面的形式：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func = decorator_one(decorator_two(func))</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><p>装饰器还可以带参数，用于得到不同的装饰器，比如：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator(arg1, arg2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p></p><p>等价于下面的形式：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先得到装饰器decorator(arg1, arg2)</span></span><br><span class="line"><span class="comment"># 然后再去装饰函数func</span></span><br><span class="line">func = decorator(arg1, arg2)(func)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="多个装饰器-1"><a href="#多个装饰器-1" class="headerlink" title="多个装饰器"></a>多个装饰器</h2><p>前面示例中已经了解了单个装饰器的使用，这里了解一下多个装饰器的用法:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makebold</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;b&gt;'</span> + func() + <span class="string">'&lt;/b&gt;'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeitalic</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;i&gt;'</span> + func() + <span class="string">'&lt;/i&gt;'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里添加了两个装饰器</span></span><br><span class="line"><span class="meta">@makebold</span></span><br><span class="line"><span class="meta">@makeitalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><p></p><p>上面定义了两个装饰器，对 <code>hello</code> 进行装饰，<strong>上面的最后几行代码相当于</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">hello = makebold(makeitalic(hello))</span><br></pre></td></tr></table></figure><p></p><p>调用函数 <code>hello</code>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello()</span><br><span class="line">  <span class="string">'&lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;'</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="对带参数的函数进行装饰"><a href="#对带参数的函数进行装饰" class="headerlink" title="对带参数的函数进行装饰"></a>对带参数的函数进行装饰</h2><p>前面的例子中，被装饰的函数 hello() 是没有带参数的，我们看看被装饰函数带参数的情况。对前面例子中的 hello() 函数进行改写，使其带参数，如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeitalic</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;i&gt;'</span> + ret + <span class="string">'&lt;/i&gt;'</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeitalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello %s'</span> % name</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeitalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello2</span><span class="params">(name1, name2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello %s, %s'</span> % (name1, name2)</span><br></pre></td></tr></table></figure><p></p><p>由于函数 <code>hello</code> 带参数，因此内嵌包装函数 <code>wrapped</code> 也做了一点改变：内嵌包装函数的参数传给了 <code>func</code>，即被装饰函数，也就是说<strong>内嵌包装函数的参数跟被装饰函数的参数对应</strong>，这里使用了 <code>(*args, **kwargs)</code>，是为了适应可变参数。关于<em>args, **kwargs这两种类型的参数可以参考：[Python系列之</em>args和**kwargs的作用](<a href="http://showteeth.tech/">http://showteeth.tech/</a>)</p><p>看看使用：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个参数的</span></span><br><span class="line">hello(<span class="string">'python'</span>)</span><br><span class="line">  <span class="string">'&lt;i&gt;hello python&lt;/i&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个参数的</span></span><br><span class="line">hello2(<span class="string">'python'</span>, <span class="string">'java'</span>)</span><br><span class="line">  <span class="string">'&lt;i&gt;hello python, java&lt;/i&gt;'</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="带参数的装饰器-1"><a href="#带参数的装饰器-1" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h2><p>上面的例子是对带参数的函数进行装饰，而这里是装饰器本身就带有参数，其实就是再外加一层函数用于根据指定的参数生成装饰器。</p><p>之前我们增强了函数 <code>hello</code> 的功能，给它的返回加上了标签 <code>&lt;i&gt;...&lt;/i&gt;</code>，现在，我们想改用标签 <code>&lt;b&gt;...&lt;/b&gt;</code> 或 <code>&lt;p&gt;...&lt;/p&gt;</code>。是不是要像前面一样，再定义一个类似 <code>makeitalic</code> 的装饰器呢？其实，我们可以<strong>定义一个函数，将标签作为参数，返回一个装饰器</strong>，比如：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap_in_tag</span><span class="params">(tag)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            ret = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;'</span> + tag + <span class="string">'&gt;'</span> + ret + <span class="string">'&lt;/'</span> + tag + <span class="string">'&gt;'</span></span><br><span class="line">        <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p></p><p>现在，我们可以根据需要生成想要的装饰器了：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">makebold = wrap_in_tag(<span class="string">'b'</span>)  <span class="comment"># 根据 'b' 返回 makebold 生成器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makebold</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello %s'</span> % name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用增强之后的函数</span></span><br><span class="line">hello(<span class="string">'world'</span>)</span><br><span class="line">  <span class="string">'&lt;b&gt;hello world&lt;/b&gt;'</span></span><br></pre></td></tr></table></figure><p></p><p>上面的形式也可以写得更加简洁：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@wrap_in_tag('b')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello %s'</span> % name</span><br></pre></td></tr></table></figure><p></p><p>这就是带参数的装饰器，其实就是在装饰器外面多了一层包装，根据不同的参数返回不同的装饰器。</p><hr><h2 id="基于类的装饰器"><a href="#基于类的装饰器" class="headerlink" title="基于类的装饰器"></a>基于类的装饰器</h2><p>前面的装饰器都是一个函数，其实也可以基于类定义装饰器，看下面的例子：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bold</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;b&gt;'</span> + self.func(*args, **kwargs) + <span class="string">'&lt;/b&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bold</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello %s'</span> % name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">hello(<span class="string">'world'</span>)</span><br><span class="line">  <span class="string">'&lt;b&gt;hello world&lt;/b&gt;'</span></span><br></pre></td></tr></table></figure><p></p><p>可以看到，类 <code>Bold</code> 有两个方法：</p><ul><li><code>__init__()</code>：它<strong>接收一个函数作为参数，也就是被装饰的函数</strong></li><li><code>__call__()</code>：<strong>让类对象可调用</strong>，就像函数调用一样，在调用被装饰函数时被调用</li></ul><p>还可以让<strong>类装饰器带参数</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, tag)</span>:</span></span><br><span class="line">        self.tag = tag</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;&#123;tag&#125;&gt;&#123;res&#125;&lt;/&#123;tag&#125;&gt;"</span>.format(</span><br><span class="line">                res=func(*args, **kwargs), tag=self.tag</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@Tag('b')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello %s'</span> % name</span><br></pre></td></tr></table></figure><p></p><p>需要注意的是，如果类装饰器有参数，则 <code>__init__</code> 接收参数，而 <code>__call__</code> 接收 <code>func</code>。</p><hr><h2 id="装饰器的副作用"><a href="#装饰器的副作用" class="headerlink" title="装饰器的副作用"></a>装饰器的副作用</h2><p>前面提到，使用装饰器有一个瑕疵，<strong>就是被装饰的函数，它的函数名称已经不是原来的名称了</strong>，回到最开始的例子：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeitalic</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;i&gt;"</span> + func() + <span class="string">"&lt;/i&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeitalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><p></p><p>函数 <code>hello</code> 被 <code>makeitalic</code> 装饰后，它的函数名称已经改变了：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello.__name__</span><br><span class="line">  <span class="string">'wrapped'</span></span><br></pre></td></tr></table></figure><p></p><p>为了消除这样的副作用，<code>Python</code> 中的 <code>functools</code> 包提供了几种装饰器相关的高级函数，如<code>wraps</code>、<code>update_wrapper</code>:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeitalic</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="comment"># 加上 wraps 装饰器</span></span><br><span class="line"><span class="meta">    @wraps(func)       </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;i&gt;"</span> + func() + <span class="string">"&lt;/i&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeitalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上wraps 装饰器之后再次查看名称</span></span><br><span class="line">hello.__name__</span><br><span class="line">  <span class="comment"># 这里已经变成了原始的名称</span></span><br><span class="line">  <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>本质上，<strong>装饰器就是一个返回函数</strong>的高阶函数。</li><li>装饰器可以<strong>动态地修改一个类或函数的功能</strong>，通过在原有的类或者函数上包裹一层修饰类或修饰函数实现。</li></ul><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://wiki.jikexueyuan.com/project/explore-python/Functional/decorator.html" target="_blank" rel="noopener">装饰器</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;strong&gt;Python中装饰器的用法&lt;/strong&gt;，主要学习了&lt;strong&gt;装饰器的作用&lt;/strong&gt;、&lt;strong&gt;使用形式&lt;/strong&gt;、&lt;strong&gt;多个装饰器的使用&lt;/strong&gt;、&lt;strong&gt;对带参数的函数进行装饰&lt;/strong&gt;、&lt;strong&gt;带参数的装饰器&lt;/strong&gt;、&lt;strong&gt;基于类的装饰器&lt;/strong&gt;以及&lt;strong&gt;装饰器的副作用与解决办法&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/categories/Python/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之*args和**kwargs的作用</title>
    <link href="http://showteeth.tech/posts/38814.html"/>
    <id>http://showteeth.tech/posts/38814.html</id>
    <published>2020-05-23T03:23:47.000Z</published>
    <updated>2020-05-23T15:22:13.573Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这里写摘要，显示更好看</p></div><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>*args</code>和<code>**kwargs</code>是我在查看源码时经常看到的两个参数，主要出现在各种函数中。这<strong>两个参数都是表示给函数传不定数量的参数(不确定最后使用这个函数的时候会传递多少参数，也叫可变参数)</strong>，两者的差异主要表现在：</p><ul><li><code>*args</code>：接收不定量的<strong>非关键字参数</strong>，如<code>testFun(&#39;Hello&#39;, &#39;Welcome&#39;)</code></li><li><code>**kwargs</code>：接收不定量个<strong>关键字参数</strong>，如<code>testFun(x=1, y=2)</code></li></ul><p><code>*args</code>和<code>**kwargs</code>参数关键的是最前面的<code>*</code>和<code>**</code>，后面的 <strong><code>args</code>和<code>kwargs</code>只是约定俗成的叫法而已</strong>，也可以使用<code>*vars</code>和<code>**kwvars</code>进行代替。</p><hr><h2 id="args"><a href="#args" class="headerlink" title="*args"></a>*args</h2><p><code>*args</code>可以用于接收不定量的<strong>非关键字参数</strong>，下面使用几个例子来加深对其的理解.</p><p><strong>完全的不定量的非关键字参数(可变参数)</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(type(args))</span><br><span class="line">    print(args)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        print(arg)</span><br><span class="line"></span><br><span class="line">print_func(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'str'</span>, [])</span><br><span class="line">  &lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class">  <span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'str'</span>, [])</span></span></span><br><span class="line"><span class="class">  1</span></span><br><span class="line"><span class="class">  2</span></span><br><span class="line"><span class="class">  <span class="title">str</span></span></span><br><span class="line"><span class="class">  []</span></span><br></pre></td></tr></table></figure><p></p><p>从上面的输出结果可以看出，函数接收的<code>*args</code>会被存放在一个<code>tuple</code>中。</p><p><strong>增加普通参数x,y</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span><span class="params">(x,y,*args)</span>:</span></span><br><span class="line">    print(type(args))</span><br><span class="line">    print(args)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        print(arg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的1,2分别对应前面的x,y，可变参数只剩下了'str', []</span></span><br><span class="line">print_func(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'str'</span>, [])</span><br><span class="line">  &lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class">  <span class="params">(<span class="string">'str'</span>, [])</span></span></span><br><span class="line"><span class="class">  <span class="title">str</span></span></span><br><span class="line"><span class="class">  []</span></span><br></pre></td></tr></table></figure><p></p><p><strong>调整普通参数和可变参数的顺序</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span><span class="params">(*args,x,y)</span>:</span></span><br><span class="line">    print(type(args))</span><br><span class="line">    print(args)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        print(arg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时会报错</span></span><br><span class="line">print_func(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'str'</span>, [])</span><br><span class="line">  -</span><br><span class="line">  TypeError                                 Traceback (most recent call last)</span><br><span class="line">  &lt;ipython-input<span class="number">-224</span><span class="number">-570961470325</span>&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        <span class="number">5</span>         print(arg)</span><br><span class="line">        <span class="number">6</span> </span><br><span class="line">  ----&gt; 7 print_func(1, 2, 'str', [])</span><br><span class="line"></span><br><span class="line">  TypeError: print_func() missing <span class="number">2</span> required keyword-only arguments: <span class="string">'x'</span> <span class="keyword">and</span> <span class="string">'y'</span></span><br></pre></td></tr></table></figure><p></p><p>上面的输出内容表明，<strong>可变参数一定要在普通参数之后，如果调换顺序会报错</strong>。</p><hr><h2 id="kwargs"><a href="#kwargs" class="headerlink" title="**kwargs"></a>**kwargs</h2><p><code>**kwargs</code>可以用于接收不定量个<strong>关键字参数</strong>，下面依旧是使用几个例子来进行学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(type(kwargs))</span><br><span class="line">    print(kwargs)</span><br><span class="line">    <span class="keyword">for</span> kwarg <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        print(kwarg)</span><br><span class="line"></span><br><span class="line">print_func(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="string">'str'</span>, d=[])</span><br><span class="line">  &lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">  &#123;'a': 1, 'b': 2, 'c': 'str', 'd': []&#125;</span><br><span class="line">  (<span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line">  (<span class="string">'b'</span>, <span class="number">2</span>)</span><br><span class="line">  (<span class="string">'c'</span>, <span class="string">'str'</span>)</span><br><span class="line">  (<span class="string">'d'</span>, [])</span><br></pre></td></tr></table></figure><p>从上面的输出结果可以看出：不同于<code>*args</code>传递的参数会被存放在<code>tuple</code>中，<code>**kwargs</code>传递的参数会被存放在<code>字典</code>中。</p><p>接下来依旧是顺序问题：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可变参数在普通参数之后</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span><span class="params">(x,y,**kwargs)</span>:</span></span><br><span class="line">    print(type(kwargs))</span><br><span class="line">    print(kwargs)</span><br><span class="line">    <span class="keyword">for</span> kwarg <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        print(kwarg)</span><br><span class="line"></span><br><span class="line">print_func(<span class="number">1</span>, <span class="number">2</span>, c=<span class="string">'str'</span>, d=[])</span><br><span class="line">  &lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">  &#123;'c': 'str', 'd': []&#125;</span><br><span class="line">  (<span class="string">'c'</span>, <span class="string">'str'</span>)</span><br><span class="line">  (<span class="string">'d'</span>, [])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变参数在普通参数之前</span></span><br><span class="line"><span class="comment">## 仍旧报错</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span><span class="params">(**kwargs,x,y)</span>:</span></span><br><span class="line">    print(type(kwargs))</span><br><span class="line">    print(kwargs)</span><br><span class="line">    <span class="keyword">for</span> kwarg <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        print(kwarg)</span><br><span class="line"></span><br><span class="line">print_func(c=<span class="string">'str'</span>, d=[],<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">  File <span class="string">"&lt;ipython-input-235-01d144bf7b9f&gt;"</span>, line <span class="number">1</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">print_func</span><span class="params">(**kwargs,x,y)</span>:</span></span><br><span class="line">                              ^</span><br><span class="line">  SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p></p><p>上面的输出内容表明，<strong>可变参数一定要在普通参数之后，如果调换顺序会报错</strong>。</p><hr><h2 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h2><p>目前已经出现了两种参数类型(还有一种是默认参数)，前面的示例中也可以看出，<strong>普通参数在和可变参数混用时需要注意顺序问题</strong>，具体来说：<strong><code>普通参数</code>&gt;<code>默认参数</code>&gt;<code>*args</code>&gt;`</strong>kwargs`**.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span><span class="params">(x, *args, **kwargs)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同参数类型混用</span></span><br><span class="line">print_func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, y=<span class="number">1</span>, a=<span class="number">2</span>, b=<span class="number">3</span>, c=<span class="number">4</span>)</span><br><span class="line">  <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">  &#123;<span class="string">'y'</span>: <span class="number">1</span>, <span class="string">'a'</span>: <span class="number">2</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.geeksforgeeks.org/args-kwargs-python/" target="_blank" rel="noopener">*args and **kwargs in Python</a></li><li><a href="https://python.freelycode.com/contribution/detail/427" target="_blank" rel="noopener">*args和**kwargs在Python中的作用</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这里写摘要，显示更好看&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/categories/Python/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之functools-控制函数的工具</title>
    <link href="http://showteeth.tech/posts/1848.html"/>
    <id>http://showteeth.tech/posts/1848.html</id>
    <published>2020-05-23T01:19:54.000Z</published>
    <updated>2020-05-23T14:23:19.544Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<code>Python</code>中功能强大的模块<code>functools</code>，这里主要学习了可以<strong>固定函数(方法)的某些参数的函数并返回函数的<code>partial</code>和<code>partialmethod</code></strong>，可以用于<strong>消除装饰器副作用的装饰器函数<code>wraps</code>和<code>update_wrapper</code></strong>，可以<strong>进行化简运算的函数<code>reduce</code></strong>，可以<strong>将比较函数转化为键函数的<code>cmp_to_key</code></strong>。</p></div><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>functools</code> 是 <code>Python</code> 中很简单但也很重要的模块，主要是一些 <code>Python</code> 高阶函数相关的函数。 关于<strong>高阶函数</strong>，这是函数式编程范式中很重要的一个概念，简单地说， 就是一个<strong>可以接受函数作为参数或者以函数作为返回值的函数</strong>，因为 <code>Python</code> 中函数是一类对象， 因此很容易支持这样的函数式特性。</p><p><code>functools</code>中比较常用的函数如下：</p><ul><li><code>partial</code>：固定函数的某些参数，返回一个新的函数</li><li><code>partialmethod</code>：针对方法的<code>partial</code>函数</li><li><code>wraps</code>：消除装饰器函数带来的副作用</li><li><code>update_wrapper</code>：功能更加强大的<code>wraps</code></li><li><code>reduce</code>：化简函数</li><li><code>cmp_to_key</code>：将比较函数转化为键函数</li></ul><p><code>functools</code>中所有的函数如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">functools.__all__</span><br><span class="line">  [<span class="string">'update_wrapper'</span>,</span><br><span class="line">   <span class="string">'wraps'</span>,</span><br><span class="line">   <span class="string">'WRAPPER_ASSIGNMENTS'</span>,</span><br><span class="line">   <span class="string">'WRAPPER_UPDATES'</span>,</span><br><span class="line">   <span class="string">'total_ordering'</span>,</span><br><span class="line">   <span class="string">'cmp_to_key'</span>,</span><br><span class="line">   <span class="string">'lru_cache'</span>,</span><br><span class="line">   <span class="string">'reduce'</span>,</span><br><span class="line">   <span class="string">'partial'</span>,</span><br><span class="line">   <span class="string">'partialmethod'</span>,</span><br><span class="line">   <span class="string">'singledispatch'</span>]</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="偏函数相关"><a href="#偏函数相关" class="headerlink" title="偏函数相关"></a>偏函数相关</h2><h3 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h3><p><code>partial</code>的作用：<strong>把一个函数的某些参数给固定住（也就是设置默认值）</strong>，<strong>返回一个新的函数</strong>，调用这个新函数会更简单。接下来将使用示例进行学习。</p><p>假设有如下函数：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br></pre></td></tr></table></figure><p></p><p>现在，我们想<strong>返回某个数的2倍</strong>，即：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3的两倍</span></span><br><span class="line">multiply(<span class="number">3</span>, y=<span class="number">2</span>)</span><br><span class="line">  <span class="number">6</span></span><br><span class="line"><span class="comment"># 4的两倍</span></span><br><span class="line">multiply(<span class="number">4</span>, y=<span class="number">2</span>)</span><br><span class="line">  <span class="number">8</span></span><br></pre></td></tr></table></figure><p></p><p>上面的调用有点繁琐，每次都要传入 <code>y=2</code>，我们想到可以定义一个新的函数，<strong>把 <code>y=2</code> 作为默认值</strong>，即：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x, y=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> multiply(x, y)</span><br></pre></td></tr></table></figure><p></p><p>现在，我们可以这样调用了：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用带默认值的函数计算</span></span><br><span class="line">double(<span class="number">3</span>)</span><br><span class="line">  <span class="number">6</span></span><br><span class="line">double(<span class="number">4</span>)</span><br><span class="line">  <span class="number">8</span></span><br></pre></td></tr></table></figure><p></p><p>上面设置默认值的方法虽然可以达到目的，但是需要重新定义一个函数，同时如果<code>y</code>值发生了变化还需要每次修改，比较麻烦，这里可以使用<code>partial</code>达到类似的目的，并且不用重新定义函数：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="comment"># multiply函数保持不变，设置y的默认值</span></span><br><span class="line">double = partial(multiply, y=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">double(<span class="number">3</span>)</span><br><span class="line">  <span class="number">6</span></span><br></pre></td></tr></table></figure><p></p><p><code>partial</code> 接收函数 <code>multiply</code> 作为参数，固定 <code>multiply</code> 的参数 <code>y=2</code>，并返回一个新的函数给 <code>double</code>，这跟我们自己定义 <code>double</code> 函数的效果是一样的。</p><p>所以，简单而言，<strong><code>partial</code> 函数的功能就是：把一个函数的某些参数给固定住，返回一个新的函数</strong>。</p><div class="note info"><p>需要注意的是：<strong>使用<code>partial</code>函数来固定某些参数的时候最好是指定固定哪个参数的值</strong>，如<code>partial(multiply, y=2)</code>，而不是直接<code>partial(multiply, 2)</code>，因为<strong>默认会从参数的最左边来设置</strong>，那么<code>partial(multiply, 2)</code>就等同于<code>partial(multiply, x=2)</code>。</p></div><hr><h3 id="partialmethod"><a href="#partialmethod" class="headerlink" title="partialmethod"></a>partialmethod</h3><p><code>partialmethod</code>的作用基本类似于 <code>partial</code>， 不过<strong>仅作用于方法</strong>。举个例子就很容易明白：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._alive = <span class="keyword">False</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._alive</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_state</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self._alive = bool(state)</span><br><span class="line">    set_alive = partialmethod(set_state, <span class="keyword">True</span>)</span><br><span class="line">    set_dead = partialmethod(set_state, <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">c = Cell()</span><br><span class="line">c.alive         </span><br><span class="line">  <span class="keyword">False</span></span><br><span class="line">c.set_alive()</span><br><span class="line">c.alive         </span><br><span class="line">  <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="装饰器相关"><a href="#装饰器相关" class="headerlink" title="装饰器相关"></a>装饰器相关</h2><p>说到<strong>接受函数为参数，以函数为返回值</strong>，在 <code>Python</code> 中最常用的当属装饰器了。 <code>functools</code> 库中装饰器相关的函数是 <code>update_wrapper</code>、<code>wraps</code>，还搭配 <code>WRAPPER_ASSIGNMENTS</code> 和 <code>WRAPPER_UPDATES</code> 两个常量使用，<strong>作用就是消除 <code>Python</code> 装饰器的一些负面作用</strong>。</p><p>学习<code>functools</code>库中装饰器相关函数的基础是 <strong><code>Python</code>中装饰器的使用</strong>以及<strong>使用装饰器可能带来的副作用</strong>，具体可以查看这篇文章：<a href="http://showteeth.tech">Python系列之装饰器的使用</a>。简单来书就是<code>Python</code>中的装饰器虽然<strong>可以在不修改原始函数的基础上动态地修改函数的功能</strong>，但使用之后<strong>函数的名称就会发生改变</strong>，而如果想去除这种副作用就需要使用<code>functools</code>中的相关函数.</p><h3 id="wraps"><a href="#wraps" class="headerlink" title="wraps"></a>wraps</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看函数的名称</span></span><br><span class="line">add.__name__</span><br><span class="line">  <span class="string">'wrapper'</span></span><br></pre></td></tr></table></figure><p>通过上述示例可以看出，函数在经过装饰器装饰之后，其名称会变为装饰器返回的函数名称而不是原本的函数名称。为了消除这个副作用，可以在装饰器中再添加一个装饰器<code>wraps</code>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看函数名称</span></span><br><span class="line">add.__name__</span><br><span class="line">  <span class="string">'add'</span></span><br></pre></td></tr></table></figure><p></p><p>添加了<code>wraps</code>装饰器之后，会更正的属性定义在 <code>WRAPPER_ASSIGNMENTS</code> 中：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加wraps之后，函数的以下属性会被更正</span></span><br><span class="line">functools.WRAPPER_ASSIGNMENTS</span><br><span class="line">  (<span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__qualname__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__annotations__'</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="update-wrapper"><a href="#update-wrapper" class="headerlink" title="update_wrapper"></a>update_wrapper</h3><p><code>update_wrapper</code> 的作用与 <code>wraps</code> 类似，不过功能更加强大，换句话说，<code>wraps</code> 其实是 <code>update_wrapper</code> 的特殊化，实际上 <code>wraps(wrapped)</code> 相当于 <code>partial(update_wrapper, wrapped=wrapped, **kwargs)</code>。</p><p>因此，上面的代码可以用 <code>update_wrapper</code> 重写如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> update_wrapper(wrapper, func)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="reduce-化简函数"><a href="#reduce-化简函数" class="headerlink" title="reduce-化简函数"></a>reduce-化简函数</h2><p><code>reduce</code> 函数的使用形式如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(function, sequence[, initial])</span><br></pre></td></tr></table></figure><p></p><p>具体来说，<code>reduce</code>函数先将 <code>sequence</code> 的前两个 <code>item</code> 传给 <code>function</code>，即 <code>function(item1, item2)</code>，函数的返回值和 <code>sequence</code> 的下一个 <code>item</code> 再传给 <code>function</code>，即 <code>function(function(item1, item2), item3)</code>，如此迭代，直到 <code>sequence</code> 没有元素，如果有 <code>initial</code>，则作为初始值调用。</p><p>也就是说：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduece(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># 相当于 ((1 * 2) * 3) * 4</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x * y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])  </span><br><span class="line">  <span class="number">24</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="比较相关"><a href="#比较相关" class="headerlink" title="比较相关"></a>比较相关</h2><h3 id="cmp-to-key"><a href="#cmp-to-key" class="headerlink" title="cmp_to_key"></a>cmp_to_key</h3><p><code>Python2</code>的<code>sorted</code>命令中支持一个参数为<code>cmp</code>，用来定义对象之间的<strong>比较函数</strong>，但 <code>Python3</code> 为了语言的简洁性去掉了 <code>cmp</code> 这个参数，在 <code>Python3</code> 中自定义的比较函数需要通过 <code>cmp_to_key</code> 将比较函数转化成<strong>键函数</strong>，这个函数可以传递给参数<code>key</code>，具体的实现方式这里就不学习了，下面来看一个示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line">sorted(range(<span class="number">5</span>), key=cmp_to_key(<span class="keyword">lambda</span> x, y: y-x))</span><br><span class="line">  [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p></p><p>支持使用<code>cmp_to_key</code>的函数包括：<code>sorted()</code>, <code>min()</code>, <code>max()</code>, <code>heapq.nlargest()</code>, <code>heapq.nsmallest()</code>, <code>itertools.groupby()</code>。</p><p>这里补充一下<strong>比较函数和键函数的区别</strong>：</p><ul><li><p><strong>比较函数</strong>是任何可调用的对象，它会接受两个参数，比较它们并根据所提供的参数顺序返回一个数字。负数表示第一个参数小于第二个参数，零表示它们相等，正数表示第一个参数大于第二个参数。一个简单实现可能是这样的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a&lt;b:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">elif</span> a==b:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>键函数</strong>是一个可调用对象，它接受一个参数并返回另一个用作排序键的值。</p></li></ul><p><a href="https://docs.python.org/3/library/functools.html" target="_blank" rel="noopener">官方文档</a>：</p><blockquote><p>A <strong>comparison function</strong> is any callable that accept <strong>two arguments</strong>, compares them, and returns a negative number for less-than, zero for equality, or a positive number for greater-than. A <strong>key function</strong> is a callable that accepts <strong>one argument</strong> and <strong>returns another value to be used as the sort key</strong>.</p></blockquote><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.python.org/3/library/functools.html" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://pymotw.com/3/functools/index.html#module-functools" target="_blank" rel="noopener">functools — Tools for Manipulating Functions</a></li><li><a href="https://wiki.jikexueyuan.com/project/explore-python/Functional/partial.html" target="_blank" rel="noopener">partial 函数</a></li><li><a href="https://blog.windrunner.me/python/functools.html#python-functools-%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Python functools 模块</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;code&gt;Python&lt;/code&gt;中功能强大的模块&lt;code&gt;functools&lt;/code&gt;，这里主要学习了可以&lt;strong&gt;固定函数(方法)的某些参数的函数并返回函数的&lt;code&gt;partial&lt;/code&gt;和&lt;code&gt;partialmethod&lt;/code&gt;&lt;/strong&gt;，可以用于&lt;strong&gt;消除装饰器副作用的装饰器函数&lt;code&gt;wraps&lt;/code&gt;和&lt;code&gt;update_wrapper&lt;/code&gt;&lt;/strong&gt;，可以&lt;strong&gt;进行化简运算的函数&lt;code&gt;reduce&lt;/code&gt;&lt;/strong&gt;，可以&lt;strong&gt;将比较函数转化为键函数的&lt;code&gt;cmp_to_key&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列-散点图</title>
    <link href="http://showteeth.tech/posts/32524.html"/>
    <id>http://showteeth.tech/posts/32524.html</id>
    <published>2020-05-18T11:14:24.000Z</published>
    <updated>2020-05-21T15:15:07.905Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<strong>R中散点图的画法</strong>，主要包括<strong>针对点的属性如颜色、形状和大小的设置</strong>，<strong>针对分组变量使用不同的形状</strong>，<strong>给点添加border</strong>以及<strong>针对散点太密集出现重叠的两种解决方法</strong>。</p></div><a id="more"></a><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data(<span class="string">"mtcars"</span>)</span><br><span class="line">df &lt;- mtcars</span><br><span class="line">df$cyl &lt;- as.factor(df$cyl)</span><br><span class="line">head(df)</span><br><span class="line">                    mpg cyl disp  hp drat    wt  qsec vs am gear carb</span><br><span class="line">  Mazda RX4         <span class="number">21.0</span>   <span class="number">6</span>  <span class="number">160</span> <span class="number">110</span> <span class="number">3.90</span> <span class="number">2.620</span> <span class="number">16.46</span>  <span class="number">0</span>  <span class="number">1</span>    <span class="number">4</span>    <span class="number">4</span></span><br><span class="line">  Mazda RX4 Wag     <span class="number">21.0</span>   <span class="number">6</span>  <span class="number">160</span> <span class="number">110</span> <span class="number">3.90</span> <span class="number">2.875</span> <span class="number">17.02</span>  <span class="number">0</span>  <span class="number">1</span>    <span class="number">4</span>    <span class="number">4</span></span><br><span class="line">  Datsun <span class="number">710</span>        <span class="number">22.8</span>   <span class="number">4</span>  <span class="number">108</span>  <span class="number">93</span> <span class="number">3.85</span> <span class="number">2.320</span> <span class="number">18.61</span>  <span class="number">1</span>  <span class="number">1</span>    <span class="number">4</span>    <span class="number">1</span></span><br><span class="line">  Hornet <span class="number">4</span> Drive    <span class="number">21.4</span>   <span class="number">6</span>  <span class="number">258</span> <span class="number">110</span> <span class="number">3.08</span> <span class="number">3.215</span> <span class="number">19.44</span>  <span class="number">1</span>  <span class="number">0</span>    <span class="number">3</span>    <span class="number">1</span></span><br><span class="line">  Hornet Sportabout <span class="number">18.7</span>   <span class="number">8</span>  <span class="number">360</span> <span class="number">175</span> <span class="number">3.15</span> <span class="number">3.440</span> <span class="number">17.02</span>  <span class="number">0</span>  <span class="number">0</span>    <span class="number">3</span>    <span class="number">2</span></span><br><span class="line">  Valiant           <span class="number">18.1</span>   <span class="number">6</span>  <span class="number">225</span> <span class="number">105</span> <span class="number">2.76</span> <span class="number">3.460</span> <span class="number">20.22</span>  <span class="number">1</span>  <span class="number">0</span>    <span class="number">3</span>    <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h2 id="普通散点图"><a href="#普通散点图" class="headerlink" title="普通散点图"></a>普通散点图</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(df, aes(x = wt, y = mpg)) + geom_point()</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot_point_basic.png.png" alt="ggplot_point_basic.png"></p><hr><h2 id="设置点的属性"><a href="#设置点的属性" class="headerlink" title="设置点的属性"></a>设置点的属性</h2><p>点的属性可以包括：<strong>颜色</strong>、<strong>大小</strong>和<strong>形状</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ggplot(df, aes(x = wt, y = mpg)) + </span><br><span class="line">  geom_point(color = <span class="string">"#00AFBB"</span>, </span><br><span class="line">             size = <span class="number">2</span>, </span><br><span class="line">             shape = <span class="number">23</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot_point_property.png.png" alt="ggplot_point_property.png"></p><p><strong>R语言中点的形状可以包括25种</strong>：</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot_point_shape_all.png.png" alt="ggplot_point_shape_all.png"></p><p>更多的形状可以参考<a href="https://github.com/xiangpin/ggsymbol" target="_blank" rel="noopener">ggsymbol</a>：</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot_point_shape_ggsymbol.png.png" alt="ggplot_point_shape_ggsymbol.png"></p><hr><h2 id="针对分组变量"><a href="#针对分组变量" class="headerlink" title="针对分组变量"></a>针对分组变量</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ggplot(df, aes(x = wt, y = mpg)) + </span><br><span class="line">  <span class="comment"># 使用不同的形状以及颜色来表示不同的分组 </span></span><br><span class="line">  geom_point(aes(shape = cyl, color = cyl)) +</span><br><span class="line">  scale_color_manual(values = c(<span class="string">"#00AFBB"</span>, <span class="string">"#E7B800"</span>, <span class="string">"#FC4E07"</span>))</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot_point_group.png.png" alt="ggplot_point_group.png"></p><hr><h2 id="添加border"><a href="#添加border" class="headerlink" title="添加border"></a>添加border</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里不同的颜色要用fill</span></span><br><span class="line"><span class="comment"># 设置pch=21</span></span><br><span class="line">ggplot(df, aes(x = wt, y = mpg, fill=cyl)) + </span><br><span class="line">  geom_point(pch=<span class="number">21</span>,color=<span class="string">"red"</span>,size=<span class="number">4</span>) +</span><br><span class="line">  scale_color_manual(values = c(<span class="string">"#00AFBB"</span>, <span class="string">"#E7B800"</span>, <span class="string">"#FC4E07"</span>))</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot_point_border.png.png" alt="ggplot_point_border.png"></p><hr><h2 id="针对散点存在重叠"><a href="#针对散点存在重叠" class="headerlink" title="针对散点存在重叠"></a>针对散点存在重叠</h2><p>画散点图的时候可能会遇到<strong>点非常密集(某一个横坐标对应很多很密集的纵坐标)</strong>，这样会导致本来想查看的一些数据属性丢失，针对这种情况有两种解决方法：</p><ul><li><strong>jitter图</strong>：给点在一定范围内增加抖动，让点分散一些</li><li><strong>counts图</strong>：用点的大小表示某个范围重叠的点的数目</li></ul><h3 id="jitter图"><a href="#jitter图" class="headerlink" title="jitter图"></a>jitter图</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 突然发现两个ggplot对象相加可以实现子图的效果</span></span><br><span class="line">ggplot(mpg, aes(displ, hwy)) + geom_point() + </span><br><span class="line">  ggplot(mpg, aes(displ, hwy)) +</span><br><span class="line">  geom_point(position = position_jitter(width = <span class="number">0.5</span>, height = <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot_point_jitter.png.png" alt="ggplot_point_jitter.png"></p><hr><h3 id="点的大小表示重叠的数目"><a href="#点的大小表示重叠的数目" class="headerlink" title="点的大小表示重叠的数目"></a>点的大小表示重叠的数目</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ggplot(mpg, aes(displ, hwy)) + geom_point() + </span><br><span class="line">  ggplot(mpg, aes(displ, hwy)) +</span><br><span class="line">  geom_count()</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot_point_count.png.png" alt="ggplot_point_count.png"></p><p>更多相关设置可以参考：</p><ul><li><a href="https://ggplot2.tidyverse.org/reference/geom_count.html" target="_blank" rel="noopener">Count overlapping points</a></li><li><a href="https://github.com/tidyverse/ggplot2/issues/1666" target="_blank" rel="noopener">设置最大和最小的点的范围</a></li><li><a href="https://stackoverflow.com/questions/45921746/ggplot2-geom-count-set-legend-breaks-to-integers" target="_blank" rel="noopener">修改legend break的数目</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;strong&gt;R中散点图的画法&lt;/strong&gt;，主要包括&lt;strong&gt;针对点的属性如颜色、形状和大小的设置&lt;/strong&gt;，&lt;strong&gt;针对分组变量使用不同的形状&lt;/strong&gt;，&lt;strong&gt;给点添加border&lt;/strong&gt;以及&lt;strong&gt;针对散点太密集出现重叠的两种解决方法&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列-分面</title>
    <link href="http://showteeth.tech/posts/45543.html"/>
    <id>http://showteeth.tech/posts/45543.html</id>
    <published>2020-05-18T09:41:02.000Z</published>
    <updated>2020-05-21T15:15:07.896Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<strong>使用ggplot2进行分面图的绘制</strong>，同时学习了<strong>对分面的title以及分面间距调整</strong>的方法。</p></div><a id="more"></a><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">head(total_df)</span><br><span class="line">    Chr       Pos Freq_Total Group</span><br><span class="line">  <span class="number">1</span>   <span class="number">1</span>  <span class="number">58497063</span>  <span class="number">0.0952381</span>   ABE</span><br><span class="line">  <span class="number">2</span>   <span class="number">1</span> <span class="number">119672283</span>  <span class="number">0.1000000</span>   ABE</span><br><span class="line">  <span class="number">3</span>   <span class="number">1</span> <span class="number">153456026</span>  <span class="number">0.1428571</span>   ABE</span><br><span class="line">  <span class="number">4</span>   <span class="number">1</span> <span class="number">163951717</span>  <span class="number">0.3672457</span>   ABE</span><br><span class="line">  <span class="number">5</span>  <span class="number">11</span>   <span class="number">3943200</span>  <span class="number">0.2037037</span>   ABE</span><br><span class="line">  <span class="number">6</span>  <span class="number">11</span>   <span class="number">3943208</span>  <span class="number">0.1363636</span>   ABE</span><br><span class="line"></span><br><span class="line">unique(total_df$Group)</span><br><span class="line">  [<span class="number">1</span>] ABE  ABE2 ABE8 AC   AC2  AC8 </span><br><span class="line">  Levels: AC2 ABE2 AC8 ABE8 AC ABE</span><br></pre></td></tr></table></figure><hr><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>针对<code>Group</code>变量进行分面：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ggplot(data = total_df, aes(x = Chr, y = Freq_Total)) + </span><br><span class="line">  geom_count(color=<span class="string">"black"</span>,alpha=<span class="number">0.8</span>)  + </span><br><span class="line">  facet_wrap(~Group,nrow=<span class="number">1</span>) + </span><br><span class="line">  scale_size_continuous(name=<span class="string">"Number"</span>,breaks = c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>),range=c(<span class="number">1</span>,<span class="number">5</span>)) +</span><br><span class="line">  labs(y=<span class="string">"RNA AtoG editing"</span>,x=<span class="string">"Chromosome"</span>) + theme_bw() +</span><br><span class="line">  theme(axis.text.x = element_blank(),</span><br><span class="line">        axis.ticks.x = element_blank())</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot2_facet_basic0.png.png" alt="ggplot2_facet_basic0.png"></p><hr><h2 id="修改分面的title"><a href="#修改分面的title" class="headerlink" title="修改分面的title"></a>修改分面的title</h2><p>上面分面之后每个子图的标题都是根据Group内容得到的，这里如果想进行修改可以使用如下方法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立一个原名和修改之后名称的对应关系</span></span><br><span class="line">lab_names &lt;- c(</span><br><span class="line">  `ABE2` = <span class="string">"ABE2\nn=1483"</span>,</span><br><span class="line">  `ABE8` = <span class="string">"ABE8\nn=664"</span>,</span><br><span class="line">  `ABE` = <span class="string">"ABE\nn=237"</span>,</span><br><span class="line">  `AC2` = <span class="string">"AC2\nn=1346"</span>,</span><br><span class="line">  `AC8` = <span class="string">"AC8\nn=307"</span>,</span><br><span class="line">  `AC` = <span class="string">"AC\nn=429"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改名称</span></span><br><span class="line">ggplot(data = total_df, aes(x = Chr, y = Freq_Total)) + </span><br><span class="line">  geom_count(color=<span class="string">"black"</span>,alpha=<span class="number">0.8</span>)  + </span><br><span class="line">  <span class="comment"># 这里使用labeller进行修改</span></span><br><span class="line">  facet_wrap(~Group,labeller = labeller(Group=as_labeller(lab_names)),</span><br><span class="line">             nrow=<span class="number">1</span>) + </span><br><span class="line">  scale_size_continuous(name=<span class="string">"Number"</span>,breaks = c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>),range=c(<span class="number">1</span>,<span class="number">5</span>)) +</span><br><span class="line">  labs(y=<span class="string">"RNA AtoG editing"</span>,x=<span class="string">"Chromosome"</span>) + theme_bw() +</span><br><span class="line">  theme(axis.text.x = element_blank(),</span><br><span class="line">        axis.ticks.x = element_blank())</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot2_facet_basic.png.png" alt="ggplot2_facet_basic.png"></p><p>或者使用named vector也可以进行修改，更多修改包括修改背景、字体可以参考：<a href="https://www.datanovia.com/en/blog/how-to-change-ggplot-facet-labels/" target="_blank" rel="noopener">HOW TO CHANGE GGPLOT FACET LABELS</a></p><h2 id="调整分面的间距"><a href="#调整分面的间距" class="headerlink" title="调整分面的间距"></a>调整分面的间距</h2><h3 id="统一调整间距"><a href="#统一调整间距" class="headerlink" title="统一调整间距"></a>统一调整间距</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p + theme(panel.spacing = unit(<span class="number">2</span>, <span class="string">"lines"</span>))</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot2_facet_space.png.png" alt="ggplot2_facet_space.png"></p><hr><h3 id="调整某部分的间距"><a href="#调整某部分的间距" class="headerlink" title="调整某部分的间距"></a>调整某部分的间距</h3><p>调整<strong>第一个分面和后续分面的间距，剩下的分面之间的间距不变</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(grid)</span><br><span class="line">gt = ggplot_gtable(ggplot_build(example))</span><br><span class="line">names(gt)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"grobs"</span>         <span class="string">"layout"</span>        <span class="string">"widths"</span>        <span class="string">"heights"</span>       <span class="string">"respect"</span>       <span class="string">"rownames"</span>     </span><br><span class="line">  [<span class="number">7</span>] <span class="string">"colnames"</span>      <span class="string">"name"</span>          <span class="string">"gp"</span>            <span class="string">"vp"</span>            <span class="string">"children"</span>      <span class="string">"childrenOrder"</span></span><br><span class="line"></span><br><span class="line">gt$widths</span><br><span class="line">  [<span class="number">1</span>] <span class="number">5.</span>5pt                         </span><br><span class="line">  [<span class="number">2</span>] 0cm                          </span><br><span class="line">  [<span class="number">3</span>] 1grobwidth                       </span><br><span class="line">  [<span class="number">4</span>] <span class="number">0.</span>650222602739726cm              </span><br><span class="line">  [<span class="number">5</span>] 1null                                </span><br><span class="line">  [<span class="number">6</span>] 0cm                           </span><br><span class="line">  [<span class="number">7</span>] <span class="number">5.</span>5pt                            </span><br><span class="line">  [<span class="number">8</span>] 0cm                          </span><br><span class="line">  [<span class="number">9</span>] 1null                       </span><br><span class="line">  [<span class="number">10</span>] 0cm                                 </span><br><span class="line">  [<span class="number">11</span>] <span class="number">5.</span>5pt  </span><br><span class="line">  <span class="keyword">...</span>   </span><br><span class="line"><span class="comment"># 增加第一个分面和后续的距离</span></span><br><span class="line">gt$widths[<span class="number">7</span>] = <span class="number">5</span>*gt$widths[<span class="number">7</span>]</span><br><span class="line">grid.draw(gt)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot2_facet_space1.png.png" alt="ggplot2_facet_space1.png"></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/49123019/add-space-between-specific-facets-in-ggplot2-facet-grid" target="_blank" rel="noopener">Add space between specific facets in ggplot2 (facet_grid)</a></li><li><a href="https://stackoverflow.com/questions/3681647/ggplot-how-to-increase-spacing-between-faceted-plots" target="_blank" rel="noopener">ggplot: How to increase spacing between faceted plots?</a></li><li><a href="https://www.datanovia.com/en/blog/how-to-change-ggplot-facet-labels/" target="_blank" rel="noopener">HOW TO CHANGE GGPLOT FACET LABELS</a></li><li><a href="https://stackoverflow.com/questions/3472980/how-to-change-facet-labels" target="_blank" rel="noopener">How to change facet labels?</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;strong&gt;使用ggplot2进行分面图的绘制&lt;/strong&gt;，同时学习了&lt;strong&gt;对分面的title以及分面间距调整&lt;/strong&gt;的方法。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R系列之在R中使用Python的字符串操作</title>
    <link href="http://showteeth.tech/posts/24871.html"/>
    <id>http://showteeth.tech/posts/24871.html</id>
    <published>2020-05-15T14:35:37.000Z</published>
    <updated>2020-05-21T15:15:07.879Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<strong>在R中使用Python的格式化字符串方法</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在R中使用字符串拼接主要使用的是<code>paste</code>函数，虽然也很好用，但是相比于<code>Python</code>却非常臃肿，比如<code>Python</code>中如果想要实现字符串拼接直接使用+即可，如果想要<strong>格式化字符串</strong>可以使用<code>format</code>函数，而<code>R</code>中没有类似的函数，实现类似的功能就要使用<code>paste</code>，非常复杂。今天在看别人代码的时候发现别人使用了<code>pystr</code>这个包，其主要作用就是将<code>Python</code>中的格式化字符串的方法引入到了<code>R</code>中，当然也包括一些其他的对字符串操作的函数。</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(devtools)</span><br><span class="line">devtools::install_github(<span class="string">"nicolewhite/pystr"</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><h3 id="索引表示字符顺序"><a href="#索引表示字符顺序" class="headerlink" title="索引表示字符顺序"></a>索引表示字符顺序</h3><p>使用索引来表示字符串替换的顺序，替换使用的字符串形式非常灵活，可以<strong>直接作为单独的参数</strong>，也可以使用<strong>向量作为参数</strong>，也可以<strong>使用列表作为参数</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接作为参数传递</span></span><br><span class="line">pystr_format(<span class="string">"Hello &#123;1&#125;, my name is &#123;2&#125;."</span>, <span class="string">"World"</span>, <span class="string">"Nicole"</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"Hello World, my name is Nicole."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用向量</span></span><br><span class="line">params = c(<span class="string">"World"</span>, <span class="string">"Nicole"</span>)</span><br><span class="line">pystr_format(<span class="string">"Hello &#123;1&#125;, my name is &#123;2&#125;."</span>, params)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"Hello World, my name is Nicole."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过列表传递</span></span><br><span class="line">params = list(<span class="string">"World"</span>, <span class="string">"Nicole"</span>)</span><br><span class="line">pystr_format(<span class="string">"Hello &#123;1&#125;, my name is &#123;2&#125;."</span>, params)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"Hello World, my name is Nicole."</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="名称表示字符顺序"><a href="#名称表示字符顺序" class="headerlink" title="名称表示字符顺序"></a>名称表示字符顺序</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单独的参数</span></span><br><span class="line">pystr_format(<span class="string">"Hello &#123;thing&#125;, my name is &#123;name&#125;."</span>, thing=<span class="string">"World"</span>, name=<span class="string">"Nicole"</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"Hello World, my name is Nicole."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># named vector</span></span><br><span class="line">params = c(thing=<span class="string">"World"</span>, name=<span class="string">"Nicole"</span>)</span><br><span class="line">pystr_format(<span class="string">"Hello &#123;thing&#125;, my name is &#123;name&#125;."</span>, params)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"Hello World, my name is Nicole."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># named list</span></span><br><span class="line">params = list(thing=<span class="string">"World"</span>, name=<span class="string">"Nicole"</span>)</span><br><span class="line">pystr_format(<span class="string">"Hello &#123;thing&#125;, my name is &#123;name&#125;."</span>, params)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"Hello World, my name is Nicole."</span></span><br></pre></td></tr></table></figure><hr><h3 id="重复的参数"><a href="#重复的参数" class="headerlink" title="重复的参数"></a>重复的参数</h3><p>参数在需要格式化的字符串中可以重复使用：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># last重复使用了，都会使用相同的参数值进行替换</span></span><br><span class="line">pystr_format(<span class="string">"The name is &#123;last&#125;. &#123;first&#125; &#123;last&#125;."</span>, last=<span class="string">"Bond"</span>, first=<span class="string">"James"</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"The name is Bond. James Bond."</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="传入的数据类型"><a href="#传入的数据类型" class="headerlink" title="传入的数据类型"></a>传入的数据类型</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以是数字也可以是字符串</span></span><br><span class="line">pystr_format(<span class="string">"Hello &#123;name&#125;, you have &#123;n&#125; new notifications!"</span>, name=<span class="string">"Nicole"</span>, n=<span class="number">3</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"Hello Nicole, you have 3 new notifications!"</span></span><br></pre></td></tr></table></figure><hr><h2 id="其他常用功能"><a href="#其他常用功能" class="headerlink" title="其他常用功能"></a>其他常用功能</h2><ul><li><code>pystr_capitalize</code>：首字母大写</li><li><code>pystr_count</code>：计算字符串重复出现的次数</li><li><code>pystr_endswith</code>、<code>pystr_endswith</code>：是否一某个字符串结尾或开头</li></ul><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/Ironholds/pystr" target="_blank" rel="noopener">Github-pystr</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;strong&gt;在R中使用Python的格式化字符串方法&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="Packages" scheme="http://showteeth.tech/categories/R/Packages/"/>
    
    
      <category term="字符串" scheme="http://showteeth.tech/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Linux系列之集群存储配额</title>
    <link href="http://showteeth.tech/posts/10237.html"/>
    <id>http://showteeth.tech/posts/10237.html</id>
    <published>2020-05-13T05:58:26.000Z</published>
    <updated>2020-05-21T15:15:07.860Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要学习了<strong>查看集群存储配额</strong>的方法以及<strong>针对不同文件系统进行配额管理</strong>的办法。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近集群存储用完了，<code>vim</code>打开文件都保存不了，然后找老师管理员要了一下实验室账号的配额情况，看结果的时候有些看不懂，所以打算学习一下。</p><hr><h2 id="查看账户配额"><a href="#查看账户配额" class="headerlink" title="查看账户配额"></a>查看账户配额</h2><p>关于集群的文件系统可以参考：<a href="http://showteeth.tech/posts/31689.html">Linux系列之挂载硬盘和USB设备</a></p><h3 id="Lustre分布式存储文件系统"><a href="#Lustre分布式存储文件系统" class="headerlink" title="Lustre分布式存储文件系统"></a>Lustre分布式存储文件系统</h3><p>针对<strong>Lustre分布式存储文件系统</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lfs quota -uh user /home</span><br><span class="line">  Disk quotas <span class="keyword">for</span> user user (uid 6050):</span><br><span class="line">      Filesystem    used   quota   <span class="built_in">limit</span>   grace   files   quota   <span class="built_in">limit</span>   grace</span><br><span class="line">          /home  27.94T     29T     30T       - 3094085       0       0       -</span><br></pre></td></tr></table></figure><p></p><p>结果说明：<br><table><thead><tr><th>关键词</th><th>含义</th></tr></thead><tbody><tr><td>Filesystem</td><td>用户所在的共享分布式存储</td></tr><tr><td>used</td><td>用户目前已经使用的存储（单位KB）</td></tr><tr><td>quota</td><td>存储软限制（单位KB）</td></tr><tr><td>limit</td><td>存储硬限制（单位KB）</td></tr><tr><td>grace</td><td>存储状态</td></tr><tr><td>files</td><td>用户已有的文件数量（单位：个）</td></tr><tr><td>quota</td><td>文件数量软限制（单位：个）</td></tr><tr><td>limit</td><td>文件数量硬限制（单位：个）</td></tr><tr><td>grace</td><td>文件数量状态</td></tr></tbody></table></p><hr><h2 id="关于soft-hard-quota以及grace"><a href="#关于soft-hard-quota以及grace" class="headerlink" title="关于soft, hard quota以及grace"></a>关于soft, hard quota以及grace</h2><p><strong>Soft quota(quota)</strong>:</p><blockquote><p>this is <strong>in effect the desired ‘upper limit’ of disk usage on a normal basis</strong>. It is usually set higher than most people need, so that those users that need more space are accommodated. The disk will fill before everyone can use the amount of space allowed by their soft quota. If you <strong>reach your soft quota</strong>, the system should <strong>begin to warn you that you are over quota</strong>. By reaching/exceeding your soft quota, you <strong>trip a ‘grace period’ timer</strong>, which gives you seven (7) days to continue working and even allows you to use more disk space. But if you <strong>have not reduced your disk consumption on that disk partition to a level below the soft quota before the grace period expires</strong>, you will be <strong>unable to save any more material until you reduce your consumption so that it is below your soft quota</strong>.</p></blockquote><p><strong>Hard quota(limit)</strong>:</p><blockquote><p>this is the <strong>enforced upper limit of your storage on this particular disk partition</strong>. f you try to exceed this value, you should see a warning, and will not be able to save any more material to that disk. <strong>If you try to save a 1024 byte file and only 900 bytes are left on your quota, you will only be able to save 900 bytes</strong>. To be able to save any materials, you must reduce your usage on that disk partition so that it is below your soft quota. NOTE: if you have reached your hard quota, or your grace period has expired, and you have something that simply must be saved, you may be able to save it (temporarily) in /var/tmp rather than in your home directory. You will need to remove it from /var/tmp as soon as possible, and if it uses too much space in this shared “scratch space” area we may need to remove it (a full /var/tmp can prevent others from being able to work).</p></blockquote><p><strong>Grace period(grace)</strong>:</p><blockquote><p>once you <strong>exceed your soft quota, a timer is started</strong>. This timer is for your grace period, <strong>a period of time - 7 days by default</strong> - during which you may continue to work and save files in this disk area (as long as you do not exceed the hard quota). To <strong>clear the timer, you need to reduce your disk usage in that disk partition to an amount less than your soft quota</strong>. When you exceed your quota, you should see system messages appear. Some applications can hide this, or it may appear in a console window rather than in the window in which you are working. We are working on a small script that we will run minimally once a week, and more likely, once a day, that will look for ‘over-quota’ conditions, and send an email alert to each person over quota.</p></blockquote><p>总结来说就是：</p><ul><li><strong>存储是有配额限制的</strong>，这种配额限制包括两种形式，<strong>一种是软限制(quota)，另一种是硬限制(limit)</strong></li><li>当用户的<strong>存储超出软限制</strong>，<strong>开启倒计时</strong>，这个倒计时就是grace，默认为7天，<strong>倒计时到期如果用户存储还是高于软显示，那么就不能继续写入数据</strong>；超出硬限制，直接就用不了了。</li></ul><hr><h2 id="给用户设置配额"><a href="#给用户设置配额" class="headerlink" title="给用户设置配额"></a>给用户设置配额</h2><h3 id="查看文件系统"><a href="#查看文件系统" class="headerlink" title="查看文件系统"></a>查看文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df -T -h</span><br><span class="line">  Filesystem              Type      Size  Used Avail Use% Mounted on</span><br><span class="line">  /dev/mapper/centos-root xfs        50G   35G   16G  69% /</span><br><span class="line">  devtmpfs                devtmpfs   24G     0   24G   0% /dev</span><br><span class="line">  tmpfs                   tmpfs      24G  8.0K   24G   1% /dev/shm</span><br><span class="line">  tmpfs                   tmpfs      24G   42M   24G   1% /run</span><br><span class="line">  tmpfs                   tmpfs      24G     0   24G   0% /sys/fs/cgroup</span><br><span class="line">  /dev/sdd1               ext4      1.8T  1.6T  156G  92% /datastore_2</span><br><span class="line">  /dev/sdc1               ext4      3.6T  3.2T  291G  92% /workstation</span><br><span class="line">  /dev/sda1               xfs       494M  214M  281M  44% /boot</span><br><span class="line">  /dev/mapper/centos-home xfs       1.8T  1.5T  353G  81% /home</span><br><span class="line">  tmpfs                   tmpfs     4.7G     0  4.7G   0% /run/user/0</span><br><span class="line">  /data                   nfs4      107T   59T   49T  55% /data</span><br><span class="line">  tmpfs                   tmpfs     4.7G     0  4.7G   0% /run/user/1021</span><br><span class="line">  tmpfs                   tmpfs     4.7G     0  4.7G   0% /run/user/1035</span><br><span class="line">  tmpfs                   tmpfs     4.7G     0  4.7G   0% /run/user/1028</span><br></pre></td></tr></table></figure><p>上面输出结果中的Type即为磁盘的文件系统，这里主要包括<code>xfs</code>, <code>ext4</code>,</p><hr><h3 id="针对ext4文件系统的配额管理"><a href="#针对ext4文件系统的配额管理" class="headerlink" title="针对ext4文件系统的配额管理"></a>针对ext4文件系统的配额管理</h3><ul><li><a href="https://www.jianshu.com/p/db7512b7400f" target="_blank" rel="noopener">/home/目录下的账户Quota（磁盘配额）</a></li><li><a href="http://www.opsers.org/base/learning-linux-the-rhel6-day-that-the-disk-quota-system.html?spm=a2c4e.10696291.0.0.6c1819a4Zq8hB0" target="_blank" rel="noopener">一天一点学习Linux之RHEL6系统上的磁盘配额</a></li><li><a href="https://www.thegeekstuff.com/2010/07/disk-quota/" target="_blank" rel="noopener">5 Steps to Setup User and Group Disk Quota on UNIX / Linux</a></li><li><a href="http://www.yolinux.com/TUTORIALS/LinuxTutorialQuotas.html" target="_blank" rel="noopener">Linux File System Quotas</a></li></ul><hr><h3 id="针对xfs文件系统的配额管理"><a href="#针对xfs文件系统的配额管理" class="headerlink" title="针对xfs文件系统的配额管理"></a>针对xfs文件系统的配额管理</h3><ul><li><a href="https://www.qingsword.com/qing/rhel-12.html" target="_blank" rel="noopener">[RHEL]-12-xfs文件系统磁盘配额</a></li><li><a href="https://kim1024.github.io/2018/11/27/quota-with-xfs.html" target="_blank" rel="noopener">XFS文件系统中quota的使用</a></li></ul><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://cng.seas.rochester.edu/CNG/docs/Quotas.html" target="_blank" rel="noopener">Disk Quotas</a></li><li><a href="https://blog.mrzhenggang.com/storage-quota-introduction/" target="_blank" rel="noopener">关于存储配额的说明</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要学习了&lt;strong&gt;查看集群存储配额&lt;/strong&gt;的方法以及&lt;strong&gt;针对不同文件系统进行配额管理&lt;/strong&gt;的办法。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="集群运维" scheme="http://showteeth.tech/categories/Linux/%E9%9B%86%E7%BE%A4%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="集群运维" scheme="http://showteeth.tech/tags/%E9%9B%86%E7%BE%A4%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>R系列之通过传参得到列表中的值</title>
    <link href="http://showteeth.tech/posts/11123.html"/>
    <id>http://showteeth.tech/posts/11123.html</id>
    <published>2020-05-10T07:53:47.000Z</published>
    <updated>2020-05-21T15:15:07.888Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<strong>通过传参得到列表中元素值</strong>的方法，主要使用的是<code>get</code>函数。和之前<a href="http://showteeth.tech/posts/14356.html">R系列之将字符串转化为变量</a>中学习的<code>get</code>可以<strong>得到字符串对应的变量的值</strong>不同的是这里的<code>get</code>指定的搜索对象是列表而不是默认的当前环境。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>想在R中实现一个<strong>类似字典</strong>的功能，因为存储的元素不是单个的元素，所以<code>named vector</code>并不是很好用，这里想到的就是使用<code>list</code>来实现，但是<code>list</code>访问的时候不能直接使用<code>list$args</code>这种形式。</p><h2 id="get函数"><a href="#get函数" class="headerlink" title="get函数"></a>get函数</h2><p>之前在<a href="http://showteeth.tech/posts/14356.html">R系列之将字符串转化为变量</a>中学习的<code>get</code>可以<strong>得到字符串对应的变量的值</strong>，这里学习的其可以根据<code>list</code>的<code>attribute</code>字符得到对应的元素信息，其实都是同一种功能：<strong>在指定的object中根据name查找元素</strong>。上述两种用法的区别是<strong>指定的object不同</strong>，get函数指定object的方法包括三种：</p><ul><li><strong>整数值</strong>表示的在<code>search</code>列表中的位置</li><li><strong>字符</strong>表示的<code>search</code>列表中元素的名称</li><li><code>an environment</code></li></ul><p>默认的位置<code>-1</code>表示的是当前的<code>environment</code>(使用<code>get</code>得到字符串对应的变量的值)。</p><hr><h2 id="实际问题"><a href="#实际问题" class="headerlink" title="实际问题"></a>实际问题</h2><p>正常的获取list中元素的方法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">test=list(name=c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">test</span><br><span class="line">  $name</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接使用整数表示的位置</span></span><br><span class="line">test[[<span class="number">1</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># 直接使用test$name</span></span><br><span class="line">test$name</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用get函数</span></span><br><span class="line">get(<span class="string">"name"</span>,test)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p>如果想传参的话：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">"name"</span></span><br><span class="line"><span class="comment"># 这个时候就得不到想要的结果</span></span><br><span class="line">test$a</span><br><span class="line">  <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用get函数成功传参</span></span><br><span class="line">get(a,test)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/9449542/access-list-element-in-r-using-get" target="_blank" rel="noopener">Access list element in r using get()</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;strong&gt;通过传参得到列表中元素值&lt;/strong&gt;的方法，主要使用的是&lt;code&gt;get&lt;/code&gt;函数。和之前&lt;a href=&quot;http://showteeth.tech/posts/14356.html&quot;&gt;R系列之将字符串转化为变量&lt;/a&gt;中学习的&lt;code&gt;get&lt;/code&gt;可以&lt;strong&gt;得到字符串对应的变量的值&lt;/strong&gt;不同的是这里的&lt;code&gt;get&lt;/code&gt;指定的搜索对象是列表而不是默认的当前环境。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R系列之在逻辑判断中传递变量</title>
    <link href="http://showteeth.tech/posts/5754.html"/>
    <id>http://showteeth.tech/posts/5754.html</id>
    <published>2020-05-08T14:29:32.000Z</published>
    <updated>2020-05-21T15:15:07.883Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了<strong>在R中的逻辑判断式中添加参数的方法</strong>，主要有两种，一种是<strong>substitute结合eval</strong>，另一种是<strong>parse结合eval</strong>，两种方法都是先得到<code>unevaluated expressions</code>，而后使用<code>eval</code>对得到的表达式进行求值。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近想在函数中添加一个<code>subset</code>命令来获取不同的数据，但是发现函数中传递的参数不能直接用到逻辑判断式中。</p><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">raw_data&lt;- data.frame(Blok=c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>))</span><br><span class="line">raw_data</span><br><span class="line">    Blok</span><br><span class="line">  <span class="number">1</span>    <span class="number">1</span></span><br><span class="line">  <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  <span class="number">3</span>    <span class="number">3</span></span><br><span class="line">  <span class="number">4</span>    <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到其中Blok大于1的行</span></span><br><span class="line">    Blok</span><br><span class="line">  <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  <span class="number">3</span>    <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="substitute结合eval"><a href="#substitute结合eval" class="headerlink" title="substitute结合eval"></a>substitute结合eval</h3><p><code>substitute</code>函数作用：</p><blockquote><p>substitute returns the parse tree for <strong>the (unevaluated) expression expr</strong>, substituting any variables bound in env.</p></blockquote><p>其实<code>substitute</code>就是用来构建一个单纯的表达式，这个表达式并没有进行求值，具体求值是<code>eval</code>函数的作用。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list中给出的是前面exp中需要替换的部分</span></span><br><span class="line"><span class="comment"># 可以发现输出的只是这个单纯的表达式，并没有对其进行求值</span></span><br><span class="line">substitute(x &lt;- x + <span class="number">1</span>, list(x = <span class="number">1</span>))</span><br><span class="line">  <span class="number">1</span> &lt;- <span class="number">1</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对这个表达式进行求值</span></span><br><span class="line"><span class="number">1</span> &lt;- <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">  Error <span class="keyword">in</span> <span class="number">1</span> &lt;- <span class="number">1</span> + <span class="number">1</span> : invalid (do_set) left-hand side to assignment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用eval函数</span></span><br><span class="line"><span class="comment"># 发现eval其实就是相当于指定了得到的表达式</span></span><br><span class="line">eval(substitute(x &lt;- x + <span class="number">1</span>, list(x = <span class="number">1</span>)))</span><br><span class="line">  Error <span class="keyword">in</span> <span class="number">1</span> &lt;- <span class="number">1</span> + <span class="number">1</span> : invalid (do_set) left-hand side to assignment</span><br></pre></td></tr></table></figure><p></p><p>回归到前面的问题上：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">subset(raw_data,eval(substitute(x &gt; <span class="number">1</span>, list(x = as.name(<span class="string">"Blok"</span>)))))</span><br><span class="line">    Blok</span><br><span class="line">  <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  <span class="number">3</span>    <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这里as.name的用法</span></span><br><span class="line"><span class="comment"># 得到的是Blok而不是字符串"Blok"</span></span><br><span class="line"><span class="comment"># subset中可以直接传入前面data的列名即可</span></span><br><span class="line">as.name(<span class="string">"Blok"</span>)</span><br><span class="line">  Blok</span><br><span class="line"><span class="string">"Blok"</span></span><br><span class="line">  [<span class="number">1</span>] <span class="string">"Blok"</span></span><br><span class="line"></span><br><span class="line">subset(raw_data,Blok&gt;<span class="number">1</span>)</span><br><span class="line">    Blok</span><br><span class="line">  <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  <span class="number">3</span>    <span class="number">3</span></span><br><span class="line">subset(raw_data,<span class="string">"Blok"</span>&gt;<span class="number">1</span>)</span><br><span class="line">    Blok</span><br><span class="line">  <span class="number">1</span>    <span class="number">1</span></span><br><span class="line">  <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  <span class="number">3</span>    <span class="number">3</span></span><br><span class="line">  <span class="number">4</span>    <span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p>关于<code>as.name</code>:</p><blockquote><p>A ‘name’ (also known as a ‘symbol’) is <strong>a way to refer to R objects by name</strong> (rather than the value of the object, if any, bound to that name).</p></blockquote><hr><h3 id="parse结合eval"><a href="#parse结合eval" class="headerlink" title="parse结合eval"></a>parse结合eval</h3><p>parse函数功能：</p><blockquote><p>parse returns the parsed but <strong>unevaluated expressions in a list</strong>.</p></blockquote><p>其功能和前面的<code>substitute</code>类似，都是返回<code>unevaluated expressions</code>。</p><p>针对前面的问题：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keep_rows &lt;- <span class="string">"Blok&gt;1"</span></span><br><span class="line">parse(text=keep_rows)</span><br><span class="line">  expression(Blok&gt;<span class="number">1</span>)</span><br><span class="line">subset(raw_data,eval(parse(text=keep_rows)))</span><br><span class="line">    Blok</span><br><span class="line">  <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  <span class="number">3</span>    <span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/6474922/how-to-paste-text-and-variables-into-a-logical-expression-in-r" target="_blank" rel="noopener">How to paste text and variables into a logical expression in R?</a></li><li><a href="https://stackoverflow.com/questions/30831785/convert-a-character-variable-into-a-logical-expression-in-order-to-use-it-later" target="_blank" rel="noopener">Convert a character variable into a logical expression in order to use it later inside the subset argument of the subset() function</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了&lt;strong&gt;在R中的逻辑判断式中添加参数的方法&lt;/strong&gt;，主要有两种，一种是&lt;strong&gt;substitute结合eval&lt;/strong&gt;，另一种是&lt;strong&gt;parse结合eval&lt;/strong&gt;，两种方法都是先得到&lt;code&gt;unevaluated expressions&lt;/code&gt;，而后使用&lt;code&gt;eval&lt;/code&gt;对得到的表达式进行求值。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之Matplotlib-添加垂直和水平线</title>
    <link href="http://showteeth.tech/posts/269.html"/>
    <id>http://showteeth.tech/posts/269.html</id>
    <published>2020-04-24T14:18:48.000Z</published>
    <updated>2020-05-21T15:15:07.866Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了<strong>绘制垂直和水平线的两种方法以及这两种方法之间的区别</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在完成一些图形的绘制(如散点图)之后，如果想明确展示过滤阈值的位置可以在原有图形上添加水平和垂直线进行表示。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>垂直和水平线的绘制分别有两种函数可以实现:</p><ul><li><code>plt.vlines(x, ymin, ymax, colors=&#39;k&#39;, linestyles=&#39;solid&#39;, label=&#39;&#39;, *, data=None, **kwargs)</code>和<code>plt.hlines(x, ymin, ymax, colors=&#39;k&#39;, linestyles=&#39;solid&#39;, label=&#39;&#39;, *, data=None, **kwargs)</code></li><li><code>plt.axvline(x=0, ymin=0, ymax=1, **kwargs)</code>和<code>plt.axhline(x=0, ymin=0, ymax=1, **kwargs)</code></li></ul><p><mark>两者的区别：</mark></p><ul><li>默认参数的区别：<code>plt.vlines</code>最少需要三个参数<code>x</code>, <code>ymin</code>, <code>ymax</code>才能使用；而<code>plt.axvline</code>只需要<code>x</code>即可使用，<code>plt.axvline</code>不设置<code>ymin</code>, <code>ymax</code>，<strong>画出来的图会自动占满整个图片</strong></li><li>参数的差异：另外的区别就是在<code>plt.vlines</code>可以使用<code>colors</code>、<code>linestyles</code>；但咋<code>plt.axvline</code>需要使用<code>color</code>、<code>linestyle(可用选项也不同)</code></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了&lt;strong&gt;绘制垂直和水平线的两种方法以及这两种方法之间的区别&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之Matplotlib-绘制密度散点图</title>
    <link href="http://showteeth.tech/posts/24328.html"/>
    <id>http://showteeth.tech/posts/24328.html</id>
    <published>2020-04-24T08:03:13.000Z</published>
    <updated>2020-05-21T15:15:07.863Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了<strong>使用<code>Python</code>的<code>matplotlib</code>给散点图添加点的分布密度</strong>的方法。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>散点图是展示两个变量之间关系的非常有效的方式，理想情况是两个变量之间的均匀的，沿着其具有相关性的方向均匀分布，但是也存在一些例外，比如大部分的点都聚集在相关性方向的某一部分，这样的话对展示效果就会大打折扣，为了解决这个问题，可以给散点图添加一个颜色，而这个颜色就是局部点的分布密度，这种图就是密度散点图。</p><hr><h2 id="普通散点图"><a href="#普通散点图" class="headerlink" title="普通散点图"></a>普通散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate fake data</span></span><br><span class="line">x = np.random.normal(size=<span class="number">1000</span>)</span><br><span class="line">y = x * <span class="number">3</span> + np.random.normal(size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="comment"># s表示点的大小</span></span><br><span class="line">ax.scatter(x, y, s=<span class="number">100</span>, edgecolor=<span class="string">''</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/density_scatter_raw.png.png" alt="density_scatter_raw.png"></p><hr><h2 id="密度散点图"><a href="#密度散点图" class="headerlink" title="密度散点图"></a>密度散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 导入计算概率密度的函数</span></span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> gaussian_kde</span><br><span class="line"></span><br><span class="line">x = np.random.normal(size=<span class="number">1000</span>)</span><br><span class="line">y = x * <span class="number">3</span> + np.random.normal(size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算概率密度</span></span><br><span class="line">xy = np.vstack([x,y])</span><br><span class="line">z = gaussian_kde(xy)(xy)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="comment"># 使用概率密度来对点进行染色</span></span><br><span class="line">ax.scatter(x, y, c=z, s=<span class="number">100</span>, edgecolor=<span class="string">''</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里的一定要是参数<code>c</code>，而不是使用参数<code>color</code></li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/density_scatter_final.png.png" alt="density_scatter_final.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/49662964/density-scatter-plot-for-huge-dataset-in-matplotlib" target="_blank" rel="noopener">Density scatter plot for huge dataset in matplotlib</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了&lt;strong&gt;使用&lt;code&gt;Python&lt;/code&gt;的&lt;code&gt;matplotlib&lt;/code&gt;给散点图添加点的分布密度&lt;/strong&gt;的方法。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列-使用patchwork进行图形排布</title>
    <link href="http://showteeth.tech/posts/60938.html"/>
    <id>http://showteeth.tech/posts/60938.html</id>
    <published>2020-04-20T08:27:15.000Z</published>
    <updated>2020-05-21T15:15:07.892Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了使用<code>patchwork</code>来进行图形排布的各种基础使用。</p></div><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>patchwork</code>的功能和<code>cowplot</code>的功能比较类似，都是可以量多个<code>ggplot</code>对象进行排布的<code>R</code>包，相比于<code>cowplot</code>，<code>patchwork</code>使用更加简单，直接使用<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>|</code>、<code>&amp;</code>等即可实现多种多样的图形排布，而<code>cowplot</code>中还有使用<code>plot_grid</code>函数。</p><hr><h2 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line">p1 &lt;- ggplot(mtcars) + </span><br><span class="line">  geom_point(aes(mpg, disp)) + </span><br><span class="line">  ggtitle(<span class="string">'Plot 1'</span>)</span><br><span class="line"></span><br><span class="line">p2 &lt;- ggplot(mtcars) + </span><br><span class="line">  geom_boxplot(aes(gear, disp, group = gear)) + </span><br><span class="line">  ggtitle(<span class="string">'Plot 2'</span>)</span><br><span class="line"></span><br><span class="line">p3 &lt;- ggplot(mtcars) + </span><br><span class="line">  geom_point(aes(hp, wt, colour = mpg)) + </span><br><span class="line">  ggtitle(<span class="string">'Plot 3'</span>)</span><br><span class="line"></span><br><span class="line">p4 &lt;- ggplot(mtcars) + </span><br><span class="line">  geom_bar(aes(gear)) + </span><br><span class="line">  facet_wrap(~cyl) + </span><br><span class="line">  ggtitle(<span class="string">'Plot 4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span>(patchwork)</span><br><span class="line">p1+p2+p3+p4</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/patchwork_example_plots.png.png" alt="patchwork_example_plots.png"></p><hr><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将p1和p2合并在一起</span></span><br><span class="line">p1 + p2</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/patchwork_add_plots.png.png" alt="patchwork_add_plots.png"></p><hr><h2 id="控制layout"><a href="#控制layout" class="headerlink" title="控制layout"></a>控制layout</h2><p>控制输出结果为3行，并且<strong>先按列进行填充</strong>，也就是先把第一列的3行填满，然后再去第二列：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1 + p2 + p3 + p4 + plot_layout(nrow = <span class="number">3</span>, byrow = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/patchwork_layout_plots1.png.png" alt="patchwork_layout_plots1.png"></p><hr><h2 id="纵向合并"><a href="#纵向合并" class="headerlink" title="纵向合并"></a>纵向合并</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 纵向合并图</span></span><br><span class="line">p1 / p2</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/patchwork_stacking_plots.png.png" alt="patchwork_stacking_plots.png"></p><p><strong>嵌套合并</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1 | (p2 / p3)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/patchwork_stacking_nested_plots.png.png" alt="patchwork_stacking_nested_plots.png"></p><hr><h2 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h2><p><strong>添加title</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(p1 | (p2 / p3)) + </span><br><span class="line">  plot_annotation(title = <span class="string">'The surprising story about mtcars'</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/patchwork_annotating_title_plots.png.png" alt="patchwork_annotating_title_plots.png"></p><p><strong>添加label</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag_levels = 'A'是A、B、C的形式</span></span><br><span class="line">p1 + p2 + p3 + </span><br><span class="line">  plot_annotation(tag_levels = <span class="string">'I'</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/patchwork_annotating_label_plots.png.png" alt="patchwork_annotating_label_plots.png"></p><hr><h2 id="合并主题"><a href="#合并主题" class="headerlink" title="合并主题"></a>合并主题</h2><p>使用<code>&amp;</code>来<strong>将同一个主题设置应用到多个子图中</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(patchwork)</span><br><span class="line">FeaturePlot(mouse_fibro_combined, features = c(<span class="string">"Trem2"</span>,<span class="string">"Cd9"</span>), pt.size=<span class="number">0.5</span>, label = <span class="literal">TRUE</span>) &amp; </span><br><span class="line">  scale_colour_gradientn(colours = c(<span class="string">"blue"</span>,<span class="string">"white"</span>,<span class="string">"#d3583d"</span>))</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://patchwork.data-imaginist.com/articles/patchwork.html" target="_blank" rel="noopener">Getting Started</a></li><li><a href="https://patchwork.data-imaginist.com/articles/guides/assembly.html" target="_blank" rel="noopener">Plot Assembly</a></li><li><a href="https://patchwork.data-imaginist.com/articles/guides/layout.html" target="_blank" rel="noopener">Controlling Layouts</a></li><li><a href="https://patchwork.data-imaginist.com/articles/guides/annotation.html" target="_blank" rel="noopener">Adding Annotation and Style</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了使用&lt;code&gt;patchwork&lt;/code&gt;来进行图形排布的各种基础使用。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列-放大局部</title>
    <link href="http://showteeth.tech/posts/42932.html"/>
    <id>http://showteeth.tech/posts/42932.html</id>
    <published>2020-04-13T03:25:02.000Z</published>
    <updated>2020-05-21T15:15:07.900Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了如何<strong>放大图片中的某部分</strong>，可以对<strong>某个分类的数据</strong>进行放大，也可以对<strong>指定范围的数据</strong>进行放大。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>画完图之后可能想放大展示某一部分，遇到这种情况可以使用ggplot2的拓展<code>ggforce</code>来实现。</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages(<span class="string">"ggforce"</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><h3 id="常规图"><a href="#常规图" class="headerlink" title="常规图"></a>常规图</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ggplot(iris, aes(Petal.Length, Petal.Width, colour = Species)) +</span><br><span class="line">  geom_point()</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot2_zoom_raw.png.png" alt="ggplot2_zoom_raw.png"></p><hr><h3 id="对某个分类的数据放大"><a href="#对某个分类的数据放大" class="headerlink" title="对某个分类的数据放大"></a>对某个分类的数据放大</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ggplot(iris, aes(Petal.Length, Petal.Width, colour = Species)) +</span><br><span class="line">  geom_point() +</span><br><span class="line">  facet_zoom(x = Species == <span class="string">'versicolor'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot2_zoom_cat.png.png" alt="ggplot2_zoom_cat.png"></p><p><strong>调整一下背景</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ggplot(iris, aes(Petal.Length, Petal.Width, colour = Species)) +</span><br><span class="line">    geom_point() +</span><br><span class="line">    facet_zoom(x = Species == <span class="string">'versicolor'</span>) + cowplot::theme_cowplot()</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot2_zoom_cat_theme.png.png" alt="ggplot2_zoom_cat_theme.png"></p><hr><h3 id="放大指定坐标范围"><a href="#放大指定坐标范围" class="headerlink" title="放大指定坐标范围"></a>放大指定坐标范围</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ggplot(iris, aes(Petal.Length, Petal.Width, colour = Species)) +</span><br><span class="line">    geom_point() +</span><br><span class="line">    facet_zoom(xlim = c(<span class="number">2</span>, <span class="number">4</span>)) + cowplot::theme_cowplot()</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/ggplot2_zoom_range.png.png" alt="ggplot2_zoom_range.png"></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://mp.weixin.qq.com/s/BxPDHi57EUWmYZ6_5UZ4NA" target="_blank" rel="noopener">ggplot2 图区域放大</a></li><li><a href="https://ggforce.data-imaginist.com/index.html" target="_blank" rel="noopener">ggforce</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了如何&lt;strong&gt;放大图片中的某部分&lt;/strong&gt;，可以对&lt;strong&gt;某个分类的数据&lt;/strong&gt;进行放大，也可以对&lt;strong&gt;指定范围的数据&lt;/strong&gt;进行放大。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之指定模块加载路径</title>
    <link href="http://showteeth.tech/posts/59896.html"/>
    <id>http://showteeth.tech/posts/59896.html</id>
    <published>2020-04-13T02:04:47.000Z</published>
    <updated>2020-05-21T15:15:07.909Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了Python中<strong>包和模块的加载方式</strong>以及<strong>添加模块和包的搜索路径</strong>。在包和模块的加载方式中，学习了包括<strong>加载顺序</strong>、<strong><code>__file__</code>变量</strong>、<strong><code>sys.argv[0]</code>变量</strong>、<strong>加载的包和模块的存在位置</strong>；在添加模块和包的搜索路径中，学习了<strong>暂时添加和永久添加的方法</strong>。</p></div><a id="more"></a><h2 id="包和模块的加载"><a href="#包和模块的加载" class="headerlink" title="包和模块的加载"></a>包和模块的加载</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><code>module</code>：模块， 一个 <code>py</code> 文件或以其他文件形式存在的可被导入的就是一个模块</li><li><code>package</code>：包，包含有 <code>__init__</code> 文件的文件夹</li><li><code>relative path</code>：相对路径，相对于某个目录的路径</li><li><code>absolute path</code>：绝对路径，全路径</li></ul><hr><h3 id="执行Python模块"><a href="#执行Python模块" class="headerlink" title="执行Python模块"></a>执行Python模块</h3><p><code>Python</code> 执行一个 <code>py</code> 文件，无论执行的方式是用绝对路径还是相对路径，<code>interpreter</code> 都会把文件所在的 <code>directory</code> 加入 <code>sys.path</code> 这个 <code>list</code> 中，而<code>sys.path</code>又是<code>Python</code>查找包和模块的列表。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (sys.path[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p></p><p>用<strong>绝对路径</strong>或者<strong>相对路径</strong>执行上述脚本：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用相对路径</span></span><br><span class="line">./test.py</span><br><span class="line">  /home/user/learn/python_learn/module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用绝对路径执行</span></span><br><span class="line">/home/user/learn/python_learn/module/test.py</span><br><span class="line">  /home/user/learn/python_learn/module</span><br></pre></td></tr></table></figure><p></p><p>相对路径和绝对路径都输出相同的结果，结果表明无论哪种执行方式，<code>test.py</code> 所在的<strong>文件夹</strong>都会被加入 <code>sys.path</code> 的首位，也就是索引为<code>0</code>的位置.</p><hr><h3 id="包和模块的加载顺序"><a href="#包和模块的加载顺序" class="headerlink" title="包和模块的加载顺序"></a>包和模块的加载顺序</h3><p><code>test.py</code> 所在的<strong>文件夹</strong>被加入到<code>sys.path[0]</code>是不是就意味着优先加载该目录下的<code>module</code>呢？这个涉及到<code>module</code>或者包的加载顺序问题。</p><p><code>Python</code>解释器查找包，首先搜索 <code>built-in module</code>，其次搜索 <code>sys.path(包括当前文件夹以及其他加载包的路径)</code> ，这样的查找顺序将<strong>会导致同名包或模块被遮蔽</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前的文件结构</span></span><br><span class="line"><span class="comment"># 其中redis.py和sys.py均为空</span></span><br><span class="line">tree .</span><br><span class="line">  .</span><br><span class="line">  ├── sys.py</span><br><span class="line">  ├── redis.py</span><br><span class="line">  ├── test2.py</span><br><span class="line">  └── test.py</span><br><span class="line"></span><br><span class="line">  0 directories, 4 files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试文件</span></span><br><span class="line">cat test2.py</span><br><span class="line">  <span class="comment">#!/usr/bin/env python</span></span><br><span class="line">  <span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#test2.py</span></span><br><span class="line">  import sys</span><br><span class="line">  <span class="built_in">print</span> (sys.path)</span><br><span class="line"></span><br><span class="line">  from redis import Redi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行测试文件</span></span><br><span class="line">./test2.py</span><br><span class="line">  [<span class="string">'/home/user/learn/python_learn/module'</span>, <span class="string">'/home/user/anaconda3/lib/python37.zip'</span>, <span class="string">'/home/user/anaconda3/lib/python3.7'</span>, <span class="string">'/home/user/anaconda3/lib/python3.7/lib-dynload'</span>, <span class="string">'/home/user/.local/lib/python3.7/site-packages'</span>, <span class="string">'/home/user/.local/lib/python3.7/site-packages/statannot-0.1.0-py3.7.egg'</span>, <span class="string">'/home/user/.local/lib/python3.7/site-packages/cycler-0.10.0-py3.7.egg'</span>, <span class="string">'/home/softwares/anaconda3/lib/python3.7/site-packages'</span>, <span class="string">'/home/user/anaconda3/lib/python3.7/site-packages'</span>]</span><br><span class="line">  Traceback (most recent call last):</span><br><span class="line">    File <span class="string">"./test2.py"</span>, line 8, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      from redis import Redis</span><br><span class="line">  ImportError: cannot import name <span class="string">'Redis'</span> from <span class="string">'redis'</span> (/home/user/learn/python_learn/module/redis.py)</span><br></pre></td></tr></table></figure><p>由于 <code>sys</code> 是 <code>built-in module</code>，即使在同目录下有同名模块(<code>sys.py</code>文件)，解释器依然可以找到正确的 <code>sys</code> 模块(从输出的结果可以看出)，可以证实 <code>built-in module</code> 不会被遮蔽，拥有最高的模块加载权限；而 <code>redis</code> 属于第三方模块，默认安装位置是 <code>Python</code> 环境变量中的 <code>site-packages</code>，解释器启动之后会将此目录中的内容加入 <code>sys.path</code>，由于当前目录会在 <code>sys.path</code> 的首位，当前目录的 <code>redis</code> 优先被找到，<code>site-packages</code> 中的 <code>redis</code> 模块被遮蔽了(当前的<code>redis.py</code>中并没有<code>Redi</code>方法，所以报错)。</p><p><mark>总的来说就是：built-in module &gt; 当前目录 &gt; 各种site-packages目录</mark></p><hr><h3 id="模块中的file变量"><a href="#模块中的file变量" class="headerlink" title="模块中的file变量"></a>模块中的<strong>file</strong>变量</h3><blockquote><p><code>__file__</code> is the pathname of the file from which the module was loaded, if it was loaded from a file.</p></blockquote><p>如果一个模块是<strong>从文件加载</strong>的，<code>__file__</code> 就是<strong>该模块的路径名</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块的内容</span></span><br><span class="line">cat test.py</span><br><span class="line">  <span class="comment">#!/usr/bin/env python</span></span><br><span class="line">  <span class="comment"># encoding: utf-8</span></span><br><span class="line">  import sys</span><br><span class="line">  <span class="built_in">print</span> (__file__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模块的文件</span></span><br><span class="line">cat test2.py </span><br><span class="line">  <span class="comment">#!/usr/bin/env python</span></span><br><span class="line">  <span class="comment"># encoding: utf-8</span></span><br><span class="line">  import <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行test2.py </span></span><br><span class="line">./test2.py </span><br><span class="line">  /home/user/learn/python_learn/module/test.py</span><br></pre></td></tr></table></figure><p></p><p>可以看到执行的是<code>test2.py</code>，返回的却是<code>test.py</code>的路径，因为<code>__file__</code>就是<strong>该模块的路径名</strong>。</p><h3 id="sys-argv-0-变量"><a href="#sys-argv-0-变量" class="headerlink" title="sys.argv[0] 变量"></a>sys.argv[0] 变量</h3><p>上面提到了<code>__file__</code>变量，与该变量功能类似的还有<code>sys.argv[0]</code> 变量，两者都是返回文件的路径，但是却存在一些差异。<strong><code>sys.argv[0]</code>返回的是被执行文件的路径，并且被执行文件如果是相对路径执行则返回相对路径，绝对路径执行就返回绝对路径，而<code>__file__</code>返回的是被加载的模块的绝对路径</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块的内容</span></span><br><span class="line">cat test.py</span><br><span class="line">  <span class="comment">#!/usr/bin/env python</span></span><br><span class="line">  <span class="comment"># encoding: utf-8</span></span><br><span class="line">  import sys</span><br><span class="line">  <span class="built_in">print</span> (__file__)</span><br><span class="line">  <span class="built_in">print</span> (sys.argv[0])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模块的文件</span></span><br><span class="line">cat test2.py </span><br><span class="line">  <span class="comment">#!/usr/bin/env python</span></span><br><span class="line">  <span class="comment"># encoding: utf-8</span></span><br><span class="line">  import <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行test2.py——相对路径</span></span><br><span class="line">./test2.py </span><br><span class="line">  /home/user/learn/python_learn/module/test.py</span><br><span class="line">  ./test2.py</span><br><span class="line"><span class="comment"># 执行test2.py——绝对路径</span></span><br><span class="line">/home/user/learn/python_learn/module/test2.py</span><br><span class="line">  /home/user/learn/python_learn/module/test.py</span><br><span class="line">  /home/user/learn/python_learn/module/test2.py</span><br></pre></td></tr></table></figure><p>上述实例中，虽然<code>sys.argv[0]</code>在<code>test.py</code>文件中，但是真正被执行还是在<code>test2.py</code>文件中，所以返回的是<code>test2.py</code>的路径。</p><hr><h3 id="被加载的包和module存放位置"><a href="#被加载的包和module存放位置" class="headerlink" title="被加载的包和module存放位置"></a>被加载的包和module存放位置</h3><p>既然 <code>Python</code> 是在 <code>built-in module</code>和<code>sys.path</code> 中搜索模块的，那载入的模块存放在何处？答案就是 <code>sys.modules</code>。模块一经载入，<code>Python</code> 会把这个模块加入 <code>sys.modules</code> 中供下次载入使用，<strong>这样可以加速模块的引入，起到缓存的作用</strong>。</p><p><code>sys.modules</code>其实是一个加载了的模块和包的字典，<code>key</code>为包和模块的名称。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line"><span class="comment"># 查看数据类型</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(sys.modules)</span><br><span class="line">&lt;class <span class="string">'dict'</span>&gt;</span><br><span class="line"><span class="comment"># built-in module会被预先加载</span></span><br><span class="line">&gt;&gt;&gt; sys.modules[<span class="string">'os'</span>]</span><br><span class="line">&lt;module <span class="string">'os'</span> from <span class="string">'/home/user/anaconda3/lib/python3.7/os.py'</span>&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; sys.modules[<span class="string">'pandas'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'pandas'</span></span><br><span class="line">&gt;&gt;&gt; import pandas as pd</span><br><span class="line">&gt;&gt;&gt; sys.modules[<span class="string">'pandas'</span>]</span><br><span class="line">&lt;module <span class="string">'pandas'</span> from <span class="string">'/home/softwares/anaconda3/lib/python3.7/site-packages/pandas/__init__.py'</span>&gt;</span><br></pre></td></tr></table></figure><p></p><p>借助 <code>sys.modules</code> 和 <code>__file__</code>，可以<strong>动态获取所有已加载模块目录和路径</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># built-in module的路径</span></span><br><span class="line">&gt;&gt;&gt; sys.modules[<span class="string">'os'</span>].__file__</span><br><span class="line"><span class="string">'/home/user/anaconda3/lib/python3.7/os.py'</span></span><br><span class="line"><span class="comment"># 第三方包的路径</span></span><br><span class="line">&gt;&gt;&gt; sys.modules[<span class="string">'pandas'</span>].__file__</span><br><span class="line"><span class="string">'/home/softwares/anaconda3/lib/python3.7/site-packages/pandas/__init__.py'</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="添加模块和包的搜索路径"><a href="#添加模块和包的搜索路径" class="headerlink" title="添加模块和包的搜索路径"></a>添加模块和包的搜索路径</h2><p>在使用Python的时候经常遇到有些包安装需要一个大环境的支持，而这个大环境中的依赖包可能和当前环境中的其他包存在冲突，所以比较好的解决办法就是将这种包安装在一个虚拟环境中，然后将这个虚拟环境中Python包的地址添加到正常使用的Python包的搜索路径中。</p><p>前面已经学习了Python中包和模块加载的基础知识，这里学习如何添加模块和包的搜索路径。</p><h3 id="暂时添加"><a href="#暂时添加" class="headerlink" title="暂时添加"></a>暂时添加</h3><p><strong>暂时添加的搜索路径会在Python关闭之后被清除，下次重新启动Python就不会再有之前添加的搜索路径信息</strong>。</p><p>按照前面学习了内容，可以直接修改<code>sys.path</code>列表：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"/home/user/Library"</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="永久添加"><a href="#永久添加" class="headerlink" title="永久添加"></a>永久添加</h3><p><strong>永久添加就是在重新启动Python之后之前添加的搜索路径信息仍然有效</strong>，主要包括两种方法：</p><ul><li>修改|添加环境变量<code>PYTHONPATH</code>，Linux直接在<code>~/.bashrc</code>中修改即可</li><li>在<code>site-packages</code>目录中增加<code>.pth</code>文件</li></ul><h4 id="PYTHONPATH"><a href="#PYTHONPATH" class="headerlink" title="PYTHONPATH"></a>PYTHONPATH</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PYTHONPATH=/home/user/Library:<span class="variable">$PYTHONPATH</span></span><br></pre></td></tr></table></figure><hr><h4 id="增加-pth文件"><a href="#增加-pth文件" class="headerlink" title="增加.pth文件"></a>增加.pth文件</h4><p>查看<code>site-packages</code>目录：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import site</span><br><span class="line">&gt;&gt;&gt; site.getsitepackages()</span><br><span class="line">[<span class="string">'/home/user/anaconda3/lib/python3.7/site-packages'</span>]</span><br></pre></td></tr></table></figure><p></p><p>在<code>site-packages</code>目录中添加一个路径文件，如<code>cafffe.pth</code>，<strong>必须以<code>.pth</code>为后缀</strong>，写上你要加入的模块文件所在的目录名称:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/user/Library/caffe</span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://sanyuesha.com/2016/05/28/python-module-path-find/" target="_blank" rel="noopener">如何理解 Python 的模块查找原理与方式</a></li><li><a href="https://www.jianshu.com/p/244675429cd3" target="_blank" rel="noopener">理解 python 模块加载和路径查找</a></li><li><a href="https://www.jianshu.com/p/cb6447e1cf88" target="_blank" rel="noopener">为Python添加默认模块搜索路径</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了Python中&lt;strong&gt;包和模块的加载方式&lt;/strong&gt;以及&lt;strong&gt;添加模块和包的搜索路径&lt;/strong&gt;。在包和模块的加载方式中，学习了包括&lt;strong&gt;加载顺序&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;__file__&lt;/code&gt;变量&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;sys.argv[0]&lt;/code&gt;变量&lt;/strong&gt;、&lt;strong&gt;加载的包和模块的存在位置&lt;/strong&gt;；在添加模块和包的搜索路径中，学习了&lt;strong&gt;暂时添加和永久添加的方法&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/categories/Python/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之Matplotlib-自定义colormap</title>
    <link href="http://showteeth.tech/posts/10006.html"/>
    <id>http://showteeth.tech/posts/10006.html</id>
    <published>2020-04-07T09:03:42.000Z</published>
    <updated>2020-05-21T15:15:07.870Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了在<code>Matplotlib</code>中<strong>自定义colormap</strong>的方法。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近想利用给定的颜色设置一个连续变化的<code>colormap</code>，发现<code>Matplotlib</code>并没有像<code>R</code>中<code>ggplot2</code>的<code>scale_colour_gradient2(low = &quot;white&quot;, mid = &quot;#000000&quot;, high = &quot;red&quot;)</code>设置<code>colormap</code>这么简便的方法，这里记录一下简单设置(能用)的方法。</p><hr><h2 id="设置colormap"><a href="#设置colormap" class="headerlink" title="设置colormap"></a>设置colormap</h2><p>如下代码实现了<code>low=&quot;grey&quot;, middle=&quot;black&quot;, high=&quot;red&quot;</code>的效果：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LinearSegmentedColormap</span><br><span class="line">cmap = LinearSegmentedColormap.from_list(<span class="string">'custom greys'</span>, [(<span class="number">.8</span>,<span class="number">.8</span>,<span class="number">.8</span>),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)], N=<span class="number">256</span>)</span><br></pre></td></tr></table></figure><p></p><p>关键点：</p><ul><li><code>LinearSegmentedColormap.from_list</code>是<strong>从颜色列表</strong>创建colormap的函数，默认的<code>LinearSegmentedColormap</code>函数是<strong>从颜色字典</strong>进行colormap创建的</li><li><code>&#39;custom greys&#39;</code>：colormap的名称</li><li><code>(.8,.8,.8)</code>颜色并不是使用的<code>(255, 255, 255)</code>这种<code>0~255</code>范围的数字表示的，而是使用的<code>0-1</code>之间的数字表示的，如果使用<code>0~255</code>的数字表示会报错<code>ValueError: RGBA values should be within 0-1 range</code>；还可以使用<strong>十六进制的字符表示的颜色</strong>创建</li><li><code>N=256</code>表示颜色设置的颜色之间过渡的bin数目，数值越大颜色过渡越平滑</li></ul><hr><h2 id="颜色表示和转换"><a href="#颜色表示和转换" class="headerlink" title="颜色表示和转换"></a>颜色表示和转换</h2><h3 id="内置的颜色及简写"><a href="#内置的颜色及简写" class="headerlink" title="内置的颜色及简写"></a>内置的颜色及简写</h3><p><code>Matplotlib</code>内置了一些常见的颜色，这些颜色可以使用指定的简写形式来代表，如果想指定的颜色不在这个列表内是不能自己想当然或者使用常见的简写来表示的。内置的常见颜色以及简写如下：</p><ul><li>b: blue</li><li>g: green</li><li>r: red</li><li>c: cyan</li><li>m: magenta</li><li>y: yellow</li><li>k: black</li><li>w: white</li></ul><hr><h3 id="将颜色转换为rgb、rgba"><a href="#将颜色转换为rgb、rgba" class="headerlink" title="将颜色转换为rgb、rgba"></a>将颜色转换为rgb、rgba</h3><p>内置的颜色都是非常常见的颜色，数目非常少，而实际使用过程中可能会遇到一些不在这个内置颜色列表中的颜色，这个时候可以有两种方式：</p><ul><li>使用<strong>十六进制的字符表示的颜色</strong></li><li>使用<code>Matplotlib</code>内置的函数将<strong>不在内置颜色中的常用颜色</strong>或者<strong>十六进制的字符表示的颜色</strong>转换为<code>0~1</code>范围的数字</li></ul><p>如下代码展示了将<strong>不在内置颜色中的常用颜色</strong>或者<strong>十六进制的字符表示的颜色</strong>转换为<code>0~1</code>范围的数字的方法：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将常用英文颜色转化为0-1之间的颜色表示</span></span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ColorConverter</span><br><span class="line">ColorConverter.to_rgb(<span class="string">"black"</span>)</span><br><span class="line">  (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将16进制的字符转换为0-1之间的颜色表示</span></span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ColorConverter</span><br><span class="line">ColorConverter.to_rgb(<span class="string">"#000000"</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="三种颜色指定方式示例"><a href="#三种颜色指定方式示例" class="headerlink" title="三种颜色指定方式示例"></a>三种颜色指定方式示例</h3><p>下面使用四种颜色指定方式进行示例：</p><ul><li><strong>颜色指定方式一：0-1范围内的数字</strong><code>colors = [(1, 0, 0), (0, 1, 0), (0, 0, 1)] # R -&gt; G -&gt; B</code></li><li><strong>颜色指定方式二+三：内置的颜色以及16进制的字符表示</strong><code>colors=[&#39;r&#39;,&#39;#008000&#39;,&#39;b&#39;]</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用(255,0,0)表示red会出错</span></span><br><span class="line">ValueError: RGBA values should be within <span class="number">0</span><span class="number">-1</span> range</span><br><span class="line"><span class="comment"># 可以使用自带的工具进行转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试数据</span></span><br><span class="line">x = np.arange(<span class="number">0</span>, np.pi, <span class="number">0.1</span>)</span><br><span class="line">y = np.arange(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">0.1</span>)</span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line">Z = np.cos(X) * np.sin(Y) * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># colors = [(1, 0, 0), (0, 1, 0), (0, 0, 1)]  # R -&gt; G -&gt; B</span></span><br><span class="line">colors=[<span class="string">'r'</span>,<span class="string">'#008000'</span>,<span class="string">'b'</span>]</span><br><span class="line">n_bins = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">100</span>]  <span class="comment"># Discretizes the interpolation into bins</span></span><br><span class="line">cmap_name = <span class="string">'my_list'</span></span><br><span class="line">fig, axs = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, figsize=(<span class="number">6</span>, <span class="number">9</span>))</span><br><span class="line">fig.subplots_adjust(left=<span class="number">0.02</span>, bottom=<span class="number">0.06</span>, right=<span class="number">0.95</span>, top=<span class="number">0.94</span>, wspace=<span class="number">0.05</span>)</span><br><span class="line"><span class="keyword">for</span> n_bin, ax <span class="keyword">in</span> zip(n_bins, axs.ravel()):</span><br><span class="line">    <span class="comment"># Create the colormap</span></span><br><span class="line">    cm = LinearSegmentedColormap.from_list(</span><br><span class="line">        cmap_name, colors, N=n_bin)</span><br><span class="line">    <span class="comment"># Fewer bins will result in "coarser" colomap interpolation</span></span><br><span class="line">    im = ax.imshow(Z, interpolation=<span class="string">'nearest'</span>, origin=<span class="string">'lower'</span>, cmap=cm)</span><br><span class="line">    ax.set_title(<span class="string">"N bins: %s"</span> % n_bin)</span><br><span class="line">    fig.colorbar(im, ax=ax)</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/matplotlib_colormap.png.png" alt="matplotlib_colormap.png"></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/49850429/manually-create-a-colormap" target="_blank" rel="noopener">Manually create a colormap</a></li><li><a href="https://matplotlib.org/gallery/color/custom_cmap.html#sphx-glr-gallery-color-custom-cmap-py" target="_blank" rel="noopener">Creating a colormap from a list of colors</a></li><li><a href="https://www.osgeo.cn/matplotlib/gallery/color/custom_cmap.html" target="_blank" rel="noopener">从颜色列表创建颜色映射</a></li><li><a href="https://matplotlib.org/api/_as_gen/matplotlib.colors.LinearSegmentedColormap.html#matplotlib.colors.LinearSegmentedColormap.from_list" target="_blank" rel="noopener">matplotlib.colors.LinearSegmentedColormap</a></li><li><a href="https://matplotlib.org/1.4.1/api/colors_api.html#matplotlib.colors.ColorConverter" target="_blank" rel="noopener">colors</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了在&lt;code&gt;Matplotlib&lt;/code&gt;中&lt;strong&gt;自定义colormap&lt;/strong&gt;的方法。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之稀疏矩阵</title>
    <link href="http://showteeth.tech/posts/5727.html"/>
    <id>http://showteeth.tech/posts/5727.html</id>
    <published>2020-04-07T09:01:27.000Z</published>
    <updated>2020-05-21T15:15:07.873Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这里写摘要，显示更好看</p></div><a id="more"></a><h2 id="开始于二级标题"><a href="#开始于二级标题" class="headerlink" title="开始于二级标题"></a>开始于二级标题</h2><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这里写摘要，显示更好看&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>R系列之reduce函数</title>
    <link href="http://showteeth.tech/posts/3019.html"/>
    <id>http://showteeth.tech/posts/3019.html</id>
    <published>2020-04-03T14:57:41.000Z</published>
    <updated>2020-04-04T08:23:08.203Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了R中常用函数reduce函数家族，该家族函数主要是用来<strong>对输入序列进行迭代化简的</strong>，其中包括<strong>显示最终结果的<code>reduce</code>函数</strong>、<strong>显示迭代过程的<code>accumulate</code>函数</strong>以及<strong>支持3参函数的<code>reduce2</code>、<code>accumulate2</code>函数</strong>。</p></div><a id="more"></a><h2 id="reduce函数简介"><a href="#reduce函数简介" class="headerlink" title="reduce函数简介"></a>reduce函数简介</h2><p><code>reduce</code>函数又名化简函数，是Python和R中都有并且使用较多的函数。<code>reduce</code>把一个函数<strong>作用在一个序列</strong>上，这个<strong>function函数必须接收两个参数</strong>，首先<code>reduce</code>会将序列的前两个元素传递给函数进行运算，然后将这个运算结果再和序列的第三个元素一同传入函数再次运算，依次类推，如<code>reduce(1:4, f)</code>就等同于<code>f(f(f(1, 2), 3), 4)</code>.</p><p><code>tidyverse</code>中有个<code>reduce</code>函数，<code>base</code>中也有一个<code>Reduce</code>函数，两者功能相同，但是用法略有区别，这里学习的是<code>tidyverse</code>中的<code>reduce</code>函数(实际上是<code>purr</code>包中的)。</p><hr><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>在<code>R</code>中接触到<code>reduce</code>主要是因为<strong>集合操作</strong>的需求，情形是我有三个向量，我想知道这三个向量共有的元素，intersect可以实现的是两个向量之间的交集操作，虽然可以多次执行，但是这样一来会产生中间变量，占用内存，二来也不优雅，所以就想找找简单的方法，reduce正好可以解决这个需求。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(tidyverse)</span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">b=<span class="number">5</span>:<span class="number">15</span></span><br><span class="line">c=<span class="number">8</span>:<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用嵌套的形式来求多个向量的交集</span></span><br><span class="line">intersect(intersect(a,b),c)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用reduce函数</span></span><br><span class="line">reduce(list(a,b,c),intersect)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入也可以是向量</span></span><br><span class="line">x &lt;- c(<span class="number">4</span>, <span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">reduce(x,`+`)</span><br><span class="line">  <span class="comment"># 求和</span></span><br><span class="line">  [<span class="number">1</span>] <span class="number">17</span></span><br><span class="line"></span><br><span class="line">x &lt;- list(c(<span class="number">0</span>, <span class="number">1</span>), c(<span class="number">2</span>, <span class="number">3</span>), c(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 得到长度为2的向量</span></span><br><span class="line">reduce(x,paste)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2 4"</span> <span class="string">"1 3 5"</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="accumulate-显示reduce计算过程"><a href="#accumulate-显示reduce计算过程" class="headerlink" title="accumulate-显示reduce计算过程"></a>accumulate-显示reduce计算过程</h2><p>reduce函数只会返回迭代的最后计算结果，而其变体accumulate可以返回每次迭代计算的中间结果：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个集合交集每次迭代的结果</span></span><br><span class="line">accumulate(list(a,b,c),intersect)</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">2</span>]]</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">3</span>]]</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法的每次迭代结果</span></span><br><span class="line">accumulate(x, `+`)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">4</span>  <span class="number">7</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line">accumulate(x,paste)</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">2</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2"</span> <span class="string">"1 3"</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">3</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2 4"</span> <span class="string">"1 3 5"</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="reduce2-accumulate2-3参函数"><a href="#reduce2-accumulate2-3参函数" class="headerlink" title="reduce2/accumulate2-3参函数"></a>reduce2/accumulate2-3参函数</h2><p><code>reduce</code>和<code>accumulate</code>中的函数都是<strong>两个参数的函数</strong>，如果<strong>想要支持3个参数的函数可以使用对应的变体</strong><code>reduce2</code>和<code>accumulate2</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- list(c(<span class="number">0</span>, <span class="number">1</span>), c(<span class="number">2</span>, <span class="number">3</span>), c(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 这里的y的长度要比x短1，不然会报错</span></span><br><span class="line">y &lt;- list(c(<span class="number">6</span>, <span class="number">7</span>), c(<span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行粘贴操作</span></span><br><span class="line">accumulate2(x, y, paste)</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">2</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2 6"</span> <span class="string">"1 3 7"</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">3</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2 6 4 8"</span> <span class="string">"1 3 7 5 9"</span></span><br><span class="line"></span><br><span class="line">reduce2(x, y, paste)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"0 2 6 4 8"</span> <span class="string">"1 3 7 5 9"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果y的长度和x等长</span></span><br><span class="line">y &lt;- list(c(<span class="number">6</span>, <span class="number">7</span>), c(<span class="number">8</span>, <span class="number">9</span>),c(<span class="number">10</span>,<span class="number">11</span>))</span><br><span class="line">accumulate2(x, y, paste)</span><br><span class="line">  Error <span class="keyword">in</span> reduce2_impl(.x, .y, .f, <span class="keyword">...</span>, .init = .init, .acc = <span class="literal">TRUE</span>) : </span><br><span class="line">    `.y` does not have length <span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>需要注意的是<code>reduce2</code>和<code>accumulate2</code>传入的x和y是不等长的，具体计算过程是x中的第一个、第二个元素和y中的第一个元素得到结果，然后将这个结果和x中的第三个元素以及y中的第二个元素再次运算，以此类推。</p></div><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://adv-r.hadley.nz/functionals.html#basics-1" target="_blank" rel="noopener">Reduce family</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了R中常用函数reduce函数家族，该家族函数主要是用来&lt;strong&gt;对输入序列进行迭代化简的&lt;/strong&gt;，其中包括&lt;strong&gt;显示最终结果的&lt;code&gt;reduce&lt;/code&gt;函数&lt;/strong&gt;、&lt;strong&gt;显示迭代过程的&lt;code&gt;accumulate&lt;/code&gt;函数&lt;/strong&gt;以及&lt;strong&gt;支持3参函数的&lt;code&gt;reduce2&lt;/code&gt;、&lt;code&gt;accumulate2&lt;/code&gt;函数&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R系列之维恩图和upset图的绘制</title>
    <link href="http://showteeth.tech/posts/4408.html"/>
    <id>http://showteeth.tech/posts/4408.html</id>
    <published>2020-04-03T06:10:02.000Z</published>
    <updated>2020-04-04T08:23:08.221Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了使用<code>VennDiagram</code>包来进行韦恩图的绘制，并解决了<code>VennDiagram</code>绘制维恩图中出现的 <strong>不能直接展示，必须要保存为文件才能查看</strong>、<strong>每次运行都会产生log文件</strong>两大缺点；随后也学习了使用<code>UpSetR</code>绘制UpSet图。</p></div><a id="more"></a><h2 id="韦恩图"><a href="#韦恩图" class="headerlink" title="韦恩图"></a>韦恩图</h2><p>之前一直知道可以使用<code>VennDiagram</code>来进行韦恩图的绘制，但是一直不愿意用它，主要是因为其有两个非常致命的缺点：</p><ul><li><strong>不能直接展示，必须要保存为文件才能查看</strong>，这样在调试图形的时候就比较麻烦</li><li><strong>每次运行都会产生log文件</strong>，多次运行调试之后会产生很多无用的log文件，很麻烦</li></ul><p>后来发现其实这两个问题是可以解决的，这里在学习使用的同时记录一下解决问题的方法。</p><h3 id="在console中展示图片"><a href="#在console中展示图片" class="headerlink" title="在console中展示图片"></a>在console中展示图片</h3><p>这里先记录直接展示图片不用保存的方法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(VennDiagram)</span><br><span class="line">temp &lt;- venn.diagram(list(B = <span class="number">1</span>:<span class="number">1800</span>, A = <span class="number">1571</span>:<span class="number">2020</span>),</span><br><span class="line">                     fill = c(<span class="string">"red"</span>, <span class="string">"green"</span>), alpha = c(<span class="number">0.5</span>, <span class="number">0.5</span>), cex = <span class="number">2</span>,cat.fontface = <span class="number">4</span>,</span><br><span class="line">                     lty =<span class="number">2</span>,  filename = <span class="literal">NULL</span>)</span><br><span class="line"><span class="comment"># 直接在console中展示图片</span></span><br><span class="line"><span class="comment">## 创建一个全新的空白页面，防止前面存在图片后面形成覆盖</span></span><br><span class="line">grid.newpage()</span><br><span class="line"><span class="comment">## 在前面的空白页面上画图</span></span><br><span class="line">grid.draw(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用和其他绘图类似的方法保存图片</span></span><br><span class="line">pdf(file=<span class="string">"test.pdf"</span>)</span><br><span class="line">grid.newpage()</span><br><span class="line">grid.draw(temp)</span><br><span class="line">dev.off()</span><br></pre></td></tr></table></figure><p></p><p>关键点：</p><ul><li>绘图中的<code>filename = NULL</code>，不用指定filename</li><li>使用<code>grid.draw</code>显示绘图结果</li></ul><p><a href="https://stackoverflow.com/questions/14243609/problems-with-venndiagram" target="_blank" rel="noopener">参考链接-附有将多个venn保存到单个pdf中的方法</a></p><hr><h3 id="不输出log文件"><a href="#不输出log文件" class="headerlink" title="不输出log文件"></a>不输出log文件</h3><p>log文件内容：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">INFO [2020-04-01 09:42:08] [[1]]</span><br><span class="line">INFO [2020-04-01 09:42:08] list(B = 1:1800, A = 1571:2020)</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$fill</span></span><br><span class="line">INFO [2020-04-01 09:42:08] c(<span class="string">"red"</span>, <span class="string">"green"</span>)</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$alpha</span></span><br><span class="line">INFO [2020-04-01 09:42:08] c(0.5, 0.5)</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$cex</span></span><br><span class="line">INFO [2020-04-01 09:42:08] [1] 2</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$cat</span>.fontface</span><br><span class="line">INFO [2020-04-01 09:42:08] [1] 4</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$lty</span></span><br><span class="line">INFO [2020-04-01 09:42:08] [1] 2</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$fontfamily</span></span><br><span class="line">INFO [2020-04-01 09:42:08] [1] 3</span><br><span class="line">INFO [2020-04-01 09:42:08] </span><br><span class="line">INFO [2020-04-01 09:42:08] <span class="variable">$filename</span></span><br><span class="line">INFO [2020-04-01 09:42:08] NULL</span><br><span class="line">INFO [2020-04-01 09:42:08]</span><br></pre></td></tr></table></figure><p></p><p>没什么重要的信息，所以直接抑制其输出也没有什么问题.</p><p><code>VennDiagram</code>包进行日志的输出主要是使用了<code>futile.logger</code>包，这个在导入<code>VennDiagram</code>包就可以看出来：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(VennDiagram)</span><br><span class="line">  Loading required package: grid</span><br><span class="line">  Loading required package: futile.logger</span><br></pre></td></tr></table></figure><p></p><p>知道使用的什么log包之后就可以通过<strong>限制log的输出级别来进行限制(前面显示的log文件中的log级别都是INFO)</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加这一行，将输出的log级别限制于ERROR之上</span></span><br><span class="line">temp &lt;- venn.diagram(list(B = <span class="number">1</span>:<span class="number">1800</span>, A = <span class="number">1571</span>:<span class="number">2020</span>),</span><br><span class="line">                     fill = c(<span class="string">"red"</span>, <span class="string">"green"</span>), alpha = c(<span class="number">0.5</span>, <span class="number">0.5</span>), cex = <span class="number">2</span>,cat.fontface = <span class="number">4</span>,</span><br><span class="line">                     lty =<span class="number">2</span>,  filename = <span class="literal">NULL</span>)</span><br><span class="line">grid.newpage()                    </span><br><span class="line">grid.draw(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复的话就是设置为INFO</span></span><br><span class="line">futile.logger::flog.threshold(futile.logger::INFO, name = <span class="string">"VennDiagramLogger"</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在移除了两大障碍之后就可以安心学习这个包了。下面列出一些使用<code>VennDiagram</code>包可以实现的图片，后续使用的时候可以直接查阅：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Not run: </span></span><br><span class="line"><span class="comment"># Example to print to screen</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    sample1 = c(<span class="number">1</span>:<span class="number">40</span>),</span><br><span class="line">    sample2 = c(<span class="number">30</span>:<span class="number">60</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save picture to non-TIFF file type</span></span><br><span class="line"><span class="comment"># currently working on adding this functionality directly into venn.diagram</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list (</span><br><span class="line">    A = <span class="number">1</span>:<span class="number">10</span>,</span><br><span class="line">    B = <span class="number">6</span>:<span class="number">25</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">jpeg(<span class="string">"venn_jpeg.jpg"</span>);</span><br><span class="line">grid.draw(venn.plot);</span><br><span class="line">dev.off();</span><br><span class="line"></span><br><span class="line"><span class="comment">## End(Not run)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dontrun-starts-here</span></span><br><span class="line"><span class="comment">### NB: All figures from the paper can be run, but are turned off from</span></span><br><span class="line"><span class="comment">###     automatic execution to reduce burden on CRAN computing resources.</span></span><br><span class="line"><span class="comment">## Not run: </span></span><br><span class="line"><span class="comment"># Figure 1A</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    Label = <span class="number">1</span>:<span class="number">100</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"1A-single_Venn.tiff"</span>,</span><br><span class="line">  col = <span class="string">"black"</span>,</span><br><span class="line">  lwd = <span class="number">9</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  fill = <span class="string">"grey"</span>,</span><br><span class="line">  alpha = <span class="number">0.75</span>,</span><br><span class="line">  cex = <span class="number">4</span>,</span><br><span class="line">  cat.cex = <span class="number">3</span>,</span><br><span class="line">  cat.fontface = <span class="string">"bold"</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 1B</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    X = <span class="number">1</span>:<span class="number">150</span>,</span><br><span class="line">    Y = <span class="number">121</span>:<span class="number">180</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"1B-double_Venn.tiff"</span>,</span><br><span class="line">  lwd = <span class="number">4</span>,</span><br><span class="line">  fill = c(<span class="string">"cornflowerblue"</span>, <span class="string">"darkorchid1"</span>),</span><br><span class="line">  alpha = <span class="number">0.75</span>,</span><br><span class="line">  label.col = <span class="string">"white"</span>,</span><br><span class="line">  cex = <span class="number">4</span>,</span><br><span class="line">  fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.col = c(<span class="string">"cornflowerblue"</span>, <span class="string">"darkorchid1"</span>),</span><br><span class="line">  cat.cex = <span class="number">3</span>,</span><br><span class="line">  cat.fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  cat.fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.03</span>, <span class="number">0.03</span>),</span><br><span class="line">  cat.pos = c(-<span class="number">20</span>, <span class="number">14</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 1C</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    R = c(<span class="number">1</span>:<span class="number">70</span>, <span class="number">71</span>:<span class="number">110</span>, <span class="number">111</span>:<span class="number">120</span>, <span class="number">121</span>:<span class="number">140</span>),</span><br><span class="line">    B = c(<span class="number">141</span>:<span class="number">200</span>, <span class="number">71</span>:<span class="number">110</span>, <span class="number">111</span>:<span class="number">120</span>, <span class="number">201</span>:<span class="number">230</span>),</span><br><span class="line">    G = c(<span class="number">231</span>:<span class="number">280</span>, <span class="number">111</span>:<span class="number">120</span>, <span class="number">121</span>:<span class="number">140</span>, <span class="number">201</span>:<span class="number">230</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"1C-triple_Venn.tiff"</span>,</span><br><span class="line">  col = <span class="string">"transparent"</span>,</span><br><span class="line">  fill = c(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>),</span><br><span class="line">  alpha = <span class="number">0.5</span>,</span><br><span class="line">  label.col = c(<span class="string">"darkred"</span>, <span class="string">"white"</span>, <span class="string">"darkblue"</span>, <span class="string">"white"</span>,</span><br><span class="line">                <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"darkgreen"</span>),</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.default.pos = <span class="string">"text"</span>,</span><br><span class="line">  cat.col = c(<span class="string">"darkred"</span>, <span class="string">"darkblue"</span>, <span class="string">"darkgreen"</span>),</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.06</span>, <span class="number">0.06</span>, <span class="number">0.03</span>),</span><br><span class="line">  cat.pos = <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 1D</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    I = c(<span class="number">1</span>:<span class="number">60</span>, <span class="number">61</span>:<span class="number">105</span>, <span class="number">106</span>:<span class="number">140</span>, <span class="number">141</span>:<span class="number">160</span>, <span class="number">166</span>:<span class="number">175</span>, <span class="number">176</span>:<span class="number">180</span>, <span class="number">181</span>:<span class="number">205</span>, </span><br><span class="line">          <span class="number">206</span>:<span class="number">220</span>),</span><br><span class="line">    IV = c(<span class="number">531</span>:<span class="number">605</span>, <span class="number">476</span>:<span class="number">530</span>, <span class="number">336</span>:<span class="number">375</span>, <span class="number">376</span>:<span class="number">405</span>, <span class="number">181</span>:<span class="number">205</span>, <span class="number">206</span>:<span class="number">220</span>, <span class="number">166</span>:<span class="number">175</span>, </span><br><span class="line">           <span class="number">176</span>:<span class="number">180</span>),</span><br><span class="line">    II = c(<span class="number">61</span>:<span class="number">105</span>, <span class="number">106</span>:<span class="number">140</span>, <span class="number">181</span>:<span class="number">205</span>, <span class="number">206</span>:<span class="number">220</span>, <span class="number">221</span>:<span class="number">285</span>, <span class="number">286</span>:<span class="number">335</span>, <span class="number">336</span>:<span class="number">375</span>, </span><br><span class="line">           <span class="number">376</span>:<span class="number">405</span>),</span><br><span class="line">    III = c(<span class="number">406</span>:<span class="number">475</span>, <span class="number">286</span>:<span class="number">335</span>, <span class="number">106</span>:<span class="number">140</span>, <span class="number">141</span>:<span class="number">160</span>, <span class="number">166</span>:<span class="number">175</span>, <span class="number">181</span>:<span class="number">205</span>, <span class="number">336</span>:<span class="number">375</span>, </span><br><span class="line">            <span class="number">476</span>:<span class="number">530</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"1D-quadruple_Venn.tiff"</span>,</span><br><span class="line">  col = <span class="string">"black"</span>,</span><br><span class="line">  lty = <span class="string">"dotted"</span>,</span><br><span class="line">  lwd = <span class="number">4</span>,</span><br><span class="line">  fill = c(<span class="string">"cornflowerblue"</span>, <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"darkorchid1"</span>),</span><br><span class="line">  alpha = <span class="number">0.50</span>,</span><br><span class="line">  label.col = c(<span class="string">"orange"</span>, <span class="string">"white"</span>, <span class="string">"darkorchid4"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>,</span><br><span class="line">                <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"darkblue"</span>, <span class="string">"white"</span>,</span><br><span class="line">                <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"darkgreen"</span>, <span class="string">"white"</span>),</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.col = c(<span class="string">"darkblue"</span>, <span class="string">"darkgreen"</span>, <span class="string">"orange"</span>, <span class="string">"darkorchid4"</span>),</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.fontfamily = <span class="string">"serif"</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-1</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = <span class="number">1</span>:<span class="number">105</span>,</span><br><span class="line">    B = <span class="number">101</span>:<span class="number">115</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-1_special_case_ext-text.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = c(-<span class="number">20</span>, <span class="number">20</span>),</span><br><span class="line">  ext.line.lty = <span class="string">"dotted"</span>,</span><br><span class="line">  ext.line.lwd = <span class="number">2</span>,</span><br><span class="line">  ext.pos = <span class="number">12</span>,</span><br><span class="line">  ext.dist = -<span class="number">0.12</span>,</span><br><span class="line">  ext.length = <span class="number">0.85</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-2</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = <span class="number">1</span>:<span class="number">100</span>,</span><br><span class="line">    B = <span class="number">1</span>:<span class="number">10</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-2_special_case_pairwise-inclusion.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-3</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = <span class="number">1</span>:<span class="number">150</span>,</span><br><span class="line">    B = <span class="number">151</span>:<span class="number">250</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-3_special_case_pairwise-exclusion.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = c(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">  cat.dist = <span class="number">0.05</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-4</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">50</span>, <span class="number">101</span>:<span class="number">140</span>, <span class="number">141</span>:<span class="number">160</span>, <span class="number">161</span>:<span class="number">170</span>),</span><br><span class="line">    B = c(<span class="number">171</span>:<span class="number">230</span>, <span class="number">101</span>:<span class="number">140</span>, <span class="number">161</span>:<span class="number">170</span>, <span class="number">291</span>:<span class="number">320</span>),</span><br><span class="line">    C = c(<span class="number">141</span>:<span class="number">160</span>, <span class="number">161</span>:<span class="number">170</span>, <span class="number">291</span>:<span class="number">320</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-4_triple_special_case-001.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.05</span>, <span class="number">0.05</span>, -<span class="number">0.1</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-5</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">100</span>),</span><br><span class="line">    B = c(<span class="number">61</span>:<span class="number">70</span>, <span class="number">71</span>:<span class="number">100</span>),</span><br><span class="line">    C = c(<span class="number">41</span>:<span class="number">60</span>, <span class="number">61</span>:<span class="number">70</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-5_triple_special_case-012AA.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = c(-<span class="number">25</span>, <span class="number">0</span>, <span class="number">30</span>),</span><br><span class="line">  cat.dist = c(<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.02</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-6</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">90</span>),</span><br><span class="line">    B = c(<span class="number">1</span>:<span class="number">25</span>),</span><br><span class="line">    C = c(<span class="number">1</span>:<span class="number">5</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-6_triple_special_case-022AAAO.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = <span class="number">0</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.03</span>, <span class="number">0.03</span>, <span class="number">0.01</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-7</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">20</span>),</span><br><span class="line">    B = c(<span class="number">21</span>:<span class="number">80</span>),</span><br><span class="line">    C = c(<span class="number">81</span>:<span class="number">210</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-7_triple_special_case-100.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.dist = <span class="number">0.05</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-8</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">80</span>),</span><br><span class="line">    B = c(<span class="number">41</span>:<span class="number">150</span>),</span><br><span class="line">    C = c(<span class="number">71</span>:<span class="number">100</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-8_triple_special_case-011A.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.07</span>, <span class="number">0.07</span>, <span class="number">0.02</span>),</span><br><span class="line">  cat.pos = c(-<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure 2-9</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">10</span>),</span><br><span class="line">    B = c(<span class="number">11</span>:<span class="number">90</span>),</span><br><span class="line">    C = c(<span class="number">81</span>:<span class="number">90</span>)</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"2-9_triple_special_case-121AO.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = <span class="number">0</span>,</span><br><span class="line">  cat.dist = c(<span class="number">0.04</span>, <span class="number">0.04</span>, <span class="number">0.02</span>),</span><br><span class="line">  reverse = <span class="literal">TRUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Complex three-way Venn with labels &amp; sub-/super-scripts</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    I = c(<span class="number">1</span>:<span class="number">60</span>, <span class="number">61</span>:<span class="number">105</span>, <span class="number">106</span>:<span class="number">140</span>, <span class="number">141</span>:<span class="number">160</span>, <span class="number">166</span>:<span class="number">175</span>, <span class="number">176</span>:<span class="number">180</span>, <span class="number">181</span>:<span class="number">205</span>, </span><br><span class="line">          <span class="number">206</span>:<span class="number">220</span>),</span><br><span class="line">    II = c(<span class="number">531</span>:<span class="number">605</span>, <span class="number">476</span>:<span class="number">530</span>, <span class="number">336</span>:<span class="number">375</span>, <span class="number">376</span>:<span class="number">405</span>, <span class="number">181</span>:<span class="number">205</span>, <span class="number">206</span>:<span class="number">220</span>, <span class="number">166</span>:<span class="number">175</span>, </span><br><span class="line">           <span class="number">176</span>:<span class="number">180</span>),</span><br><span class="line">    III = c(<span class="number">61</span>:<span class="number">105</span>, <span class="number">106</span>:<span class="number">140</span>, <span class="number">181</span>:<span class="number">205</span>, <span class="number">206</span>:<span class="number">220</span>, <span class="number">221</span>:<span class="number">285</span>, <span class="number">286</span>:<span class="number">335</span>, <span class="number">336</span>:<span class="number">375</span>, </span><br><span class="line">            <span class="number">376</span>:<span class="number">405</span>)</span><br><span class="line">  ),</span><br><span class="line">  category.names = c(</span><br><span class="line">    expression( bold(<span class="string">'A'</span>[<span class="string">'1: subscript'</span>]) ),</span><br><span class="line">    expression( bold(<span class="string">'B'</span>^<span class="string">'2: going up'</span>) ),</span><br><span class="line">    expression( paste(bold(<span class="string">'C'</span>^<span class="string">'3'</span>), bold(<span class="string">'X'</span>[<span class="string">'i'</span> &lt;= <span class="string">'r'</span>^<span class="string">'2'</span>]^<span class="string">'2'</span>) ) )</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">'Fig3-1_triple_labels_sub_and_superscripts.tiff'</span>,</span><br><span class="line">  output = <span class="literal">TRUE</span>,</span><br><span class="line">  height = <span class="number">3000</span>,</span><br><span class="line">  width = <span class="number">3000</span>,</span><br><span class="line">  resolution = <span class="number">300</span>,</span><br><span class="line">  compression = <span class="string">'lzw'</span>,</span><br><span class="line">  units = <span class="string">'px'</span>,</span><br><span class="line">  lwd = <span class="number">6</span>,</span><br><span class="line">  lty = <span class="string">'blank'</span>,</span><br><span class="line">  fill = c(<span class="string">'yellow'</span>, <span class="string">'purple'</span>, <span class="string">'green'</span>),</span><br><span class="line">  cex = <span class="number">3.5</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  fontfamily = <span class="string">"sans"</span>,</span><br><span class="line">  cat.cex = <span class="number">3</span>,</span><br><span class="line">  cat.fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.default.pos = <span class="string">"outer"</span>,</span><br><span class="line">  cat.pos = c(-<span class="number">27</span>, <span class="number">27</span>, <span class="number">135</span>),</span><br><span class="line">  cat.dist = c(<span class="number">0.055</span>, <span class="number">0.055</span>, <span class="number">0.085</span>),</span><br><span class="line">  cat.fontfamily = <span class="string">"sans"</span>,</span><br><span class="line">  rotation = <span class="number">1</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Complex 3-way Venn using expressions</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    <span class="string">"Num A"</span> = paste(<span class="string">"Num"</span>, <span class="number">1</span>:<span class="number">100</span>),</span><br><span class="line">    <span class="string">"Num B"</span> = c(paste(<span class="string">"Num"</span>, <span class="number">61</span>:<span class="number">70</span>), paste(<span class="string">"Num"</span>, <span class="number">71</span>:<span class="number">100</span>)),</span><br><span class="line">    <span class="string">"Num C"</span> = c(paste(<span class="string">"Num"</span>, <span class="number">41</span>:<span class="number">60</span>), paste(<span class="string">"Num"</span>, <span class="number">61</span>:<span class="number">70</span>))),</span><br><span class="line">  category.names = c(</span><br><span class="line">    expression( bold(<span class="string">'A'</span>[<span class="string">'1'</span>]) ),</span><br><span class="line">    expression( bold(<span class="string">'A'</span>[<span class="string">'2'</span>]) ),</span><br><span class="line">    expression( bold(<span class="string">'A'</span>[<span class="string">'3'</span>]) )</span><br><span class="line">  ),</span><br><span class="line">  euler.d = <span class="literal">TRUE</span>,</span><br><span class="line">  filename = <span class="string">"Fig3-2_Euler_3set_simple_with_subscripts.tiff"</span>,</span><br><span class="line">  cat.pos = c(-<span class="number">20</span>, <span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">  cat.dist = c(<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.02</span>),</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  reverse = <span class="literal">TRUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  list(A = <span class="number">1</span>:<span class="number">150</span>, B = <span class="number">121</span>:<span class="number">170</span>), </span><br><span class="line">  <span class="string">"Venn_2set_simple.tiff"</span></span><br><span class="line">);</span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  list(A = <span class="number">1</span>:<span class="number">150</span>, B = <span class="number">121</span>:<span class="number">170</span>, C = <span class="number">101</span>:<span class="number">200</span>), </span><br><span class="line">  <span class="string">"Venn_3set_simple.tiff"</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">## End(Not run)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a more elaborate two-set Venn diagram with title and subtitle</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    <span class="string">"A"</span> = <span class="number">1</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="string">"B"</span> = <span class="number">96</span>:<span class="number">140</span></span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"Venn_2set_complex.tiff"</span>,</span><br><span class="line">  scaled = <span class="literal">TRUE</span>,</span><br><span class="line">  ext.text = <span class="literal">TRUE</span>,</span><br><span class="line">  ext.line.lwd = <span class="number">2</span>,</span><br><span class="line">  ext.dist = -<span class="number">0.15</span>,</span><br><span class="line">  ext.length = <span class="number">0.9</span>,</span><br><span class="line">  ext.pos = -<span class="number">4</span>,</span><br><span class="line">  inverted = <span class="literal">TRUE</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  rotation.degree = <span class="number">45</span>,</span><br><span class="line">  main = <span class="string">"Complex Venn Diagram"</span>,</span><br><span class="line">  sub = <span class="string">"Featuring: rotation and external lines"</span>,</span><br><span class="line">  main.cex = <span class="number">2</span>,</span><br><span class="line">  sub.cex = <span class="number">1</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">## Not run: </span></span><br><span class="line"><span class="comment"># sample three-set Euler diagram</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    <span class="string">"Num A"</span> = paste(<span class="string">"Num"</span>, <span class="number">1</span>:<span class="number">100</span>),</span><br><span class="line">    <span class="string">"Num B"</span> = c(paste(<span class="string">"Num"</span>, <span class="number">61</span>:<span class="number">70</span>), paste(<span class="string">"Num"</span>, <span class="number">71</span>:<span class="number">100</span>)),</span><br><span class="line">    <span class="string">"Num C"</span> = c(paste(<span class="string">"Num"</span>, <span class="number">41</span>:<span class="number">60</span>), paste(<span class="string">"Num"</span>, <span class="number">61</span>:<span class="number">70</span>))),</span><br><span class="line">  euler.d = <span class="literal">TRUE</span>,</span><br><span class="line">  filename = <span class="string">"Euler_3set_simple.tiff"</span>,</span><br><span class="line">  cat.pos = c(-<span class="number">20</span>, <span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">  cat.dist = c(<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.02</span>),</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  reverse = <span class="literal">TRUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample three-set Euler diagram</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = c(<span class="number">1</span>:<span class="number">10</span>),</span><br><span class="line">    B = c(<span class="number">11</span>:<span class="number">90</span>),</span><br><span class="line">    C = c(<span class="number">81</span>:<span class="number">90</span>)</span><br><span class="line">  ),</span><br><span class="line">  euler.d = <span class="literal">TRUE</span>,</span><br><span class="line">  filename = <span class="string">"Euler_3set_scaled.tiff"</span>,</span><br><span class="line">  cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.cex = <span class="number">2.5</span>,</span><br><span class="line">  cat.pos = <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">## End(Not run)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sample four-set Venn Diagram</span></span><br><span class="line">A &lt;- sample(<span class="number">1</span>:<span class="number">1000</span>, <span class="number">400</span>, replace = <span class="literal">FALSE</span>);</span><br><span class="line">B &lt;- sample(<span class="number">1</span>:<span class="number">1000</span>, <span class="number">600</span>, replace = <span class="literal">FALSE</span>);</span><br><span class="line">C &lt;- sample(<span class="number">1</span>:<span class="number">1000</span>, <span class="number">350</span>, replace = <span class="literal">FALSE</span>);</span><br><span class="line">D &lt;- sample(<span class="number">1</span>:<span class="number">1000</span>, <span class="number">550</span>, replace = <span class="literal">FALSE</span>);</span><br><span class="line">E &lt;- sample(<span class="number">1</span>:<span class="number">1000</span>, <span class="number">375</span>, replace = <span class="literal">FALSE</span>);</span><br><span class="line"></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = A,</span><br><span class="line">    D = D,</span><br><span class="line">    B = B,</span><br><span class="line">    C = C</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"Venn_4set_pretty.tiff"</span>,</span><br><span class="line">  col = <span class="string">"transparent"</span>,</span><br><span class="line">  fill = c(<span class="string">"cornflowerblue"</span>, <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"darkorchid1"</span>),</span><br><span class="line">  alpha = <span class="number">0.50</span>,</span><br><span class="line">  label.col = c(<span class="string">"orange"</span>, <span class="string">"white"</span>, <span class="string">"darkorchid4"</span>, <span class="string">"white"</span>, </span><br><span class="line">                <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"darkblue"</span>, <span class="string">"white"</span>, </span><br><span class="line">                <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"white"</span>, <span class="string">"darkgreen"</span>, <span class="string">"white"</span>),</span><br><span class="line">  cex = <span class="number">1.5</span>,</span><br><span class="line">  fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  fontface = <span class="string">"bold"</span>,</span><br><span class="line">  cat.col = c(<span class="string">"darkblue"</span>, <span class="string">"darkgreen"</span>, <span class="string">"orange"</span>, <span class="string">"darkorchid4"</span>),</span><br><span class="line">  cat.cex = <span class="number">1.5</span>,</span><br><span class="line">  cat.pos = <span class="number">0</span>,</span><br><span class="line">  cat.dist = <span class="number">0.07</span>,</span><br><span class="line">  cat.fontfamily = <span class="string">"serif"</span>,</span><br><span class="line">  rotation.degree = <span class="number">270</span>,</span><br><span class="line">  margin = <span class="number">0.2</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample five-set Venn Diagram</span></span><br><span class="line">venn.plot &lt;- venn.diagram(</span><br><span class="line">  x = list(</span><br><span class="line">    A = A,</span><br><span class="line">    B = B,</span><br><span class="line">    C = C,</span><br><span class="line">    D = D,</span><br><span class="line">    E = E</span><br><span class="line">  ),</span><br><span class="line">  filename = <span class="string">"Venn_5set_pretty.tiff"</span>,</span><br><span class="line">  col = <span class="string">"black"</span>,</span><br><span class="line">  fill = c(<span class="string">"dodgerblue"</span>, <span class="string">"goldenrod1"</span>, <span class="string">"darkorange1"</span>, <span class="string">"seagreen3"</span>, <span class="string">"orchid3"</span>),</span><br><span class="line">  alpha = <span class="number">0.50</span>,</span><br><span class="line">  cex = c(<span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0.8</span>,</span><br><span class="line">          <span class="number">1</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0.55</span>, <span class="number">1</span>, <span class="number">0.55</span>, <span class="number">1</span>, <span class="number">0.55</span>, <span class="number">1</span>, <span class="number">0.55</span>, <span class="number">1</span>, <span class="number">0.55</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1.5</span>),</span><br><span class="line">  cat.col = c(<span class="string">"dodgerblue"</span>, <span class="string">"goldenrod1"</span>, <span class="string">"darkorange1"</span>, <span class="string">"seagreen3"</span>, <span class="string">"orchid3"</span>),</span><br><span class="line">  cat.cex = <span class="number">1.5</span>,</span><br><span class="line">  cat.fontface = <span class="string">"bold"</span>,</span><br><span class="line">  margin = <span class="number">0.05</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/R_venn_VennDiagram_all.png.png" alt="R_venn_VennDiagram_all.png"></p><hr><h3 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h3><ul><li>控制标题的位置：<code>main.pos=c(0.5,1.05)</code>，其中的<code>c(0.5,1.05)</code>是<code>(x,y)</code>坐标值</li><li>设置标签在圆外面：<code>cat.default.pos = &quot;outer&quot;</code></li></ul><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://rdrr.io/cran/VennDiagram/man/venn.diagram.html" target="_blank" rel="noopener">官方文档——venn.diagram: Make a Venn Diagram</a></li><li><a href="https://blog.csdn.net/weixin_41929524/article/details/86436232" target="_blank" rel="noopener">利用R绘制venn图（VennDiagram、eulerr、venneuler、limma）</a></li></ul><hr><p><br></p><h2 id="UpSet-plot"><a href="#UpSet-plot" class="headerlink" title="UpSet plot"></a>UpSet plot</h2><p>相当于把韦恩图展开，具体来讲就是使用柱状图表示交集的大小，连线表示具体哪些集合之间的交集。其存在的意义是在集合数目较多时，使用韦恩图就很难解读其中的信息，可视化的效果不好。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">install.packages(<span class="string">"UpSetR"</span>)</span><br><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">library</span>(<span class="string">"UpSetR"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="输入数据"><a href="#输入数据" class="headerlink" title="输入数据"></a>输入数据</h3><p><code>UpSetR</code>主要支持三种类型的数据输入：</p><ul><li>一种是<strong>数据框格式的数据</strong>，后续的集合intersects就是针对的列的信息；</li><li>一种数据类型就是集合交集的向量，<strong>使用<code>&amp;</code>表示集合之间存在intersects，数值表示intersects数目的大小</strong>；</li><li>最后一种就是非常常见的<strong>由若干named vector组成的list的形式</strong>，<code>UpSetR</code>会自动找每个vector之间的交集。</li></ul><h4 id="dataframe"><a href="#dataframe" class="headerlink" title="dataframe"></a>dataframe</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">movies &lt;- read.csv(system.file(<span class="string">"extdata"</span>,<span class="string">"movies.csv"</span>,package = <span class="string">"UpSetR"</span>), header = <span class="literal">TRUE</span>, sep=<span class="string">";"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据信息</span></span><br><span class="line">movies[<span class="number">1</span>:<span class="number">5</span>,<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">                                  Name ReleaseDate Action Adventure Children</span><br><span class="line">  <span class="number">1</span>                   Toy Story (<span class="number">1995</span>)        <span class="number">1995</span>      <span class="number">0</span>         <span class="number">0</span>        <span class="number">1</span></span><br><span class="line">  <span class="number">2</span>                     Jumanji (<span class="number">1995</span>)        <span class="number">1995</span>      <span class="number">0</span>         <span class="number">1</span>        <span class="number">1</span></span><br><span class="line">  <span class="number">3</span>            Grumpier Old Men (<span class="number">1995</span>)        <span class="number">1995</span>      <span class="number">0</span>         <span class="number">0</span>        <span class="number">0</span></span><br><span class="line">  <span class="number">4</span>           Waiting to Exhale (<span class="number">1995</span>)        <span class="number">1995</span>      <span class="number">0</span>         <span class="number">0</span>        <span class="number">0</span></span><br><span class="line">  <span class="number">5</span> Father of the Bride Part II (<span class="number">1995</span>)        <span class="number">1995</span>      <span class="number">0</span>         <span class="number">0</span>        <span class="number">0</span></span><br></pre></td></tr></table></figure><p>数据是一个对电影进行分类的数据，可以分为动作片、冒险片以及各种其他类型的电影，有的电影可能只属于一种类型，而有的电影可能会同时属于好几种电影类型，比如这里的电影Jumanji，同时属于Adventure和Children。所以如果按照电影类别来对电影进行分类的话就会出现类别之间存在交集的情况。</p><hr><h4 id="交集表达式"><a href="#交集表达式" class="headerlink" title="交集表达式"></a>交集表达式</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expressionInput &lt;- c(one = <span class="number">2</span>, two = <span class="number">1</span>, three = <span class="number">2</span>, `one&amp;two` = <span class="number">1</span>, `one&amp;three` = <span class="number">4</span>, </span><br><span class="line">    `two&amp;three` = <span class="number">1</span>, `one&amp;two&amp;three` = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><hr><h4 id="named-vector"><a href="#named-vector" class="headerlink" title="named vector"></a>named vector</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listInput &lt;- list(one = c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>), two = c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, </span><br><span class="line">    <span class="number">10</span>), three = c(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>))</span><br></pre></td></tr></table></figure><hr><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><a class="btn" href="https://cran.r-project.org/web/packages/UpSetR/vignettes/basic.usage.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>basic usage(官方文档)</a><h4 id="数据框格式数据"><a href="#数据框格式数据" class="headerlink" title="数据框格式数据"></a>数据框格式数据</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">upset(movies, nsets = <span class="number">7</span>, nintersects = <span class="number">30</span>, mb.ratio = c(<span class="number">0.5</span>, <span class="number">0.5</span>),</span><br><span class="line">      order.by = c(<span class="string">"freq"</span>, <span class="string">"degree"</span>), decreasing = c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>))</span><br></pre></td></tr></table></figure><p>关键参数：</p><ul><li><code>nsets</code>：按照数据集的size从大到小来选取使用的数据集数目，也就是使用多少个数据集来看之间的intersects情况；选中的数据集不会看其与未选中数据集的intersects情况；默认值是5</li><li><code>sets</code>：指定需要看的数据集，如：<code>sets=c(&quot;Action&quot;,&quot;Drama&quot;,&quot;Horror&quot;)</code>会展示三者之间任意存在intersects情况</li><li><code>nintersects</code>：可视化的intersects数目，默认是展示40个；如果想展示全部的intersects，可以将其设置为<code>NA</code></li><li><code>keep.order</code>：逻辑值，是否按照输入的sets顺序来排列sets，默认的<code>FALSE</code>，按照sets的大小来进行排列；在使用了sets参数下有效</li><li><code>mb.ratio</code>：<code>bar plot</code>和<code>sets matrix</code>的比例</li><li><code>order.by</code>：按照什么进行排序：<ul><li><code>freq</code>：分类别的intersects按照overlap数目的大小进行排序，比如集合独有的元素大小、两个集合交集的大小、三个集合交集的大小</li><li><code>degree</code>：前面的freq是分类别的、在类别内部的排序，这里的degree是将上述排好序的类别再次进行排序</li></ul></li><li><code>decreasing</code>：是否降序，可以和前面的<code>order.by</code>参数对应</li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_simple1.png.png" alt="r_upset_simple1.png"></p><hr><h4 id="交集表达式-1"><a href="#交集表达式-1" class="headerlink" title="交集表达式"></a>交集表达式</h4><p>使用<code>fromExpression</code>函数将其转化为数据框的格式：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upset(fromExpression(expressionInput), order.by = <span class="string">"freq"</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_simple2.png.png" alt="r_upset_simple2.png"></p><h4 id="named-vector-1"><a href="#named-vector-1" class="headerlink" title="named vector"></a>named vector</h4><p>使用<code>fromList</code>函数将其转化为数据框的格式：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upset(fromList(listInput), order.by = <span class="string">"freq"</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_simple2.png.png" alt="r_upset_simple2.png"></p><hr><h3 id="设置查询并高亮显示"><a href="#设置查询并高亮显示" class="headerlink" title="设置查询并高亮显示"></a>设置查询并高亮显示</h3><p>在intersects结果中可以<strong>高亮显示部分查询的结果</strong>，比如在电影分类的intersects中可以查看指定1970-1980之间的电影分类intersect情况：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定年份的函数</span></span><br><span class="line"><span class="comment"># 写法类似apply只能怪函数的用法</span></span><br><span class="line">between &lt;- <span class="keyword">function</span>(row, min, max)&#123;</span><br><span class="line">  newData &lt;- (row[<span class="string">"ReleaseDate"</span>] &lt; max) &amp; (row[<span class="string">"ReleaseDate"</span>] &gt; min)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 将上述函数以及对应的参数传递给queries参数</span></span><br><span class="line">upset(movies, sets = c(<span class="string">"Drama"</span>, <span class="string">"Comedy"</span>, <span class="string">"Action"</span>, <span class="string">"Thriller"</span>, <span class="string">"Western"</span>, <span class="string">"Documentary"</span>),</span><br><span class="line">      queries = list(list(query = intersects, params = list(<span class="string">"Drama"</span>, <span class="string">"Action"</span>)),</span><br><span class="line">                     list(query = between, params = list(<span class="number">1970</span>, <span class="number">1980</span>), color = <span class="string">"red"</span>, active = <span class="literal">TRUE</span>)))</span><br></pre></td></tr></table></figure><p></p><p>关键参数：</p><ul><li><code>queries</code>：Entered as a list that contains a list of queries</li><li><code>query</code>：query的函数</li><li><code>params</code>：传递给query函数的参数，list的形式，不是向量</li><li><code>color</code>：查询结果的颜色</li><li><code>active</code>：如果设置为<code>TRUE</code>，就会展示成堆叠柱状图的形式，如下图中的年份查询结果；如果设置为<code>FALSE(默认)</code>，就会使用一个三角形表示查询结果的大小，如下图中”Drama”和”Action”两者相交的结果。</li><li><code>query.name</code>：设置query.name，用于<code>legend</code></li><li><code>query.legend</code>：<code>legend</code>的位置，可以为<code>query.legend = &quot;top&quot;</code></li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_queries1.png.png" alt="r_upset_queries1.png"></p><a class="btn" href="https://cran.r-project.org/web/packages/UpSetR/vignettes/queries.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Querying the Data(官方文档)</a><hr><h3 id="添加属性信息"><a href="#添加属性信息" class="headerlink" title="添加属性信息"></a>添加属性信息</h3><p>除了展示分类信息的intersect之外，如果还想展示其他属性的信息，比如上面电影除了分类之外还有上映时间以及评分信息等，如果想添加这两个信息可以使用<code>attribute.plots</code>参数进行添加。</p><a class="btn" href="https://cran.r-project.org/web/packages/UpSetR/vignettes/attribute.plots.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Attribute Plots(官方文档)</a><h4 id="自带的绘图函数"><a href="#自带的绘图函数" class="headerlink" title="自带的绘图函数"></a>自带的绘图函数</h4><p><code>attribute.plots</code>内置有柱形图(histogram)、散点图(scatter_plot)等:<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upset(movies,attribute.plots=list(gridrows=<span class="number">60</span>,</span><br><span class="line">                                  plots=list(list(plot=scatter_plot, x=<span class="string">"ReleaseDate"</span>, y=<span class="string">"AvgRating"</span>),</span><br><span class="line">                                             list(plot=scatter_plot, x=<span class="string">"ReleaseDate"</span>, y=<span class="string">"Watches"</span>),</span><br><span class="line">                                             list(plot=scatter_plot, x=<span class="string">"Watches"</span>, y=<span class="string">"AvgRating"</span>),</span><br><span class="line">                                             list(plot=histogram, x=<span class="string">"ReleaseDate"</span>)), </span><br><span class="line">                                  ncols = <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_attributeplots1.png.png" alt="r_upset_attributeplots1.png"></p><hr><h4 id="自定义绘图函数"><a href="#自定义绘图函数" class="headerlink" title="自定义绘图函数"></a>自定义绘图函数</h4><p>支持自定义ggplot2语法的绘图函数，并且可以和queries结合：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义的柱状图</span></span><br><span class="line">plot1 &lt;- <span class="keyword">function</span>(mydata, x)&#123;</span><br><span class="line">  myplot &lt;- (ggplot(mydata, aes_string(x= x, fill = <span class="string">"color"</span>))</span><br><span class="line">             + geom_histogram() + scale_fill_identity()</span><br><span class="line">             + theme(plot.margin = unit(c(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="string">"cm"</span>)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 自定义的散点图</span></span><br><span class="line">plot2 &lt;- <span class="keyword">function</span>(mydata, x, y)&#123;</span><br><span class="line">  myplot &lt;- (ggplot(data = mydata, aes_string(x=x, y=y, colour = <span class="string">"color"</span>), alpha = <span class="number">0.5</span>)</span><br><span class="line">             + geom_point() + scale_color_identity()</span><br><span class="line">             + theme_bw() + theme(plot.margin = unit(c(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="string">"cm"</span>)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这里可以设置queries参数来决定是不是将后面的queries信息应用到属性图中</span></span><br><span class="line">attributeplots &lt;- list(gridrows = <span class="number">55</span>,</span><br><span class="line">                       plots = list(list(plot = plot1, x= <span class="string">"ReleaseDate"</span>,  queries = <span class="literal">FALSE</span>),</span><br><span class="line">                                    list(plot = plot1, x= <span class="string">"ReleaseDate"</span>, queries = <span class="literal">TRUE</span>),</span><br><span class="line">                                    list(plot = plot2, x = <span class="string">"ReleaseDate"</span>, y = <span class="string">"AvgRating"</span>, queries = <span class="literal">FALSE</span>),</span><br><span class="line">                                    list(plot = plot2, x = <span class="string">"ReleaseDate"</span>, y = <span class="string">"AvgRating"</span>, queries = <span class="literal">TRUE</span>)),</span><br><span class="line">                       ncols = <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">upset(movies, attribute.plots = attributeplots,</span><br><span class="line">      queries = list(list(query = between, params = list(<span class="number">1920</span>, <span class="number">1940</span>),query.name=<span class="string">"query1"</span>),</span><br><span class="line">                     list(query = intersects, params = list(<span class="string">"Drama"</span>), color= <span class="string">"red"</span>,query.name=<span class="string">"query2"</span>),</span><br><span class="line">                     list(query = elements, params = list(<span class="string">"ReleaseDate"</span>, <span class="number">1990</span>, <span class="number">1991</span>, <span class="number">1992</span>),query.name=<span class="string">"query3"</span>)),</span><br><span class="line">      query.legend = <span class="string">"top"</span>,</span><br><span class="line">      main.bar.color = <span class="string">"yellow"</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_attributeplots2.png.png" alt="r_upset_attributeplots2.png"></p><hr><h3 id="添加meteadata"><a href="#添加meteadata" class="headerlink" title="添加meteadata"></a>添加meteadata</h3><p>还可以添加信息对分类信息进行注释：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sets &lt;- names(movies[<span class="number">3</span>:<span class="number">19</span>])</span><br><span class="line">avgRottenTomatoesScore &lt;- round(runif(<span class="number">17</span>, min = <span class="number">0</span>, max = <span class="number">90</span>))</span><br><span class="line">metadata &lt;- as.data.frame(cbind(sets, avgRottenTomatoesScore))</span><br><span class="line">names(metadata) &lt;- c(<span class="string">"sets"</span>, <span class="string">"avgRottenTomatoesScore"</span>)</span><br><span class="line"><span class="comment"># 保证这一列信息是数字，用于后续绘图</span></span><br><span class="line">metadata$avgRottenTomatoesScore &lt;- as.numeric(as.character(metadata$avgRottenTomatoesScore))</span><br><span class="line">head(metadata)</span><br><span class="line">          sets avgRottenTomatoesScore</span><br><span class="line">  <span class="number">1</span>      Action                     <span class="number">48</span></span><br><span class="line">  <span class="number">2</span>   Adventure                     <span class="number">31</span></span><br><span class="line">  <span class="number">3</span>    Children                     <span class="number">46</span></span><br><span class="line">  <span class="number">4</span>      Comedy                     <span class="number">71</span></span><br><span class="line">  <span class="number">5</span>       Crime                     <span class="number">40</span></span><br><span class="line">  <span class="number">6</span> Documentary                     <span class="number">26</span></span><br><span class="line">upset(movies, set.metadata = list(data = metadata, </span><br><span class="line">                                  plots = list(list(type = <span class="string">"hist"</span>, </span><br><span class="line">                                                    column = <span class="string">"avgRottenTomatoesScore"</span>, </span><br><span class="line">                                                    assign = <span class="number">20</span>))))</span><br></pre></td></tr></table></figure><p></p><p>关键参数：</p><ul><li><code>data</code>：数据框格式的数据，第一列为集合的名称，后续的列为metadata信息</li><li><code>plots</code>：<ul><li><code>type</code>：<ul><li>数据是数字：<code>bar plot (&quot;hist&quot;)</code> 或者 <code>heat map (&quot;heat&quot;)</code></li><li>数据是布尔型的：<code>&quot;bool&quot; heat map</code></li><li>数据的分类型的字符变量：<code>heat map (&quot;heat&quot;)</code> 或者 <code>text (&quot;text&quot;)</code></li></ul></li><li><code>column</code>：画图的数据信息</li><li><code>assign</code>：分配的metadate plot的大小，upset不加metadata之前是100x100的grid，这个如果设置为20，就会添加20用作画图，整个图就会变成100x120</li><li><code>colors</code>:<ul><li><code>bar plot</code>：只会接受一个颜色</li><li><code>&quot;heat&quot; or &quot;bool&quot;</code>：针对每一个分类变量都有一个color</li></ul></li></ul></li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/r_upset_meteadata1.png.png" alt="r_upset_meteadata1.png"></p><a class="btn" href="https://cran.r-project.org/web/packages/UpSetR/vignettes/set.metadata.plots.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Incorporating Set Metadata(官方文档)</a><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了使用&lt;code&gt;VennDiagram&lt;/code&gt;包来进行韦恩图的绘制，并解决了&lt;code&gt;VennDiagram&lt;/code&gt;绘制维恩图中出现的 &lt;strong&gt;不能直接展示，必须要保存为文件才能查看&lt;/strong&gt;、&lt;strong&gt;每次运行都会产生log文件&lt;/strong&gt;两大缺点；随后也学习了使用&lt;code&gt;UpSetR&lt;/code&gt;绘制UpSet图。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Linux系列之挂载硬盘和USB设备</title>
    <link href="http://showteeth.tech/posts/31689.html"/>
    <id>http://showteeth.tech/posts/31689.html</id>
    <published>2020-04-02T08:48:47.000Z</published>
    <updated>2020-05-18T08:08:23.857Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了如何<strong>在Linux下挂载<code>exFAT</code>和<code>NTFS</code>文件系统的硬盘</strong>以及<strong>大致了解了文件系统</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实验室新到了一批数据，需要将其传到计算服务器上，并且实验室搭建了一个数据服务器，这台数据服务器和计算服务器之间是万兆网卡互联的，所以就想把移动硬盘挂载到数据服务器上，然后将其再传到计算服务器上，这样速度可能会快一些。</p><div class="note info"><p>补充一下<strong>网卡的传输速度换算</strong> ：</p><ul><li>一般我们听到的千兆或者万兆网卡其实并不是说传输速度可以达到1000MB/s或者10000MB/s，其单位其实上是<code>Mbps</code></li><li>和常规的存储大小的换算一样，<code>1B(Byte)=8b(bits)</code></li><li>所以实际上的速度应该是：<code>1000Mb/s / 8 = 125MB/s</code></li></ul></div><hr><h2 id="查看插入的设备信息"><a href="#查看插入的设备信息" class="headerlink" title="查看插入的设备信息"></a>查看插入的设备信息</h2><h3 id="非GPT分区的硬盘"><a href="#非GPT分区的硬盘" class="headerlink" title="非GPT分区的硬盘"></a>非GPT分区的硬盘</h3><p>在向工作站上插入硬盘或者U盘之后可以通过<code>fdisk -l</code>命令查看所有的磁盘文件系统详细信息，但是<strong>需要注意<code>fdisk</code>工具不支持<code>GPT</code>分区表，可以使用<code>GNU Parted</code>即下面的<code>parted</code>工具替代</strong>。</p><p>关于分区表的类型，可以参考：<a href="https://www.eassos.cn/jiao-cheng/ying-pan/mbr-vs-gpt.php" target="_blank" rel="noopener">MBR 与 GPT，关于分区表你应该知道的一些知识 - 硬盘使用知识大全（8）</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line">  Disk /dev/sda: 479.6 GB, 479559942144 bytes, 936640512 sectors</span><br><span class="line">  Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">  Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">  I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">  Disk label <span class="built_in">type</span>: dos</span><br><span class="line">  Disk identifier: 0x0004db96</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">  /dev/sda1            2048        6143        2048   83  Linux</span><br><span class="line">  /dev/sda2   *        6144     1030143      512000   83  Linux</span><br><span class="line">  /dev/sda3         1030144   695457791   347213824   83  Linux</span><br><span class="line">  /dev/sda4       695457792   936640511   120591360    5  Extended</span><br><span class="line">  /dev/sda5       695461888   905177087   104857600   83  Linux</span><br><span class="line">  /dev/sda6       905179136   920911871     7866368   8e  Linux LVM</span><br><span class="line">  WARNING: fdisk GPT support is currently new, and therefore <span class="keyword">in</span> an experimental phase. Use at your own discretion.</span><br><span class="line"></span><br><span class="line">  Disk /dev/sdb: 117558.6 GB, 117558623600640 bytes, 229606686720 sectors</span><br><span class="line">  Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">  Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">  I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">  Disk label <span class="built_in">type</span>: gpt</span><br><span class="line">  Disk identifier: 582F8C06-090A-4361-9645-978F49D9EB10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">#         Start          End    Size  Type            Name</span></span><br><span class="line">  1         2048     47192063   22.5G  Linux LVM       </span><br><span class="line">  2     47192064 229606684671  106.9T  Microsoft basic </span><br><span class="line"></span><br><span class="line">  Disk /dev/mapper/centos-swap: 32.2 GB, 32212254720 bytes, 62914560 sectors</span><br><span class="line">  Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">  Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">  I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Disk /dev/sdc: 1000.2 GB, 1000204885504 bytes, 1953525167 sectors</span><br><span class="line">  Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">  Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">  I/O size (minimum/optimal): 4096 bytes / 33553920 bytes</span><br><span class="line">  Disk label <span class="built_in">type</span>: dos</span><br><span class="line">  Disk identifier: 0x2358f016</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">  /dev/sdc1            2048  1953521663   976759808    7  HPFS/NTFS/exFAT</span><br></pre></td></tr></table></figure><p>这里结合硬盘大小可以发现最后的<code>/dev/sdc</code>是我们插入的硬盘设备，<code>/dev/sdc1</code>就是该硬盘的分区信息，这里只有一个分区，后续<strong>挂载硬盘实际上挂载的是分区</strong>，其文件系统采用的是<code>HPFS/NTFS/exFAT</code>，这个也非常重要，后续会针对不同的文件系统采用不同的处理方式。</p><div class="note info"><p>移动硬盘一般是<code>/dev/sdX1</code>的形式，比如<code>/dev/sdc1</code>。这里需要了解<code>sdX1</code>的含义，<code>sd</code>表示<code>可移动设备和SATA 设备</code>，<code>X表示设备的序号</code>，依次为 a、b、c 等，<code>最后的1表示这是该设备的第一个分区</code>。注意，如果你的储存设备只显示为<code>/dev/sdX</code>，<strong>没有最后的数字，表明这个设备没有分区。</strong></p></div><hr><h3 id="GPT分区的硬盘"><a href="#GPT分区的硬盘" class="headerlink" title="GPT分区的硬盘"></a>GPT分区的硬盘</h3><p>前面提到了<code>fdisk</code>不支持<code>GPT</code>分区的硬盘，如果想要查看<code>GPT</code>分区的硬盘可以使用<code>parted</code>命令，其实<strong>非GPT分区的硬盘也可以使用该命令</strong>。</p><p>首先使用<code>fdisk</code>查看所有的硬盘，可以看到有<code>GPT</code>的标志：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line">  Disk /dev/sdc: 4000.8 GB, 4000787029504 bytes, 7814037167 sectors</span><br><span class="line">  Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">  Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">  I/O size (minimum/optimal): 4096 bytes / 33553920 bytes</span><br><span class="line">  Disk label <span class="built_in">type</span>: dos</span><br><span class="line">  Disk identifier: 0x62edc08e</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">  /dev/sdc1               1  4294967294  2147483647   ee  GPT</span><br><span class="line">  Partition 1 does not start on physical sector boundary.</span><br><span class="line">  WARNING: fdisk GPT support is currently new, and therefore <span class="keyword">in</span> an experimental phase. Use at your own discretion.</span><br></pre></td></tr></table></figure><p></p><p>可以看到上面的<code>/dev/sdc</code>盘的<code>system</code>是<code>GPT</code>即表明该硬盘是<code>GPT</code>分区的硬盘。这里<strong>虽然可以显示出这个硬盘，但是其实其显示的内容并不完整</strong>，下面使用<code>parted</code>命令做演示：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有的硬盘</span></span><br><span class="line">parted -l</span><br><span class="line">  Model: Seagate Expansion (scsi)</span><br><span class="line">  Disk /dev/sdc: 4001GB</span><br><span class="line">  Sector size (logical/physical): 512B/4096B</span><br><span class="line">  Partition Table: gpt</span><br><span class="line">  Disk Flags: </span><br><span class="line"></span><br><span class="line">  Number  Start   End     Size    File system  Name                  Flags</span><br><span class="line">  1      20.5kB  210MB   210MB   fat32        EFI System Partition  boot</span><br><span class="line">  2      210MB   4001GB  4001GB  ntfs         Basic data partition</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独列出某个硬盘的信息</span></span><br><span class="line">parted /dev/sdc <span class="built_in">print</span></span><br><span class="line">  Model: Seagate Expansion (scsi)</span><br><span class="line">  Disk /dev/sdc: 4001GB</span><br><span class="line">  Sector size (logical/physical): 512B/4096B</span><br><span class="line">  Partition Table: gpt</span><br><span class="line">  Disk Flags: </span><br><span class="line"></span><br><span class="line">  Number  Start   End     Size    File system  Name                  Flags</span><br><span class="line">  1      20.5kB  210MB   210MB   fat32        EFI System Partition  boot</span><br><span class="line">  2      210MB   4001GB  4001GB  ntfs         Basic data partition</span><br></pre></td></tr></table></figure><p></p><p>这下就可以看到其实<code>/dev/sdc</code>有两个分区，而在<code>fdisk</code>中只可以看到一个分区。</p><hr><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="文件系统简介"><a href="#文件系统简介" class="headerlink" title="文件系统简介"></a>文件系统简介</h3><p>为了了解不同文件系统的区别，这里补充一下关于文件系统的知识，大部分都摘自<a href="https://www.ruanyifeng.com/blog/2018/10/exfat.html" target="_blank" rel="noopener">exFAT 文件系统指南</a>。</p><p>所谓文件系统，就是<strong>文件的储存方式。简单说，它就是一个门牌系统，为储存设备划分门牌号，每个文件分配一个门牌，然后就能按照门牌找到文件。</strong></p><p>没有文件系统的硬盘，就是一块荒地。如果有人住在那里，你只能说那里有人住，精确位置你说不出来。只有划分了路牌，你才能说出，这个人住在”人民路15号”，这样才能精确定位。文件系统就是路牌的划分方法。</p><p><strong>储存设备都需要指定文件系统，计算机才能读写。所谓”格式化”，就是为硬盘安装文件系统。不同的操作系统有不同的文件系统(可以是某一种，也可以是多种)，如果计算机不认识某个文件系统，就会显示这块盘无法读写</strong>。</p><hr><h3 id="常见文件系统"><a href="#常见文件系统" class="headerlink" title="常见文件系统"></a>常见文件系统</h3><ul><li><p><strong>Linux文件系统</strong>: <strong>ext2</strong>, <strong>ext3</strong>, <strong>ext4(centos6默认文件系统)</strong>, <strong>xfs(centos7默认文件系统)</strong>, btrfs, reiserfs, jfs, swap(交换分区)</p></li><li><p>光盘：iso9660</p></li><li><p>Windows：fat32, ntfs</p></li><li><p>Unix: FFS, UFS, JFS2</p></li><li><p>网络文件系统：NFS, CIFS</p></li><li><p>集群文件系统：GFS2, OCFS2</p></li><li><p><strong>分布式文件系统</strong>：ceph, moosefs, mogilefs, GlusterFS, <strong>Lustre</strong></p></li></ul><hr><h3 id="查看硬盘的文件系统类型"><a href="#查看硬盘的文件系统类型" class="headerlink" title="查看硬盘的文件系统类型"></a>查看硬盘的文件系统类型</h3><p>在Linux下可以使用<code>df -Th</code>来查看硬盘的文件系统类型，需要注意的是<strong>没有挂载的硬盘是看不了文件系统类型的</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">df -T -h</span><br><span class="line">  Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">  /dev/sda5      xfs       100G  5.5G   95G   6% /</span><br><span class="line">  devtmpfs       devtmpfs   16G     0   16G   0% /dev</span><br><span class="line">  tmpfs          tmpfs      16G     0   16G   0% /dev/shm</span><br><span class="line">  tmpfs          tmpfs      16G   11M   16G   1% /run</span><br><span class="line">  tmpfs          tmpfs      16G     0   16G   0% /sys/fs/cgroup</span><br><span class="line">  /dev/sda3      xfs       331G  270M  331G   1% /home</span><br><span class="line">  /dev/sda2      xfs       494M  170M  325M  35% /boot</span><br><span class="line">  /dev/sdb2      xfs       107T   28G  107T   1% /data</span><br><span class="line">  tmpfs          tmpfs     3.1G     0  3.1G   0% /run/user/0</span><br><span class="line">  tmpfs          tmpfs     3.1G     0  3.1G   0% /run/user/1000</span><br><span class="line">  <span class="comment"># 这里已经完成了挂载，显示成了fuseblk</span></span><br><span class="line">  /dev/sdc1      fuseblk   932G  427G  506G  46% /mnt/200402data</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.ruanyifeng.com/blog/2018/10/exfat.html" target="_blank" rel="noopener">exFAT 文件系统指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/59747958" target="_blank" rel="noopener">移动硬盘使用什么文件系统格式</a></li></ul><hr><h2 id="exFAT文件系统硬盘挂载"><a href="#exFAT文件系统硬盘挂载" class="headerlink" title="exFAT文件系统硬盘挂载"></a>exFAT文件系统硬盘挂载</h2><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>带有<code>exFAT</code> 文件系统的硬盘挂载在Linux上是通过 <code>fuse (Filesystem in userspace )</code> 模块来支持的，这里需要先安装该模块：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常规安装会出现如下问题</span></span><br><span class="line"><span class="comment"># 显示没有这个包</span></span><br><span class="line">yum install exfat-utils fuse-exfat</span><br><span class="line">  No package exfat-utils available.</span><br><span class="line">  No package fuse-exfatsudo available.</span><br></pre></td></tr></table></figure><p></p><p>出现上述问题的原因是<code>exfat-utils</code>、<code>fuse-exfat</code>这两个包<strong>并不在yum默认的repo中，这里需要安装nux-dextop才可以实现yum的安装</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先安装epel</span></span><br><span class="line">yum -y install epel-release</span><br><span class="line"><span class="comment"># 安装nux-dextop</span></span><br><span class="line">yum -y install epel-release http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure><p></p><p>由于<strong>Nux Dextop仓库可能会与其他第三方库有冲突，所以建议默认情况下不启用Nux Dextop仓库,当需要使用Nux Dextop仓库时，显式启用仓库</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nux-dextop.repo</span><br><span class="line"><span class="comment"># 将"enabled=1" 修改为 "enabled=0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显式指定仓库安装</span></span><br><span class="line">yum --enablerepo=nux-dextop install &lt;package-name&gt;</span><br></pre></td></tr></table></figure><p></p><p>安装完成之后可以使用<code>yum repolist</code>查看：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">repo id                                                     repo name                                                                               status</span><br><span class="line">!base/7/x86_64                                              CentOS-7 - Base                                                                         10,097</span><br><span class="line">!epel/x86_64                                                Extra Packages <span class="keyword">for</span> Enterprise Linux 7 - x86_64                                          13,229</span><br><span class="line">!extras/7/x86_64                                            CentOS-7 - Extras                                                                          341</span><br><span class="line">!nux-dextop/x86_64                                          Nux.Ro RPMs <span class="keyword">for</span> general desktop use                                                      2,717</span><br><span class="line">!updates/7/x86_64                                           CentOS-7 - Updates                                                                       1,787</span><br><span class="line">repolist: 28,171</span><br></pre></td></tr></table></figure><p></p><p>设置好repo之后就可以安装<code>exfat-utils</code>、<code>fuse-exfat</code>这两个包了：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install exfat-utils fuse-exfat</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>安装完所需要的依赖之后就可以进行挂载了：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -t指定文件系统类型</span></span><br><span class="line">mount -t exfat /dev/sdc1 /mnt/200402data</span><br><span class="line">  <span class="comment"># 挂载成功输出</span></span><br><span class="line">  FUSE exfat 1.2.7</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="ntfs文件系统硬盘挂载"><a href="#ntfs文件系统硬盘挂载" class="headerlink" title="ntfs文件系统硬盘挂载"></a>ntfs文件系统硬盘挂载</h2><p>有了前面的<code>exfat</code>文件系统的挂载学习，针对<code>ntfs</code>文件系统的挂载就简单很多。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖ntfs-3g</span></span><br><span class="line"><span class="comment">## ntfs-3g也不再默认的仓库中，需要先安装epel-release</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line"><span class="comment">## 再安装ntfs-3g</span></span><br><span class="line">yum install ntfs-3g -y</span><br></pre></td></tr></table></figure><h3 id="查看硬盘信息"><a href="#查看硬盘信息" class="headerlink" title="查看硬盘信息"></a>查看硬盘信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Disk /dev/sdd: 4000.8 GB, 4000787030016 bytes, 7814037168 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: gpt</span><br><span class="line">Disk identifier: 6E7B6924-DD95-484B-B786-F998CB11A803</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#         Start          End    Size  Type            Name</span></span><br><span class="line"> 1           34        32767     16M  Microsoft reser Microsoft reserved partition</span><br><span class="line">Partition 1 does not start on physical sector boundary.</span><br><span class="line"> 2        32768   7814033407    3.7T  Microsoft basic Basic data partition</span><br></pre></td></tr></table></figure><p>这里和前面看到的<code>exfat</code>文件系统的硬盘信息并不同：</p><ul><li>这里没有出现前面的<code>System</code>，而是<code>Name</code>，并且值为：<code>Basic data partition</code>，而<a href="https://en.wikipedia.org/wiki/Microsoft_basic_data_partition" target="_blank" rel="noopener">Microsoft</a>的<code>Basic data partition are formatted with the NTFS, exFAT, or FAT32 file systems.</code></li><li>这里的硬盘分区直接是<code>1,2</code>，并不是前面的<code>/dev/sdc1</code>这种加上了硬盘名称的</li></ul><hr><h3 id="挂载-1"><a href="#挂载-1" class="headerlink" title="挂载"></a>挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的分区为/dev/sdd2，直接加上了/dev/sdd</span></span><br><span class="line">mount -t ntfs-3g /dev/sdd2 /data/mount_tmp</span><br></pre></td></tr></table></figure><hr><h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><h4 id="动态库加载错误"><a href="#动态库加载错误" class="headerlink" title="动态库加载错误"></a>动态库加载错误</h4><p>报错<code>/sbin/mount.ntfs-3g: symbol lookup error: /sbin/mount.ntfs-3g: undefined symbol: ntfs_xattr_free_mapping</code>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看依赖</span></span><br><span class="line">ldd /bin/ntfs-3g</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffe1a322000)</span><br><span class="line">libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f1581e41000)</span><br><span class="line">libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f1581c25000)</span><br><span class="line">libntfs-3g.so.88 =&gt; /lib/libntfs-3g.so.88 (0x00007f15819dc000)</span><br><span class="line">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f158160f000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007f1582045000)</span><br></pre></td></tr></table></figure><p></p><p>可以发现依赖项里面存在两种目录的依赖，一种是<code>/lib64</code>，另一个是<code>/lib</code>，而是<code>/lib</code>的只有一个，所以怀疑是不是依赖项加载错误的问题，这样的话首先需要确定在<code>/lib64</code>目录下是不是也存在一个<code>libntfs-3g.so.88</code>文件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发现确实是有这个文件</span></span><br><span class="line">ls /lib64/libntfs-3g.so.88</span><br><span class="line">  /lib64/libntfs-3g.so.88</span><br></pre></td></tr></table></figure><p></p><p>因此将 <code>/lib/libntfs-3g.so</code> 更名从而让程序无法调用即可：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /lib/libntfs-3g.so.88 /lib/libntfs-3g.so.88.old</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="硬盘文件系统格式识别错误"><a href="#硬盘文件系统格式识别错误" class="headerlink" title="硬盘文件系统格式识别错误"></a>硬盘文件系统格式识别错误</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mount -t ntfs-3g /dev/sdc1 /mnt/200402data</span><br><span class="line">  NTFS signature is missing.</span><br><span class="line">  Failed to mount <span class="string">'/dev/sdc1'</span>: Invalid argument</span><br><span class="line">  The device <span class="string">'/dev/sdc1'</span> doesn<span class="string">'t seem to have a valid NTFS.</span></span><br><span class="line"><span class="string">  Maybe the wrong device is used? Or the whole disk instead of a</span></span><br><span class="line"><span class="string">  partition (e.g. /dev/sda, not /dev/sda1)? Or the other way around?</span></span><br></pre></td></tr></table></figure><p>查看硬盘的文件系统最好是在挂载之前先在电脑上看看硬盘的文件系统格式，然后再选择挂载时使用的文件系统格式。</p><hr><h2 id="设置自动挂载"><a href="#设置自动挂载" class="headerlink" title="设置自动挂载"></a>设置自动挂载</h2><p>某个硬盘自动挂载在固定的目录。参考<a href="https://www.rootusers.com/how-to-mount-a-windows-ntfs-disk-in-linux/" target="_blank" rel="noopener">How To Mount A Windows NTFS Disk In Linux</a></p><hr><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接卸载硬盘</span></span><br><span class="line">umount /dev/sdd2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载硬盘的挂载位置</span></span><br><span class="line">umount /mnt/200402data</span><br></pre></td></tr></table></figure><hr><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="ls-reading-directory-Input-output-error"><a href="#ls-reading-directory-Input-output-error" class="headerlink" title="ls: reading directory .: Input/output error"></a>ls: reading directory .: Input/output error</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 早上起来发现报错</span></span><br><span class="line">ls: reading directory .: Input/output error</span><br></pre></td></tr></table></figure><p>网上搜索了一下关于这个问题，大部分说的都是硬盘损坏，没有什么补救措施，需要格式化硬盘：<a href="https://unix.stackexchange.com/questions/39905/input-output-error-when-accessing-a-directory" target="_blank" rel="noopener">“Input/output error” when accessing a directory</a></p><p>但是我啥也没干啊，就是晚上挂载在哪里然后传输数据，不应该啊，然后抱着试一试的态度想着重新挂载一下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载</span></span><br><span class="line">umount mount_tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新挂载</span></span><br><span class="line">fdisk -l</span><br><span class="line">  ...</span><br><span class="line">  Disk /dev/sdf: 4000.8 GB, 4000787030016 bytes, 7814037168 sectors</span><br><span class="line">  Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">  Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">  I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">  Disk label <span class="built_in">type</span>: gpt</span><br><span class="line">  Disk identifier: 6E7B6924-DD95-484B-B786-F998CB11A803</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">#         Start          End    Size  Type            Name</span></span><br><span class="line">  1           34        32767     16M  Microsoft reser Microsoft reserved partition</span><br><span class="line">  Partition 1 does not start on physical sector boundary.</span><br><span class="line">  2        32768   7814033407    3.7T  Microsoft basic Basic data partition</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里就发现问题了，这里的盘符和之前挂载的盘符不一样了</span></span><br><span class="line"><span class="comment"># 重新挂载试试</span></span><br><span class="line">mount -t ntfs-3g /dev/sdf2 /data/mount_tmp</span><br><span class="line"><span class="comment"># 然后就恢复正常了</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="NTFS-volume-is-already-exclusively-opened"><a href="#NTFS-volume-is-already-exclusively-opened" class="headerlink" title="NTFS volume is already exclusively opened"></a>NTFS volume is already exclusively opened</h3><p>在挂载多个硬盘的时候一不小心将多个硬盘挂在了同一个位置，结果再次将其中一个硬盘挂载到其他部位的时候报错：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mount is denied because the NTFS volume is already exclusively opened.The volume may be already mounted, or another software may use it <span class="built_in">which</span> could be identified <span class="keyword">for</span> example by the <span class="built_in">help</span> of the <span class="string">'fuser'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><p></p><p>按照提示，查看占用外接存储的进程PID：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看占用外接存储的进程PID</span></span><br><span class="line">fuser -m -u /dev/sdb1</span><br><span class="line">  /dev/sdb1:  31301(root)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后杀掉这个进程</span></span><br><span class="line"><span class="built_in">kill</span> 31301</span><br></pre></td></tr></table></figure><p></p><p>杀掉占用进程之后挂载仍然报错，这里直接卸载：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样卸载是不行的，还是会报错</span></span><br><span class="line">umount /mnt/200402data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接下载硬盘才可以</span></span><br><span class="line">umount /dev/sdd2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后重新挂载即可</span></span><br></pre></td></tr></table></figure><p></p><h2 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/86d16189832e" target="_blank" rel="noopener">在CentOS或RHEL上安装Nux Dextop仓库</a></li><li><a href="https://superuser.com/questions/960321/centos-yum-not-finding-packages" target="_blank" rel="noopener">CentOS Yum Not Finding Packages</a></li><li><a href="https://www.rootusers.com/how-to-mount-a-windows-ntfs-disk-in-linux/" target="_blank" rel="noopener">How To Mount A Windows NTFS Disk In Linux</a></li><li><a href="https://blog.51cto.com/xiaodongge/1845547" target="_blank" rel="noopener">Linux挂载NTFS硬盘错误解决办法</a></li><li><a href="https://unix.stackexchange.com/questions/476852/cannot-mount-sda1-the-device-dev-sda1-doesnt-seem-to-have-a-valid-ntfs" target="_blank" rel="noopener">Cannot mount sda1: “The device ‘/dev/sda1’ doesn’t seem to have a valid NTFS.”</a></li><li><a href="https://daemon369.github.io/linux/2018/01/06/01-get-disks-info-in-linux" target="_blank" rel="noopener">Linux中查看硬盘信息</a></li><li><a href="https://daemon369.github.io/linux/2018/01/07/01-add-new-disk-to-linux" target="_blank" rel="noopener">Linux中添加硬盘</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了如何&lt;strong&gt;在Linux下挂载&lt;code&gt;exFAT&lt;/code&gt;和&lt;code&gt;NTFS&lt;/code&gt;文件系统的硬盘&lt;/strong&gt;以及&lt;strong&gt;大致了解了文件系统&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="集群运维" scheme="http://showteeth.tech/categories/Linux/%E9%9B%86%E7%BE%A4%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="集群运维" scheme="http://showteeth.tech/tags/%E9%9B%86%E7%BE%A4%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>R系列之map函数家族</title>
    <link href="http://showteeth.tech/posts/57211.html"/>
    <id>http://showteeth.tech/posts/57211.html</id>
    <published>2020-03-27T01:37:20.000Z</published>
    <updated>2020-04-04T08:23:08.215Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要学习了<code>map</code>函数家族的各种函数用法。<code>map</code>家族的函数主要是用来<strong>将函数作用于传入数据(可以是向量，也可以是数据框)的每个元素</strong>的，这和主要<strong>针对数据框和列表的<code>apply</code>函数家族形成互补</strong>，主要实现的功能相近。同时也学习了<code>map</code>函数家族的变体，增强了其适用性。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在前面的文章<a href="http://showteeth.tech/posts/15576.html">R系列之apply函数家族</a>中已经学习了在代码中减少使用循环的方法，不过<strong>apply函数家族的函数大部分都是针对dataframe、array以及list设计的</strong>，而实际使用过程中经常会遇到需要<strong>将函数应用到vector中每个元素的情形</strong>，这种情况下就不能使用apply函数家族的函数或者使用比较麻烦。针对上述情况，我们可以<strong>使用map函数家族的函数来解决这个问题</strong>。</p><hr><h2 id="map函数家族简介"><a href="#map函数家族简介" class="headerlink" title="map函数家族简介"></a>map函数家族简介</h2><p><code>map</code>函数家族主要包括7个函数，都在<code>purr</code>包中(<code>purr</code>包又在<code>tidyverse</code>包中，使用的时候直接<code>library(tidyverse)</code>)，按照返回值数据结构的差异可以分为：</p><ul><li><code>map(.x, .f, ...)</code>：返回值为<strong>列表</strong></li><li><code>map_lgl()</code>、<code>map_int()</code>、<code>map_dbl()</code>、<code>map_chr()</code>：返回特定数据类型的<strong>向量</strong>，在使用<code>map_int()</code>时需要注意数据类型的自动提升问题</li><li><code>map_dfc()</code>、<code>map_dfr()</code>：对数据进行<code>col_binding</code>、<code>row_binding</code>得到<strong>数据框</strong></li></ul><hr><h2 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h2><p>将函数作用于每个元素，并且返回一个列表(函数在每个元素上的执行结果)：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对9、16、25执行开方操作，返回每个结果的列表</span></span><br><span class="line">map(c(<span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>), sqrt)</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">2</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">3</span>]]</span><br><span class="line">  [<span class="number">1</span>] <span class="number">5</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="类型特异性的map函数"><a href="#类型特异性的map函数" class="headerlink" title="类型特异性的map函数"></a>类型特异性的map函数</h2><p>针对不同返回值的类型，map函数可以分为<code>map_lgl()</code>、<code>map_int()</code>、<code>map_dbl()</code>、<code>map_chr()</code>，分别作用与<code>逻辑值</code>、<code>整型数值</code>、<code>浮点型</code>、<code>字符串类型</code>，这些函数的<strong>返回值都是特定类型的向量</strong>。</p><h3 id="map-chr-返回字符型向量"><a href="#map-chr-返回字符型向量" class="headerlink" title="map_chr-返回字符型向量"></a>map_chr-返回字符型向量</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看生成的数据类型</span></span><br><span class="line"><span class="comment">## 直接生成的序列是整型的</span></span><br><span class="line">map_chr(<span class="number">1</span>:<span class="number">10</span>, typeof)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span> <span class="string">"integer"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定的序列是double型的</span></span><br><span class="line">map_chr(c(<span class="number">1</span>,<span class="number">10</span>), typeof)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"double"</span> <span class="string">"double"</span></span><br></pre></td></tr></table></figure><hr><h3 id="map-dbl-返回浮点型向量"><a href="#map-dbl-返回浮点型向量" class="headerlink" title="map_dbl-返回浮点型向量"></a>map_dbl-返回浮点型向量</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map_dbl(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>),sqrt)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1.000000</span> <span class="number">1.414214</span> <span class="number">2.000000</span></span><br></pre></td></tr></table></figure><hr><h3 id="map-int-返回整型向量"><a href="#map-int-返回整型向量" class="headerlink" title="map_int-返回整型向量"></a>map_int-返回整型向量</h3><p>这里使用的时候需要注意，<code>purr</code>包对 <code>type checking</code>是非常严格的，在输出的时候会<strong>自动进行类型的提升(如果一个int乘上double，结果就是double型的数据)</strong>，不同数据类型的升级顺序为：<code>logical -&gt; integer -&gt; double -&gt; character</code>，注意这里<strong>只能从低到高，不能从高到低</strong>。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里生成的1-10的序列是整型的序列</span></span><br><span class="line">map_int(<span class="number">1</span>:<span class="number">10</span>, <span class="keyword">function</span>(x) x)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="comment"># 这里2*x中的2是浮点型的数据</span></span><br><span class="line"><span class="comment"># int*double的结果是double，所以这里报错</span></span><br><span class="line">map_int(<span class="number">1</span>:<span class="number">10</span>, <span class="keyword">function</span>(x) <span class="number">2</span>*x)</span><br><span class="line">  Error: Can<span class="string">'t coerce element 1 from a double to a integer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 声明这里的2是整型的数据，在后面加上L即可</span></span><br><span class="line"><span class="string">map_int(1:10, function(x) 2L*x)</span></span><br><span class="line"><span class="string">  [1]  2  4  6  8 10 12 14 16 18 20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 直接使用map_dbl即可</span></span><br><span class="line"><span class="string">map_dbl(1:10, function(x) 2*x)</span></span><br><span class="line"><span class="string"> [1]  2  4  6  8 10 12 14 16 18 20</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="map-lgl-返回逻辑向量"><a href="#map-lgl-返回逻辑向量" class="headerlink" title="map_lgl-返回逻辑向量"></a>map_lgl-返回逻辑向量</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map_lgl(c(<span class="number">1</span>,<span class="number">10</span>), is.double)</span><br><span class="line">  [<span class="number">1</span>] <span class="literal">TRUE</span> <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><hr><h2 id="输出数据框的map函数"><a href="#输出数据框的map函数" class="headerlink" title="输出数据框的map函数"></a>输出数据框的map函数</h2><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这里的~相当于function(x)</span></span><br><span class="line"><span class="comment"># ~ lm(mpg ~ wt, data = .x) 相当于 function(x) lm(mpg ~ wt, data = .x)</span></span><br><span class="line">mtcars %&gt;%</span><br><span class="line">  split(.$cyl) %&gt;%</span><br><span class="line">  map(~ lm(mpg ~ wt, data = .x)) %&gt;% </span><br><span class="line">  map(~ as.data.frame(t(as.matrix(coef(.)))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">  $`4`</span><br><span class="line">    (Intercept)        wt</span><br><span class="line">  <span class="number">1</span>     <span class="number">39.5712</span> -<span class="number">5.647025</span></span><br><span class="line"></span><br><span class="line">  $`6`</span><br><span class="line">    (Intercept)        wt</span><br><span class="line">  <span class="number">1</span>    <span class="number">28.40884</span> -<span class="number">2.780106</span></span><br><span class="line"></span><br><span class="line">  $`8`</span><br><span class="line">    (Intercept)        wt</span><br><span class="line">  <span class="number">1</span>    <span class="number">23.86803</span> -<span class="number">2.192438</span></span><br></pre></td></tr></table></figure><hr><h3 id="map-dfr-对输出进行row-binding得到dataframe"><a href="#map-dfr-对输出进行row-binding得到dataframe" class="headerlink" title="map_dfr-对输出进行row-binding得到dataframe"></a>map_dfr-对输出进行row-binding得到dataframe</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mtcars %&gt;%</span><br><span class="line">  split(.$cyl) %&gt;%</span><br><span class="line">  map(~ lm(mpg ~ wt, data = .x)) %&gt;% </span><br><span class="line">  map_dfr(~ as.data.frame(t(as.matrix(coef(.)))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">    (Intercept)        wt</span><br><span class="line">  <span class="number">1</span>    <span class="number">39.57120</span> -<span class="number">5.647025</span></span><br><span class="line">  <span class="number">2</span>    <span class="number">28.40884</span> -<span class="number">2.780106</span></span><br><span class="line">  <span class="number">3</span>    <span class="number">23.86803</span> -<span class="number">2.192438</span></span><br></pre></td></tr></table></figure><hr><h3 id="map-dfc-对输出进行col-binding得到dataframe"><a href="#map-dfc-对输出进行col-binding得到dataframe" class="headerlink" title="map_dfc-对输出进行col-binding得到dataframe"></a>map_dfc-对输出进行col-binding得到dataframe</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mtcars %&gt;%</span><br><span class="line">  split(.$cyl) %&gt;%</span><br><span class="line">  map(~ lm(mpg ~ wt, data = .x)) %&gt;% </span><br><span class="line">  map_dfc(~ as.data.frame(t(as.matrix(coef(.)))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="comment">## 重复的col name会加后缀区分</span></span><br><span class="line">  (Intercept)        wt (Intercept)<span class="number">1</span>       wt1 (Intercept)<span class="number">2</span>       wt2</span><br><span class="line">  <span class="number">1</span>     <span class="number">39.5712</span> -<span class="number">5.647025</span>     <span class="number">28.40884</span> -<span class="number">2.780106</span>     <span class="number">23.86803</span> -<span class="number">2.192438</span></span><br></pre></td></tr></table></figure><hr><h2 id="map函数的变体"><a href="#map函数的变体" class="headerlink" title="map函数的变体"></a>map函数的变体</h2><h3 id="变体简介"><a href="#变体简介" class="headerlink" title="变体简介"></a>变体简介</h3><table><thead><tr><th></th><th>List</th><th>Atomic</th><th>Same type</th><th>Nothing</th></tr></thead><tbody><tr><td>One argument</td><td><code>map()</code></td><td><code>map_lgl()</code>, …</td><td><code>modify()</code></td><td><code>walk()</code></td></tr><tr><td>Two arguments</td><td><code>map2()</code></td><td><code>map2_lgl()</code>, …</td><td><code>modify2()</code></td><td><code>walk2()</code></td></tr><tr><td>One argument + index</td><td><code>imap()</code></td><td><code>imap_lgl()</code>, …</td><td><code>imodify()</code></td><td><code>iwalk()</code></td></tr><tr><td>N arguments</td><td><code>pmap()</code></td><td><code>pmap_lgl()</code>, …</td><td>—</td><td><code>pwalk()</code></td></tr></tbody></table><hr><h3 id="modify-和输入数据格式相同"><a href="#modify-和输入数据格式相同" class="headerlink" title="modify-和输入数据格式相同"></a>modify-和输入数据格式相同</h3><p>如果想在使用map函数功能的同时不改变数据的格式(输出和输入数据格式相同)可以使用函数<code>modify()</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(</span><br><span class="line">  x = <span class="number">1</span>:<span class="number">3</span>,</span><br><span class="line">  y = <span class="number">6</span>:<span class="number">4</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 使用map函数会输出列表形式</span></span><br><span class="line">map(df, ~ .x * <span class="number">2</span>)</span><br><span class="line">  $x</span><br><span class="line">  [<span class="number">1</span>] <span class="number">2</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line">  $y</span><br><span class="line">  [<span class="number">1</span>] <span class="number">12</span> <span class="number">10</span>  <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用modify函数</span></span><br><span class="line"><span class="comment"># 输出和输入的数据格式相同</span></span><br><span class="line">modify(df, ~ .x * <span class="number">2</span>)</span><br><span class="line">    x  y</span><br><span class="line">  <span class="number">1</span> <span class="number">2</span> <span class="number">12</span></span><br><span class="line">  <span class="number">2</span> <span class="number">4</span> <span class="number">10</span></span><br><span class="line">  <span class="number">3</span> <span class="number">6</span>  <span class="number">8</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="map2-多参函数"><a href="#map2-多参函数" class="headerlink" title="map2-多参函数"></a>map2-多参函数</h3><p>前面<code>map</code>家族函数中使用的<code>.f</code>函数都是针对单个参数的向量化(每次向<code>.f</code>函数中传递单个参数)，<strong>如果需要每次向<code>.f</code>函数中传递多个参数则需要使用<code>map2</code>函数家族</strong>，下面演示计算<strong>加权平均数</strong>的方法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数值</span></span><br><span class="line">xs &lt;- map(<span class="number">1</span>:<span class="number">8</span>, ~ runif(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 修改其中一个数值为NA</span></span><br><span class="line">xs[[<span class="number">1</span>]][[<span class="number">1</span>]] &lt;- <span class="literal">NA</span></span><br><span class="line"><span class="comment"># 权重信息</span></span><br><span class="line">ws &lt;- map(<span class="number">1</span>:<span class="number">8</span>, ~ rpois(<span class="number">10</span>, <span class="number">5</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算简单的均值</span></span><br><span class="line">map_dbl(xs, mean)</span><br><span class="line">  <span class="comment"># 因为存在NA，所以有一行数据的结果为NA</span></span><br><span class="line">  [<span class="number">1</span>]        <span class="literal">NA</span> <span class="number">0.4835817</span> <span class="number">0.5543698</span> <span class="number">0.3183199</span> <span class="number">0.5054429</span> <span class="number">0.4311387</span> <span class="number">0.4268043</span> <span class="number">0.2760347</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给mean传递参数来去除na</span></span><br><span class="line"><span class="comment"># 注意这里的参数不是向量化的参数，是固定的参数，所以可以放在最后添加，这点和apply函数相同</span></span><br><span class="line">map_dbl(xs, mean,na.rm=<span class="literal">T</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0.5894843</span> <span class="number">0.4835817</span> <span class="number">0.5543698</span> <span class="number">0.3183199</span> <span class="number">0.5054429</span> <span class="number">0.4311387</span> <span class="number">0.4268043</span> <span class="number">0.2760347</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算加权平均数</span></span><br><span class="line"><span class="comment"># 将数值和权重这些需要向量化的参数放在函数之前，固定的参数放在函数之后</span></span><br><span class="line">map2_dbl(xs, ws, weighted.mean,na.rm=<span class="literal">T</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0.5369628</span> <span class="number">0.4876169</span> <span class="number">0.5852098</span> <span class="number">0.3186872</span> <span class="number">0.5118735</span> <span class="number">0.3620245</span> <span class="number">0.4655258</span> <span class="number">0.2537778</span></span><br></pre></td></tr></table></figure><p></p><p>三个及以上参数的向量化可以使用<code>pmap</code>函数家族，多个参数使用<code>list()</code>进行包裹传递给<code>pmap</code>函数家族的函数即可：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2个参数的向量化也可以使用这个函数</span></span><br><span class="line">pmap_dbl(list(xs, ws), weighted.mean,na.rm=<span class="literal">T</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0.5369628</span> <span class="number">0.4876169</span> <span class="number">0.5852098</span> <span class="number">0.3186872</span> <span class="number">0.5118735</span> <span class="number">0.3620245</span> <span class="number">0.4655258</span> <span class="number">0.2537778</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://purrr.tidyverse.org/reference/map.html" target="_blank" rel="noopener">官方文档——Apply a function to each element of a vector</a></li><li><a href="https://adv-r.hadley.nz/functionals.html" target="_blank" rel="noopener">Advanced R中的教程-Hadley Wickham自己写的</a></li><li><a href="https://r4ds.had.co.nz/iteration.html#the-map-functions" target="_blank" rel="noopener">R for Data Science——The map functions</a></li><li><a href="https://jennybc.github.io/purrr-tutorial/ls01_map-name-position-shortcuts.html" target="_blank" rel="noopener">Introduction to map(): extract elements</a></li><li><a href="https://zhuanlan.zhihu.com/p/26888325" target="_blank" rel="noopener">R语言函数式编程purrr的应用</a></li><li><a href="https://www.jianshu.com/p/ab78f1eab43c" target="_blank" rel="noopener">R中map循环函数学习</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要学习了&lt;code&gt;map&lt;/code&gt;函数家族的各种函数用法。&lt;code&gt;map&lt;/code&gt;家族的函数主要是用来&lt;strong&gt;将函数作用于传入数据(可以是向量，也可以是数据框)的每个元素&lt;/strong&gt;的，这和主要&lt;strong&gt;针对数据框和列表的&lt;code&gt;apply&lt;/code&gt;函数家族形成互补&lt;/strong&gt;，主要实现的功能相近。同时也学习了&lt;code&gt;map&lt;/code&gt;函数家族的变体，增强了其适用性。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
