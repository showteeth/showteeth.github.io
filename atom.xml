<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>showteeth&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://showteeth.tech/"/>
  <updated>2019-03-01T08:10:22.837Z</updated>
  <id>http://showteeth.tech/</id>
  
  <author>
    <name>showteeth</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>markdown空格缩进</title>
    <link href="http://showteeth.tech/posts/58681.html"/>
    <id>http://showteeth.tech/posts/58681.html</id>
    <published>2019-03-01T08:07:24.000Z</published>
    <updated>2019-03-01T08:10:22.837Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这里写摘要，显示更好看</p></div><a id="more"></a><h2 id="开始于二级标题"><a href="#开始于二级标题" class="headerlink" title="开始于二级标题"></a>开始于二级标题</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/31eade263e7a" target="_blank" rel="noopener">markdown空格缩进以及HTML空格实体</a></li><li><a href="https://blog.csdn.net/testcs_dn/article/details/78957685" target="_blank" rel="noopener">markdown编辑器中可以使用的6种空格标记</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这里写摘要，显示更好看&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="其他内容学习" scheme="http://showteeth.tech/categories/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="markdown" scheme="http://showteeth.tech/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>单行命令嵌套</title>
    <link href="http://showteeth.tech/posts/50164.html"/>
    <id>http://showteeth.tech/posts/50164.html</id>
    <published>2019-02-28T08:07:00.000Z</published>
    <updated>2019-03-01T08:56:52.382Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>单行命令嵌套，也就是一行命令使用另一行命令的结果，或者将命令的结果当做参数传给另一个命令，使用方法<code>command1 &lt;(command2)</code>.</p></div><a id="more"></a><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>将command2的结果作为command1的输入：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  command1 &lt;(command2)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>uniq命令去重常常需要先进行排序操作：</p><blockquote><p><code>uniq -c &lt;(sort uniq.txt)</code><br>1 i am test<br>2 i love test<br>1 i want go abroad<br>4 this is a test<br>1 those are good men<br>1 we are good men<br>1 whom have a try<br>1 WhoM have a try<br>1 you have a try</p></blockquote><p>当前上述也可以直接使用<strong>管道符<code>|</code></strong>来操作</p><p>但是如果是像<code>join</code>这种<strong>需要操作两个文件的</strong>，单纯地使用管道符就很难达到目的，<code>join</code>对指定列进行连接时也需要进行排序操作：</p><blockquote><p><code>cat test1.txt</code><br>aa 1 2<br>bb 2 3<br>cc 4 6<br>dd 3 3</p></blockquote><blockquote><p><code>cat test2.txt</code><br>aa 2 1<br>bb 8 2<br>ff 2 4<br>cc 4 4<br>dd 5 5</p></blockquote><p>管道符和命令嵌套合用：</p><blockquote><p><strong><code>sort -k 1,1 test2.txt |join -j 1 &lt;(sort -k 1,1 test1.txt) -</code></strong><br>aa 1 2 2 1<br>bb 2 3 8 2<br>cc 4 6 4 4<br>dd 3 3 5 5</p></blockquote><p>当然也可以直接使用命令嵌套：</p><blockquote><p><strong><code>join -j 1 &lt;(sort -k 1,1 test1.txt) &lt;(sort -k 1,1 test2.txt)</code></strong><br>aa 1 2 2 1<br>bb 2 3 8 2<br>cc 4 6 4 4<br>dd 3 3 5 5</p></blockquote><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;单行命令嵌套，也就是一行命令使用另一行命令的结果，或者将命令的结果当做参数传给另一个命令，使用方法&lt;code&gt;command1 &amp;lt;(command2)&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>cut-按列切分文件字段工具</title>
    <link href="http://showteeth.tech/posts/64687.html"/>
    <id>http://showteeth.tech/posts/64687.html</id>
    <published>2019-02-28T07:35:38.000Z</published>
    <updated>2019-03-01T08:03:31.599Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本文主要学习了Linux下对每一行文本按照给定的分隔符进行切割并按照指定的范围提取字段、字符或字节的命令<code>cut</code>，其主要选项包括：<code>-d</code>、<code>-f</code>、<code>--complement</code>、<code>-s</code>、<code>-c</code>、<code>-b</code>、<code>-n</code>和<code>--output-delimiter</code>。</p></div><a id="more"></a><h2 id="cut用法"><a href="#cut用法" class="headerlink" title="cut用法"></a>cut用法</h2><ul><li><code>cut</code>命令从文件的每一行剪切字节、字符或字段并将这些字节、字符或字段写至标准输出</li><li>如果不指定文件，<code>cut</code>命令将读取标准输入</li></ul><h3 id="cut命令格式"><a href="#cut命令格式" class="headerlink" title="cut命令格式"></a>cut命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Usage: </span><br><span class="line">  cut OPTION [FILE]</span><br></pre></td></tr></table></figure><hr><h3 id="cut-options说明"><a href="#cut-options说明" class="headerlink" title="cut options说明"></a>cut options说明</h3><style>table th:first-of-type{width:15%}table th:nth-of-type(2){width:25%}table th:nth-of-type(3){width:60%}</style><table><thead><tr><th>参数</th><th>完整参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>–bytes=LIST</td><td>以字节为单位进行分割，这些字节位置将忽略多字节字符边界，除非也指定了-n标志</td></tr><tr><td>-c</td><td>–characters=LIST</td><td>以字符为单位进行分割</td></tr><tr><td>-d</td><td>–delimiter=DELIM</td><td>自定义分隔符，默认为制表符tab</td></tr><tr><td>-f</td><td>–fields=LIST</td><td>与-d一同使用，显示指定字段的内容；也会打印不包含分隔符的行，除非指定了-s参数</td></tr><tr><td>-n</td><td></td><td>with -b: 取消分割多字节字符，仅和 -b 标志一起使用；如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出，否则该字符将被排除</td></tr><tr><td></td><td>–complement</td><td>补足被选择的字节、字符或字段</td></tr><tr><td>-s</td><td>–only-delimited</td><td>不打印没有包含分隔符的行，有利于去掉注释和标题</td></tr><tr><td></td><td>–output-delimiter=STRING</td><td>指定输出内容是的分隔符</td></tr></tbody></table><hr><h3 id="cut指定字段、字符或字节范围的方法"><a href="#cut指定字段、字符或字节范围的方法" class="headerlink" title="cut指定字段、字符或字节范围的方法"></a>cut指定字段、字符或字节范围的方法</h3><p>指定字段、字符或字节范围有以下三种方法：</p><ul><li><strong>N-</strong>：获取<em>连续</em>范围，<strong>从第N个</strong>字节、字符、字段<strong>到结尾</strong>；</li><li><strong>N-M</strong>：获取<em>连续</em>范围，<strong>从第N个</strong>字节、字符、字段<strong>到第M个（包括M在内）</strong>字节、字符、字段；</li><li><strong>-M</strong>：获取<em>连续</em>范围，<strong>从第1个</strong>字节、字符、字段<strong>到第M个（包括M在内）</strong>字节、字符、字段</li><li><strong>N,M</strong>：获取<em>不连续</em>范围，得到<strong>第N个</strong>字节、字符、字段和<strong>第M个</strong>字节、字符、字段</li><li><strong>N,M,Z-P</strong>：获取<em>连续范围和不连续</em>范围，<strong>第N个</strong>字节、字符、字段、<strong>第M个</strong>字节、字符、字段以及<strong>从第Z个</strong>字节、字符、字段<strong>到第P个（包括P在内）</strong>字节、字符、字段</li></ul><div class="note info"><p>逗号(,)可以使用多个</p></div><hr><p><br></p><h2 id="cut用法实例"><a href="#cut用法实例" class="headerlink" title="cut用法实例"></a>cut用法实例</h2><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><blockquote><p><code>cat cut.txt</code><br>No Name Mark Percent<br>01 tom 69 91<br>02 jack 71 87<br>03 alex 68 98</p></blockquote><h3 id="d-自定义分隔符"><a href="#d-自定义分隔符" class="headerlink" title="-d 自定义分隔符"></a>-d 自定义分隔符</h3><p><mark>默认-d是制表符tab，这个很关键，不是空白字符，同时自定义的分隔符必须是单个的字符，比如单个的空格，不能是两个或以上空格</mark></p><blockquote><p><code>cut -d &#39; &#39; -f 1 cut.txt</code><br>No<br>01<br>02<br>03</p></blockquote><blockquote><p><code>awk &#39;{print $1&quot;;&quot;$2&quot;;&quot;$3&quot;;&quot;$4}&#39; cut.txt |cut -d &#39;;&#39; -f 1</code><br>No<br>01<br>02<br>03</p></blockquote><hr><h3 id="f-提取指定字段内容"><a href="#f-提取指定字段内容" class="headerlink" title="-f 提取指定字段内容"></a>-f 提取指定字段内容</h3><p>选取<strong>单个filed</strong>如上面-d用法示例</p><p><strong>选取多个字段，直接将多个字段在-f选项后使用,分割即可：</strong></p><blockquote><p><strong><code>cut -d &#39; &#39; -f 1,3 cut.txt</code></strong><br>No Mark<br>01 69<br>02 71<br>03 68</p></blockquote><p><strong>也可以使用<code>-</code>和<code>,</code>混用的方法：</strong></p><blockquote><p><strong><code>cut -d &#39; &#39; -f 1,3-4 cut.txt</code></strong><br>No Mark Percent<br>01 69 91<br>02 71 87<br>03 68 98</p></blockquote><hr><h3 id="–complement-提取指定字段之外的内容"><a href="#–complement-提取指定字段之外的内容" class="headerlink" title="–complement 提取指定字段之外的内容"></a>–complement 提取指定字段之外的内容</h3><blockquote><p><strong><code>cut -d &#39; &#39; -f 1,3 --complement cut.txt</code></strong><br>Name Percent<br>tom 91<br>jack 87<br>alex 98</p></blockquote><p><strong>这里得到的结果和上面单纯使用<code>-f</code>得到的结果可以说是互补的，因为<code>--complement</code>是提取指定字段之外的内容</strong></p><hr><h3 id="s-不打印没有包含分隔符的行"><a href="#s-不打印没有包含分隔符的行" class="headerlink" title="-s 不打印没有包含分隔符的行"></a>-s 不打印没有包含分隔符的行</h3><p>在cut.txt上增加一行文本，其分隔符和其他几行不同：</p><blockquote><p><code>cat cut.txt</code><br>#this-is-test<br>No Name Mark Percent<br>01 tom 69 91<br>02 jack 71 87<br>03 alex 68 98</p></blockquote><p><strong>默认情况，如果一行不包含分隔符，就会输出这一行</strong>：</p><blockquote><p>cut -d ‘ ‘ -f 1 cut.txt<br>#this-is-test<br>No<br>01<br>02<br>03</p></blockquote><p>为了防止上述情形出现，可以使用<code>-s</code>选项：</p><blockquote><p><code>cut -d &#39; &#39; -s -f 1 cut.txt</code><br>No<br>01<br>02<br>03</p></blockquote><p>可以发现，不包含空格作为分隔符的第一行就没有进行输出</p><hr><h3 id="c-提取指定字符范围的内容"><a href="#c-提取指定字符范围的内容" class="headerlink" title="-c 提取指定字符范围的内容"></a>-c 提取指定字符范围的内容</h3><blockquote><p><code>cat cut2.txt</code><br>abcdefghijklmnopqrstuvwxyz<br>abcdefghijklmnopqrstuvwxyz<br>abcdefghijklmnopqrstuvwxyz<br>abcdefghijklmnopqrstuvwxyz<br>abcdefghijklmnopqrstuvwxyz</p></blockquote><p><strong>指定连续范围：</strong></p><blockquote><p><code>cut -c -2 cut2.txt</code><br>ab<br>ab<br>ab<br>ab<br>ab</p></blockquote><blockquote><p><code>cut -c 5- cut2.txt</code><br>efghijklmnopqrstuvwxyz<br>efghijklmnopqrstuvwxyz<br>efghijklmnopqrstuvwxyz<br>efghijklmnopqrstuvwxyz<br>efghijklmnopqrstuvwxyz</p></blockquote><p><strong>指定不连续范围和连续范围（<code>,</code>和<code>-</code>混用）：</strong></p><blockquote><p><code>cut -c 1,3-5 cut2.txt</code><br>acde<br>acde<br>acde<br>acde<br>acde</p></blockquote><hr><h3 id="b-提取指定字符范围的内容"><a href="#b-提取指定字符范围的内容" class="headerlink" title="-b 提取指定字符范围的内容"></a>-b 提取指定字符范围的内容</h3><blockquote><p><code>cut -b 1-5 cut2.txt</code><br>abcde<br>abcde<br>abcde<br>abcde<br>abcde</p></blockquote><p><strong>这结果咋一看和前面的<code>-c</code>没有什么区别，这是因为操作对象都是英文字母，而在<code>ASCII码</code>和<code>UTF-8编码</code>中英文字母的字节和字符是相等的</strong>，具体的字节和字符的区别见<a href="http://showteeth.tech/posts/56690.html">这篇博客</a></p><p>由于我使用的<strong>vscode的默认编码方式为<code>utf-8</code></strong>，所以<strong>英文字母的字节和字符是相等的</strong>，而<strong>中文1个中文（含繁体） = 3个字节</strong>，为了凸显-b和-c的区别，下面采用中文进行测试：</p><blockquote><p><code>cat cut3.txt</code><br>星期一<br>星期二<br>星期三<br>星期四<br>星期五</p></blockquote><blockquote><p><code>cut -b 1-3 cut3.txt</code> # cut -b <strong>1-2</strong> cut3.txt<strong>结果为空</strong>，因为需要三个字节才可以<br>星<br>星<br>星<br>星<br>星</p></blockquote><blockquote><p><code>cut -c 1-3 cut3.txt</code><br>星期一<br>星期二<br>星期三<br>星期四<br>星期五</p></blockquote><div class="note info"><p>针对英文字符进行提取指定字符范围内容时，<code>-b</code>和<code>-c</code>选项没什么差别，因为在大部分编码方式中，英文字母的字节和字符是相等的，而针对中文就需要注意不同的编码方式对中文字符对应字节数的设置，当然<code>cut</code>命令还提供了了一个选项<code>-n</code>来解决上述<code>-b</code>可能遇到的问题</p></div><hr><h3 id="n-取消分割多字节字符"><a href="#n-取消分割多字节字符" class="headerlink" title="-n 取消分割多字节字符"></a>-n 取消分割多字节字符</h3><p><strong>该选项仅和 -b 选项一起使用</strong>，用来取消分割多字节字符</p><blockquote><p><code>cut -b 3 cut3.txt</code></p></blockquote><blockquote><p>cut -nb 3 cut3.txt<br>星<br>星<br>星<br>星<br>星</p></blockquote><blockquote><p><code>cut -nb 3,6,9 cut3.txt</code><br>星期一<br>星期二<br>星期三<br>星期四<br>星期五</p></blockquote><p>当<code>-nb</code>后面的数字为<code>3的整数倍（utf-8编码）</code>时就不会分割多字节字符，得到对应的字符，不过感觉这没啥大用处，一般都直接使用了<code>-c</code>参数来获取字符</p><hr><h3 id="–output-delimiter-STRING-指定输出内容是的分隔符"><a href="#–output-delimiter-STRING-指定输出内容是的分隔符" class="headerlink" title="–output-delimiter=STRING 指定输出内容是的分隔符"></a>–output-delimiter=STRING 指定输出内容是的分隔符</h3><blockquote><p><code>cut -d &#39; &#39; -f 1-3 --output-delimiter=$&#39;\t&#39; cut.txt</code><br>#this-is-test<br>No Name Mark<br>01 tom 69<br>02 jack 71<br>03 alex 68</p></blockquote><div class="note info"><p>注意这里指定输出分割符为tab的时候使用了<code>$&#39;\t&#39;</code>的方式，其中<code>$</code>和<code>单引号</code>都是必须的不能更改的，这个和<code>join</code>命令中指定分隔符的用法相同，具体原因查看<a href="http://showteeth.tech/posts/55603.html">这篇文章</a></p></div><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://man.linuxde.net/cut" target="_blank" rel="noopener">cut命令</a></li><li><a href="https://www.cnblogs.com/fulucky/p/8124858.html" target="_blank" rel="noopener">linux的cut命令</a></li><li><a href="https://www.cnblogs.com/longjshz/p/5792502.html" target="_blank" rel="noopener">Linux下的cut选取命令详解</a></li><li><a href="https://www.cnblogs.com/Hobbies/articles/4527447.html" target="_blank" rel="noopener">linux每日一命令–cut</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;本文主要学习了Linux下对每一行文本按照给定的分隔符进行切割并按照指定的范围提取字段、字符或字节的命令&lt;code&gt;cut&lt;/code&gt;，其主要选项包括：&lt;code&gt;-d&lt;/code&gt;、&lt;code&gt;-f&lt;/code&gt;、&lt;code&gt;--complement&lt;/code&gt;、&lt;code&gt;-s&lt;/code&gt;、&lt;code&gt;-c&lt;/code&gt;、&lt;code&gt;-b&lt;/code&gt;、&lt;code&gt;-n&lt;/code&gt;和&lt;code&gt;--output-delimiter&lt;/code&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
    
      <category term="常用基本命令" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>uniq-去重</title>
    <link href="http://showteeth.tech/posts/20744.html"/>
    <id>http://showteeth.tech/posts/20744.html</id>
    <published>2019-02-28T07:35:14.000Z</published>
    <updated>2019-03-01T02:39:54.244Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本文学习了linux中准备对文本进行去重操作的<code>uniq</code>命令，其重要的参数包括<code>-c</code>、<code>-d</code>、<code>-D</code>、<code>-f</code>、<code>-s</code>、<code>-w</code>、<code>-i</code>、<code>-u</code>。这个命令通常与<a href="http://showteeth.tech/posts/61024.html">sort</a>一起使用。</p></div><a id="more"></a><h2 id="uniq用法"><a href="#uniq用法" class="headerlink" title="uniq用法"></a>uniq用法</h2><p>uniq命令是专门用来去除重复行的命令，使用时需要注意：</p><ul><li>对文本操作时，它一般会和<a href="http://showteeth.tech/posts/61024.html">sort命令</a>进行组合使用，因为<strong>uniq 不会检查重复的行，除非它们是相邻的</strong>，如果您想<strong>先对输入排序</strong>，使用<strong>sort -u</strong></li><li>对文本操作时，若域中为先空字符(通常包括空格以及制表符)，然后非空字符，域中<strong>字符前的空字符将被跳过</strong></li></ul><h3 id="uniq命令格式"><a href="#uniq命令格式" class="headerlink" title="uniq命令格式"></a>uniq命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Usage: </span><br><span class="line">  uniq [OPTION] [INPUT [OUTPUT]]</span><br><span class="line">  <span class="comment"># 从输入文件或者标准输入中过滤相邻的匹配行并将结果写入到输出文件或标准输出</span></span><br><span class="line">  <span class="comment"># 在不加options的情况下，匹配行将在首次出现处被合并</span></span><br></pre></td></tr></table></figure><hr><h3 id="uniq-options说明"><a href="#uniq-options说明" class="headerlink" title="uniq options说明"></a>uniq options说明</h3><style>table th:first-of-type{width:15%}table th:nth-of-type(2){width:25%}table th:nth-of-type(3){width:60%}</style><table><thead><tr><th>参数</th><th>完整参数</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>–count</td><td>在每行前加上表示行出现次数</td></tr><tr><td>-d</td><td>–repeated</td><td>只输出重复的行，即出现次数&gt;=2的行，且只打印一次</td></tr><tr><td>-D</td><td>–all-repeated[=delimit-method]</td><td>仅显示重复的行，即出现次数&gt;=2的行，且打印重复行的所有行。其中delimit-method表示对重复行集合的分隔方式，有三种取值，分别为none（默认）、prepend和separate。</td></tr><tr><td>-u</td><td>–unique</td><td>只显示唯一的行，即出现次数等于1的行</td></tr><tr><td>-f</td><td>–skip-fields=N</td><td>忽略前N个<strong>字段</strong></td></tr><tr><td>-s</td><td>–skip-chars=N</td><td>和-f类似，不过-s是忽略前N个<strong>字符</strong></td></tr><tr><td>-w</td><td>–check-chars=N</td><td>指定每行要比较的前N个字符数</td></tr><tr><td>-i</td><td>–ignore-case</td><td>不区分大小写</td></tr><tr><td>-z</td><td>–zero-terminated</td><td>end lines with 0 byte, not newline</td></tr></tbody></table><hr><p><br></p><h2 id="uniq用法实例"><a href="#uniq用法实例" class="headerlink" title="uniq用法实例"></a>uniq用法实例</h2><h3 id="测试文本"><a href="#测试文本" class="headerlink" title="测试文本"></a>测试文本</h3><blockquote><p><code>cat uniq.txt</code><br>this is a test<br>this is a test<br><strong>this is a test</strong><br>i am test<br>i love test<br>i love test<br><strong>this is a test</strong><br>whom have a try<br>WhoM have a try<br>you have a try<br>i want go abroad<br>those are good men<br>we are good men</p></blockquote><h3 id="使用默认方式进行去重"><a href="#使用默认方式进行去重" class="headerlink" title="使用默认方式进行去重"></a>使用默认方式进行去重</h3><blockquote><p><code>uniq uniq.txt</code><br><em>this is a test</em><br>i am test<br>i love test<br><em>this is a test</em><br>whom have a try<br>WhoM have a try<br>you have a try<br>i want go abroad<br>those are good men<br>we are good men</p></blockquote><p>可以发现，<strong>uniq在计算重复的时候只会看相邻行</strong>，有一个<em>this is a test</em>没有和其他相邻，结果就被保留下来，当做非重复行</p><h3 id="c-显示行重复出现的次数"><a href="#c-显示行重复出现的次数" class="headerlink" title="-c 显示行重复出现的次数"></a>-c 显示行重复出现的次数</h3><blockquote><p><code>uniq -c uniq.txt</code><br>3 this is a test<br>1 i am test<br>2 i love test<br>1 this is a test<br>1 whom have a try<br>1 WhoM have a try<br>1 you have a try<br>1 i want go abroad<br>1 those are good men<br>1 we are good men</p></blockquote><p>依旧存在前面提到的问题，<strong>uniq在计算重复的时候只会看相邻行</strong>，和sort连用：</p><blockquote><p><code>sort uniq.txt |uniq -c</code><br>1 i am test<br>2 i love test<br>1 i want go abroad<br><strong>4 this is a test</strong><br>1 those are good men<br>1 we are good men<br>1 whom have a try<br>1 WhoM have a try<br>1 you have a try</p></blockquote><p>单纯使用sort命令去重的结果和上面是一样的，只是不能得到具体的重复数目，uniq功能更加强大：</p><blockquote><p><code>sort -u uniq.txt</code><br>i am test<br>i love test<br>i want go abroad<br>this is a test<br>those are good men<br>we are good men<br>whom have a try<br>WhoM have a try<br>you have a try</p></blockquote><hr><h3 id="d-只输出重复的行"><a href="#d-只输出重复的行" class="headerlink" title="-d 只输出重复的行"></a>-d 只输出重复的行</h3><blockquote><p><code>sort uniq.txt |uniq -dc</code><br>2 i love test<br>4 this is a test</p></blockquote><hr><h3 id="D-仅显示重复的行"><a href="#D-仅显示重复的行" class="headerlink" title="-D 仅显示重复的行"></a>-D 仅显示重复的行</h3><blockquote><p><code>sort uniq.txt |uniq -D</code><br>i love test<br>i love test<br>this is a test<br>this is a test<br>this is a test<br>this is a test</p></blockquote><p>这个就<strong>不能和<code>-c</code>连用</strong>，因为重复行都显示出来了</p><h4 id="delimit-method-none"><a href="#delimit-method-none" class="headerlink" title="delimit-method=none"></a>delimit-method=none</h4><p>none表示不进行分隔，为<strong>默认选项</strong>，<code>uniq -D</code>等同于<code>uniq --all-repeated=none</code></p><p>注意使用<code>delimit-method</code>的时候就<strong>不能使用option的简写形式</strong>，<strong>必须使用完整参数</strong></p><hr><h4 id="delimit-method-prepend"><a href="#delimit-method-prepend" class="headerlink" title="delimit-method=prepend"></a>delimit-method=prepend</h4><p>prepend表示在每一个<strong>重复行集合前面</strong>插入一个空行</p><blockquote><p><strong><code>sort uniq.txt |uniq --all-repeated=prepend</code></strong></p><p>i love test<br>i love test</p><p>this is a test<br>this is a test<br>this is a test<br>this is a test</p></blockquote><hr><h4 id="delimit-method-separate"><a href="#delimit-method-separate" class="headerlink" title="delimit-method=separate"></a>delimit-method=separate</h4><p>separate表示在每个<strong>重复行集合间</strong>插入一个空行</p><blockquote><p><strong><code>sort uniq.txt |uniq --all-repeated=separate</code></strong><br>i love test<br>i love test</p><p>this is a test<br>this is a test<br>this is a test<br>this is a test</p></blockquote><hr><h3 id="f-忽略前N个字段"><a href="#f-忽略前N个字段" class="headerlink" title="-f 忽略前N个字段"></a>-f 忽略前N个字段</h3><blockquote><p><strong><code>sort uniq.txt |uniq -f 1 --all-repeated=separate</code></strong><br>i love test<br>i love test</p><p>this is a test<br>this is a test<br>this is a test<br>this is a test</p><p><em>those</em> are good men<br><em>we</em> are good men</p><p><em>whom</em> have a try<br><em>WhoM</em> have a try</p></blockquote><blockquote><p><code>uniq -f 2 --all-repeated=separate uniq2.txt</code><br>this is a test<br>this are a test</p><p>my name is showteeth<br>your mmmm is showteeth</p></blockquote><div class="note info"><p><strong>-f是指定前N个field</strong>，而<strong>不是仅仅规定单独的field来进行判断是不是重复</strong>，如果<strong>仅仅想看某一列</strong>，可以<strong>将那一列放在第一个field</strong>，然后使用<code>-f</code>参数即可</p></div><hr><h3 id="s-忽略前N个字符"><a href="#s-忽略前N个字符" class="headerlink" title="-s 忽略前N个字符"></a>-s 忽略前N个字符</h3><blockquote><p><strong><code>sort uniq.txt |uniq -s 4 --all-repeated=separate</code></strong><br>i love test<br>i love test</p><p>this is a test<br>this is a test<br>this is a test<br>this is a test</p><p><em>whom</em> have a try<br><em>WhoM</em> have a try<br><em>you</em> have a try</p></blockquote><hr><h3 id="w-指定每行要比较的前N个字符数"><a href="#w-指定每行要比较的前N个字符数" class="headerlink" title="-w 指定每行要比较的前N个字符数"></a>-w 指定每行要比较的前N个字符数</h3><blockquote><p><strong><code>sort uniq.txt |uniq -w 2 --all-repeated=separate</code></strong><br><em>i</em> am test<br><em>i</em> love test<br><em>i</em> love test<br><em>i</em> want go abroad</p><p><em>th</em>is is a test<br><em>th</em>is is a test<br><em>th</em>is is a test<br><em>th</em>is is a test<br><em>th</em>ose are good men</p></blockquote><div class="note info"><p>注意这个参数和前面的<code>-f</code>、<code>-s</code>相同，都是<mark>前N个字段或者字符</mark>，而<strong>不是单纯地指定某一个字段或者字符</strong></p></div><hr><h3 id="i-不区分大小写"><a href="#i-不区分大小写" class="headerlink" title="-i 不区分大小写"></a>-i 不区分大小写</h3><blockquote><p><code>sort uniq.txt |uniq -i --all-repeated=separate</code><br>i love test<br>i love test</p><p>this is a test<br>this is a test<br>this is a test<br>this is a test</p><p>whom have a try<br>WhoM have a try</p></blockquote><hr><h3 id="u-只显示唯一的行"><a href="#u-只显示唯一的行" class="headerlink" title="-u 只显示唯一的行"></a>-u 只显示唯一的行</h3><blockquote><p><code>sort uniq.txt |uniq -u</code><br>i am test<br>i want go abroad<br>those are good men<br>we are good men<br><em>whom</em> have a try<br><em>WhoM</em> have a try<br>you have a try</p></blockquote><p>显示<strong>在忽略大小写情况下的唯一的行</strong>：</p><blockquote><p><code>sort uniq.txt |uniq -u -i</code><br>i am test<br>i want go abroad<br>those are good men<br>we are good men<br>you have a try</p></blockquote><p>上面的whom存在大小写区别的行就没排除在外</p><div class="note info"><p>不会显示去除了重复之后的保留的唯一重复行</p></div><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/ftl1012/p/uniq.html" target="_blank" rel="noopener">Linux uniq命令详解</a></li><li><a href="https://blog.csdn.net/k346k346/article/details/70175532" target="_blank" rel="noopener">Linux命令——uniq命令</a></li><li><a href="http://blog.51yip.com/shell/1022.html" target="_blank" rel="noopener">实例详细说明linux下去除重复行命令uniq</a></li><li><a href="http://man.linuxde.net/uniq" target="_blank" rel="noopener">uniq命令</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;本文学习了linux中准备对文本进行去重操作的&lt;code&gt;uniq&lt;/code&gt;命令，其重要的参数包括&lt;code&gt;-c&lt;/code&gt;、&lt;code&gt;-d&lt;/code&gt;、&lt;code&gt;-D&lt;/code&gt;、&lt;code&gt;-f&lt;/code&gt;、&lt;code&gt;-s&lt;/code&gt;、&lt;code&gt;-w&lt;/code&gt;、&lt;code&gt;-i&lt;/code&gt;、&lt;code&gt;-u&lt;/code&gt;。这个命令通常与&lt;a href=&quot;http://showteeth.tech/posts/61024.html&quot;&gt;sort&lt;/a&gt;一起使用。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
    
      <category term="常用基本命令" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>join-连接文本</title>
    <link href="http://showteeth.tech/posts/5579.html"/>
    <id>http://showteeth.tech/posts/5579.html</id>
    <published>2019-02-28T07:34:36.000Z</published>
    <updated>2019-02-28T17:06:28.228Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本文学习了可以按照指定<code>field</code>内容来将两个文件连接起来的<code>join</code>命令，其重要的参数包括<code>-1</code>、<code>-2</code>、<code>-j</code>、<code>-o</code>、<code>-t</code>、<code>-a</code>、<code>-e</code>、<code>-v</code>、<code>–nocheck-order</code>。</p></div><a id="more"></a><h2 id="join用法"><a href="#join用法" class="headerlink" title="join用法"></a>join用法</h2><ul><li><code>join</code>命令用来将<strong>两个文件</strong>中<strong>指定栏位内容相同的行连接起来</strong>，再输出到标准输出设备</li><li><strong>默认</strong>连接的栏位是有<strong>空白字符分隔</strong>的第一个栏位</li></ul><h3 id="join命令格式"><a href="#join命令格式" class="headerlink" title="join命令格式"></a>join命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Usage: </span><br><span class="line">  join [OPTION] FILE1 FILE2</span><br></pre></td></tr></table></figure><hr><h3 id="join-options说明"><a href="#join-options说明" class="headerlink" title="join options说明"></a>join options说明</h3><style>table th:first-of-type{width:15%}table th:nth-of-type(2){width:25%}table th:nth-of-type(3){width:60%}</style><table><thead><tr><th>参数</th><th>完整参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>FILENUM</td><td>FILENUM 取1或者2，表示除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行，<strong>相当于指定左外链接还是右外连接</strong></td></tr><tr><td>-v</td><td>FILENUM</td><td>与-a相似 但只显示文件里没匹配上的行</td></tr><tr><td>-e</td><td>EMPTY</td><td>取值为字符串，将须要显示可是文件里不存在的域用此选项指定的字符取代</td></tr><tr><td>-i</td><td>–ignore-case</td><td>比较栏位内容时，忽略大小写的差异</td></tr><tr><td>-j</td><td>FIELD</td><td>-j指定一个域作为匹配字段，等同于 -1 FIELD -2 FIELD</td></tr><tr><td>-1</td><td>FIELD</td><td>以file1中FIELD字段进行匹配</td></tr><tr><td>-2</td><td>FIELD</td><td>以file2中FIELD字段进行匹配</td></tr><tr><td>-o</td><td>FORMAT</td><td>以指定格式输出</td></tr><tr><td>-t</td><td>CHAR</td><td>指定输入输出的分隔符，join 默认以空白字符做分隔符</td></tr><tr><td>–check-order</td><td></td><td>判断所有输入文件是不是已经排好序</td></tr><tr><td>–nocheck-order</td><td></td><td>不判断所有输入文件是不是已经排好序</td></tr></tbody></table><hr><p><br></p><h2 id="join用法实例"><a href="#join用法实例" class="headerlink" title="join用法实例"></a>join用法实例</h2><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><blockquote><p><code>cat test1.txt</code><br>aa 1 2<br>bb 2 3<br>cc 4 6<br>dd 3 3</p></blockquote><blockquote><p><code>cat test2.txt</code><br>aa 2 1<br>bb 8 2<br>ff 2 4<br>cc 4 4<br>dd 5 5</p></blockquote><h3 id="使用默认方式连接文件"><a href="#使用默认方式连接文件" class="headerlink" title="使用默认方式连接文件"></a>使用默认方式连接文件</h3><blockquote><p><code>join test1.txt test2.txt</code><br>aa 1 2 2 1<br>bb 2 3 8 2<br><strong>join: file 2 is not in sorted order</strong></p></blockquote><p>上面的结果<strong>没有输出完整</strong>，同时输出了提示信息，<strong>file 2(test2.txt)没有进行没有进行排序</strong>，结合前面学习的<a href="http://showteeth.tech/posts/61024.html">sort</a>命令对其第一列进行排序并进行连接：</p><blockquote><p><code>sort -k 1,1 test2.txt |join test1.txt -</code><br>aa 1 2 2 1<br>bb 2 3 8 2<br>cc 4 6 4 4<br>dd 3 3 5 5</p></blockquote><p>这次得到了完整的结果，同时注意在<strong>管道符</strong>后使用<code>-</code>表示<code>read standard input</code>也就是前面的sort的输出内容</p><div class="note info"><p>对某一列进行连接，就需要<strong>保证文件的这一列是排好序的</strong>，而不是只要对整个文件进行排序即可</p></div><hr><h3 id="–nocheck-order-检查是否排序"><a href="#–nocheck-order-检查是否排序" class="headerlink" title="–nocheck-order 检查是否排序"></a>–nocheck-order 检查是否排序</h3><p>针对上面出现的文件没有排序的问题，也可以在不报错的情况下直接输出部分结果，默认情况应该是<code>--check-order</code>的：</p><blockquote><p><code>join --nocheck-order test1.txt test2.txt</code><br>aa 1 2 2 1<br>bb 2 3 8 2</p></blockquote><p>这个感觉没啥意义，得不到正确结果</p><hr><h3 id="1、-2-指定连接列"><a href="#1、-2-指定连接列" class="headerlink" title="-1、-2 指定连接列"></a>-1、-2 指定连接列</h3><ul><li><code>-1</code>：指定<strong>文件1（写在前面的文件）</strong>中用于连接的列</li><li><code>-2</code>：指定<strong>文件2（写在后面的文件）</strong>中用于连接的列</li></ul><blockquote><p><code>sort -k 1,1 test2.txt |join -1 1 -2 1 test1.txt -</code><br>aa 1 2 2 1<br>bb 2 3 8 2<br>cc 4 6 4 4<br>dd 3 3 5 5</p></blockquote><p>这个结果和上面默认的结果相同</p><p>让文件1的第2列与文件2的第3列进行连接（两列都是已经排好序的，不用再排序）：</p><blockquote><p><code>join -1 2 -2 3 test1.txt test2.txt</code><br>1 aa 2 aa 2<br>2 bb 3 bb 8<br><strong>4 cc 6 ff 2</strong><br><strong>4 cc 6 cc 4</strong></p></blockquote><p>可以发现<strong>文件1中的<code>cc 4 6</code>出现了两次</strong>，这是因为<em>文件2中在第3列上出现了2个4</em>，这2个4对应的行都和文件1中的对应的行进行连接，从而出现了2次</p><p>如果在文件1中增加一列重复的<code>cc 4 6</code>，得到如下结果：</p><blockquote><p><code>join -1 2 -2 3 test1.txt test2.txt</code><br>1 aa 2 aa 2<br>2 bb 3 bb 8<br><strong>4 cc 6 ff 2</strong><br><strong>4 cc 6 cc 4</strong><br><strong>4 cc 6 ff 2</strong><br><strong>4 cc 6 cc 4</strong></p></blockquote><p>即使<strong>存在重复，连接也会进行组合操作</strong>，得到2x2个结果</p><div class="note info"><ul><li><strong>默认情况下</strong>，对哪一列进行连接，输出的结果中，<strong>用于连接的那一列就会放在最前面</strong>，如果需要<strong>自定义输出内容和顺序</strong>，可以使用后面提到的<code>-o</code>参数进行修改</li><li>文件在指定的列上存在相同的，则会进行组合，比如各有2个相同的，则会得到2x2也就是4个结果（这里不管文件是否存在重复）</li></ul></div><hr><h3 id="j-指定用于连接的列"><a href="#j-指定用于连接的列" class="headerlink" title="-j 指定用于连接的列"></a>-j 指定用于连接的列</h3><p>如果两个文件中用于连接的列(field)相同，可以直接使用-j参数统一制定，不用使用上面那种-1、-2这种分别指定，较为简便：</p><blockquote><p><code>sort -k 1,1 test2.txt |join -j 1 test1.txt -</code><br>aa 1 2 2 1<br>bb 2 3 8 2<br>cc 4 6 4 4<br>dd 3 3 5 5</p></blockquote><hr><h3 id="o-自定义输出内容和顺序"><a href="#o-自定义输出内容和顺序" class="headerlink" title="-o 自定义输出内容和顺序"></a>-o 自定义输出内容和顺序</h3><p>输出文件1的第1列和第2列以及文件2的第1列和第3列：</p><blockquote><p><code>join -1 2 -2 3 -o 1.{1,2} 2.{1,3} test1.txt test2.txt</code><br>aa 1 aa 1<br>bb 2 bb 2<br>cc 4 ff 4<br>cc 4 cc 4</p></blockquote><div class="note info"><p>注意这里大括号<code>{}</code>的用法，详细请参考<a href="http://showteeth.tech/posts/55603.html">文章</a></p></div><hr><h3 id="t-指定分隔符"><a href="#t-指定分隔符" class="headerlink" title="-t 指定分隔符"></a>-t 指定分隔符</h3><blockquote><p><code>sort -k 1,1 test2.txt|awk &#39;{print $1&quot;\t&quot;$2&quot;\t&quot;$3}&#39;|join -t $&#39;\t&#39; &lt;(awk &#39;{print $1&quot;\t&quot;$2&quot;\t&quot;$3}&#39; test1.txt) -</code><br>aa 1 2 2 1<br>bb 2 3 8 2<br>cc 4 6 4 4<br>dd 3 3 5 5</p></blockquote><p>指定<code>-t $&#39;\t&#39;</code>后，<strong>输出的内容也是以tab作为分隔的</strong>；使用<strong>默认的分隔符</strong>也能对上述案例进行连接，但是<strong>输出的是空格分隔</strong>，不管原始文件内是使用空格份额各还是tab分隔</p><div class="note info"><p>注意这里指定tab作为分隔符的方式，<strong><code>$&#39;\t&#39;</code>设定的原因（单引号+<code>$</code>）</strong>参考之前的<a href="http://showteeth.tech/posts/55603.html">这篇文章</a></p></div><hr><h3 id="a-指定外连接"><a href="#a-指定外连接" class="headerlink" title="-a 指定外连接"></a>-a 指定外连接</h3><p><strong>join默认进行的是内连接</strong>，也就是找到两个文件中在指定列上能够连接起来的行显示出现，但是要想显示共有的以及一个文件有一个文件没有的行就需要涉及到外连接，分为<strong>左外链接和右外连接和全外连接</strong>。<strong>左外链接指</strong>除了显示在指定列上能够连接起来的行外，还要把左边文件有，右边文件没有的行显示出来，右外连接类似，<strong>全外连接</strong>是将左边和右边的都显示出来，不管有没有连接上</p><p>设置<strong>左外连接</strong>：</p><blockquote><p><code>join -1 2 -2 3 **-a 1** test1.txt test2.txt</code><br>1 aa 2 aa 2<br>2 bb 3 bb 8<br>4 cc 6 ff 2<br>4 cc 6 cc 4<br><strong>3 dd 3</strong></p></blockquote><p>设置<strong>右外连接</strong>：</p><blockquote><p><code>join -1 2 -2 3 -a 2 test1.txt test2.txt</code><br>1 aa 2 aa 2<br>2 bb 3 bb 8<br>4 cc 6 ff 2<br>4 cc 6 cc 4<br><strong>5 dd 5</strong></p></blockquote><p>设置<strong>全外连接</strong>：</p><blockquote><p><code>join -1 2 -2 3 -a1 -a2 test1.txt test2.txt</code><br>1 aa 2 aa 2<br>2 bb 3 bb 8<br>4 cc 6 ff 2<br>4 cc 6 cc 4<br>3 dd 3<br>5 dd 5</p></blockquote><p>这个顺序好像有点错乱，不管是文件1还是文件2的内容都靠左显示，使用-o指定输出内容：</p><blockquote><p><code>join -1 2 -2 3 -a1 -a2 -o 1.{1..3} 2.{1..3} test1.txt test2.txt</code><br>aa 1 2 aa 2 1<br>bb 2 3 bb 8 2<br>cc 4 6 ff 2 4<br>cc 4 6 cc 4 4<br>dd 3 3<br>dd 5 5</p></blockquote><p>发现文件1的内容靠左，文件2的内容前面会留有3个空格（文件1每一行的长度），刚好错开</p><hr><h3 id="e-指定替代字符"><a href="#e-指定替代字符" class="headerlink" title="-e 指定替代字符"></a>-e 指定替代字符</h3><p>在上面设置<strong>左外链接和右外连接</strong>的情况下，使用<code>-e</code>设置字符来填充某个文件没有的行的信息:</p><blockquote><p><code>join -1 2 -2 3 -a 2 -o 1.{1..3} 2.{1..3} -e &quot;empty&quot; test1.txt test2.txt</code><br>aa 1 2 aa 2 1<br>bb 2 3 bb 8 2<br>cc 4 6 ff 2 4<br>cc 4 6 cc 4 4<br>empty empty empty dd 5 5</p></blockquote><div class="note info"><p><strong>使用<code>-e</code>选项时必须也要设定<code>-o</code>选项</strong>，不然不能使用字符进行填充（可能是因为如-a参数使用中的不设置-o参数会使得结果显示出现问题，指定连接的列会在最左边显示，不能连接的行的内容不管是文件1还是文件2都会靠左显示，不能正确显示出内容和文件的对应关系）</p></div><hr><h3 id="v-显示未匹配行"><a href="#v-显示未匹配行" class="headerlink" title="-v 显示未匹配行"></a>-v 显示未匹配行</h3><blockquote><p><code>join -1 2 -2 3 -v 1 test1.txt test2.txt</code><br>3 dd 3</p></blockquote><blockquote><p><code>join -1 2 -2 3 -v 2 test1.txt test2.txt</code><br>5 dd 5</p></blockquote><hr><p><br></p><h2 id="使用实战"><a href="#使用实战" class="headerlink" title="使用实战"></a>使用实战</h2><h3 id="指定多个列来进行链接"><a href="#指定多个列来进行链接" class="headerlink" title="指定多个列来进行链接"></a>指定多个列来进行链接</h3><p>因为join命令只支持单个field的连接，而指定多个field作为连接列又非常常用，所以这里给出了几种解决方法：</p><p><strong>思路一：既然join命令只支持单个field的连接，那就把多个field转化为单个field进行连接即可</strong><br>将上述test1.txt的第1列和第2列与test2.txt的第1列和第3列进行连接：</p><blockquote><p><strong><code>join -j 1 &lt;(awk &#39;{print $1&quot;-&quot;$2&quot;\t&quot;$0}&#39; test1.txt |sort -k 1,1) &lt;(awk &#39;{print $1&quot;-&quot;$3&quot;\t&quot;$0}&#39; test2.txt |sort -k 1,1)</code></strong><br><em>aa-1</em> aa 1 2 aa 2 1<br><em>bb-2</em> bb 2 3 bb 8 2<br><em>cc-4</em> cc 4 6 cc 4 4</p></blockquote><p>控制输出的时候可以使用<code>-o</code>参数对输出进行控制，来决定输出的内容</p><p><strong>思路二：通过处理其中一个文件得到匹配的fileds，然后利用<code>grep</code>命令在另一个文件中查找这个fields，得到最终的结果</strong><br>提取test1.txt的第1列和第2列作为pattern_file，在test2.txt文件中对齐进行查找：</p><blockquote><p><strong><code>cut -d &#39; &#39; -f 1,2 test1.txt |grep -f - &lt;(awk &#39;{print $1,$3,$2}&#39; test2.txt )</code></strong><br>aa 1 2<br>bb 2 8<br>cc 4 4</p></blockquote><p>注意这个<strong>只能得到test2.txt中的内容</strong>，而且还<strong>必须得调整列的位置</strong>，使<strong>test2.txt中需要和pattern_file进行连接的列进行对应（pattern_file是第1、2列，那就需要把test2.txt的第3列换到第2列的位置，和pattern_file进行对应）</strong>，不然不能查找结果。</p><p>还可以使用<code>awk</code>命令进行操作，具体参考<a href="https://stackoverflow.com/questions/2619562/joining-multiple-fields-in-text-files-on-unix" target="_blank" rel="noopener">这个链接</a></p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.runoob.com/linux/linux-comm-join.html" target="_blank" rel="noopener">Linux join命令</a></li><li><a href="https://www.cnblogs.com/agilework/archive/2012/04/18/2454877.html" target="_blank" rel="noopener">linux下join命令的用法</a></li><li><a href="https://blog.csdn.net/K346K346/article/details/80237368" target="_blank" rel="noopener">Linux命令——join命令</a></li><li><a href="https://www.jianshu.com/p/97006b505cd6" target="_blank" rel="noopener">linux: join</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;本文学习了可以按照指定&lt;code&gt;field&lt;/code&gt;内容来将两个文件连接起来的&lt;code&gt;join&lt;/code&gt;命令，其重要的参数包括&lt;code&gt;-1&lt;/code&gt;、&lt;code&gt;-2&lt;/code&gt;、&lt;code&gt;-j&lt;/code&gt;、&lt;code&gt;-o&lt;/code&gt;、&lt;code&gt;-t&lt;/code&gt;、&lt;code&gt;-a&lt;/code&gt;、&lt;code&gt;-e&lt;/code&gt;、&lt;code&gt;-v&lt;/code&gt;、&lt;code&gt;–nocheck-order&lt;/code&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
    
      <category term="常用基本命令" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>sort-排序</title>
    <link href="http://showteeth.tech/posts/61024.html"/>
    <id>http://showteeth.tech/posts/61024.html</id>
    <published>2019-02-27T03:10:06.000Z</published>
    <updated>2019-02-28T14:06:23.525Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本文学习sort-对文件进行排序，主要包括了sort用法(命令格式、参数说明)、用法实例(各种参数：<code>-u</code>、<code>-n</code>、<code>-r</code>、<code>-k</code>、<code>-t</code>、<code>-o</code>、<code>-c</code>、<code>h</code>和<code>g</code>等的实例讲解)并在最后给出了几个非常常用的实战示例。</p></div><a id="more"></a><h2 id="sort用法"><a href="#sort用法" class="headerlink" title="sort用法"></a>sort用法</h2><ul><li><code>sort</code>命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出</li><li><code>sort</code>命令既可以从<strong>特定的文件</strong>，也可以<strong>从stdin中获取输入</strong></li></ul><h3 id="sort命令格式"><a href="#sort命令格式" class="headerlink" title="sort命令格式"></a>sort命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Usage: </span><br><span class="line">  sort [OPTION] [FILE]</span><br></pre></td></tr></table></figure><hr><h3 id="sort-options说明"><a href="#sort-options说明" class="headerlink" title="sort options说明"></a>sort options说明</h3><style>table th:first-of-type{width:15%}table th:nth-of-type(2){width:25%}table th:nth-of-type(3){width:60%}</style><table><thead><tr><th>参数</th><th>完整参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>–ignore-leading-blanks</td><td>忽略每行前面开始出的空格字符</td></tr><tr><td>-d</td><td>–dictionary-order</td><td>排序时，处理英文字母、数字及空格字符外，忽略其他的字符</td></tr><tr><td>-f</td><td>–ignore-case</td><td>排序时，将小写字母视为大写字母，亦即忽略大小写</td></tr><tr><td>-g</td><td>–general-numeric-sort</td><td>按通用数值排序，支持科学计数法</td></tr><tr><td>-i</td><td>–ignore-nonprinting</td><td>排序时，除了040至176之间的ASCII字符外，忽略其他的字符</td></tr><tr><td>-M</td><td>–month-sort</td><td>将前面3个字母依照月份的缩写进行排序 (unknown) &lt; ‘JAN’ &lt; … &lt; ‘DEC’</td></tr><tr><td>-m</td><td>–merge</td><td>将几个排序号的文件进行合并</td></tr><tr><td>-h</td><td>–human-numeric-sort</td><td>使用易读性数字(例如： 2K 1G)</td></tr><tr><td>-n</td><td>–numeric-sort</td><td>依照数值的大小排序</td></tr><tr><td>-o</td><td>–output=FILE</td><td>将排序后的结果存入指定的文件</td></tr><tr><td>-r</td><td>–reverse</td><td>降序排序，默认为升序</td></tr><tr><td>-t</td><td>–field-separator=SEP</td><td>指定排序时所用的栏位分隔字符</td></tr><tr><td>-k</td><td>–key=POS1[,POS2]</td><td>排序从POS1开始，若指定POS2，则POS2结束，否则以pos1排序</td></tr><tr><td>-u</td><td>–unique</td><td>去除重复的行</td></tr><tr><td>-c</td><td>–check</td><td>检查文件是否已经按照顺序排序</td></tr></tbody></table><hr><p><br></p><h2 id="sort用法实例"><a href="#sort用法实例" class="headerlink" title="sort用法实例"></a>sort用法实例</h2><h3 id="使用默认方式对文件进行排序"><a href="#使用默认方式对文件进行排序" class="headerlink" title="使用默认方式对文件进行排序"></a>使用默认方式对文件进行排序</h3><p><code>sort</code> 命令将以<strong>默认的方式</strong>将文本文件的<strong>第一列以ASCII码的次序排列</strong>，并将结果<strong>输出到标准输出</strong><br>测试文件default.txt:</p><blockquote><p><code>cat default.txt</code><br>test 30<br>Hello 95<br>Linux 25</p></blockquote><blockquote><p><code>sort default.txt</code><br>Hello 95<br>Linux 25<br>test 30</p></blockquote><hr><h3 id="u-去除重复行"><a href="#u-去除重复行" class="headerlink" title="-u 去除重复行"></a>-u 去除重复行</h3><blockquote><p><code>cat uniq.txt</code><br>test 30<br>Hello 95<br>Linux 25<br>Linux 25<br>Linux 20</p></blockquote><p>文件中存在两行完全相同的信息，这将其去除:</p><blockquote><p><code>sort -u uniq.txt</code><br>Hello 95<br>Linux 20<br>Linux 25<br>test 30</p></blockquote><p><strong>会考察所有的列是否相同来进行去除，只有第一列相同是不会进行去除的</strong></p><h3 id="n-对数字进行排序"><a href="#n-对数字进行排序" class="headerlink" title="-n 对数字进行排序"></a>-n 对数字进行排序</h3><blockquote><p><code>cat num.txt</code><br>10<br>20<br>30<br>110<br>120<br>210</p></blockquote><p>sort默认会<strong>把所有列当成字符来进行排序</strong>，因为1小于3，所以110小于20：</p><blockquote><p><code>sort num.txt</code><br>10<br>110<br>120<br>20<br>210<br>30</p></blockquote><p>为了避免上述情况，需要使用<code>-n</code>选项，声明是数字进行排序，而不是字符：</p><blockquote><p><code>sort -n num.txt</code><br>10<br>20<br>30<br>110<br>120<br>210</p></blockquote><hr><h3 id="r-降序排列"><a href="#r-降序排列" class="headerlink" title="-r 降序排列"></a>-r 降序排列</h3><p>从上面的输出结果可以看出：sort默认进行的是升序排列，为了能够得到降序排列的结果，需要使用参数<code>-r</code>：</p><blockquote><p><code>sort -n -r num.txt</code> 等价于 <code>sort -nr num.txt</code><br>210<br>120<br>110<br>30<br>20<br>10</p></blockquote><hr><h3 id="k-指定排序开始-和结束-的位置"><a href="#k-指定排序开始-和结束-的位置" class="headerlink" title="-k 指定排序开始(和结束)的位置"></a>-k 指定排序开始(和结束)的位置</h3><h4 id="k选项的语法格式"><a href="#k选项的语法格式" class="headerlink" title="-k选项的语法格式"></a>-k选项的语法格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FStart.CStart Modifie,FEnd.CEnd Modifier   <span class="comment"># 详细划分</span></span><br><span class="line">-------Start--------,-------End--------    <span class="comment"># 整体划分</span></span><br><span class="line">FStart.CStart 选项  ,  FEnd.CEnd 选项       <span class="comment"># 详细划分解读</span></span><br></pre></td></tr></table></figure><ul><li>这个语法格式可以被其中的逗号<code>,</code>分为两大部分，<strong>Start部分</strong>和<strong>End部分</strong></li><li><code>Start</code>部分也<strong>由两部分组成</strong>:<ul><li><strong>Modifier</strong>部分是<strong>选项部分</strong>，可以用到b、d、f、i、n 或 r。</li><li><code>FStart.CStart</code>，其中<code>FStart</code>就是表示使用的<strong>域</strong>而<code>CStart</code>则表示<strong>在FStart域中</strong>从<strong>第几个字符开始算“排序首字符”</strong>。<code>C.Start</code>也是可以省略的，<u>省略的话就表示从本域的开头部分开始</u></li></ul></li><li>同理，在<code>End</code>部分中，你可以设定<code>FEnd.CEnd</code>，如果你<strong>省略.CEnd，则表示结尾到“域尾”，即<u>本域</u>的最后一个字符</strong>。或者，如果你将CEnd设定为0(零)，也是表示结尾到“域尾”</li><li><mark>如果直接省略了<code>End</code>部分，则会直接从指定的开始位置到一行的结束进行排序</mark></li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><blockquote><p><code>cat salary.txt</code><br>baidu 100 5000<br>sohu 100 4500<br>google 110 5000<br>guge 50 3000</p></blockquote><p>从<strong>公司英文名称（第一个域）</strong>的<strong>第二个字母</strong>开始进行排序：</p><blockquote><p><code>sort -k 1.2 salary.txt</code><br>baidu 100 5000<br>sohu 100 4500<br>google 110 5000<br>guge 50 3000</p></blockquote><p><strong>结果解读：</strong>使用了<code>-k 1.2</code>，表示对<strong>第一个域</strong>的<strong>第二个字符开始到本域的最后一个字符为止</strong>的字符串进行排序，结果是baidu因为第二个字母是a而名列榜首，sohu和 google第二个字符都是o，但sohu的h在google的o前面，所以两者分别排在第二和第三，guge只能排在第四了。</p><p>只针对公司英文名称的第二个字母进行排序，如果相同的按照员工工资进行降序排序：</p><blockquote><p><code>sort -k 1.2 -k 3nr salary.txt</code><br>baidu 100 5000<br>sohu 100 4500<br>google 110 5000<br>guge 50 3000</p></blockquote><p>可以发现这个与预期的结果并不一致，和没有按照员工工资进行降序排序的结果相同，所以命令肯定存在问题。首先，<code>-k 3nr</code>没有起作用，相当于只是用前面的<code>-k 1.2</code>就可以达到效果，事实上也正是如此，因为<code>-k 1.2</code>表示对<strong>第一个域</strong>的<strong>第二个字符开始到本域的最后一个字符为止</strong>的字符串进行排序，按照上一个示例的分析，可以将这些结果分开，所以就不存在上面所说的<code>如果相同的按照员工工资进行降序排序</code>，因此后面的排序也就没有了意义。随后基于此我做了一个测试，在最后一行增加”google 110 4500”，这样就存在了<code>-k 1.2</code>不能讲所有的分开是现象，依旧使用上面的命令进行排序：</p><blockquote><p><code>sort -k 1.2 -k 3nr salary.txt</code><br>baidu 100 5000<br>sohu 100 4500<br>google 110 4500<br>google 110 5000<br>guge 50 3000</p></blockquote><p>发现上述并没有按照我预定的<code>-k 1.2</code>不能讲所有的分开，然后就按照第二个指定的<code>-k 3nr</code>进行排序，然后我去google上搜索相关问题发现<a href="https://unix.stackexchange.com/questions/78925/how-to-sort-by-multiple-columns?rq=1" target="_blank" rel="noopener">有个回答</a>说<mark>对多行进行排序时需要指定sort keys的开始和结束，如果没指定结束就会在一直到一行的末尾结束（可能是因为第一个key是主key），不会考虑后面继续设置的key</mark>，基于此，做了测试：</p><blockquote><p><code>sort -k 1.2,1 -k 3nr salary.txt</code><br>baidu 100 5000<br>sohu 100 4500<br>google 110 5000<br>google 110 4500<br>guge 50 3000</p></blockquote><p>最终得到了正确的结果，使用<code>-k 1.2,1</code>是<strong>省略.CEnd，则表示结尾到“域尾”</strong>，同时吸取上面的教训，为了严谨期间，虽然第3列是最后一列，也直接加上sort key的结束位置：<code>sort -k 1.2,1 -k 3,3nr salary.txt</code>，结果和上面相同</p><div class="note info"><ul><li><code>-k 3nr</code>：表示在第3列上进行按数字的降序进行排列</li><li><strong>对不同的列进行不同的排序方式时尤其需要指定sort key的结束为止，如果不指定，会以第一个key设置的为主，忽略后续key的设置，这个在对不同的列分别依据ascii和数字进行排序中非常常见</strong></li></ul></div><hr><h3 id="t-指定field分隔符"><a href="#t-指定field分隔符" class="headerlink" title="-t 指定field分隔符"></a>-t 指定field分隔符</h3><p>sort使用<code>-t</code>参数来<strong>指定分隔符</strong>，<strong>默认的分隔符为空格(包括空格和tab)</strong>:</p><blockquote><p><code>cat sep.txt</code><br>aaa:eee<br>ccc:eee<br>ddd:ddd<br>bbb:ccc<br>eee:bbb<br>eee:aaa</p></blockquote><p>以<code>:</code>为分隔符，对<strong>第二列</strong>进行排序：</p><blockquote><p><code>sort -t : -k 2 sep.txt</code><br>eee:aaa<br>eee:bbb<br>bbb:ccc<br>ddd:ddd<br>aaa:eee<br>ccc:eee</p></blockquote><p>当然也可以<strong>指定列来判断重复与否</strong>，并进行删除：</p><blockquote><p><code>sort -t : -uk 2 sep.txt</code><br>eee:aaa<br>eee:bbb<br>bbb:ccc<br>ddd:ddd<br>aaa:eee</p></blockquote><hr><h3 id="o-输出到文件"><a href="#o-输出到文件" class="headerlink" title="-o 输出到文件"></a>-o 输出到文件</h3><p>输出到文件也可以使用重定向<code>&gt;</code>进行操作，但是<strong>如果使用重定向想要写入原文件，这个时候不但写不进去，还把原文件清空了</strong></p><p>这个问题可以很好的使用<code>-o</code>参数解决，<code>-o</code>后面接原文件，即<strong>可将重排序的结果写入原文件</strong></p><h3 id="c-检查文件是否已经排序"><a href="#c-检查文件是否已经排序" class="headerlink" title="-c 检查文件是否已经排序"></a>-c 检查文件是否已经排序</h3><p><strong>如果乱序，则输出第一个乱序的行的相关信息</strong></p><blockquote><p><code>sort -c uniq.txt</code><br>sort: uniq.txt:2: disorder: Hello 95</p></blockquote><hr><p><br></p><h2 id="使用实战"><a href="#使用实战" class="headerlink" title="使用实战"></a>使用实战</h2><h3 id="对多行进行排序并进行去重"><a href="#对多行进行排序并进行去重" class="headerlink" title="对多行进行排序并进行去重"></a>对多行进行排序并进行去重</h3><p>示例文件：含有google共有三行，其中有两行1、2列是完全相同的，有一行是第一列是相同的：</p><blockquote><p><code>cat salary.txt</code><br>baidu 100 5000<br>sohu 100 4500<br><strong>google 110 5000</strong><br>guge 50 3000<br><strong>google 110 4500</strong><br><strong>google 120 4500</strong></p></blockquote><p><strong>对1、2列进行排序并删除在这两列上的重复行：</strong></p><blockquote><p><code>sort -uk 1,2 salary.txt</code><br>baidu 100 5000<br><strong>google 110 5000</strong><br><strong>google 120 4500</strong><br>guge 50 3000<br>sohu 100 4500</p></blockquote><p>可以发现达到了目的</p><p>只针对第一列来看：</p><blockquote><p><code>sort -uk 1 salary.txt</code><br>baidu 100 5000<br>google 110 4500<br>google 110 5000<br>google 120 4500<br>guge 50 3000<br>sohu 100 4500</p></blockquote><p>这个并没有达到目的，和前面提到的<code>-k</code>选项中提到的一样，<strong>必须要指定终止位置</strong>，<strong>不然会比较整个行</strong>，这样最终结果是没有重复的，如果在上面文件中<strong>故意加一行重复的</strong>，还果真如此，比较的是整个行：</p><blockquote><p><code>cat salary.txt</code><br>baidu 100 5000<br>sohu 100 4500<br>google 110 5000<br>guge 50 3000<br>google 110 4500<br><strong>google 120 4500</strong><br><strong>google 120 4500</strong></p></blockquote><blockquote><p><code>sort -uk 1 salary.txt</code><br>baidu 100 5000<br>google 110 4500<br>google 110 5000<br><strong>google 120 4500</strong><br>guge 50 3000<br>sohu 100 4500</p></blockquote><p>增加终止位置，得到预期结果：</p><blockquote><p><code>sort -uk 1,1 salary.txt</code><br>baidu 100 5000<br>google 110 5000<br>guge 50 3000<br>sohu 100 4500</p></blockquote><p><strong>第一列相同的行中进行去重复保留的是原始文件中第一个出现的</strong></p><hr><h3 id="对文件大小进行排序"><a href="#对文件大小进行排序" class="headerlink" title="对文件大小进行排序"></a>对文件大小进行排序</h3><p><code>-h</code>：排序时使用易读性数字(例如： 2K 1G)</p><p><strong>统计目录下子目录的大小，并按大小进行降序排列：</strong></p><blockquote><p><code>du -h |sort -hr</code> # <code>du -h</code>统计目录下子目录的大小<br>2.6G ./test2<br>2.6G . # 整个目录大小<br>6.8M ./test<br>4.0K ./test3</p></blockquote><hr><h3 id="系统进程内存占用排序"><a href="#系统进程内存占用排序" class="headerlink" title="系统进程内存占用排序"></a>系统进程内存占用排序</h3><p><code>-g</code>：按通用数值排序，支持科学计数法</p><blockquote><p><code>ps aux |less -S</code><br>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</p></blockquote><blockquote><p><code>ps aux|sort -gr -k 4|head -n 5|awk &#39;{print $2,$3,$4}&#39;</code><br>10742 0.0 0.8<br>3916 99.5 0.7<br>110870 99.5 0.4<br>131268 99.5 0.3<br>66967 0.0 0.0</p></blockquote><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/51linux/archive/2012/05/23/2515299.html" target="_blank" rel="noopener">linux sort 命令详解</a></li><li><a href="http://man.linuxde.net/sort" target="_blank" rel="noopener">sort命令</a></li><li><a href="http://www.runoob.com/linux/linux-comm-sort.html" target="_blank" rel="noopener">Linux sort命令</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;本文学习sort-对文件进行排序，主要包括了sort用法(命令格式、参数说明)、用法实例(各种参数：&lt;code&gt;-u&lt;/code&gt;、&lt;code&gt;-n&lt;/code&gt;、&lt;code&gt;-r&lt;/code&gt;、&lt;code&gt;-k&lt;/code&gt;、&lt;code&gt;-t&lt;/code&gt;、&lt;code&gt;-o&lt;/code&gt;、&lt;code&gt;-c&lt;/code&gt;、&lt;code&gt;h&lt;/code&gt;和&lt;code&gt;g&lt;/code&gt;等的实例讲解)并在最后给出了几个非常常用的实战示例。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
    
      <category term="常用基本命令" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>字符串截取方法</title>
    <link href="http://showteeth.tech/posts/43811.html"/>
    <id>http://showteeth.tech/posts/43811.html</id>
    <published>2019-02-27T03:09:16.000Z</published>
    <updated>2019-02-27T12:22:40.545Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>字符串截取在平常的工作中非常常用，这里总结常用的截取方法，便于查阅和温习，主要包括：<code>${}</code>的<strong>字符串截取</strong>和<strong>正则匹配</strong>、<code>cut</code>命令的<code>-c</code>参数、<code>awk</code>的<code>substr</code>函数和<code>FS</code>内置参数以及<code>expr</code>的<code>substr</code>表达式</p></div><a id="more"></a><h2 id="使用-进行截取"><a href="#使用-进行截取" class="headerlink" title="使用${}进行截取"></a>使用<code>${}</code>进行截取</h2><p><code>${}</code>是一种非常常用的linux特殊符号，一般来说共有五种不同的功能，具体的是哪五种功能，之前已经写过<a href="http://showteeth.tech/posts/55603.html">一篇博文</a>，这里就不赘述了，这里主要用示例的形式讲解其中与字符串截取相关的两种功能：<strong>字符串截取</strong>和<strong>正则匹配替换</strong>。</p><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><ul><li><code>${str:offest}</code>：从<strong>字符串尾端（左侧）下标offset(含)开始截取到末尾</strong>的子串</li><li><code>${str:offest:length}</code>：从<strong>字符串尾端（左侧）下标offset(含)开始向后截取长度为length</strong>的子串，长度超出不报错</li><li><code>${str:0-offset:length}</code>：从<strong>字符串尾端（右侧）下标offset(含)开始以及<u>向后</u>截取长度为length</strong>的子串</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">"http://showteeth.tech/posts/55603.html"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取从下标5到字符串结尾的子串，注意下标是从0开始的</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:0&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:1&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从下标5开始截取长度为10的子串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:5:10&#125;</span></span><br><span class="line"><span class="comment"># 字符长度超出不会报错</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:5:40&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从右数下标15开始截取长度为10的子串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:0-15:10&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://showteeth.tech/posts/55603.html">http://showteeth.tech/posts/55603.html</a><br>ttp://showteeth.tech/posts/55603.html<br>//showteeth.tech/posts/55603.html</p></blockquote><blockquote><p>//showteet<br>//showteeth.tech/posts/55603.html</p></blockquote><blockquote><p>osts/55603</p></blockquote><div class="note info"><ul><li><code>下标（offset）</code>从0开始 <strong>（注意与使用<code>awk</code>的<code>substr</code>函数进行字符截取不同）</strong></li><li><code>${str:0-offset:length}</code>是从字串右侧开始数坐标，然后和正常的一样，向后截取长度</li></ul></div><hr><h3 id="正则匹配替换"><a href="#正则匹配替换" class="headerlink" title="正则匹配替换"></a>正则匹配替换</h3><ul><li><code>${\#parameter}</code>：获取变量长度</li><li><code>${parameter#word}</code>、<code>${parameter##word}</code>：<strong>从头开始</strong>扫描word(pattern)，将匹配word(pattern)的字符过滤掉，<code>#</code>为<strong>最短</strong>匹配，<code>##</code>为<strong>最长</strong>匹配</li><li><code>${parameter%word}</code>、<code>${parameter%%word}</code>：<strong>从尾开始</strong>扫描word(pattern)，将匹配word(pattern)的字符过滤掉，<code>%</code>为<strong>最短</strong>匹配，<code>%%</code>为<strong>最长</strong>匹配</li><li><code>${parameter/pattern/string}</code>、<code>${parameter//pattern/string}</code>：使用string替换pattern，<code>/</code>表示<strong>只替换一次</strong>；<code>//</code>表示<strong>全部替换</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取变量长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从左边开始删除第一次出现子字符串即其左边字符，保留右边字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str#*/&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从左边开始删除最后一次出现子字符串即其左边字符，保留符号最右边字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str##*/&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从右边开始删除第一次出现子字符串即其右边字符，保留左边字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str%/*&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从右边开始删除最后一次出现子字符串即其右边字符，保留最左边字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str%%/*&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换，只替换第一次出现的字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str/\//%&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换，所有匹配的都进行替换</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str//\//%&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>38</p></blockquote><blockquote><p>/showteeth.tech/posts/55603.html<br>55603.html</p></blockquote><blockquote><p><a href="http://showteeth.tech/posts">http://showteeth.tech/posts</a><br>http:</p></blockquote><blockquote><p>http:%/showteeth.tech/posts/55603.html<br>http:%%showteeth.tech%posts%55603.html</p></blockquote><div class="note info"><ul><li><code>#</code>在<code>%</code>的左边，所以<code>#</code>是从左向右删除字符，保留右边子串，而<code>%</code>是从右向左删除字符，保留左边字符</li><li>一个<code>#</code>或<code>%</code>是匹配并删除第一次出现的pattern，而<code>##</code>或<code>%%</code>是匹配并删除最后一次出现的pattern（相当于贪婪匹配）</li><li>上述的<code>parameter</code>都是可以不用引用的，因为<code>${var}</code>本来就和<code>$var</code>是一个意思</li></ul></div><hr><p><br></p><h2 id="使用awk进行截取"><a href="#使用awk进行截取" class="headerlink" title="使用awk进行截取"></a>使用awk进行截取</h2><p>使用<code>awk</code>中的<code>substr</code>函数，<code>substr()</code>用于从字符串中<strong>指定位置</strong>和<strong>长度</strong>截取出子串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">usage：</span><br><span class="line">  substr(s, i [, n])</span><br><span class="line">    s 待截取的字符串</span><br><span class="line">    i 索引位置，从1开始，按照字符计算、非字节</span><br><span class="line">    n 要截取的长度，默认或者填写长度超出字符尾，则截取到字符尾</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span> |awk <span class="string">'&#123;print substr($str,5,10)&#125;'</span></span><br></pre></td></tr></table></figure><blockquote><p>://showtee</p></blockquote><p>也可以使用<code>awk</code>指定<strong>输入分割符</strong>的方式截取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span> |awk -v FS=<span class="string">"/"</span> <span class="string">'&#123; print $3 &#125;'</span></span><br></pre></td></tr></table></figure><div class="note warning"><ul><li>注意这里与使用<code>${}</code>进行字符串截取不同，这里字符的<strong>索引开始为1</strong>，而上面<code>${}</code>索引<strong>开始位置为0</strong></li><li><code>FS</code>是awk内置的系统变量，表示<strong>域分隔符</strong>，默认为空白字符（空格），使用时需要结合<code>-v</code>来传递参数</li></ul></div><hr><p><br></p><h2 id="使用cut进行截取"><a href="#使用cut进行截取" class="headerlink" title="使用cut进行截取"></a>使用cut进行截取</h2><p><strong>直接通过范围得到子串：</strong><br><code>cut</code>命令的<code>-c</code>参数：<strong>仅显示行中指定范围的字符</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span> |cut -c 2-6</span><br></pre></td></tr></table></figure><p></p><blockquote><p>ttp:/</p></blockquote><div class="note warning"><ul><li>注意这里与使用<code>${}</code>进行字符串截取<strong>不同</strong>，与使用<code>awk</code>的<code>substr</code>函数进行字符截取<strong>相同</strong>，这里字符的<strong>索引开始为1</strong>，而上面<code>${}</code>索引<strong>开始位置为0</strong></li><li><code>cut</code> <code>-c</code> 后面接的是<code>index的起始和终止范围</code>，而不是像前面的<code>awk</code>和<code>${}</code>一样是<strong>index</strong>和<strong>length</strong>的组合</li></ul></div><p><strong>利用cut按分割符分割来得到子串：</strong></p><ul><li><code>cut</code>命令的<code>-d</code>参数：<strong>指定字段的分隔符，默认的字段分隔符为”TAB”</strong></li><li><code>cut</code>命令的<code>-f</code>参数：<strong>指定需要显示的字段</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span> |cut -d / -f 3</span><br></pre></td></tr></table></figure><blockquote><p>showteeth.tech</p></blockquote><div class="note info"><p><code>cut</code>命令的<code>-d</code>和<code>-f</code>参数合用主要用于得到被<strong>已知分隔符</strong>分割的<strong>一块子串</strong></p></div><hr><p><br></p><h2 id="使用expr进行截取"><a href="#使用expr进行截取" class="headerlink" title="使用expr进行截取"></a>使用expr进行截取</h2><p><code>expr</code>用于计算表达式变量的值，其中有表达式：<code>substr String StartPosition Length</code>，表示<strong>从String的StartPosition开始截取Length的子串</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr substr <span class="variable">$str</span> 2 6</span><br></pre></td></tr></table></figure><blockquote><p>ttp://</p></blockquote><div class="note info"><ul><li>注意每个单词之间都有空格，不带空格会出错</li><li>索引位置也是从1开始，和<code>awk</code>的<code>substr</code>函数、<code>cut</code>命令的<code>-c</code>参数相同，和<code>${}</code>不同</li></ul></div><hr><p><br></p><h2 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h2><div class="note info"><ul><li>一般最为常用的是<code>${}</code>的<strong>正则匹配替换</strong>方法(保留字符串最左或者最右的子串)，同时awk和cut使用的也非常多</li><li>使用需要提供索引位置的方法时需要注意索引的开始位置：<ul><li><code>awk</code>的<code>substr</code>函数、<code>cut</code>命令的<code>-c</code>参数还有expr的substr表达式索引都是从1开始</li><li><code>${str:offest:length}</code>方法的索引则开始于0</li></ul></li><li><code>${}</code>、<code>cut</code>命令的<code>-c</code>参数以及<code>awk</code>的<code>FS</code>内置参数都是用于通过<strong>已知分割符</strong>得到相应的<strong>一块子串</strong>，而不是具体地通过索引位置</li></ul></div><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;字符串截取在平常的工作中非常常用，这里总结常用的截取方法，便于查阅和温习，主要包括：&lt;code&gt;${}&lt;/code&gt;的&lt;strong&gt;字符串截取&lt;/strong&gt;和&lt;strong&gt;正则匹配&lt;/strong&gt;、&lt;code&gt;cut&lt;/code&gt;命令的&lt;code&gt;-c&lt;/code&gt;参数、&lt;code&gt;awk&lt;/code&gt;的&lt;code&gt;substr&lt;/code&gt;函数和&lt;code&gt;FS&lt;/code&gt;内置参数以及&lt;code&gt;expr&lt;/code&gt;的&lt;code&gt;substr&lt;/code&gt;表达式&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>整数计算、浮点计算并保留小数</title>
    <link href="http://showteeth.tech/posts/28430.html"/>
    <id>http://showteeth.tech/posts/28430.html</id>
    <published>2019-02-27T03:08:40.000Z</published>
    <updated>2019-02-27T12:29:14.330Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>在linux中进行整数计算、浮点计算并保留小数，主要包括：使用<code>expr</code>进行<strong>整数运算</strong>以及<strong>简单的字符串操作</strong>、使用<code>bc</code>进行<strong>浮点运算</strong>和<strong>进制转换</strong>以及使用<code>awk</code>进行<strong>浮点运算</strong>。</p></div><a id="more"></a><h2 id="expr-整数或字符串表达式计算"><a href="#expr-整数或字符串表达式计算" class="headerlink" title="expr 整数或字符串表达式计算"></a>expr 整数或字符串表达式计算</h2><p><code>expr</code>语法：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr 表达式</span><br></pre></td></tr></table></figure><p></p><p>表达式说明:</p><ul><li><strong><code>expr</code>只能用于整数计算</strong></li><li>用<strong>空格隔开</strong>每个项</li><li><strong>用<code>/</code>(反斜杠)放在shell特定的字符</strong>前面</li><li><strong>对包含空格和其他特殊字符的字符串要用引号括起来</strong></li></ul><h3 id="整数计算"><a href="#整数计算" class="headerlink" title="整数计算"></a>整数计算</h3><table><tr><th width="10%">类别</th><th width="20%">语法</th><th width="70%">说明</th></tr><tr><td rowspan="2">四则运算</td><td>expr1 \| expr2</td><td>如果 expr1 不是零或 null 则传回 expr1，否则传回 expr2</td></tr><tr><td>expr1 \&amp; expr2</td><td>如果 expr1 及 expr2 都不为零或 null，则传回 expr1，否则传回 0</td></tr><tr><td rowspan="5">四则运算</td><td>expr1 + expr2</td><td>传回 expr1 加 expr2 后的值</td></tr><tr><td>expr1 - expr2</td><td>传回 expr1 减 expr2 后的值</td></tr><tr><td>expr1\* expr2</td><td>传回 expr1 乘 expr2 后的值</td></tr><tr><td>expr1 / expr2</td><td>传回 expr1 除 expr2 后的整数位值（小数位直接丢弃，不四舍五入）</td></tr><tr><td>expr1 % expr2</td><td>传回 expr1 除 expr2 的余数</td></tr><tr><td rowspan="6">大小判断</td><td>expr1 \&gt; expr2</td><td>如果 expr1 大于 expr2 则传回 1，否则传回 0。如果 expr1 及 expr2 都是数字，则是以数字大小判断，否则是以文字判断。以下皆同</td></tr><tr><td>expr1 \&lt; expr2</td><td>如果 expr1 小于 expr2 则传回 1，否则传回 0</td></tr><tr><td>expr1 = expr2</td><td>如果 expr1 等于 expr2 则传回 1，否则传回 0</td></tr><tr><td>expr1 != expr2</td><td>如果 expr1 不等于 expr2 则传回 1，否则传回 0</td></tr><tr><td>expr1 \&gt;= expr2</td><td>如果 expr1 大于或等于 expr2 则传回 1，否则传回 0</td></tr><tr><td>expr1 \&lt;= expr2</td><td>如果 expr1 小于或等于 expr2 则传回 1，否则传回 0</td></tr></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">expr 2+3</span><br><span class="line">expr 2 + 3</span><br><span class="line"></span><br><span class="line">expr 2 * 3</span><br><span class="line">expr 2 \* 3</span><br><span class="line"></span><br><span class="line">expr 5 / 3</span><br><span class="line"></span><br><span class="line">expr 2 % 3</span><br></pre></td></tr></table></figure><blockquote><p>2+3 # 2和3之间没有空格，直接被输出，没有进行计算<br>5 # 输出正确结果</p></blockquote><blockquote><p>expr: syntax error # 因为没有对<code>*</code>进行转义，所以报错<br>6 # 转义后输出正确结果</p></blockquote><blockquote><p>1 # 直接去掉余数，不进行四舍五入</p></blockquote><blockquote><p>2 # 输出余数</p></blockquote><hr><h3 id="字符串表达式计算"><a href="#字符串表达式计算" class="headerlink" title="字符串表达式计算"></a>字符串表达式计算</h3><p>因为<code>expr</code>用于字符串计算并不常见，所以这里不仔细了解，只了解几个个人感觉比较常用的，需要了解的可以参考<a href="https://blog.csdn.net/guhong5153/article/details/6542995" target="_blank" rel="noopener">这篇博客</a></p><p><strong>计算字串长度(length)：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr length <span class="string">"this is a test"</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>14</p></blockquote><p><strong>截取子串(substr)：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># substr String StartPosition Length</span></span><br><span class="line">expr substr <span class="string">"this is a test"</span> 3 5</span><br></pre></td></tr></table></figure><p></p><blockquote><p>is is</p></blockquote><p><strong>匹配第一个字符(串)出现的位置(index)：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr index <span class="string">"this is a test"</span> is</span><br></pre></td></tr></table></figure><p></p><blockquote><p>3</p></blockquote><div class="note info"><p>注意四则运算中的<code>*</code>需要进行转义处理，同时还有条件判断中的<code>|</code> <code>&amp;</code>和大小判断中的<code>&gt;</code> <code>&lt;</code>都需要进行转义处理</p></div><hr><p><br></p><h2 id="浮点计算并保留小数"><a href="#浮点计算并保留小数" class="headerlink" title="浮点计算并保留小数"></a>浮点计算并保留小数</h2><h3 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h3><p><code>bc</code>命令是任意精度计算器语言，通常在linux下当计算器用, 它类似基本的计算器, 使用这个计算器可以做基本的数学运算。</p><p>常用的运算：</p><ul><li>+ 加法</li><li>- 减法</li><li>* 乘法</li><li>/ 除法</li><li>^ 指数</li><li>% 余数</li><li>sqrt 开方</li></ul><p>语法：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bc (选项) (参数)</span><br></pre></td></tr></table></figure><p></p><p>在shell中直接输入<code>bc</code>即可进入交互式界面，类似于没有图形界面的计算器，输入表达式得到结果<br>具体用法不详细讲解，可以参考<a href="https://www.cnblogs.com/lovevivi/p/4359296.html" target="_blank" rel="noopener">这篇博客</a></p><p><strong>实际进行浮点运算常用的方法是通过管道符：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usage:</span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">'scale=num; expression'</span>|bc</span><br><span class="line">    num：表示保留的小数点后位数</span><br><span class="line">    expression：表示计算表达式</span><br></pre></td></tr></table></figure><p></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'scale=2;2/3'</span> |bc</span><br></pre></td></tr></table></figure><blockquote><p>.66</p></blockquote><p><strong>可以发现上述输出结果中并没有0(因为结果小于0)，如果想要显示可以使用</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'scale=2;a=2/3;if( length(a) == scale(a) ) print 0;print a ,"\n"'</span> |bc</span><br></pre></td></tr></table></figure><p></p><blockquote><p>0.66</p></blockquote><p><strong>bc还能用来进行进制的转换：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">usage：</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"obase=base;ibase=base;num"</span> | bc</span><br><span class="line">    obase:输出数字的进制，默认值为10</span><br><span class="line">    ibase:输入数字的进制，默认值为10</span><br><span class="line">    num:进行进制转换的数字</span><br><span class="line">    obase一定要放在ibase前，因为ibase设置后，后面的数字都是以ibase的进制来换算的</span><br></pre></td></tr></table></figure><p></p><p>obase如果放在ibase后可能会出错：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># obase一定要放在ibase前，因为ibase设置后，后面的数字都是以ibase的进制来换算的</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"obase=10;ibase=2;110"</span> | bc</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ibase=2;obase=10;110"</span> | bc</span><br></pre></td></tr></table></figure><p></p><blockquote><p>6<br>110</p></blockquote><hr><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>awk中的计算，默认支持浮点运算：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> |awk <span class="string">'&#123;print 2/3&#125;'</span></span><br></pre></td></tr></table></figure><p></p><p><strong>格式化输出：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保留两位小数</span></span><br><span class="line"><span class="built_in">echo</span> |awk <span class="string">'&#123;printf("%.2f\n" , 3/50)&#125;'</span></span><br></pre></td></tr></table></figure><p></p><hr><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;在linux中进行整数计算、浮点计算并保留小数，主要包括：使用&lt;code&gt;expr&lt;/code&gt;进行&lt;strong&gt;整数运算&lt;/strong&gt;以及&lt;strong&gt;简单的字符串操作&lt;/strong&gt;、使用&lt;code&gt;bc&lt;/code&gt;进行&lt;strong&gt;浮点运算&lt;/strong&gt;和&lt;strong&gt;进制转换&lt;/strong&gt;以及使用&lt;code&gt;awk&lt;/code&gt;进行&lt;strong&gt;浮点运算&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux中特殊符号用法</title>
    <link href="http://showteeth.tech/posts/55603.html"/>
    <id>http://showteeth.tech/posts/55603.html</id>
    <published>2019-02-26T02:57:41.000Z</published>
    <updated>2019-02-28T12:46:20.519Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>Linux常见特殊符号作用，包括<code>#</code>、<code>~</code>、<code>~+</code>、<code>~-</code>、<code>;</code>、<code>;;</code>、<code>.</code>、<code>&#39;&#39;</code>、<code>&quot;&quot;</code>、<code>`</code>、<code>,</code>、<code>/</code>、<code>\</code>、<code>|</code>、<code>!</code>、<code>:</code>、<code>*</code>、<code>**</code>、<code>$</code>、<code>$$</code>、<code>?</code>、<code>${}</code>、<code>$*</code>、<code>$@</code>、<code>$#</code>、<code>$(())</code>、<code>(())</code>、<code>()</code>、<code>{}</code>、<code>[]</code>、<code>[[]]</code>、<code>||</code> 、<code>&amp;&amp;</code>、<code>\&lt;...\&gt;</code>和文件操作符以及重定向。</p></div><a id="more"></a><h2 id="号-注释"><a href="#号-注释" class="headerlink" title="#号-注释"></a>#号-注释</h2><p>在脚本中 <code>#</code>也常出现在一行的<strong>开头</strong>,或者位于<strong>完整指令之后</strong>,这类情况表示符号后边是<strong>注解文字,不会被执行</strong>，如果被<u>用在指令</u>中，或者<u>引号、双引号括住</u>的话，或者<u>在反斜线的后面</u>，那他就变成<strong>一般符号</strong>，不具上述的特殊功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#this line is comments</span></span><br></pre></td></tr></table></figure><hr><h2 id="home目录"><a href="#home目录" class="headerlink" title="~ home目录"></a>~ home目录</h2><p>代表使用者的<strong>home目录</strong>：<code>cd ~</code>表示进入home目录；也可以<strong>直接在符号后加上某帐户</strong>的名称：<code>cd ~user</code>表示进入这个user的home目录；或者<strong>当成是路径的一部份</strong>：<code>~/bin</code></p><p><code>~+</code>表示当前的工作目录</p><p><code>~-</code>表示上一个工作目录，这个在目录切换很好用啊，<code>cd ~-</code>直接<strong>进入上一次cd之前的目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前工作目录</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">echo</span> ~+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入上一次cd之前的目录</span></span><br><span class="line"><span class="built_in">cd</span> ~-</span><br><span class="line"><span class="comment"># 进入上一次cd之前目录下的test目录</span></span><br><span class="line"><span class="built_in">cd</span> ~-/<span class="built_in">test</span>/</span><br></pre></td></tr></table></figure><hr><h2 id="分号"><a href="#分号" class="headerlink" title="; 分号"></a>; 分号</h2><p><strong>连续命令之间起到连接作用</strong>，命令之间没有依赖，<mark>不管上一条命令是否执行成功，分号后的命令都会执行</mark>。</p><hr><h2 id="连续分号"><a href="#连续分号" class="headerlink" title=";;连续分号"></a>;;连续分号</h2><p>专用在<code>case（多分支条件判断）</code>的选项，担任 <code>Terminator</code> 的角色</p><hr><h2 id="点号-dot"><a href="#点号-dot" class="headerlink" title=". 点号(dot)"></a>. 点号(dot)</h2><ul><li>在<strong>目录</strong>中：一个<code>.</code>表示当前目录，两个<code>..</code>表示上层目录</li><li>在<strong>文件命名</strong>中：以<code>.</code>开头的文件表明该文件是<strong>隐藏文件</strong>，需要使用<code>ls -a</code>才能看到</li><li>在<strong>正则表达式</strong>中：一个逗号表示一个任意字符（换行符 \n 之外），如果想要匹配<code>.</code>，需要使用转义<code>\.</code>。</li></ul><h2 id="‘’-单引号"><a href="#‘’-单引号" class="headerlink" title="‘’ 单引号"></a>‘’ 单引号</h2><p>被单引号用括住的内容，将被视为<code>单一字串</code>。在<mark>引号内的代表变量的<code>$</code>符号，没有作用</mark>，也就是说，他被视为一般符号处理，<strong>防止任何变量替换</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>=<span class="string">"hello"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'$test'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>=<span class="string">"HELLO"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello WORLD"</span> |sed <span class="string">'s/hello/$test/'</span></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><blockquote><p><code>$</code>test</p></blockquote><blockquote><p><code>$</code>test WORLD</p></blockquote><hr><h2 id="“”-双引号"><a href="#“”-双引号" class="headerlink" title="“” 双引号"></a>“” 双引号</h2><p>被双引号用括住的内容，将被视为<code>单一字串</code>。它<mark>防止通配符扩展，但允许变量替换</mark>，这点与单引号的处理方式不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>=<span class="string">"hello"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$test</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>=<span class="string">"HELLO"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello WORLD"</span> |sed <span class="string">"s/hello/<span class="variable">$test</span>/"</span></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><blockquote><p>hello</p></blockquote><blockquote><p>HELLO WORLD</p></blockquote><hr><h2 id="反引号"><a href="#反引号" class="headerlink" title="`` 反引号"></a>`` 反引号</h2><p>在前面的<strong>单双引号，括住的是字串</strong>，但如果该字串是一列命令列，会怎样？答案是不会执行。要处理这种情况，我们得用反引号来做，被<strong>反引号括住的内容是可以执行的</strong>。</p><p>与反引号相同可以用来进行命令执行的还有<code>$()</code>，两者的区别在于<mark>如果是使用反引号执行命令在进行命令嵌套时会比较麻烦，而使用<code>$()</code>进行命令的嵌套会比较简单</mark>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>=<span class="string">"hello"</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">echo</span> <span class="variable">$test</span>`</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">echo</span> <span class="variable">$test</span>)</span><br></pre></td></tr></table></figure><p>命令嵌套：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">echo</span> $(<span class="built_in">echo</span> <span class="variable">$test</span>))</span><br></pre></td></tr></table></figure><p>不等同于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="built_in">echo</span> `<span class="built_in">echo</span> <span class="variable">$test</span>``</span><br></pre></td></tr></table></figure><p><strong>反引号遇到第一个匹配的反引号就结束，之间的内容会当做命令运行，可以使用转义字符<code>\</code>解决嵌套问题</strong></p><p>等同于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="built_in">echo</span> \`<span class="built_in">echo</span> <span class="variable">$test</span>\``</span><br></pre></td></tr></table></figure><div class="note info"><p>所以还是使用<code>$()</code>来得到命令执行结果更为简便，但是不需要嵌套时两者差不多</p></div><hr><h2 id="逗号"><a href="#逗号" class="headerlink" title=", 逗号"></a>, 逗号</h2><p>这个符号常运用在运算当中当做<strong>区隔用途</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $1,$2,$3,$4&#125;'</span> filename</span><br></pre></td></tr></table></figure><hr><h2 id="斜线"><a href="#斜线" class="headerlink" title="/ 斜线"></a>/ 斜线</h2><ul><li>在路径表示时，<strong>分割不同级别的目录</strong></li><li>单一的斜线<code>/</code>表示根目录，和上面的<code>~</code>表示的家目录不同</li><li>在四则运算中，代表<strong>除法的符号</strong></li></ul><h2 id="反斜线"><a href="#反斜线" class="headerlink" title="\ 反斜线"></a>\ 反斜线</h2><p>在交互模式下的escape字元，有几个作用</p><ul><li>放在<strong>指令前</strong>，有<strong>取消 aliases</strong>的作用；</li><li>放在<strong>特殊符号</strong>前，则该<strong>特殊符号的作用消失（转义）</strong>；</li><li>放在<strong>指令的最末端</strong>，表示指令<strong>连接下一行</strong>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls -l</span></span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消ll代表ls -l，在ll之前防止反斜线表示暂时取消别名的功能，将 ll 指令还原</span></span><br><span class="line">\ll</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义，取消变量应用</span></span><br><span class="line">\<span class="variable">$test</span></span><br></pre></td></tr></table></figure><p>最终ll结果输出：</p><blockquote><p>bash: ll: command not found</p></blockquote><hr><h2 id="管道符"><a href="#管道符" class="headerlink" title="| 管道符"></a>| 管道符</h2><p><strong>连结上个指令的标准输出，做为下个指令的标准输入</strong>。</p><hr><h2 id="惊叹号"><a href="#惊叹号" class="headerlink" title="! 惊叹号"></a>! 惊叹号</h2><ul><li>通常它代表反逻辑的作用，如<code>!=</code>表示不等于</li><li>匹配模式取反：<code>sed -n &#39;1,2!p&#39; test.txt</code>表示打印第1、2行之外的行；<code>ls a[!0-9]</code>表示显示除了a0, a1 …. a9 这几个文件的其他文件</li><li>在历史命令（history）中：<ul><li><code>!number</code> ：表示执行history中<strong>第number条命令</strong></li><li><code>!!</code>：表示执行<strong>上一条命令</strong></li><li><code>!command</code>：执行<strong>最近一条command为开头的命令</strong></li><li><code>!$</code>：表示<strong>最近一条命令的第二个字符信息</strong></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span></span><br><span class="line">!!</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>mkdir test<br>mkdir: cannot create directory `test’: File exists</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span></span><br><span class="line">!$</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>test</p></blockquote><hr><h2 id="冒号"><a href="#冒号" class="headerlink" title=": 冒号"></a>: 冒号</h2><ul><li>在 bash 中，这是一个内建指令：”什么事都不干”，但返回状态值 0</li><li><code>: &gt; f</code>：相当于<code>cat/dev/null&gt;f</code>，这样不仅写法简短了，而且执行效率也好上许多</li><li><code>: ${HOSTNAME?} ${USER?} ${MAIL?}</code>这行的作用是，检查这些环境变数是否已设置，没有设置的将会以标准错误显示错误讯息。像这种检查如果使用类似 <code>test</code> 或<code>if</code>这类的做法，基本上也可以处理，但都比不上上例的简洁与效率。<strong>(这个具体还没试验过)</strong></li><li>添加环境变量时需要使用<code>:</code>分割，比如<code>PATH=$PATH:$HOME/fbin:$HOME/fperl:/usr/local/mozilla</code></li></ul><h2 id="星号"><a href="#星号" class="headerlink" title="* 星号"></a>* 星号</h2><ul><li>在<code>文件名扩展(Filename expansion)</code>上，用来代表<strong>0到无穷多个任意字符</strong></li><li>在<code>正则表达式（Regular Expressions）</code>中，代表<strong>重复零个到无穷多个的<u>前一个字符</u></strong>，而代销<strong>0到无穷多个任意字符</strong>是使用<code>.*</code>。</li><li>在运算时，它则代表 “乘法”</li></ul><div class="note info"><p><code>*</code>在不同地方不同的用法需要注意，尤其是代表<strong>0到无穷多个任意字符</strong>、<strong>重复零个到无穷多个的<u>前一个字符</u></strong>这方面。</p></div><hr><h2 id="次方运算"><a href="#次方运算" class="headerlink" title="** 次方运算"></a>** 次方运算</h2><p>两个星号在运算时代表 “次方” 的意思。</p><hr><h2 id="和"><a href="#和" class="headerlink" title="$和$$"></a>$和$$</h2><ul><li>引用变量的前导符号，如<code>var=&quot;test&quot; echo $var</code></li><li>在正则表达式里被定义为<code>行的最末端 (end-of-line)</code>，这个常用在<code>grep</code>、<code>sed</code>、<code>awk</code> 以及 <code>vim(vi)</code> 当中</li><li>在bash中<code>$</code>本身也是个变量。代表的是<strong>目前这个shell的进程代码</strong>，即所谓的<code>PID（Process ID）</code><ul><li><code>$$</code> Shell本身的PID（ProcessID）</li><li><code>$!</code> Shell最后运行的后台Process的PID</li><li><code>$?</code> 最后运行的命令的结束代码（返回值），一般指令程序倘若执行成功，其回传值为 0，失败为 1。</li><li>其他参考<a href="https://www.cnblogs.com/chjbbs/p/6393935.html" target="_blank" rel="noopener">该博客</a></li></ul></li><li><mark><code>$</code>后接引号（单双引号），单引号可以使引号内的内容被特殊对待：会将某些反斜线序列(如<code>\n</code>，<code>\t</code>，<code>\&quot;</code>，<code>\&#39;</code>等)继续转义(<code>\t-&gt;tab</code>;<code>\n-&gt;换行</code>)，而不认为它是字面符号(如果没有<code>$</code>符号，单引号会强制将string翻译为字面符号，包括反斜线)；而双引号则没有上述效果，<code>$&quot;string&quot;</code>和<code>&quot;string&quot;</code>是完全等价的，使用<code>$&quot;&quot;</code>只是为了保证本地化</mark></li></ul><blockquote><p><code>echo &#39;a\nb&#39;</code><br>a\nb</p></blockquote><p>上述结果<strong>并没有和预期的一样在a、b之间进行换行</strong>，这是因为<strong>单引号中的<code>\n</code>被看成了字面意思，就是反斜线加上n</strong>，而不是特殊的换行的意思</p><p>如果在前面加上<code>$</code>：</p><blockquote><p><code>echo $&#39;a\nb&#39;</code><br>a<br>b</p></blockquote><p>这个结果和预期的一样，<strong>因为<code>$</code>将<code>\n</code>翻译成了换行</strong>，而不是单纯的反斜线加上n，这个在join命令指定分隔符时会用到，具体参考介绍<a href="http://showteeth.tech/posts/5579.html">join用法的文章</a></p><p>如果将上述单引号转换为双引号：</p><blockquote><p><code>echo $&quot;a\nb&quot;</code><br>a\nb</p></blockquote><p>发现在使用<strong>双引号</strong>的情况下，得到的结果<strong>和没使用<code>$</code>是一样的</strong>，这和前面说的<code>$&quot;string&quot;</code>和<code>&quot;string&quot;</code>是完全等价的是相符的。</p><p><strong>常见的需要注意使用<code>$</code>和单引号的转义字符包括</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\a    alert (bell)</span><br><span class="line">\b    backspace</span><br><span class="line">\e</span><br><span class="line">\E    an escape character</span><br><span class="line">\f    form feed</span><br><span class="line">\n    new line</span><br><span class="line">\r    carriage <span class="built_in">return</span></span><br><span class="line">\t    horizontal tab</span><br><span class="line">\v    vertical tab</span><br><span class="line">\\    backslash</span><br><span class="line">\<span class="string">'    single quote</span></span><br><span class="line"><span class="string">\"    double quote</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="问号"><a href="#问号" class="headerlink" title="? 问号"></a>? 问号</h2><ul><li>在<code>文件名扩展(Filename expansion)</code>上扮演的角色是<code>匹配一个任意的字符</code>，但不包含空字符，注意是<strong>一个字符，不能是0个也不能是两个</strong>，注意和正则表达式的用法区分。比如：<code>ls a?c.txt</code>可以得到abc.txt和amc.txt 但是不能得到abbc.txt，也不能得到ac.txt</li><li>在正则表达式式中，<code>?</code>表示匹配<strong>前面的字符0次或1次</strong>，<strong>不是任意字符</strong>，注意和文件名拓展的区分。<mark>同时在正则表达式中还可以用来表示非贪婪匹配</mark></li><li>在<code>bash</code>中，这个变量是<strong>上一个执行的命令所回传的值</strong>。当我们执行某些命令时，这些命令都会回传一个执行后的代码，一般说，<u>如果成功执行该命令，则会回传一个0值</u>，如果执行过程<u>发生错误</u>，就会回传错误代码，一般<u>以非0的数值来替代</u></li></ul><hr><h2 id="变量的正规表达式"><a href="#变量的正规表达式" class="headerlink" title="${} 变量的正规表达式"></a>${} 变量的正规表达式</h2><p>一般情况下，<code>$var</code>与<code>${var}</code>是没有区别的，但是用<code>${}</code>会<strong>比较精确的界定变量名称的范围</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个明确说明了var才是变量</span></span><br><span class="line"><span class="variable">$&#123;var&#125;</span>_suffix</span><br><span class="line"></span><br><span class="line"><span class="variable">$var_suffix</span></span><br></pre></td></tr></table></figure><h3 id="参数替换"><a href="#参数替换" class="headerlink" title="${} 参数替换"></a>${} 参数替换</h3><ul><li><code>${var_name}</code> 等价于<code>$var_name</code>（通常用这种简写方式）</li><li><code>$(var:-default)</code> 和 <code>$(var-default)</code><ul><li><code>$(var:-default)</code>：当<strong>var为空或未定义</strong>时<strong>整个表达式的值为default</strong></li><li><code>$(var-default)</code>：当且<strong>仅当var未定义</strong>时<strong>整个表达式的值为default</strong></li></ul></li><li><code>$(var:=default)</code> 和 <code>$(var=default)</code><ul><li><code>$(var:=default)</code>：当var<strong>为空或未定义</strong>时<strong>整个表达式的值为default</strong>，<strong>并且将var的值设置为default</strong></li><li><code>$(var=default)</code>：当且<strong>仅当var未定义</strong>时<strong>整个表达式的值为default</strong>，<strong>并且将var的值设置为default</strong></li></ul></li><li><code>$(var:?default)</code> 和 <code>$(var?message)</code><ul><li><code>$(var:?message)</code>：当var<strong>为空或未定义</strong>时，<strong>打印错误信息</strong>，信息内容为message表示的值</li><li><code>$(var?message)</code>：当且<strong>仅当var未定义</strong>时，<strong>打印错误信息</strong>，信息内容为message表示的值</li></ul></li><li><code>$(var:+default)</code> 和 <code>$(var+default)</code><ul><li><code>$(var:+default)</code>：当<strong>var已定义且不为空</strong>时整个表达式的值为default</li><li><code>$(var+default)</code>：当<strong>var已定义时</strong>整个表达式的值为default(<strong>不管var是否是空</strong>)</li></ul></li></ul><hr><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="${} 字符串截取"></a>${} 字符串截取</h3><ul><li><code>${str:offest}</code>：从下标<strong>offset(含)开始截取到末尾</strong>的子串</li><li><code>${str:offest:length}</code>：从<strong>下标offset(含)开始向后截取长度为length</strong>的子串，长度超出不报错</li><li><code>${str:offest:index}</code>：</li></ul><hr><h3 id="变量匹配"><a href="#变量匹配" class="headerlink" title="${} 变量匹配"></a>${} 变量匹配</h3><p><code>${!prefix*}</code>、<code>${!prefix@}</code>：将带有<strong>前缀为prefix的变量名打印</strong>出来</p><hr><h3 id="数组操作"><a href="#数组操作" class="headerlink" title="${} 数组操作"></a>${} 数组操作</h3><ul><li><code>${!name[@]}</code>、<code>${!name[*]}</code>：将<strong>数组name的所有<code>下标</code></strong>返回，如果<em>变量name不是数组则返回0,不存在则空</em></li><li><code>${name[@]}</code>、<code>${name[*]}</code>：将<strong>数组name的所有<code>元素</code></strong>返回，如果<em>变量name不是数组则返回name的值,不存在则空</em></li><li><code>${\#name[@]}</code>、<code>${\#name[*]}</code>：返回<strong>数组元素总个数</strong></li><li><code>${name[index]}</code>：将<strong>数组name的index处的<code>元素</code></strong>返回，如果<em>变量name不是数组且index为0时返回name的值</em>，<em>变量或索引index处的元素不存在则返回空</em></li><li><code>${\#name[index]}</code>：返回<strong>数组name的index处的<code>元素长度</code></strong></li><li><code>name[index]=xyz</code>：<strong>数组name的index处的元素重新<code>赋值</code></strong></li></ul><div class="note info"><p>上面的<code>${\#name[@]}</code>中对<code>#</code>做了转义处理，不然博客可能报错，参考<a href="https://github.com/hexojs/hexo/issues/2904" target="_blank" rel="noopener">github issue</a>，正常情况下使用时不用加<code>\</code>进行转义。</p></div><hr><h3 id="正则匹配替换"><a href="#正则匹配替换" class="headerlink" title="${} 正则匹配替换"></a>${} 正则匹配替换</h3><ul><li><code>${parameter#word}</code>、<code>${parameter##word}</code>：<strong>从头开始</strong>扫描word(pattern)，将匹配word(pattern)的字符过滤掉，<code>#</code>为<strong>最短</strong>匹配，<code>##</code>为<strong>最长</strong>匹配</li><li><code>${parameter%word}</code>、<code>${parameter%%word}</code>：<strong>从尾开始</strong>扫描word(pattern)，将匹配word(pattern)的字符过滤掉，<code>%</code>为<strong>最短</strong>匹配，<code>%%</code>为<strong>最长</strong>匹配</li><li><code>${parameter/pattern/string}</code>、<code>${parameter//pattern/string}</code>：使用string替换pattern，<code>/</code>表示<strong>只替换一次</strong>；<code>//</code>表示<strong>全部替换</strong></li><li><code>${\#parameter}</code>：获取变量长度</li></ul><div class="note info"><p>上述的<code>parameter</code>都是可以不用引用的，因为<code>${var}</code>本来就和<code>$var</code>是一个意思</p></div><hr><h2 id="得到脚本变量"><a href="#得到脚本变量" class="headerlink" title="$* 得到脚本变量"></a>$* 得到脚本变量</h2><p><code>$*</code>引用script的执行引用变量，引用参数的算法与一般指令相同，<strong>script本身为0</strong>，其后第一个为1，然后依此类推。引用变量的代表方式如下：<code>$0</code>, <code>$1</code>, <code>$2</code>, <code>$3</code>, <code>${10}</code>, <code>${11}</code>，注意个位数的，可直接使用数字，但<strong>两位数以上，则必须使用 {} 符号来括住</strong>。</p><p><code>$*</code> 则是代表<strong>所有引用变量</strong>的符号，使用时得视情况加上双引号，如<code>echo &quot;$*&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash example.sh var1 var2 var3</span><br><span class="line"><span class="comment"># $0是example.sh、$1是var1、$2是var2、$3是var3</span></span><br></pre></td></tr></table></figure><hr><h2 id="得到脚本变量-1"><a href="#得到脚本变量-1" class="headerlink" title="$@ 得到脚本变量"></a>$@ 得到脚本变量</h2><ul><li><code>$*</code> 和 <code>$@</code> 都表示传递给函数或脚本的<strong>所有参数</strong>，<strong>不被双引号(“ “)包含时</strong>，都以<code>&quot;$1&quot;</code> <code>&quot;$2&quot;</code> … <code>&quot;$n&quot;</code> 的形式输出所有参数</li><li>但是<strong>当它们被双引号(“ “)包含时</strong>，<code>&quot;$*&quot;</code> 会将<strong>所有的参数作为一个整体</strong>，以<code>&quot;$1 $2 … $n&quot;</code>的形式输出所有参数；<code>&quot;$@&quot;</code> 会将各个参数分开，以<code>&quot;$1&quot;</code> <code>&quot;$2&quot;</code> … <code>&quot;$n&quot;</code> 的形式输出所有参数</li><li>也就是说<code>$@</code>不管有没有被双引号包围，其输出结果<strong>都是单个的变量形式</strong>，而<code>$*</code>在<strong>不被双引号</strong>包围时输出<strong>单个变量的形式</strong>，<strong>被双引号包围</strong>时，所有的参数<strong>以整体的形式输出</strong></li></ul><hr><h2 id="变量总数"><a href="#变量总数" class="headerlink" title="$# 变量总数"></a>$# 变量总数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出变量总数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$#</span>"</span></span><br></pre></td></tr></table></figure><hr><h2 id="与declare-i-整数运算"><a href="#与declare-i-整数运算" class="headerlink" title="$(())与declare -i 整数运算"></a>$(())与declare -i 整数运算</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> -i total=<span class="variable">$firstnu</span>*<span class="variable">$secnu</span></span><br><span class="line">total=$((<span class="variable">$firstnu</span>*<span class="variable">$secnu</span>))</span><br></pre></td></tr></table></figure><p>区别就是小方括号内可以加上空格符，也是合法的写法，而declare -i 不可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line"><span class="built_in">declare</span> -i total=2*3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不正确的写法（加了空格），total=2* 3任何一处存在空格都不可以</span></span><br><span class="line"><span class="built_in">declare</span> -i total=2* 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 换用$(())，注意等号和计算公式之间不能存在空格，不然也会报错</span></span><br><span class="line">total=$((2*3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># $(())内的变量可以直接使用变量名称，也可以通过引用的方式获取</span></span><br><span class="line">a=5;b=7;c=2</span><br><span class="line"><span class="built_in">echo</span> $((a+b*c))</span><br><span class="line"><span class="built_in">echo</span> $((<span class="variable">$a</span>+<span class="variable">$b</span>*<span class="variable">$c</span>))</span><br></pre></td></tr></table></figure><p><code>declare -i</code>加空格报错：</p><blockquote><p>bash: declare: 2<em>: syntax error: operand expected (error token is “</em>“)</p></blockquote><p><code>$(())</code>在等号左右加空格报错：</p><blockquote><p>bash: 6: command not found</p></blockquote><p><strong><code>$(())</code>进制转化：将其他进制转成十进制数显示出来</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># N为进制，xx为该进制下某个数值，命令执行后可以得到该进制数转成十进制后的值</span></span><br><span class="line"><span class="built_in">echo</span> $((N<span class="comment">#xx))</span></span><br></pre></td></tr></table></figure><hr><h2 id="执行计算"><a href="#执行计算" class="headerlink" title="((  )) 执行计算"></a>(( )) 执行计算</h2><p>和linux<code>let</code>指令相似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=5;b=7</span><br><span class="line">((a--));<span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=0;i&lt;5;i++));<span class="keyword">do</span> <span class="built_in">echo</span>  <span class="variable">$i</span>;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><hr><h2 id="指令群组"><a href="#指令群组" class="headerlink" title="(  ) 指令群组"></a>( ) 指令群组</h2><p>用括号将一串连续指令括起来，这被称为指令群组</p><p>指令群组有一个特性，shell会以产生subshell来执行这组指令，因此，在<strong>指令群组所定义的变量，仅作用于指令群组本身</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>=<span class="string">"test"</span></span><br><span class="line">(<span class="built_in">cd</span> ~ ; <span class="built_in">test</span>=`<span class="built_in">pwd</span>` ;<span class="built_in">echo</span> <span class="variable">$test</span>);<span class="built_in">echo</span> <span class="variable">$test</span></span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p>/home/usr<br>test</p></blockquote><p><strong><code>( )</code>也可被用于数组的声明中：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array=(element1 element2 element3)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="大括号"><a href="#大括号" class="headerlink" title="{ } 大括号"></a>{ } 大括号</h2><h3 id="作为代码块"><a href="#作为代码块" class="headerlink" title="作为代码块"></a>作为代码块</h3><p><strong>代码块</strong>，又被称为内部组，这个结构事实上创建了一个<strong>匿名函数</strong>。与上面小括号中的指令群组不同，花括号内的命令不会新开一个子shell运行，即<strong>脚本余下部分仍可使用括号内变量</strong>，因此，这样写 script也是相当好的一件事。尤其对<em>输出输入的重导向</em>上，这个做法可<strong>精简 script 的复杂度</strong>。括号内的<strong>命令间用分号隔开</strong>，<strong>最后一个也必须有分号</strong>。<strong><code>{}</code>的第一个命令和左括号之间必须要有一个空格</strong>。</p><ul><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个命令和左括号之间没有空格</span></span><br><span class="line">&#123;<span class="built_in">cd</span> ~ ; <span class="built_in">test</span>=`<span class="built_in">pwd</span>` ;<span class="built_in">echo</span> <span class="variable">$test</span>&#125;;<span class="built_in">echo</span> <span class="variable">$test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一个命令没有分号</span></span><br><span class="line">&#123; <span class="built_in">cd</span> ~ ; <span class="built_in">test</span>=`<span class="built_in">pwd</span>` ;<span class="built_in">echo</span> <span class="variable">$test</span>&#125;;<span class="built_in">echo</span> <span class="variable">$test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确用法</span></span><br><span class="line">&#123; <span class="built_in">cd</span> ~ ; <span class="built_in">test</span>=`<span class="built_in">pwd</span>` ;<span class="built_in">echo</span> <span class="variable">$test</span>;&#125;;<span class="built_in">echo</span> <span class="variable">$test</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>第一个命令和左括号之间没有空格</strong>报错：</p><blockquote><p>bash: {cd: command not found<br>/home/user/test}<br>/home/user/test</p></blockquote><p><strong>最后一个命令没有分号</strong>报错：</p><blockquote><p>> ^C</p></blockquote><p>正确输出：</p><blockquote><p>/home/user<br>/home/user</p></blockquote><h3 id="作为拓展"><a href="#作为拓展" class="headerlink" title="作为拓展"></a>作为拓展</h3><p>通配(globbing)将<strong>对花括号中的文件名做扩展</strong>。在大括号中，<strong>不允许有空白</strong>，<strong>除非</strong>这个空白被引用或转义。</p><ul><li>对大括号中的以逗号分割的<strong>文件列表进行拓展</strong>。如 <code>touch {a,b}.txt</code> 结果为<code>a.txt</code> <code>b.txt</code></li><li>对大括号中以点点<code>（..）</code>分割的<strong>顺序文件列表起拓展作用</strong>，如：<code>touch {a..d}.txt</code> 结果为<code>a.txt</code> <code>b.txt</code> <code>c.txt</code> <code>d.txt</code></li><li>对大括号中以点点<code>（..）</code>分割的<strong>顺序文件列表起拓展作用</strong>，如 <code>for i in {1..2};do echo $i;done</code> 结果为<code>1</code> <code>2</code></li></ul><h3 id="进行组合"><a href="#进行组合" class="headerlink" title="进行组合"></a>进行组合</h3><p>大括号<code>{}</code>里面的内容以<strong>逗号分隔</strong>，两个或多个大括号内的内容进行组合。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3x3的组合，中间的短横线是分割线，可以自定义</span></span><br><span class="line">mkdir &#123;userA,userB,userC&#125;-&#123;home,bin,data&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行嵌套使用</span></span><br><span class="line">chown root /usr/&#123;ucb/&#123;ex,edit&#125;,lib/&#123;ex?.?*,how_ex&#125;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="中括号"><a href="#中括号" class="headerlink" title="[ ] 中括号"></a>[ ] 中括号</h2><ul><li>在<strong>通配符和正则表达式</strong>中<code>[]</code>代表一定有一个在中括号内的字符，例如<code>[abcd]</code>代表一定有一个字符，可能是a、b、c、d这四个任何一个，<code>[num1-num2]</code>表示范围、<code>[^]</code>表示非</li><li><strong>流程控制</strong>中，扮演括住判断式的作用，<code>[]</code>中可用的比较运算符只有<code>==</code>和<code>!=</code>，两者<strong>都是用于字符串比较的</strong>，<strong>不可用于整数比较</strong>，<strong>整数比较只能使用<code>-eq</code>，<code>-gt</code>这种形式</strong>。无论是字符串比较还是整数比较<strong>都不支持大于号小于号</strong>。如果实在想用，对于字符串比较可以使用<strong>转义形式</strong>，如果比较<code>&quot;ab&quot;</code>和<code>&quot;bc&quot;</code>：<code>[ ab &lt; bc ]</code>，结果为真，也就是返回状态为0。<strong><code>[ ]</code>中的逻辑与和逻辑或使用-a 和-o 表示</strong></li><li>在一个array结构的上下文中，中括号用来引用数组的索引</li></ul><hr><h2 id="双中括号"><a href="#双中括号" class="headerlink" title="[[  ]] 双中括号"></a>[[ ]] 双中括号</h2><ul><li>这组符号与先前的 <code>[]</code> 符号，基本上作用相同，但是<code>&amp;&amp;</code>、<code>||</code>、<code>&lt;</code>和<code>&gt;</code> 操作符能够正常存在于<code>[[ ]]</code>条件判断结构中，但是如果出现在<code>[ ]</code>结构中的话，会报错。</li><li><strong>支持字符串的模式匹配</strong>，使用<code>=~</code>操作符时甚至支持shell的<strong>正则表达式</strong>，字符串比较时可以把右边的作为一个模式，而不仅仅是一个字符串，比如<code>[[ hello == hell? ]]</code>，结果为真。<strong><code>[[ ]]</code>中匹配字符串或通配符，不需要引号</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># [[ 2\&lt;3 ]] &amp;&amp; echo true || false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">[root@localhost ~]<span class="comment"># [[ 2 -lt 3 ]] &amp;&amp; echo true || false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">[root@localhost ~]<span class="comment"># [[ 2 \&lt; 3 ]] &amp;&amp; echo true || false</span></span><br><span class="line">-bash: 期待二元条件运算符</span><br><span class="line">-bash: `\&lt;<span class="string">' 附近有语法错误，这是因为空格的原因</span></span><br><span class="line"><span class="string">[root@localhost ~]# [ 2 \&lt; 3 ] &amp;&amp; echo true || false</span></span><br><span class="line"><span class="string">true</span></span><br><span class="line"><span class="string">[root@localhost ~]# [ 2 &lt; 3 ] &amp;&amp; echo true || false</span></span><br><span class="line"><span class="string">-bash: 3: 没有那个文件或目录</span></span><br></pre></td></tr></table></figure><hr><h2 id="逻辑符号"><a href="#逻辑符号" class="headerlink" title="|| 逻辑符号"></a>|| 逻辑符号</h2><p>在中括号中<code>[]</code>代表 <code>or</code> 逻辑的符号</p><p>在命令行中：<br><code>cmd1||cmd2</code><br>若<strong>cmd1执行完毕且正确执行($?=0)</strong>，则cmd2<strong>不执行</strong><br>若<strong>cmd1执行完毕且为错误($?≠0)</strong>，则开始<strong>执行cmd2</strong></p><hr><h2 id="amp-amp-逻辑符号"><a href="#amp-amp-逻辑符号" class="headerlink" title="&amp;&amp; 逻辑符号"></a>&amp;&amp; 逻辑符号</h2><p>在中括号中<code>[]</code>代表 <code>and</code> 逻辑的符号</p><p>在命令行中如下:<br><code>cmd1&amp;&amp;cmd2</code><br>若<strong>cmd1执行完毕且正确执行（$?=0）</strong>,则<strong>开始执行cmd2</strong><br>若<strong>cmd1执行完毕且为错误（$?≠0）</strong>，则<strong>cmd2不执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果./symbol/abc目录不存在则创建这个目录，成功后在目录下创建hehe文件</span></span><br><span class="line">ls ./symbol/abc || mkdir  ./symbol/abc &amp;&amp; touch ./symbol/abc/hehe</span><br></pre></td></tr></table></figure><blockquote><p>目录不存在，ls的报错信息<br>ls: cannot access ./symbol/abc: No such file or directory</p></blockquote><hr><h2 id="lt-…-gt-单字边界"><a href="#lt-…-gt-单字边界" class="headerlink" title="\&lt;…\&gt; 单字边界"></a>\&lt;…\&gt; 单字边界</h2><p>这组符号在规则表达式中，被定义为”边界”的意思。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除能完整匹配This这个单词的行</span></span><br><span class="line">sed <span class="string">'/\&lt;This\&gt;/d'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="文件操作符合输出-输入重定向"><a href="#文件操作符合输出-输入重定向" class="headerlink" title="文件操作符合输出/输入重定向"></a>文件操作符合输出/输入重定向</h2><ul><li><code>&gt;</code>：表示重定向</li><li><code>&amp;</code>：表示等同于的意思</li><li>文件描述符是和文件的输入、输出相关联的非负整数，Linux内核（kernel）利用文件描述符（file descriptor）来访问文件。打开现存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。常见的文件描述符是stdin、stdout和stderr。</li></ul><p><strong>常用的文件描述符如下：</strong></p><table><thead><tr><th>文件描述符</th><th>名称</th><th>常用缩写</th><th>默认值</th></tr></thead><tbody><tr><td>0</td><td>标准输入</td><td>stdin</td><td>键盘</td></tr><tr><td>1</td><td>标准输出</td><td>stdout</td><td>屏幕</td></tr><tr><td>2</td><td>标准错误输出</td><td>stderr</td><td>屏幕</td></tr></tbody></table><p><strong>在简单地用<code>&lt;</code>或<code>&gt;</code>时，相当于使用 <code>0&lt;</code> 或 <code>1&gt;</code>，注意文件描述符和重定向符号之间不能存在空格，同时也可以将<code>&gt;</code>改为<code>&gt;&gt;</code>追加而不是覆盖文本信息</strong></p><ul><li><code>cmd &gt; file</code>等同于<code>cmd 1&gt; file</code>：把cmd命令的<strong>输出重定向到文件file中</strong>，如果file已经存在，则<strong>覆盖原有文件</strong></li><li><code>cmd &gt;&gt; file</code>等同于<code>cmd 1&gt;&gt; file</code>：把cmd命令的<strong>输出重定向到文件file中</strong>，如果file已经存在，则把信息<strong>加在原有文件后面</strong></li><li><code>cmd &lt; file</code>等同于<code>cmd 0&lt; file</code>：使cmd命令从<strong>file</strong>读入，<strong>必须是文件</strong>，不能是字符</li><li><code>cmd &lt;&lt; text</code>等同于<code>cmd 0&lt;&lt; text</code>：从命令行读取输入，直到一个与text字符相同的行结束</li><li><code>cmd 2&gt; file</code>：把cmd命令的<strong>标准错误输出重定向到文件file中</strong>，如果file已经存在，则<strong>覆盖原有文件</strong></li><li><code>cmd 2&gt;&gt; file</code>：把cmd命令的<strong>标准错误输出重定向到文件file中</strong>，如果file已经存在，则把信息<strong>加在原有文件后面</strong></li><li><code>cmd &gt;&amp;n</code>等同于<code>cmd 1&gt;&amp;n</code>：把输出重定向到文件描述符n，通过对<code>&amp;</code>的解读：标准输出的重定向等同于文件描述符n</li><li><code>cmd m&gt;&amp;n</code> ：把输出到文件符m的信息重定向到文件描述符n</li></ul><p><strong>从命令行读取输入：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; wang &gt; haha.txt</span><br></pre></td></tr></table></figure><p></p><p>从命令行得到输入，直到出现<code>wang</code>为止</p><blockquote><p><code>cat &lt;&lt; wang &gt;haha.txt</code><br>> test<br>> test2<br>> wang</p></blockquote><ul><li><code>cmd &lt;&lt;&lt; word</code>：将word(字符)，注意不是上面的file读入</li></ul><p><strong>标准错误输出：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># test.file不存在，没有任何错误提示，正常运行</span></span><br><span class="line">cat test.file 2&gt; out.txt  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 与上面的方法结果相同，错误的信息都被输入到了out.txt中</span></span><br><span class="line">cat test.file &amp;&gt; out.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将错误输出丢弃到/dev/null中，/dev/null是一个特殊的设备文件，这个文件接受到任何数据都会被丢系，通常被称为位桶、黑洞</span></span><br><span class="line">cat test.file  2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将标准输出重定向大list.txt文件中，标准错误输出重定向到list.err文件中</span></span><br><span class="line">cat test.file  1&gt; list.txt   2&gt; list.err</span><br></pre></td></tr></table></figure><p><strong>将标准错误stderr与stdout一同重定向到test.log文件:</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将标准输出重定向到test.log中，然后文件描述符2（标准错误输出）的重定向等同于文件描述符1（标准输出）</span></span><br><span class="line">./test.sh &gt;test.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>文件描述符支持自定义，<a href="http://man.linuxde.net/shell-script/shell-2" target="_blank" rel="noopener">参考文章</a></p></div><hr><p><br></p><h2 id="实战总结："><a href="#实战总结：" class="headerlink" title="实战总结："></a>实战总结：</h2><h3 id="得到数字用于循环的方法汇总"><a href="#得到数字用于循环的方法汇总" class="headerlink" title="得到数字用于循环的方法汇总"></a>得到数字用于循环的方法汇总</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 5`;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span> ;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 5);<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span> ;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;6;i++));<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span> ;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..5&#125; ;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span> ;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://blog.chinaunix.net/uid-16946891-id-5088144.html" target="_blank" rel="noopener">linux 特殊符号大全</a></li><li><a href="https://www.cnblogs.com/dirt2/p/5991033.html" target="_blank" rel="noopener">Linux命令中特殊符号，排版更好看</a></li><li><a href="https://www.jianshu.com/p/986e88819441" target="_blank" rel="noopener">Linux中的特殊符号及含义</a></li><li><a href="http://www.178linux.com/35067" target="_blank" rel="noopener">linux中特殊符号用法</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Linux常见特殊符号作用，包括&lt;code&gt;#&lt;/code&gt;、&lt;code&gt;~&lt;/code&gt;、&lt;code&gt;~+&lt;/code&gt;、&lt;code&gt;~-&lt;/code&gt;、&lt;code&gt;;&lt;/code&gt;、&lt;code&gt;;;&lt;/code&gt;、&lt;code&gt;.&lt;/code&gt;、&lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;、&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;、&lt;code&gt;`&lt;/code&gt;、&lt;code&gt;,&lt;/code&gt;、&lt;code&gt;/&lt;/code&gt;、&lt;code&gt;\&lt;/code&gt;、&lt;code&gt;|&lt;/code&gt;、&lt;code&gt;!&lt;/code&gt;、&lt;code&gt;:&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;**&lt;/code&gt;、&lt;code&gt;$&lt;/code&gt;、&lt;code&gt;$$&lt;/code&gt;、&lt;code&gt;?&lt;/code&gt;、&lt;code&gt;${}&lt;/code&gt;、&lt;code&gt;$*&lt;/code&gt;、&lt;code&gt;$@&lt;/code&gt;、&lt;code&gt;$#&lt;/code&gt;、&lt;code&gt;$(())&lt;/code&gt;、&lt;code&gt;(())&lt;/code&gt;、&lt;code&gt;()&lt;/code&gt;、&lt;code&gt;{}&lt;/code&gt;、&lt;code&gt;[]&lt;/code&gt;、&lt;code&gt;[[]]&lt;/code&gt;、&lt;code&gt;||&lt;/code&gt; 、&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;、&lt;code&gt;\&amp;lt;...\&amp;gt;&lt;/code&gt;和文件操作符以及重定向。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
    
      <category term="Linux特殊符号用法" scheme="http://showteeth.tech/tags/Linux%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E7%94%A8%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>每日总结和计划</title>
    <link href="http://showteeth.tech/posts/51961.html"/>
    <id>http://showteeth.tech/posts/51961.html</id>
    <published>2019-02-24T13:20:17.000Z</published>
    <updated>2019-03-01T08:57:32.014Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>2019-2-24开始的每日学习总结与计划</p></div><a id="more"></a><style type="text/css">.tg{border-collapse:collapse;border-spacing:0;border-color:#999}.tg td{font-family:Arial,sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#999;color:#444;background-color:#f7fdfa}.tg th{font-family:Arial,sans-serif;font-size:14px;font-weight:400;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#999;color:#fff;background-color:#26ade4}.tg .tg-phtq{background-color:#d2e4fc;border-color:inherit;text-align:left;vertical-align:top}.tg .tg-hmp3{background-color:#d2e4fc;text-align:left;vertical-align:top}.tg .tg-baqh{text-align:center;vertical-align:top}.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}.tg .tg-0lax{text-align:left;vertical-align:top}</style><h2 id="2019-2-24"><a href="#2019-2-24" class="headerlink" title="2019-2-24"></a>2019-2-24</h2><h3 id="今日学习完成情况"><a href="#今日学习完成情况" class="headerlink" title="今日学习完成情况"></a>今日学习完成情况</h3><table class="tg"><tr><th class="tg-c3ow" width="10%">类别</th><th class="tg-c3ow" width="35%">学习内容</th><th class="tg-c3ow" width="45%">大致描述</th><th class="tg-baqh" width="10%">大概用时</th></tr><tr><td class="tg-phtq"><i class="fa fa-check-square"></i> Linux</td><td class="tg-phtq">常用基本命令-sed</td><td class="tg-phtq">学习了基本语法、掌握了选项i、n、e、f以及命令s、p、g</td><td class="tg-hmp3">2小时</td></tr><tr><td class="tg-0pky"><i class="fa fa-square"></i> Python</td><td class="tg-0pky"></td><td class="tg-0pky"></td><td class="tg-0lax"></td></tr><tr><td class="tg-phtq"><i class="fa fa-square"></i> 机器学习</td><td class="tg-phtq"></td><td class="tg-phtq"></td><td class="tg-hmp3"></td></tr><tr><td class="tg-0pky"><i class="fa fa-check-square"></i> 其他内容</td><td class="tg-0pky">markdown</td><td class="tg-0pky">完成了markdown基本语法的学习</td><td class="tg-0lax">3个小时</td></tr></table><div class="note success"><p>今日学习情况总结：首先是学习了markdown基本语法，收获了很多，比如html块元素是必须要进行留空白行的、有序列表前的数字不关键、创建表格以及进行相应的优化（还不够完善）等新内容；也开始学习了linux基本命令sed，对其使用有了基本的了解，明天还要接着学习！</p></div><hr><h3 id="明日学习哪些内容"><a href="#明日学习哪些内容" class="headerlink" title="明日学习哪些内容"></a>明日学习哪些内容</h3><p><strong>明日学习计划总览：</strong></p><div class="note info"><ul><li>markdown表格的优化（宽度调整）</li><li>shell中特殊符号的学习</li><li>sed命令的学习</li></ul></div><hr><p><br></p><h2 id="2019-2-25"><a href="#2019-2-25" class="headerlink" title="2019-2-25"></a>2019-2-25</h2><h3 id="今日学习完成情况-1"><a href="#今日学习完成情况-1" class="headerlink" title="今日学习完成情况"></a>今日学习完成情况</h3><table class="tg"><tr><th class="tg-c3ow" width="10%">类别</th><th class="tg-c3ow" width="35%">学习内容</th><th class="tg-c3ow" width="45%">大致描述</th><th class="tg-baqh" width="10%">大概用时</th></tr><tr><td class="tg-phtq"><i class="fa fa-check-square"></i> Linux</td><td class="tg-phtq">常用基本命令-sed</td><td class="tg-phtq">完成了sed的学习</td><td class="tg-hmp3">大概3个小时</td></tr><tr><td class="tg-0pky"><i class="fa fa-square"></i> Python</td><td class="tg-0pky"></td><td class="tg-0pky"></td><td class="tg-0lax"></td></tr><tr><td class="tg-phtq"><i class="fa fa-square"></i> 机器学习</td><td class="tg-phtq"></td><td class="tg-phtq"></td><td class="tg-hmp3"></td></tr><tr><td class="tg-0pky"><i class="fa fa-square"></i> 其他内容</td><td class="tg-0pky"></td><td class="tg-0pky"></td><td class="tg-0lax"></td></tr></table><div class="note success"><p>今日学习情况总结：今天主要是完成了sed命令的学习，学习过程中发现sed和之前学的其他命令如awk、grep等有很多相似之处，有了之前的基础学起来更加容易理解，果然是学的越多学得越快！！！通过对sed命令的学习，在以后处理文本时就又增加了一个非常有力的工具！</p></div><p>每日学习之后不要忘了：<br><i class="fa fa-check-square"></i> 修改todo list<br><i class="fa fa-check-square"></i> 修改对应文章中的链接<br><i class="fa fa-check-square"></i> 在前一天对应的学习任务上画删除线</p><hr><h3 id="明日学习哪些内容-1"><a href="#明日学习哪些内容-1" class="headerlink" title="明日学习哪些内容"></a>明日学习哪些内容</h3><p><strong>明日学习计划总览：</strong></p><div class="note info"><ul><li><del>shell中特殊符号的处理</del></li><li><del>markdown表格的优化（宽度调整）</del>~</li><li>sort排序命令</li></ul></div><hr><p><br></p><h2 id="2019-2-26"><a href="#2019-2-26" class="headerlink" title="2019-2-26"></a>2019-2-26</h2><h3 id="今日学习完成情况-2"><a href="#今日学习完成情况-2" class="headerlink" title="今日学习完成情况"></a>今日学习完成情况</h3><table class="tg"><tr><th class="tg-c3ow" width="10%">类别</th><th class="tg-c3ow" width="35%">学习内容</th><th class="tg-c3ow" width="45%">大致描述</th><th class="tg-baqh" width="10%">大概用时</th></tr><tr><td class="tg-phtq"><i class="fa fa-check-square"></i> Linux</td><td class="tg-phtq">其他一些常用内容总结</td><td class="tg-phtq">Linux中特殊符号用法</td><td class="tg-hmp3">大概4个小时</td></tr><tr><td class="tg-0pky"><i class="fa fa-square"></i> Python</td><td class="tg-0pky"></td><td class="tg-0pky"></td><td class="tg-0lax"></td></tr><tr><td class="tg-phtq"><i class="fa fa-square"></i> 机器学习</td><td class="tg-phtq"></td><td class="tg-phtq"></td><td class="tg-hmp3"></td></tr><tr><td class="tg-0pky"><i class="fa fa-check-square"></i> 其他内容</td><td class="tg-0pky">markdown基本语法</td><td class="tg-0pky">表格优化-单元格宽度自定义</td><td class="tg-0lax">大概30分钟</td></tr></table><div class="note success"><p>今日学习情况总结：主要学习和总结了linux中很多特殊的符号的常见用法，加强了对前面学习知识的理解与认知，如sed命令中出现变量引用需要将单引号修改为双引号在这里就找到了答案，同时这也是普适的用法，因为<strong>单引号防止任何变量替换</strong>，而<strong>双引号恰好可以允许变量替换</strong>，同时还有很多提高脚本效率的知识，并且觉得这部分内容比较杂（需要不断更新和回顾），但是很重要，如果很多符号的含义不清楚，后面学习其他命令很容易迷糊和犯错。</p></div><p>每日学习之后不要忘了：<br><i class="fa fa-check-square"></i> 修改todo list<br><i class="fa fa-check-square"></i> 修改对应文章中的链接<br><i class="fa fa-check-square"></i> 在前一天对应的学习任务上画删除线</p><hr><h3 id="明日学习哪些内容-2"><a href="#明日学习哪些内容-2" class="headerlink" title="明日学习哪些内容"></a>明日学习哪些内容</h3><p><strong>明日学习计划总览：</strong></p><div class="note info"><ul><li><del>sort排序命令</del></li><li><del>整理字符串截取和浮点计算并保留小数的方法</del></li></ul></div><hr><p><br></p><h2 id="2019-2-27"><a href="#2019-2-27" class="headerlink" title="2019-2-27"></a>2019-2-27</h2><h3 id="今日学习完成情况-3"><a href="#今日学习完成情况-3" class="headerlink" title="今日学习完成情况"></a>今日学习完成情况</h3><table class="tg"><tr><th class="tg-c3ow" width="10%">类别</th><th class="tg-c3ow" width="35%">学习内容</th><th class="tg-c3ow" width="45%">大致描述</th><th class="tg-baqh" width="10%">大概用时</th></tr><tr><td class="tg-phtq"><i class="fa fa-check-square"></i> Linux</td><td class="tg-phtq">常用基本命令-sort、其他一些常用内容总结</td><td class="tg-phtq">完成了sort命令学习、字符串截取方法和浮点计算并保留小数</td><td class="tg-hmp3">大概5个小时</td></tr><tr><td class="tg-0pky"><i class="fa fa-square"></i> Python</td><td class="tg-0pky"></td><td class="tg-0pky"></td><td class="tg-0lax"></td></tr><tr><td class="tg-phtq"><i class="fa fa-square"></i> 机器学习</td><td class="tg-phtq"></td><td class="tg-phtq"></td><td class="tg-hmp3"></td></tr><tr><td class="tg-0pky"><i class="fa fa-square"></i> 其他内容</td><td class="tg-0pky"></td><td class="tg-0pky"></td><td class="tg-0lax"></td></tr></table><div class="note success"><p>今日学习情况总结：今天主要学习了sort命令的使用，对其中的-k参数进行了深刻的理解，同时学习到了一些实战用法也很实用！同时也温习和补充了之前学习的字符串截取方法和浮点计算并保留小数内容。</p></div><p>每日学习之后不要忘了：<br><i class="fa fa-check-square"></i> 修改todo list<br><i class="fa fa-check-square"></i> 修改对应文章中的链接<br><i class="fa fa-check-square"></i> 在前一天对应的学习任务上画删除线</p><hr><h3 id="明日学习哪些内容-3"><a href="#明日学习哪些内容-3" class="headerlink" title="明日学习哪些内容"></a>明日学习哪些内容</h3><p><strong>明日学习计划总览：</strong></p><div class="note info"><ul><li><del>uniq、join</del>、cut</li><li>单行命令嵌套</li><li>准备学习李航老师的机器学习内容</li><li><del>安装并使用pdf2htmlex</del></li></ul></div><hr><p><br></p><h2 id="2019-2-28"><a href="#2019-2-28" class="headerlink" title="2019-2-28"></a>2019-2-28</h2><h3 id="今日学习完成情况-4"><a href="#今日学习完成情况-4" class="headerlink" title="今日学习完成情况"></a>今日学习完成情况</h3><table class="tg"><tr><th class="tg-c3ow" width="10%">类别</th><th class="tg-c3ow" width="35%">学习内容</th><th class="tg-c3ow" width="45%">大致描述</th><th class="tg-baqh" width="10%">大概用时</th></tr><tr><td class="tg-phtq"><i class="fa fa-check-square"></i> Linux</td><td class="tg-phtq">常用基本命令</td><td class="tg-phtq">完成了join命令、uniq命令学习、开始了cut命令学习</td><td class="tg-hmp3">大概5个小时</td></tr><tr><td class="tg-0pky"><i class="fa fa-square"></i> Python</td><td class="tg-0pky"></td><td class="tg-0pky"></td><td class="tg-0lax"></td></tr><tr><td class="tg-phtq"><i class="fa fa-square"></i> 机器学习</td><td class="tg-phtq"></td><td class="tg-phtq"></td><td class="tg-hmp3"></td></tr><tr><td class="tg-0pky"><i class="fa fa-square"></i> 其他内容</td><td class="tg-0pky"></td><td class="tg-0pky"></td><td class="tg-0lax"></td></tr></table><div class="note success"><p>今日学习情况总结：今天主要学习了几个非常使用的命令，完成了uniq、join还有开始了大部分的cut命令学习，这些都是非常常用的命令，平常都有使用，但是掌握不够完善，这里系统的学习有助于后续应用同时也可以当做笔记查询。</p></div><p>每日学习之后不要忘了：<br><i class="fa fa-check-square"></i> 修改todo list<br><i class="fa fa-check-square"></i> 修改对应文章中的链接<br><i class="fa fa-check-square"></i> 在前一天对应的学习任务上画删除线</p><hr><h3 id="明日学习哪些内容-4"><a href="#明日学习哪些内容-4" class="headerlink" title="明日学习哪些内容"></a>明日学习哪些内容</h3><p><strong>明日学习计划总览：</strong></p><div class="note info"><ul><li><del>继续学习cut</del></li><li>单行命令嵌套</li><li>准备学习李航老师的机器学习内容</li><li>完成研究</li></ul></div><hr><p><br></p><h2 id="2019-3-1"><a href="#2019-3-1" class="headerlink" title="2019-3-1"></a>2019-3-1</h2><h3 id="今日学习完成情况-5"><a href="#今日学习完成情况-5" class="headerlink" title="今日学习完成情况"></a>今日学习完成情况</h3><table class="tg"><tr><th class="tg-c3ow" width="10%">类别</th><th class="tg-c3ow" width="35%">学习内容</th><th class="tg-c3ow" width="45%">大致描述</th><th class="tg-baqh" width="10%">大概用时</th></tr><tr><td class="tg-phtq"><i class="fa fa-check-square"></i> Linux</td><td class="tg-phtq">常用基本命令、其他一些常用内容总结</td><td class="tg-phtq">完成了cut命令学习、总结了位、字节、字符和编码、单行命令嵌套</td><td class="tg-hmp3">大概5个小时</td></tr><tr><td class="tg-0pky"><i class="fa fa-square"></i> Python</td><td class="tg-0pky"></td><td class="tg-0pky"></td><td class="tg-0lax"></td></tr><tr><td class="tg-phtq"><i class="fa fa-square"></i> 机器学习</td><td class="tg-phtq"></td><td class="tg-phtq"></td><td class="tg-hmp3"></td></tr><tr><td class="tg-0pky"><i class="fa fa-square"></i> 其他内容</td><td class="tg-0pky"></td><td class="tg-0pky"></td><td class="tg-0lax"></td></tr></table><div class="note success"><p>今日学习情况总结：</p></div><p>每日学习之后不要忘了：<br><i class="fa fa-check-square"></i> 修改todo list<br><i class="fa fa-check-square"></i> 修改对应文章中的链接<br><i class="fa fa-check-square"></i> 在前一天对应的学习任务上画删除线</p><hr><h3 id="明日学习哪些内容-5"><a href="#明日学习哪些内容-5" class="headerlink" title="明日学习哪些内容"></a>明日学习哪些内容</h3><p><strong>明日学习计划总览：</strong></p><div class="note info"><ul><li><del>继续学习cut</del></li><li><del>单行命令嵌套</del></li><li>准备学习李航老师的机器学习内容</li><li>完成研究</li></ul></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;2019-2-24开始的每日学习总结与计划&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="规划" scheme="http://showteeth.tech/categories/%E8%A7%84%E5%88%92/"/>
    
    
      <category term="每日总结和计划" scheme="http://showteeth.tech/tags/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93%E5%92%8C%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>markdown基础语法</title>
    <link href="http://showteeth.tech/posts/65136.html"/>
    <id>http://showteeth.tech/posts/65136.html</id>
    <published>2019-02-24T04:09:11.000Z</published>
    <updated>2019-02-27T12:27:53.785Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章总结markdown基础语法，便于后续查找和使用。<a href="http://showteeth.tech/posts/37746.html">另有一篇next-markdown技巧和模板</a>总结了博客写作中常用的markdown技巧和模板，有些并不是原生的markdown语法，但是写作效果很好看，需要的时候可以查阅这个。</p></div><a id="more"></a><h2 id="markdown特性"><a href="#markdown特性" class="headerlink" title="markdown特性"></a>markdown特性</h2><ul><li>Markdown 的目标是实现<strong>易读易写</strong></li><li><strong>兼容HTML</strong>，不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写，不需要额外标注这是 HTML 或是 Markdown，只要直接加标签就可以了，不过<em>有一些标签需要特殊注意</em></li><li><strong>特殊字符转换</strong>：特殊字符如HTML中需要特殊处理的字符<code>&lt;</code>和<code>&amp;</code>，在非代码单位内，markdown会将其自动转化为<code>&amp;lt;</code> 和 <code>&amp;amp;</code>这种实体的形式（虽然在markdown中看不到，但是实际上在生成html时markdown自动将其转化为上述实体的形式），但是在code 范围内，不论是行内还是区块， <code>&lt;</code>和 <code>&amp;</code> 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code。附上<a href="http://www.w3school.com.cn/html/html_entities.asp" target="_blank" rel="noopener">HTML 中有用的字符实体</a></li></ul><div class="note warning"><ul><li>在markdown使用HTML标签<mark>需要特殊注意的是 HTML 的区块元素</mark>，比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在<strong>前后加上空行</strong>与其它内容区隔开，还要求它们的<strong>开始标签与结尾标签不能用制表符或空格来缩进</strong>;Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上<em>不必要</em>的 <code>&lt;p&gt;</code> 标签</li><li>HTML 区块标签间的 Markdown 格式语法将<strong>不会被处理</strong>，如<code>&lt;p&gt;这是**一个**测试&lt;/p&gt;</code>中一个不会加粗显示</li><li>HTML 的行内标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用</li><li>与处在 HTML 区块标签间不同，<strong>Markdown 语法在 HTML 行内标签间是有效的</strong></li></ul></div><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h3><h4 id="换行和段落"><a href="#换行和段落" class="headerlink" title="换行和段落"></a>换行和段落</h4><p>在markdown中进行<strong>换行</strong>操作：一行<strong>文本末尾增加两个以上的空格然后回车</strong>，如果<strong>只使用回车，不添加或者没加够空格看上去两行的文字会变为一行</strong>。</p><p>markdown<strong>区分段落的关键</strong>是：这两行文字之间<strong>是否有空行</strong>，空行的定义是显示上看起来像是空的，便会被视为空行。比如，若某一行<strong>只包含空格和制表符，则该行也会被视为空行</strong>。如果这两行文字之间有空行，就代表这两行文字为两个段落，如果这两行文字之间没有空行，仅仅使用另个以上空格加回车进行换行，这两行文字仍旧是属于同一个段落。</p><div class="note info"><ul><li>得到空行的方法：在上一行<strong>文本末尾加上两个以上空格然后回车</strong>，<strong>再加上<code>&lt;br /&gt;</code>即可</strong></li><li>两个段落之间有一个空行就可以证明其为两个段落，再多的空行也不会在html中渲染（上述添加<code>&lt;br /&gt;</code>制造空行的方式除外，增加几个<code>&lt;br /&gt;</code>就会有几个空行）。</li></ul></div><hr><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>markdown依据<code>#</code>的数量，支持六级的标题，一个<code>#</code>代表一级标题，<strong>用于标题的<code>#</code>数目最多为6个</strong>，当数目<strong>大于6个时不再以标题的形式显现</strong>，如<code>####### 7</code>将直接显示为####### 7，而不是以标题的形式。<br><br><br>当然也可以选择闭合标题的<code>#</code>，在标题之后加上若干数目的<code>#</code>，标题的级别是依据标题之前的<code>#</code>数目决定，和之后的<code>#</code>数目无关。如<code># 1 ##########</code>还是代表的1级标题。</p><hr><h4 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h4><ul><li>markdown使用<code>&gt;</code>进行引用</li><li><strong>段落内多行一同进行区块引用</strong>可以在每一行之前都加上<code>&gt;</code>，也可以进行偷懒，在整个<strong>段落</strong>的第一行加上<code>&gt;</code>引用一整行</li><li>引用可以进行<strong>嵌套</strong>，如加两个&gt;&gt;三个&gt;&gt;&gt;</li></ul><blockquote><p>这是一句引用</p><blockquote><p>这也是一个引用</p><blockquote><p>当然，这个还是一个引用</p></blockquote></blockquote></blockquote><ul><li>使用blockquotes标签进行引用，可以修改文字颜色以及左边框颜色。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">style</span>=<span class="string">"color:red;border-left: 3px solid #F44336;"</span>&gt;</span>使用blockquotes标签进行引用<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><blockquote style="color:red;border-left:3px solid #f44336">使用blockquotes标签进行引用</blockquote><ul><li>引用的<strong>区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; #### 这是一个标题</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1.   这是第一行列表项</span><br><span class="line">&gt; 2.   这是第二行列表项</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">style</span>=<span class="string">"color:red;border-left: 3px solid #F44336;"</span>&gt;</span>使用blockquotes标签进行引用<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">&gt; **引用**结束</span><br></pre></td></tr></table></figure><hr><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>markdown支持<strong>有序列表</strong>和<strong>无序列表</strong>。</p><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>无序列表使用<strong>星号</strong>、<strong>加号</strong>或是<strong>减号</strong>作为列表标记。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></table></figure><p>也等同于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></table></figure><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>有序列表则使用<strong>数字接着一个英文句点</strong>作为列表标记。值得注意的是有序列表<mark>中英文句号前面的数字并不重要</mark>，也就是说<strong>可以是完全相同或者不连续的数字</strong>，这些都不会影响最终解析得到的html信息，<strong>得到的结果都是相同的</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">1.  McHale</span><br><span class="line">1.  Parish</span><br></pre></td></tr></table></figure><h5 id="多级列表"><a href="#多级列表" class="headerlink" title="多级列表"></a>多级列表</h5><p>多级列表的产生：先得到一级列表，然后使用<code>tab键</code>将后续的列表依次缩进即可得到多级列表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* this is a test </span><br><span class="line">  * this is a test </span><br><span class="line">    * this is a test</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><ul><li>this is a test<ul><li>this is a test<ul><li>this is a test</li></ul></li></ul></li></ul><h5 id="包含段落的列表"><a href="#包含段落的列表" class="headerlink" title="包含段落的列表"></a>包含段落的列表</h5><p>列表项目<strong>可以包含多个段落</strong>，每个项目下的段落都<strong>必须缩进 4 个空格或是 1 个制表符</strong>。</p><p>段落的<strong>每一行都可以进行缩进</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><ol><li><p>This is a list item with two paragraphs. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br>mi posuere lectus.</p><p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet<br>vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<br>sit amet velit.</p></li><li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p></li></ol><p>当然也支持<strong>只对段落首行进行缩进</strong>，和上面的段落每行都缩进结果是一样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You're</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></table></figure><h5 id="包含引用的列表"><a href="#包含引用的列表" class="headerlink" title="包含引用的列表"></a>包含引用的列表</h5><p>如果要在<strong>列表项目内放进引用</strong>，那 <code>&gt;</code> 就需要缩进：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><ul><li><p>A list item with a blockquote:</p><blockquote><p>This is a blockquote<br>inside a list item.</p></blockquote></li></ul><h5 id="包含代码块的列表"><a href="#包含代码块的列表" class="headerlink" title="包含代码块的列表"></a>包含代码块的列表</h5><p>如果要<strong>放代码块</strong>的话，该代码块就需要缩进两次，也<strong>就是 8 个空格或是 2 个制表符</strong>：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">代码写在这</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><div class="note warning"><ul><li>如果在<strong>行首出现数字-句点-空白</strong>，可能会误认为是有序列表，要避免这样的状况，你可以在句点前面加上<strong>反斜杠</strong>，如1986. What a great season.</li><li>标记后面最少有一个<strong>空格</strong>或<strong>制表符</strong></li><li><mark>必须和前后文本存在空行</mark>，不然列表可能<strong>不能正确解析</strong>以及后面的文本可能<strong>出现偏移</strong>。</li></ul></div><hr><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><h5 id="使用markdown原生的方式插入表格"><a href="#使用markdown原生的方式插入表格" class="headerlink" title="使用markdown原生的方式插入表格"></a>使用markdown原生的方式插入表格</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</span><br><span class="line">| ------ | ------ | ------ |</span><br><span class="line">| *短文本* | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><table><thead><tr><th>一个普通标题</th><th>一个普通标题</th><th>一个普通标题</th></tr></thead><tbody><tr><td><em>短文本</em></td><td>中等文本</td><td>稍微长一点的文本</td></tr><tr><td>稍微长一点的文本</td><td>短文本</td><td>中等文本</td></tr></tbody></table><div class="note warning"><ul><li>表格的语句<mark>上一行必须为空行</mark>，不然表格不生效;</li><li>内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略;</li><li>-的数量至少有一个;</li><li>|、-、:之间的多余空格会被忽略，不影响布局;</li><li>表格内容中可以套用其他用法，如加粗、斜体等；</li><li><mark>直接在markdown原生表格之前添加html样式（style）也可以对表格样式进行修改</mark>。</li></ul></div><h5 id="设置表格宽度自适应"><a href="#设置表格宽度自适应" class="headerlink" title="设置表格宽度自适应"></a>设置表格宽度自适应</h5><p>解决了按照<strong>第一列表头宽度进行自适应</strong>的问题：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">table th:first-of-type &#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>为每一列单独设置宽度：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">10%</span>&gt;</span>第一列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">35%</span>&gt;</span>第二列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">45%</span>&gt;</span>第三列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">10%</span>&gt;</span>第四列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>第一列占整个表格宽度的10%、第二列占35%、第三列占45%、第四列占10%。</p><div class="note warning"><ul><li><code>th:first-of-type</code> 的意思是每个 <code>&lt;th&gt;</code> 为其父级的<strong>第一个元素</strong>，就是指第一列的表头，同理第二、三个使用 <code>th:nth-of-type(2)</code>、<code>th:nth-of-type(3)</code></li><li>修改表头的宽度表头对应的列的宽度也就得到了修改</li><li>这里有一篇关于markdown表格样式优化的<a href="https://www.tuicool.com/articles/mueEZjr" target="_blank" rel="noopener">文章</a>，包括<code>鼠标悬停变色</code>、<code>表格滚动条</code>、<code>隔行变色</code>、<code>表头不换行</code>和<code>首列不换行</code>等优化</li><li><strong>excel也能导出html</strong>，先在excel中创建表格，然后保存为html，最后复制其中的表格，<a href="https://blog.csdn.net/sunbocong/article/details/81033915" target="_blank" rel="noopener">参考文章</a></li></ul></div><h5 id="表格对齐问题"><a href="#表格对齐问题" class="headerlink" title="表格对齐问题"></a>表格对齐问题</h5><ul><li>-:表示内容和标题栏居右对齐；</li><li>:-表示内容和标题栏居左对齐；</li><li>:-:表示内容和标题栏居中对齐；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</span><br><span class="line">| :------ | :------: | ------: |</span><br><span class="line">| *短文本* | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><table><thead><tr><th style="text-align:left">一个普通标题</th><th style="text-align:center">一个普通标题</th><th style="text-align:right">一个普通标题</th></tr></thead><tbody><tr><td style="text-align:left"><em>短文本</em></td><td style="text-align:center">中等文本</td><td style="text-align:right">稍微长一点的文本</td></tr><tr><td style="text-align:left">稍微长一点的文本</td><td style="text-align:center">短文本</td><td style="text-align:right">中等文本</td></tr></tbody></table><h5 id="使用html插入表格"><a href="#使用html插入表格" class="headerlink" title="使用html插入表格"></a>使用html插入表格</h5><p>上述markdown原生的方法只能创建一些简单的表格，如果想创建复杂的表格，如<mark>合并单元格</mark>、<mark>调整表格颜色</mark>等就需要直接使用html进行创建表格。</p><p>实现合并单元格：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>项目1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>项目2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>项目3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>a1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>a2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>b1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>b2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>b3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>c2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>c3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>最终效果：</strong></p><table><br><tr><br><th>项目1</th><br><th>项目2</th><br><th>项目3</th><br></tr><br><tr><br><td>a1</td><br><td colspan="2">a2</td><br></tr><br><tr><br><td rowspan="2">b1</td><br><td>b2</td><br><td>b3</td><br></tr><br><tr><br><td>c2</td><br><td>c3</td><br></tr><br></table><div class="note info"><ul><li><code>table</code>标签：定义 HTML 表格</li><li><code>tr</code> 元素定义表格<code>行</code></li><li><code>th</code> 元素定义<code>表头</code></li><li><code>td</code> 元素定义表格<code>单元</code></li><li><code>td</code>标签下的<code>colspan（跨列-合并一行的多列）及rowspan（跨行-合并一列的多行）</code>属性进行单元格的合并。</li></ul></div><h5 id="使用html插入表格需要注意空行"><a href="#使用html插入表格需要注意空行" class="headerlink" title="使用html插入表格需要注意空行"></a>使用html插入表格需要注意空行</h5><p>markdown在处理上述的表格时会<strong>产生大量的空行</strong>，除非将整个表格写成一行，不然空行的书目和整个html代码占的行数相同，解决方法是加上<code>escape</code>标签，将整个table套起来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">escape</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>项目1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>项目2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>项目3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>a1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>a2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>b1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>b2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>b3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>c2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>c3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">escape</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><table><tr><th>项目1</th><th>项目2</th><th>项目3</th></tr><tr><td>a1</td><td colspan="2">a2</td></tr><tr><td rowspan="2">b1</td><td>b2</td><td>b3</td></tr><tr><td>c2</td><td>c3</td></tr></table><h5 id="偷懒方法之直接复制html代码"><a href="#偷懒方法之直接复制html代码" class="headerlink" title="偷懒方法之直接复制html代码"></a>偷懒方法之直接复制html代码</h5><p>从上面html代码可以看出来写着比较麻烦，为了解决这个问题，这里有一个专门生成<code>Latex</code>、<code>html</code>、<code>markdown</code>、<code>text</code>、<code>mediawiki</code>支持的表格源码的网站，只需要选取相应的内容即可，还可以<strong>调整表格颜色</strong>，生成相应的css样式。</p><a class="btn" href="https://3nice.cc/2018/10/01/markdowntable/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>生成表格源码的网站</a><hr><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>代码块有两种写法：使用反引号加代码语言种类，代码写完后面也跟三个相同的符号（这种方法最为常用）；第二种写法就是简单地缩进 4 个空格或是 1 个制表符就可以。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure><div class="note warning"><ul><li>需要和<strong>普通段落之间存在空行</strong></li><li><strong>最后的三个反引号之后不能存在空格</strong>，不然会出错</li></ul></div><hr><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>你可以在一行中用<mark>三个以上</mark>的<code>星号</code>、<code>减号</code>、<code>底线</code>来<strong>建立一个分隔线</strong>，<em>行内不能有其他东西</em>。你也<em>可以在星号或是减号中间插入空格</em>。下面每种写法都可以建立分隔线：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br><span class="line"></span><br><span class="line">_____</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><hr><hr><hr><hr><hr><hr><div class="note info"><p>使用带空格的<code>星号</code>、<code>减号</code>、<code>底线</code>建立空格线，空格线会粗一些。</p></div><hr><p><br></p><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>markdown支持两种形式的链接语法：<code>行内式</code>和<code>参考式</code>两种形式，一般行内式使用较为简单和普遍，所以这里就采用行内式的方式。</p><p>链接的使用形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[an example](http://example.com/ "Title")</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong><br><a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a></p><div class="note info"><ul><li>方括号内的文字（an example）表示链接作用的文字</li><li>圆括号内部第一个是链接地址</li><li>第二个是title：鼠标移到链接文字上显示的内容</li></ul></div><p>如果你是要链接到<strong>同样主机的资源，你可以使用相对路径</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">See my [About](/about/) page for details.</span><br></pre></td></tr></table></figure><p><mark>关于参考式链接:</mark></p><ul><li>参考式的链接其实重点不在于它比较好写，而是它比较好读</li><li>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断</li><li>具体关于参考是的讲解可以参考<a href="http://wow.kuapp.com/markdown/" target="_blank" rel="noopener">这篇文章</a>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google] [1] than from</span><br><span class="line">[Yahoo] [2] or [MSN] [3].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        "Google"</span><br><span class="line">  [2]: http://search.yahoo.com/  "Yahoo Search"</span><br><span class="line">  [3]: http://search.msn.com/    "MSN Search"</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong><br>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><hr><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><p>markdown使用星号<code>*</code>和底线<code>_</code>作为标记强调字词的符号，被<code>*</code>或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code>标签包围，显示出斜体的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是关于*斜体*的测试</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><p>这是关于<em>斜体</em>的测试</p><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5><p>markdown使用两个星号<code>*</code>和底线<code>_</code>作为标记强调字词的符号，被两个<code>*</code>或 <code>_</code> 包围的字词会被转成用 <code>&lt;strong&gt;</code>（加粗显示）包围，显示出加粗的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是关于**加粗**的测试</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><p>这是关于<strong>加粗</strong>的测试</p><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5><p>使用以上的斜体和加粗叠加可以实现斜体和加粗的效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是关于***斜体加粗***的测试</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><p>这是关于<strong><em>斜体</em></strong>的测试</p><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5><p>要加删除线的文字左右分别用<code>两个~~</code>号包起来，这个也可以叠加斜体以及加粗标记。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是关于~~删除线~~的测试</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><p>这是关于<del>删除线</del>的测试</p><div class="note info"><ul><li>星号<code>*</code>和底线<code>_</code>与被包围的文字之间不能有空格，不然星号<code>*</code>和底线<code>_</code>就会被当成普通的字符显示</li><li>如果想加入普通的星号<code>*</code>和底线<code>_</code>，你可以用反斜线，如</li></ul></div><hr><h4 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h4><p>行内插入代码，可以直接使用反引号（<code>`</code>）将代码包围起来即可。如<code>&lt;div&gt; &lt;/div&gt;</code>就是写成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span><br></pre></td></tr></table></figure><p><mark>行内代码中加入反引号：</mark>可以用<strong>多个反引号来开启和结束代码区段</strong>，同时起始和结束端都可以放入一个空白，<em>起始端后面一个，结束端前面一个</em>，这样你就可以<strong>在区段的一开始就插入反引号</strong>：如 A backtick-delimited string in a code span: <code>`foo`</code>、三个反引号就是写成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`` `foo` ``</span><br><span class="line"># 三个反引号在hexo博客中显示可能会出问题</span><br><span class="line">`` ``` ``</span><br></pre></td></tr></table></figure><hr><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><h5 id="使用markdown语法插入图片："><a href="#使用markdown语法插入图片：" class="headerlink" title="使用markdown语法插入图片："></a>使用markdown语法插入图片：</h5><p>使用markdown插入图片与插入链接类似，也有两种方式：<strong>行内式和参考式</strong>，这里讲解的主要为行内式。关于参考式的用法可以<em>参考链接参考式</em>的用法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![图片描述，相当于alt](http://pn9abh3rj.bkt.clouddn.com/test.png "Optional title，相当于title")</span><br><span class="line"><span class="comment">&lt;!-- 居中操作可以使用center标签将上述包裹 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">![图片描述，相当于alt](http://pn9abh3rj.bkt.clouddn.com/test.png "Optional title，相当于title")</span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><p><img src="http://pn9abh3rj.bkt.clouddn.com/test.png" alt="markdown_pic" title="使用markdown插入图片"></p><center><br><img src="http://pn9abh3rj.bkt.clouddn.com/test.png" alt="markdown_pic" title="使用markdown+center标签居中插入图片"><br></center><div class="note info"><p><code>Optional title</code> 是用来在鼠标移到图片上时显示的title</p></div><div class="note warning"><p>使用markdown插入图片的缺点：一般的宽和高等属性不好修改，各个编辑器支持的写法可能有区别</p></div><hr><h5 id="html代码插入图片"><a href="#html代码插入图片" class="headerlink" title="html代码插入图片"></a>html代码插入图片</h5><p><strong>针对使用markdown插入图片的缺点，使用html语句可以很好的解决</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用img标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pn9abh3rj.bkt.clouddn.com/test.png"</span> <span class="attr">width</span> = <span class="string">"300"</span> <span class="attr">height</span> = <span class="string">"200"</span> <span class="attr">alt</span>=<span class="string">"图片名称"</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用div标签包裹 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pn9abh3rj.bkt.clouddn.com/test.png"</span>  <span class="attr">title</span>=<span class="string">"使用html插入图片"</span>  <span class="attr">alt</span>=<span class="string">"图片名称"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><p><img src="http://pn9abh3rj.bkt.clouddn.com/test.png" width="300" height="200" alt="图片名称" title="使用html插入图片" align="center"></p><div align="center"><br><img src="http://pn9abh3rj.bkt.clouddn.com/test.png" title="使用html插入图片" alt="图片名称"><br></div><div class="note warning"><ul><li>不推荐使用这个img标签来进行对齐操作，容易和文本混在一起，居中的时候还好；</li><li>推荐使用div标签包裹img标签。</li></ul></div><hr><p><br></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>markdown支持以下这些符号前面<strong>加上反斜杠来帮助插入普通的符号</strong>：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="常见错误原因集锦："><a href="#常见错误原因集锦：" class="headerlink" title="常见错误原因集锦："></a>常见错误原因集锦：</h3><div class="note warning"><ul><li>html<strong>块级元素上下没有空格</strong>，块级元素是指 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签</li><li><strong>列表</strong>与前后内容之间没有空格</li><li><strong>列表</strong>内容和标记之间没有空格</li><li><strong>换行操作</strong>只回车没有在上一行文本末尾增加两个以上空格</li><li><strong>停止引用</strong>需要和下一行文本空行（另起一段），不然也会被引用进去</li><li><strong>代码</strong>最后的<code>`</code> <code></code>之后不能存在空格，不然会将后面的内容也写入代码内</li><li><strong>强调</strong>，不管是加粗还是斜体，<strong>标记<code>*</code>或`</strong><code>不能与文本之间存在距离**，不然会失效，标记会显示成标记本身，即</code>*<code>或</code>**`</li><li><strong>表格</strong>的语句<mark>上一行必须为空行</mark>，不然表格不生效</li></ul></div><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://3nice.cc/2018/10/01/markdowntable/" target="_blank" rel="noopener">markdown融合单元单元格问题</a></li><li><a href="http://www.tablesgenerator.com/text_tables" target="_blank" rel="noopener">Latex|html|markdown|text|mediawiki制作表格并得到相应源代码的利器</a></li><li><a href="http://wow.kuapp.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></li><li><a href="http://wow.kuapp.com/markdown/basic.html" target="_blank" rel="noopener">Markdown: Basics （快速入门）</a></li><li><a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">Markdown 基本语法</a></li><li><a href="https://github.com/guoyunsky/Markdown-Chinese-Demo" target="_blank" rel="noopener">Markdown-Chinese-Demo</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章总结markdown基础语法，便于后续查找和使用。&lt;a href=&quot;http://showteeth.tech/posts/37746.html&quot;&gt;另有一篇next-markdown技巧和模板&lt;/a&gt;总结了博客写作中常用的markdown技巧和模板，有些并不是原生的markdown语法，但是写作效果很好看，需要的时候可以查阅这个。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="其他内容学习" scheme="http://showteeth.tech/categories/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="markdown" scheme="http://showteeth.tech/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>sed-文本处理工具</title>
    <link href="http://showteeth.tech/posts/1752.html"/>
    <id>http://showteeth.tech/posts/1752.html</id>
    <published>2019-02-24T04:08:41.000Z</published>
    <updated>2019-03-01T03:37:04.806Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>sed处理文本，包括sed命令的基本格式、参数和命令说明、文本的替换、打印、删除、增加、插入以及其他常用的技巧（分组、传入参数、命令连用以及对文件进行读取和写入等）。</p></div><a id="more"></a><h2 id="sed简介"><a href="#sed简介" class="headerlink" title="sed简介"></a>sed简介</h2><p>sed是一种流编辑器，它是文本处理中非常中的工具，能够<strong>完美的配合正则表达式</strong>使用，功能不同凡响。处理时，把<strong>当前处理的行</strong>存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕，<strong>接着处理下一行，这样不断重复，直到文件末尾（和awk都是对文件和输入的每一行进行操作）</strong>。<strong>文件内容并没有改变</strong>，除非你使用重定向存储输出。</p><p>sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p><hr><h2 id="sed-用法"><a href="#sed-用法" class="headerlink" title="sed 用法"></a>sed 用法</h2><h3 id="sed-命令格式"><a href="#sed-命令格式" class="headerlink" title="sed 命令格式"></a>sed 命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Usage: </span><br><span class="line">sed [OPTION]... &#123;script-only-if-no-other-script&#125; [input-file]...</span><br><span class="line"></span><br><span class="line">sed [options] <span class="string">'command'</span> file(s)</span><br><span class="line">sed [options] -f scriptfile file(s)</span><br></pre></td></tr></table></figure><hr><h3 id="sed-options说明"><a href="#sed-options说明" class="headerlink" title="sed options说明"></a>sed options说明</h3><table><tr><th width="20%">参数</th><th width="20%">完整参数</th><th width="60%">说明</th></tr><tr><td>-e script</td><td>–expression=script</td><td>以选项中的指定的script来处理输入的文本文件，直接在命令行模式上进行sed动作编辑，此为默认选项</td></tr><tr><td>-f script</td><td>–files=script</td><td>以选项中的指定的script文件来处理输入的文本文件</td></tr><tr><td>-i</td><td>–in-place</td><td>直接在原位修改原文件</td></tr><tr><td>-n</td><td>–quiet –silent</td><td>仅显示script处理后的结果</td></tr><tr><td>-V</td><td>–version</td><td>显示版本信息</td></tr><tr><td>-h</td><td>–help</td><td>显示帮助</td></tr></table><hr><h3 id="sed-command说明"><a href="#sed-command说明" class="headerlink" title="sed command说明"></a>sed command说明</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>在当前行下面插入文本。</td></tr><tr><td>i</td><td>在当前行上面插入文本。</td></tr><tr><td>c</td><td>把选定的行改为新的文本。</td></tr><tr><td>d</td><td>删除，删除选择的行</td></tr><tr><td>D</td><td>删除模板块的第一行</td></tr><tr><td>s</td><td>替换指定字符</td></tr><tr><td>h</td><td>拷贝模板块的内容到内存中的缓冲区</td></tr><tr><td>H</td><td>追加模板块的内容到内存中的缓冲区</td></tr><tr><td>g</td><td>获得内存缓冲区的内容，并替代当前模板块中文本</td></tr><tr><td>G</td><td>获得内存缓冲区的内容，并追加到当前模板块文本的后面</td></tr><tr><td>l</td><td>列表不能打印字符的清单</td></tr><tr><td>n</td><td>读取下一个输入行，用下一个命令处理新的行而不是第一个命令</td></tr><tr><td>N</td><td>追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码</td></tr><tr><td>p</td><td>打印模板块的行</td></tr><tr><td>P</td><td>打印模板块的第一行</td></tr><tr><td>q</td><td>退出sed</td></tr><tr><td>b label</td><td>分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾</td></tr><tr><td>r file</td><td>从file中读行</td></tr><tr><td>t label</td><td>if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾</td></tr><tr><td>T label</td><td>错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾</td></tr><tr><td>w file</td><td>写并追加模板块到file末尾</td></tr><tr><td>W file</td><td>写并追加模板块的第一行到file末尾</td></tr><tr><td>!</td><td>表示后面的命令对所有没有被选定的行发生作用</td></tr><tr><td>=</td><td>打印当前行号</td></tr><tr><td>#</td><td>把注释扩展到第一个换行符以前</td></tr></tbody></table><hr><h3 id="sed-正则匹配元字符集"><a href="#sed-正则匹配元字符集" class="headerlink" title="sed 正则匹配元字符集"></a>sed 正则匹配元字符集</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>匹配行开始，如：/^sed/匹配所有以sed开头的行。</td></tr><tr><td>$</td><td>匹配行结束，如：/sed$/匹配所有以sed结尾的行。</td></tr><tr><td>.</td><td>匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。</td></tr><tr><td>*</td><td>匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。</td></tr><tr><td>[]</td><td>匹配一个指定范围内的字符，如/[sS]ed/匹配sed和Sed。</td></tr><tr><td>[^]</td><td>匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。</td></tr><tr><td>(..)</td><td>匹配子串，保存匹配的字符，如s/(love)able/\1rs，loveable被替换成lovers。</td></tr><tr><td>&amp;</td><td>保存搜索字符用来替换其他字符，如s/love/&amp;/，love这成love。</td></tr><tr><td>&lt;</td><td>匹配单词的开始，如:/&lt;love/匹配包含以love开头的单词的行。</td></tr><tr><td>&gt;</td><td>匹配单词的结束，如/love&gt;/匹配包含以love结尾的单词的行。</td></tr><tr><td>x{m}</td><td>重复字符x，m次，如：/0{5}/匹配包含5个0的行。</td></tr><tr><td>x{m,}</td><td>重复字符x，至少m次，如：/0{5,}/匹配至少有5个0的行。</td></tr><tr><td>x{m,n}</td><td>重复字符x，至少m次，不多于n次，如：/0{5,10}/匹配5~10个0的行。</td></tr></tbody></table><hr><p><br></p><h2 id="sed-用法实例"><a href="#sed-用法实例" class="headerlink" title="sed 用法实例"></a>sed 用法实例</h2><h3 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h3><blockquote><p><code>cat test.txt</code><br>my cat’s name is betty<br>This is your dog<br>my dog’s name is frank<br>This is your fish<br>my fish’s name is george<br>This is your goat<br>my goat’s name is adam</p></blockquote><hr><h3 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h3><h4 id="sed-替换标记"><a href="#sed-替换标记" class="headerlink" title="sed 替换标记"></a>sed 替换标记</h4><style>table th:first-of-type{width:10%}</style><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>g</td><td>表示行内全面替换</td></tr><tr><td>p</td><td>表示打印行</td></tr><tr><td>w</td><td>表示把行写入一个文件</td></tr><tr><td>x</td><td>表示互换模板块中的文本和缓冲区中的文本</td></tr><tr><td>y</td><td>表示把一个字符翻译为另外的字符（但是不用于正则表达式）</td></tr><tr><td>\1</td><td>子串匹配标记</td></tr><tr><td>&amp;</td><td>已匹配字符串标记</td></tr></tbody></table><hr><h4 id="sed-s-替换指定字符"><a href="#sed-s-替换指定字符" class="headerlink" title="sed s 替换指定字符"></a>sed s 替换指定字符</h4><p>将每一行文本中的This替换为sub<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">'s/is/are/'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略-e</span></span><br><span class="line">sed  <span class="string">'s/is/are/'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><p><strong>输出结果：</strong></p><blockquote><p>my cat’s name are betty<br>Th<strong>are</strong> <strong>is</strong> your dog<br>my dog’s name are frank<br>Th<strong>are</strong> <strong>is</strong> your fish<br>my fareh’s name is george<br>Th<strong>are</strong> <strong>is</strong> your goat<br>my goat’s name are adam</p></blockquote><div class="note info"><ul><li>option的默认就是-e，所以-e可以省略</li><li><code>s命令</code>：替换指定字符指的是每一行的第一个发生替换，第二个以及后续的不会发生替换</li></ul></div><hr><h4 id="只打印那些发生替换的行"><a href="#只打印那些发生替换的行" class="headerlink" title="只打印那些发生替换的行"></a>只打印那些发生替换的行</h4><p><code>-n选项</code>和<code>p命令</code>一起使用表示<code>只打印</code>那些发生替换的行</p><div class="note info"><ul><li><code>-n选项</code>:仅显示script处理后的结果</li><li><code>p命令</code>:打印模板块的行</li><li>选项、命令、命令三者连用就是：打印处理后的模板块的行</li></ul></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'s/is/are/p'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><blockquote><p>my cat’s name <strong>are</strong> betty<br>Th<strong>are</strong> is your dog<br>my dog’s name <strong>are</strong> frank<br>Th<strong>are</strong> is your fish<br>my f<strong>are</strong>h’s name is george<br>Th<strong>are</strong> is your goat<br>my goat’s name <strong>are</strong> adam</p></blockquote><hr><h4 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h4><p><code>g命令</code>表示行内全面替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed  <span class="string">'s/is/are/g'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>输出结果:</strong></p><blockquote><p>my cat’s name <strong>are</strong> betty<br>Th<strong>are</strong> <strong>are</strong> your dog<br>my dog’s name <strong>are</strong> frank<br>Th<strong>are</strong> <strong>are</strong> your f<strong>are</strong>h<br>my f<strong>are</strong>h’s name <strong>are</strong> george<br>Th<strong>are</strong> <strong>are</strong> your goat<br>my goat’s name <strong>are</strong> adam</p></blockquote><div class="note info"><ul><li>注意与<code>单独的s命令</code>的结果对比</li><li><code>命令s</code>、<code>命令g</code>之间的<strong>顺序是固定的</strong></li></ul></div><hr><h4 id="从第几处开始替换"><a href="#从第几处开始替换" class="headerlink" title="从第几处开始替换"></a>从第几处开始替换</h4><p>从第二处开始替换：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/is/are/2'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><p><strong>输出结果:</strong></p><blockquote><p>my cat’s name is betty<br>This are your dog<br>my dog’s name is frank<br>Th<em>is</em> <strong>are</strong> your f<em>is</em>h<br>my fish’s name are george<br>This are your goat<br>my goat’s name is adam</p></blockquote><div class="note info"><p>数字后面可以接<code>命令g</code>或者<code>命令p</code>等</p></div><p><strong>从每行中第N除开始全局替换：</strong></p><p><code>g命令</code><strong>之前加上数字N</strong>，表示从第N处之后的匹配开始全局替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/is/are/2g'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><blockquote><p>my cat’s name <strong>is</strong> betty<br>Th<strong>is</strong> <strong>are</strong> your dog<br>my dog’s name is frank<br>Th<strong>is</strong> <strong>are</strong> your f<strong>are</strong>h<br>my fish’s name are george<br>This are your goat<br>my goat’s name is adam</p></blockquote><div class="note info"><p>从第二处（包括）开始，后面的所有匹配上的都被替换掉了</p></div><hr><h3 id="以行为单位进行替换"><a href="#以行为单位进行替换" class="headerlink" title="以行为单位进行替换"></a>以行为单位进行替换</h3><p><code>命令c</code>：把选定的行改为新的文本</p><p>将第2-5行的内容取代成为this is sub of line 2-5<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># c 和文字之间有没有空行都可以</span></span><br><span class="line">sed <span class="string">'2,5c this is sub of line 2-5'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><p><strong>最终结果：</strong></p><blockquote><p>my cat’s name is betty<br><em>this is sub of line 2-5</em><br>my fish’s name is george<br>This is your goat<br>my goat’s name is adam</p></blockquote><p><strong>替换为多行的内容，只需要通过<code>\n</code>进行文本的换行即可：</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'2,5cthis is sub of line 2-5 \nthis is a second sub'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><p><strong>最终结果：</strong></p><blockquote><p>my cat’s name is betty<br><em>this is sub of line 2-5</em><br><em>this is a second sub</em><br>my fish’s name is george<br>This is your goat<br>my goat’s name is adam</p></blockquote><hr><h3 id="原位修改文件"><a href="#原位修改文件" class="headerlink" title="原位修改文件"></a>原位修改文件</h3><p><code>选项i</code>：在文件的<strong>原位修改，不在屏幕输出</strong>，如果<strong>-i后跟着suffix</strong>，则会产生备份文件，形式为<code>原文件名suffix</code>。</p><p><code>命令g</code>也可以替换为其他命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i_suffix <span class="string">'s/is/are/g'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><blockquote><p><code>ls</code><br>test.txt<br>test.txt_suffix</p></blockquote><blockquote><p><code>cat test.txt</code><br>my cat’s name are betty<br>Thare are your dog<br>my dog’s name are frank<br>Thare are your fareh<br>my fareh’s name are george<br>Thare are your goat<br>my goat’s name are adam</p></blockquote><hr><h3 id="定界符"><a href="#定界符" class="headerlink" title="定界符/"></a>定界符/</h3><p>命令中字符 <code>/</code> 在sed中作为<code>定界符</code>使用，也<strong>可以使用任意的定界符</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用冒号替代</span></span><br><span class="line"><span class="built_in">echo</span> sksksksksksk | sed <span class="string">'s:sk:ma:4g'</span></span><br><span class="line"><span class="comment"># 使用竖线替代</span></span><br><span class="line"><span class="built_in">echo</span> sksksksksksk | sed <span class="string">'s|sk|ma|4g'</span></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><blockquote><p>sksksk<strong>mamama</strong></p></blockquote><blockquote><p>sksksk<strong>mamama</strong></p></blockquote><div class="note info"><ul><li>定界符出现在样式内部时，需要进行<strong>转义</strong>或者直接<strong>更换定界符</strong></li><li>这个定界符个人感觉其实是用来作为<strong>正则匹配</strong>的，和<code>awk</code>用法相似</li></ul></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/usr/local/bin'</span> |sed <span class="string">'s/\/usr/\/test/g'</span></span><br><span class="line"><span class="comment"># 直接更换定界符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/usr/local/bin'</span> |sed <span class="string">'s|/usr|/test|g'</span></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><blockquote><p>/test/local/bin</p></blockquote><blockquote><p>/test/local/bin</p></blockquote><hr><h3 id="已匹配字符串标记-amp"><a href="#已匹配字符串标记-amp" class="headerlink" title="已匹配字符串标记&amp;"></a>已匹配字符串标记&amp;</h3><ul><li><code>&amp;</code>：已经匹配上的内容暂存在这个变量中，方便对已匹配内容进行处理</li></ul><p>正则表达式<code>\w\+</code>匹配每一个单词，使用<code>[&amp;]</code>替换它，<code>&amp;</code>对应之前所匹配到的单词：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> this is a <span class="built_in">test</span> line | sed <span class="string">'s/\w\+/[&amp;]/g'</span></span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p><code>echo test is a test line |sed &#39;s/\w\+/[&amp;]/g&#39;</code><br>[test] [is] [a] [test] [line]</p></blockquote><div class="note info"><ul><li>从上面可以看出，这种方法主要是用来针对<strong>一次匹配多个字符串</strong>，然后<strong>对多个字符串进行分开处理</strong>，而不是使用相同的处理（如使用同一个字符替换）</li></ul></div><hr><h3 id="分组标记-1-、-2"><a href="#分组标记-1-、-2" class="headerlink" title="分组标记\1 、\2"></a>分组标记\1 、\2</h3><ul><li><code>\1</code> 、<code>\2</code>：表示正则匹配的分组</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> this is digit 7 <span class="keyword">in</span> a number | sed <span class="string">'s/digit \([0-9]\)/\1/'</span></span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p><code>echo this is digit 7 in a number |sed &#39;s/digit \([0-9]\)/\1/&#39;</code><br>this is 7 in a number</p></blockquote><p>命令中digit 7，被替换成7。样式匹配到的子串是7，<code>\(..\)</code>用于匹配子串，对于匹配到的<strong>第一个子串</strong>标记为<code>\1</code>，依此类推匹配到的<strong>第二个结果</strong>就是<code>\2</code>,例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> aaa BBB | sed <span class="string">'s/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'</span></span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p><code>echo aaa BBB | sed &#39;s/\([a-z]\+\) \([A-Z]\+\)/\2 \1/&#39;</code><br>BBB aaa</p></blockquote><div class="note info"><ul><li>括号需要进行转义</li></ul></div><hr><h3 id="传入变量-引用"><a href="#传入变量-引用" class="headerlink" title="传入变量-引用"></a>传入变量-引用</h3><p><code>sed</code>作为文本处理工具，可能经常需要传入变量来进行操作，这里提供了关于传入变量的方法，但是需要注意的是，<mark>如果表达式内部存在变量字符串，<strong>command的单引号就要变成双引号</strong></mark>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>=<span class="string">"HELLO"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello WORLD"</span> |sed <span class="string">"s/hello/<span class="variable">$test</span>/"</span></span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p><code>echo &quot;hello WORLD&quot; |sed &quot;s/hello/$test/&quot;</code><br>HELLO WORLD</p></blockquote><hr><h3 id="组合多个命令"><a href="#组合多个命令" class="headerlink" title="组合多个命令 ;"></a>组合多个命令 ;</h3><p>命令组合在Linux中是非常常见的，一般是使用<code>管道符</code>，在sed命令中可以使用<code>;</code>分割命令，这种用法同样和<code>awk</code>使用非常相似。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'表达式'</span> | sed <span class="string">'表达式'</span></span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'表达式; 表达式'</span></span><br></pre></td></tr></table></figure><hr><h3 id="多个命令连用-e"><a href="#多个命令连用-e" class="headerlink" title="多个命令连用 -e"></a>多个命令连用 -e</h3><p><strong>选项-e本就是sed的默认选项</strong>，用于说明使用的是command而不是文件命令形式，多个命令连用，<strong>注意是有前后顺序的连用</strong>，在连用的command之前加上-e即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">'1,5d'</span> -e <span class="string">'s/my/MY/'</span> test.txt</span><br></pre></td></tr></table></figure><p>先删除test.txt文件中的第1、5行，输出删除的内容，然后对这两行进行将my替换为MY。</p><p><strong>最终结果：</strong></p><blockquote><p>This is your goat<br>MY goat’s name is adam</p></blockquote><div class="note info"><p>这个方式进行命令的连用和上面使用分号<code>;</code>将不同命令连写的方式<strong>效果相同</strong></p></div><hr><h3 id="使用-连用命令"><a href="#使用-连用命令" class="headerlink" title="使用{}连用命令"></a>使用<code>{}</code>连用命令</h3><p>使用<code>{}</code>将需要连用的命令包围，并使用<code>;</code>将多个命令隔开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/This/&#123;s/This/this/;n;p&#125;'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p>my dog’s name is frank<br>my fish’s name is george<br>my goat’s name is adam</p></blockquote><div class="note info"><ul><li><code>命令n</code>：当前匹配行的下一行</li><li><code>选项n</code>：仅显示script处理后的结果</li></ul></div><hr><h3 id="选定行的范围-逗号"><a href="#选定行的范围-逗号" class="headerlink" title="选定行的范围 ,(逗号)"></a>选定行的范围 ,(逗号)</h3><p>选取行的范围来对文本进行处理，可以使用在不同行之间加逗号<code>,</code>的方式</p><p>打印从<strong>第5行开始</strong>到<strong>第一个包含以this开始的行之间的所有行</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'5,/^This/p'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><p><strong>最终结果：</strong></p><blockquote><p>sed -n ‘5,/^This/p’ test.txt<br>my fish’s name is george<br>This is your goat</p></blockquote><div class="note info"><ul><li>行的索引<strong>开始于1</strong></li><li>需要注意的是：是包含尾部的，<code>5,7p</code>是<strong>包含</strong>第七行的</li><li>选取行号之后不仅仅可以用来做打印，还可以进行其他操作，具体见本文<strong>使用实战</strong></li></ul></div><hr><h3 id="打印命令-p"><a href="#打印命令-p" class="headerlink" title="打印命令 p"></a>打印命令 p</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印第3行</span></span><br><span class="line">sed -n <span class="string">'3p'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印第3-5行</span></span><br><span class="line">sed -n <span class="string">'3,5p'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字和正则表达式连用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印从第1行开始，第一次出现This结束之间的行（起始行固定，终止行第一次正则匹配位置）</span></span><br><span class="line">sed -n <span class="string">'1,/This/p'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 起始行固定，终止行第一次正则匹配位置</span></span><br><span class="line">sed -n <span class="string">"/my cat's name is betty/,/This/p"</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印从第一次匹配到This的行到第3行，然后再输出所有匹配到This的行</span></span><br><span class="line">sed -n <span class="string">'/This/,3p'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果含有This的行在第1行之后，则打印所有含有This的行</span></span><br><span class="line">sed -n <span class="string">'/This/,1p'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 起始行和终止行都不固定，打印全文</span></span><br><span class="line">sed -n <span class="string">'/my/,/This/p'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p><code>sed -n &#39;3p&#39; test.txt</code><br>my dog’s name is frank</p></blockquote><blockquote><p><code>sed -n &#39;3,5p&#39; test.txt</code><br>my dog’s name is frank<br>This is your fish<br>my fish’s name is george</p></blockquote><blockquote><p><code>sed -n &#39;1,/This/p&#39; test.txt</code><br>my cat’s name is betty<br>This is your dog</p></blockquote><blockquote><p><code>sed -n &quot;/my cat&#39;s name is betty/,/This/p&quot; test.txt</code><br>my cat’s name is betty<br>This is your dog</p></blockquote><blockquote><p><code>sed -n &#39;/This/,3p&#39; test.txt</code><br>This is your dog<br>my dog’s name is frank<br>This is your fish<br>This is your goat</p></blockquote><blockquote><p><code>sed -n &#39;/This/,1p&#39; test.txt</code><br>This is your dog<br>This is your fish<br>This is your goat</p></blockquote><blockquote><p><code>sed -n &#39;/my/,/This/p&#39; test.txt</code><br>my cat’s name is betty<br>This is your dog<br>my dog’s name is frank<br>This is your fish<br>my fish’s name is george<br>This is your goat<br>my goat’s name is adam</p></blockquote><div class="note warning"><ul><li>使用<strong>打印命令p</strong>时需要注意，<strong>sed默认会打印出所有的行</strong>（命令d除外，只会打印保留下来的行），所以<strong>想要打印出特定修改过的行需要加上选项n</strong>，如果不加，<mark>匹配上的行会打印两遍</mark></li><li>使用正则表达式进行匹配打印时需要特别小心</li><li>如果数字在前面，是<strong>从数字开始</strong>到<strong>第一次匹配到正则表达式的部分（1就是从1开始，3就是从3开始看后面第一次匹配的）</strong></li><li><mark>如果数字在后面，正则表达式在前面，那么一定会将全文中包含正则表达式的全部输出，其他部分如果数字大于正则表达式第一次出现的行，则输出正则表达式第一次出现的行到数字之间的其他内容，如果数字小于正则表达式第一次出现的行，那就只会打印包含正则表达式的行。<strong>全文匹配正则表达式的输出以及正则表达式第一次出现的行到数字之间的其他内容输出</strong></mark></li><li>如果<strong>前后都为正则表达式</strong>，则<strong>输出全文内容</strong></li><li>关于上述正则表达式我的理解：因为数字是完全确定的，开始和结束行都很确定，所以可以很明确输出想要的结果，但是如果是正则表达式的话，不是唯一的匹配结果（段落中有几行都可以匹配上），那么如果正则表达式在前，则不知道从第几行开始当起始行，所以如果数字大于第一个匹配位置所在的行，那么以第一个匹配位置所在的行为起始行到数字规定的终止行之间的行都会输出，同时起始行可能有很多（其他位置也有匹配），所以还会输出其他匹配位置作为开始，这时如果数字小于第二个匹配位置的话，就只会输出匹配正则表达式的行，同时如果数字大于第二个匹配位置，由于第一个匹配位置的输出已经包含第二个位置，所以不会再输出一遍第二个匹配位置到终止行的信息</li></ul></div><div class="note info"><p>说了很多，总结一下：<mark>使用正则表达式结果要想正确，起始行必须固定（可以使用数字或者使用唯一匹配的正则表达式），这样才会输出起始行到终止行之间的内容，如果终止行是正则表达式，则会输出起始行到第一次匹配到正则表达式的终止行之间的内容。</mark></p></div><hr><h3 id="匹配模式取反-！"><a href="#匹配模式取反-！" class="headerlink" title="匹配模式取反 ！"></a>匹配模式取反 ！</h3><p>打印除第一行和第二行之外的其他行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'1,2!p'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><p><strong>最终结果：</strong></p><blockquote><p><code>sed -n &#39;1,2!p&#39; test.txt</code><br>my dog’s name is frank<br>This is your fish<br>my fish’s name is george<br>This is your goat<br>my goat’s name is adam</p></blockquote><hr><h3 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号 ="></a>显示行号 =</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/my/&#123;=;p&#125;'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p><code>sed -n &#39;/my/{=;p}&#39; test.txt</code><br>1<br>my cat’s name is betty<br>3<br>my dog’s name is frank<br>5<br>my fish’s name is george<br>7<br>my goat’s name is adam</p></blockquote><hr><h3 id="删除命令-d"><a href="#删除命令-d" class="headerlink" title="删除命令 d"></a>删除命令 d</h3><ul><li><code>命令d</code>：删除，删除选择的行</li></ul><h4 id="删除空白行"><a href="#删除空白行" class="headerlink" title="删除空白行"></a>删除空白行</h4><blockquote><p><code>cat test2.txt</code><br>my cat’s name is betty</p><p>this is your this dog</p><p>my dog’s name is this frank</p><p>this is your fish</p><p>my fish’s name is this george</p><p>this is your goat</p><p>my goat’s name is this adam</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/^$/d'</span> test2.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p>my cat’s name is betty<br>this is your this dog<br>my dog’s name is this frank<br>this is your fish<br>my fish’s name is this george<br>this is your goat<br>my goat’s name is this adam</p></blockquote><div class="note info"><ul><li>空白行的表示方法：<code>^$</code> (开头和结尾之间的内容为空)</li></ul></div><hr><h4 id="删除含有固定单词的行"><a href="#删除含有固定单词的行" class="headerlink" title="删除含有固定单词的行"></a>删除含有固定单词的行</h4><p><code>&lt;</code>：匹配单词的开始，注意需要转义<br><code>&gt;</code>：匹配单词的结束，注意需要转义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/\&lt;This\&gt;/d'</span> test.txt</span><br></pre></td></tr></table></figure><hr><blockquote><p><code>sed &#39;/\&lt;This\&gt;/d&#39; test.txt</code><br>my cat’s name is betty<br>my dog’s name is frank<br>my fish’s name is george<br>my goat’s name is adam</p></blockquote><hr><h4 id="正则匹配删除-删除文件中所有以my开头的行"><a href="#正则匹配删除-删除文件中所有以my开头的行" class="headerlink" title="正则匹配删除-删除文件中所有以my开头的行"></a>正则匹配删除-删除文件中所有以my开头的行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/^my/d'</span> test2.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p>this is your this dog</p><p>this is your fish</p><p>this is your goat</p></blockquote><hr><h4 id="从某一行开始删除"><a href="#从某一行开始删除" class="headerlink" title="从某一行开始删除"></a>从某一行开始删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'2,$d'</span> test2.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p><code>sed &#39;2,$d&#39; test2.txt</code><br>my cat’s name is betty</p></blockquote><div class="note info"><ul><li>最后一行：<code>$</code></li><li>首行不是<code>^</code>，直接使用1</li></ul></div><hr><h4 id="删除文件最后一行"><a href="#删除文件最后一行" class="headerlink" title="删除文件最后一行"></a>删除文件最后一行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'$d'</span> test2.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p>my cat’s name is betty</p><p>this is your this dog</p><p>my dog’s name is this frank</p><p>this is your fish</p><p>my fish’s name is this george</p><p>this is your goat</p></blockquote><div class="note info"><ul><li>最后一行：<code>$</code></li><li>可以发现前面删掉空行的操作没有影响原始文件，如果想修改原始文件，可以加上<code>选项i</code></li></ul></div><hr><h3 id="写入文件-w命令"><a href="#写入文件-w命令" class="headerlink" title="写入文件 w命令"></a>写入文件 w命令</h3><p>在test.txt中所有包含my的行都被<strong>写入test2.txt</strong>里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/my/w test2.txt'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p><code>cat test2.txt</code><br>my cat’s name is betty<br>my dog’s name is frank<br>my fish’s name is george<br>my goat’s name is adam</p></blockquote><hr><h3 id="从文件读入-r命令"><a href="#从文件读入-r命令" class="headerlink" title="从文件读入 r命令"></a>从文件读入 r命令</h3><p>file里的内容被读进来，<strong>显示在与test.txt匹配的行后面</strong>，如果<strong>匹配多行</strong>，则file的内容将<strong>显示在所有匹配行的下面</strong>：</p><blockquote><p>cat test1.txt<br>aaaaaaaa</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/my/r test1.txt'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p><strong>my</strong> cat’s name is betty<br><em>aaaaaaaaa</em><br>This is your dog<br><strong>my</strong> dog’s name is frank<br><em>aaaaaaaaa</em><br>This is your fish<br><strong>my</strong> fish’s name is george<br><em>aaaaaaaaa</em><br>This is your goat<br><strong>my</strong> goat’s name is adam<br><em>aaaaaaaaa</em></p></blockquote><hr><h3 id="追加文件-a"><a href="#追加文件-a" class="headerlink" title="追加文件 a\"></a>追加文件 a\</h3><p><strong>追加与上述读取不同</strong>，虽然两者<strong>都是讲在匹配的行下增加文本信息</strong>，但是读取处理的是<strong>两个文件</strong>，追加处理的是<strong>一个文件和一行或多行文本</strong>。</p><p><strong>a后面的反斜杠可有可无</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/^my/a\this is a test line'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><blockquote><p><em>my</em> cat’s name is betty<br><em>this is a test line</em><br>This is your dog<br><em>my</em> dog’s name is frank<br><em>this is a test line</em><br>This is your fish<br><em>my</em> fish’s name is george<br><em>this is a test line</em><br>This is your goat<br><em>my</em> goat’s name is adam<br><em>this is a test line</em></p></blockquote><p>同样也可以通过追加操作也<strong>增加两行甚至多行内容</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/^my/a\this is a test line \nthis is second line'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>通过使用<code>\n</code>进行换行操作来达到增加多行的目的</strong></p><p><strong>最终结果：</strong></p><blockquote><p>my cat’s name is betty<br>this is a test line<br><em>this is second line</em><br>This is your dog<br>my dog’s name is frank<br>this is a test line<br><em>this is second line</em><br>This is your fish<br>my fish’s name is george<br>this is a test line<br><em>this is second line</em><br>This is your goat<br>my goat’s name is adam<br>this is a test line<br><em>this is second line</em></p></blockquote><div class="note info"><p>如果命令a之前什么都不加，表明给在每一行下都增加文本<br>当然，a之前也可以是单纯的数字</p></div><hr><h3 id="插入操作-i"><a href="#插入操作-i" class="headerlink" title="插入操作 i\"></a>插入操作 i\</h3><p>插入操作和上述追加和读取操作都不同，<mark>插入是在匹配行的上面进行插入，而追加和读取是在匹配行的下方进行的追加</mark>，同时插入和追加操作都是针对单个文件和一行或多行文本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/^my/i\this is insert line'</span> test.txt</span><br></pre></td></tr></table></figure><blockquote><p><em>this is insert line</em><br>my cat’s name is betty<br>This is your dog<br><em>this is insert line</em><br>my dog’s name is frank<br>This is your fish<br><em>this is insert line</em><br>my fish’s name is george<br>This is your goat<br><em>this is insert line</em><br>my goat’s name is adam</p></blockquote><p><strong>在匹配文本上方插入多行的操作与追加类似，都是使用<code>\n</code>换行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/^my/i\this is insert line \nthis is second insert line'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><blockquote><p>this is insert line<br><em>this is second insert line</em><br>my cat’s name is betty<br>This is your dog<br>this is insert line<br><em>this is second insert line</em><br>my dog’s name is frank<br>This is your fish<br>this is insert line<br><em>this is second insert line</em><br>my fish’s name is george<br>This is your goat<br>this is insert line<br><em>this is second insert line</em><br>my goat’s name is adam</p></blockquote><hr><h3 id="匹配行的下一行-n命令"><a href="#匹配行的下一行-n命令" class="headerlink" title="匹配行的下一行 n命令"></a>匹配行的下一行 n命令</h3><p>打印匹配字符串的下一行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面这个写法会使得以my开头的行被打印两遍，是错误的</span></span><br><span class="line">sed <span class="string">'/my/&#123;n;p&#125;'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的写法是仅显示script处理后的结果</span></span><br><span class="line">sed -n <span class="string">'/my/&#123;n;p&#125;'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><p><strong>最终结果：</strong></p><blockquote><p><code>sed -n &#39;/my/{n;p}&#39; test.txt</code><br>hhhh is your dog<br>This is your fish<br>This is your goat</p></blockquote><p><strong>在原始test文件中增加了一行用于防止和普通的替换混淆</strong></p><p>如果my被匹配，则<strong>移动到匹配行的下一行</strong>，<strong>替换这一行</strong>的this为This,并打印该行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/my/&#123;n;s/This/this/; &#125;'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述式子不等于</span></span><br><span class="line">sed <span class="string">'/my/n;s/This/this/'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终输出：</strong></p><blockquote><p>my cat’s name is betty<br>hhhh is your dog<br><strong>This</strong> is your dog<br>my dog’s name is frank<br><strong>this</strong> is your fish<br>my fish’s name is george<br><strong>this</strong> is your goat<br>my goat’s name is adam</p></blockquote><p><strong>不是以my为开头的下一行的This不会被替换为this</strong></p><div class="note info"><p>注意<code>花括号{}</code>，不能丢掉</p></div><p><mark>使用grep、awk得到匹配行的下一行</mark></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -A 1 my test.txt</span><br><span class="line">sed -n <span class="string">'/my/&#123;n;p&#125;'</span> test.txt</span><br><span class="line">awk <span class="string">'/my/&#123;getline; print&#125;'</span> test.txt</span><br></pre></td></tr></table></figure><hr><h3 id="字符变换-y命令"><a href="#字符变换-y命令" class="headerlink" title="字符变换 y命令"></a>字符变换 y命令</h3><p>把1~10行内所有<strong>abcde转变为大写</strong>，注意，<strong>正则表达式元字符不能使用这个命令</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1,10y/abcde/ABCDE/'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p>my CAt’s nAmE is BEtty<br>hhhh is your Dog<br>This is your Dog<br>my Dog’s nAmE is frAnk<br>This is your fish<br>my fish’s nAmE is gEorgE<br>This is your goAt<br>my goAt’s nAmE is ADAm</p></blockquote><div class="note info"><ul><li>注意这个和<strong>普通的替换不同</strong>，替换是将abcde这个字符串进行替换为ABCDE字符串，而这里是将<strong>a、b、c、d、e变为大写</strong>；</li><li>与通过<strong>已匹配字符串&amp;</strong>也不同，这个更为简单</li></ul></div><hr><h3 id="显示分隔符等详细信息-l命令"><a href="#显示分隔符等详细信息-l命令" class="headerlink" title="显示分隔符等详细信息 l命令"></a>显示分隔符等详细信息 l命令</h3><p>如果想知道文件内容的具体分割符，以及其他不能打印的字符信息可以使用’l’命令：</p><blockquote><p><code>sed -n &#39;l&#39; test3.txt</code><br>tab<code>\t</code>sep<code>\t</code>end<code>$</code><br>blank sep end<code>$</code><br>adsfaaaaaaaaaaaaaaaaafdadfasdfasdfasdfasdfsaaavfcadsasd asda asafdafa<code>\</code><br>sd<code>$</code></p></blockquote><p><strong>每行显示30个字符（包括最后的<code>\</code>）</strong>:</p><blockquote><p><code>sed -n &#39;l30&#39; test3.txt</code><br>tab<code>\t</code>sep<code>\t</code>end<code>$</code><br>blank sep end<code>$</code><br>adsfaaaaaaaaaaaaaaaaafdadfasd<code>\</code><br>fasdfasdfasdfsaaavfcadsasd as<code>\</code><br>da asafdafasd<code>$</code></p></blockquote><div class="note info"><p><code>l</code>命令用明确的形式显示模版空间的数据：</p><ul><li>以<code>C-style</code>的<strong>转义形式显示不能打印的字符(换行符、制表符等)</strong>和<strong>本身的<code>\Char</code>形式</strong></li><li><strong>长的行将进行分割</strong>，以字符<code>\</code>结尾的行<strong>表示分割</strong>，以字符<code>$</code>结尾的行表示<strong>分割结束</strong></li><li><code>n</code>指定显示行的长度，超过就进行分割；<strong>若为0表示不分割所有行</strong>；没有指定时就取命令行选项<code>-l</code>的设置，再没有就取<strong>默认值70</strong>。这是GNU的扩展功能</li></ul></div><hr><h3 id="打印奇数行或偶数行"><a href="#打印奇数行或偶数行" class="headerlink" title="打印奇数行或偶数行"></a>打印奇数行或偶数行</h3><h4 id="方法一：通过下一行（命令n）的方式"><a href="#方法一：通过下一行（命令n）的方式" class="headerlink" title="方法一：通过下一行（命令n）的方式"></a>方法一：通过下一行（命令n）的方式</h4><p><strong>打印奇数行：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'p;n'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p>my cat’s name is betty<br>This is your dog<br>This is your fish<br>This is your goat</p></blockquote><p><strong>打印偶数行：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'n;p'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p>hhhh is your dog<br>my dog’s name is frank<br>my fish’s name is george<br>my goat’s name is adam</p></blockquote><div class="note info"><ul><li><code>命令n在前</code>而<code>p在后</code>为打印偶数行</li><li><code>命令p在前</code>而<code>n在后</code>为打印奇数行</li><li><code>命令n</code>为当前匹配的下一行</li></ul></div><hr><h4 id="方法二：简单方法"><a href="#方法二：简单方法" class="headerlink" title="方法二：简单方法"></a>方法二：简单方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印奇数行</span></span><br><span class="line">sed -n <span class="string">'1~2p'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印偶数行</span></span><br><span class="line">sed -n <span class="string">'2~2p'</span> test.txt</span><br></pre></td></tr></table></figure><hr><p><br></p><h2 id="使用实战"><a href="#使用实战" class="headerlink" title="使用实战"></a>使用实战</h2><h3 id="在开头添加start"><a href="#在开头添加start" class="headerlink" title="在开头添加start"></a>在开头添加start</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要里面的空格也是有用的</span></span><br><span class="line">sed <span class="string">'s/^/start /'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><blockquote><p><code>sed &#39;s/^/start /&#39; test.txt</code><br>start my cat’s name is betty<br>start This is your dog<br>start my dog’s name is frank<br>start This is your fish<br>start my fish’s name is george<br>start This is your goat<br>start my goat’s name is adam</p></blockquote><hr><h3 id="在结尾增加end"><a href="#在结尾增加end" class="headerlink" title="在结尾增加end"></a>在结尾增加end</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要里面的空格也是有用的</span></span><br><span class="line">sed <span class="string">'s/$/ END/'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><blockquote><p><code>sed &#39;s/$/ END/&#39; test.txt</code><br>my cat’s name is betty END<br>This is your dog END<br>my dog’s name is frank END<br>This is your fish END<br>my fish’s name is george END<br>This is your goat END<br>my goat’s name is adam END</p></blockquote><hr><h3 id="在前三行之前增加-号做注释"><a href="#在前三行之前增加-号做注释" class="headerlink" title="在前三行之前增加#号做注释"></a>在前三行之前增加#号做注释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1,3s/^/# /'</span> test.txt</span><br></pre></td></tr></table></figure><p><strong>最终结果：</strong></p><blockquote><p><code>sed &#39;1,3s/^/# /&#39; test.txt</code><br># my cat’s name is betty<br># This is your dog<br># my dog’s name is frank<br>This is your fish<br>my fish’s name is george<br>This is your goat<br>my goat’s name is adam</p></blockquote><hr><p><br></p><h2 id="使用技巧及注意事项"><a href="#使用技巧及注意事项" class="headerlink" title="使用技巧及注意事项"></a>使用技巧及注意事项</h2><ul><li>使用<strong>打印命令p</strong>时需要注意，<strong>sed默认会打印出所有的行</strong>（命令d除外，只会打印保留下来的行），所以<strong>想要打印出特定修改过的行需要加上选项n</strong></li><li>区分<code>选项</code>和<code>命令</code>的<strong>关系和书写相对位置</strong>（如选项和命令都有n，但是作用却不同）</li></ul><div class="note info"><p>使用正则表达式进行匹配打印时需要特别小心，总结一下：<mark>使用正则表达式结果要想正确，起始行必须固定（可以使用数字或者使用唯一匹配的正则表达式），这样才会输出起始行到终止行之间的内容，如果终止行是正则表达式，则会输出起始行到第一次匹配到正则表达式的终止行之间的内容。</mark></p></div><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://man.linuxde.net/sed" target="_blank" rel="noopener">sed命令</a></li><li><a href="https://www.cnblogs.com/ctaixw/p/5860221.html" target="_blank" rel="noopener">sed命令详解，很多关于实战的讲的很好！！！</a></li><li><a href="https://www.cnblogs.com/maxincai/p/5146338.html" target="_blank" rel="noopener">sed命令用法</a></li><li><a href="https://github.com/dongweiming/sed_and_awk/blob/master/index.html" target="_blank" rel="noopener">sed_and_awk，github上148星</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;sed处理文本，包括sed命令的基本格式、参数和命令说明、文本的替换、打印、删除、增加、插入以及其他常用的技巧（分组、传入参数、命令连用以及对文件进行读取和写入等）。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
    
      <category term="常用基本命令" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>大致计划</title>
    <link href="http://showteeth.tech/posts/18198.html"/>
    <id>http://showteeth.tech/posts/18198.html</id>
    <published>2019-02-23T15:13:17.000Z</published>
    <updated>2019-02-27T12:34:30.908Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>对于想学习内容的大致实施计划，需要根据实际情况灵活更改。</p></div><a id="more"></a><h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><div class="note success"><ul><li>Linux的内容比较细小，可以使用零散的时间来学习；</li><li>机器学习的内容需要学习的连贯性，需要大量时间学习和理解；</li><li>Python学习还好，介于Linux和机器学习内容之间；</li><li>其他内容的学习不是很急切，但是一些工具性的可以先学习，比如git以及markdown，时间需求不是很大；</li><li>可以将Linux中比较大的内容和其他内容学习中比较小的内容搭配，比如sed命令和下面的markdown搭配这种；</li><li>大块的内容比如机器学习和Python可以放在晚上10-1点半之间（每天3个小时）？这个还需要考虑；</li><li>机器学习和Python学习的内容可以放在github上。</li></ul></div><h2 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h2><div class="note info"><br><i></i> 一个常用命令的学习<br><i></i> 总结一个常用内容<br><i></i> shell编程一个技巧<br></div><hr><p><br></p><h2 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h2><div class="note info"><br><i></i> 一个常用命令的学习<br><i></i> 总结一个常用内容<br><i></i> shell编程一个技巧<br></div><hr><p><br></p><h2 id="机器学习学习"><a href="#机器学习学习" class="headerlink" title="机器学习学习"></a>机器学习学习</h2><div class="note info"><br><i></i> 一个常用命令的学习<br><i></i> 总结一个常用内容<br><i></i> shell编程一个技巧<br></div><hr><p><br></p><h2 id="其他内容学习"><a href="#其他内容学习" class="headerlink" title="其他内容学习"></a>其他内容学习</h2><div class="note info"><br><i></i> 一个常用命令的学习<br><i></i> 总结一个常用内容<br><i></i> shell编程一个技巧<br></div><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;对于想学习内容的大致实施计划，需要根据实际情况灵活更改。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="规划" scheme="http://showteeth.tech/categories/%E8%A7%84%E5%88%92/"/>
    
    
      <category term="每日学习" scheme="http://showteeth.tech/tags/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>其他想学习的内容</title>
    <link href="http://showteeth.tech/posts/49862.html"/>
    <id>http://showteeth.tech/posts/49862.html</id>
    <published>2019-02-23T12:17:33.000Z</published>
    <updated>2019-02-27T03:15:08.448Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>其他想学习的内容汇总，包括Latex排版、git使用、readthedocs+mkdocs静态网站、markdown学习、docker学习以及snakemake等内容，如果遇到后续会持续添加。</p></div><a id="more"></a><h2 id="markdown学习"><a href="#markdown学习" class="headerlink" title="markdown学习"></a>markdown学习</h2><p>&emsp;&emsp;在后面的学习中，我将尽可能使用markdown进行文档的编写，这样看着更加美观，所以有必要对齐进行完善的学习，同时在真正的语法与在博客中遇到的可能有所差别，所以这里的将主要关注一些基础的语法，其他在博客写作中常用的可以参考之前写的博客。</p><div><br><a class="btn" href="http://showteeth.tech/posts/65136.html"><i class="fa fa-telegram fa-lg fa-fw"></i>markdown基础语法学习</a><br></div><div><br><a class="btn" href="http://showteeth.tech/posts/37746.html"><i class="fa fa-telegram fa-lg fa-fw"></i>next-markdown技巧和模板</a><br></div><hr><p><br></p><h2 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h2><p>&emsp;&emsp;接触到github之后，git操作是经常需要使用的，所以对其进行学习非常有必要。</p><div><br><a class="btn" href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Git教程-廖雪峰</a><br></div><div><br><a class="btn" href="http://iissnan.com/progit/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Pro Git</a><br></div><hr><p><br></p><h2 id="Latex排版"><a href="#Latex排版" class="headerlink" title="Latex排版"></a>Latex排版</h2><p>&emsp;&emsp;第一次真正见识到latex是看到清本大佬使用latex对课程<mark>论文进行排版</mark>以及<mark>数学公式编写</mark>，觉得非常牛逼，同时也反思了自己的本科经历，果然大佬就是大佬！啥也不说了学习吧。</p><div><br><a class="btn" href="https://liam.page/2014/09/08/latex-introduction/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>一份其实很短的 LaTeX 入门文档</a><br></div><div><br><a class="btn" href="http://liyangbit.com/math/jupyter-latex/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Markdown中输入数学公式及LaTex常用数学符号整理</a><br></div><div><br><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>刘海洋-latex入门</a><br></div><hr><p><br></p><h2 id="readthedocs-mkdocs静态网站"><a href="#readthedocs-mkdocs静态网站" class="headerlink" title="readthedocs+mkdocs静态网站"></a>readthedocs+mkdocs静态网站</h2><p>&emsp;&emsp;在binbin师兄的带领下，也算是接触了一下readthedocs+mkdocs静态网站（写技术文档），感觉也挺好看的，可以用来展示自己使用markdown编写的一些文本，主要是指项目。</p><div><br><a class="btn" href="https://www.mkdocs.org/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>mkdocs的官方网站</a><br></div><hr><h3 id="好用的参考"><a href="#好用的参考" class="headerlink" title="好用的参考"></a>好用的参考</h3><div class="note info"><ul><li><a href="https://cyent.github.io/markdown-with-mkdocs-material/" target="_blank" rel="noopener">很好的教程</a></li><li><a href="https://squidfunk.github.io/mkdocs-material/extensions/admonition/" target="_blank" rel="noopener">mkdocs可用的拓展</a></li></ul></div><hr><p><br></p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>&emsp;&emsp;docker是开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><div><br><a class="btn" href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Docker——从入门到实践</a><br></div><div><br><a class="btn" href="https://adoubi.life/posts/2017-8-19/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>docker学习笔记</a><br></div><hr><p><br></p><h2 id="snakemake"><a href="#snakemake" class="headerlink" title="snakemake"></a>snakemake</h2><p>&emsp;&emsp;snakemake是用来编写任务流程的工具。</p><div><br><a class="btn" href="https://www.jianshu.com/p/14b9eccc0c0e" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>snakemake使用笔记</a><br></div><div><br><a class="btn" href="https://slowkow.com/notes/snakemake-tutorial/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>snakemake-tutorial</a><br></div><div><br><a class="btn" href="https://www.jianshu.com/p/8e57fd2b81b2" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>使用Snakemake搭建分析流程</a><br></div><div><br><a class="btn" href="https://www.jianshu.com/p/14b9eccc0c0e" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>实例-binbin师兄写的</a><br></div><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;其他想学习的内容汇总，包括Latex排版、git使用、readthedocs+mkdocs静态网站、markdown学习、docker学习以及snakemake等内容，如果遇到后续会持续添加。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="规划" scheme="http://showteeth.tech/categories/%E8%A7%84%E5%88%92/"/>
    
    
      <category term="学习计划" scheme="http://showteeth.tech/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="其他内容学习" scheme="http://showteeth.tech/tags/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习学习计划</title>
    <link href="http://showteeth.tech/posts/130.html"/>
    <id>http://showteeth.tech/posts/130.html</id>
    <published>2019-02-23T03:36:14.000Z</published>
    <updated>2019-02-27T03:15:20.018Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>需要学习的机器学习内容汇总，包括自己总结的学习路线、书本和视频内容学习、竞赛等实战项目、很好的博主和网站以及收藏的shell相关书本等相关内容。</p></div><a id="more"></a><h2 id="自己规划的学习路线"><a href="#自己规划的学习路线" class="headerlink" title="自己规划的学习路线"></a>自己规划的学习路线</h2><h3 id="第一阶段-经典课程学习"><a href="#第一阶段-经典课程学习" class="headerlink" title="第一阶段-经典课程学习"></a>第一阶段-经典课程学习</h3><p>&emsp;&emsp;我觉得可以先通过一些<strong>经典课程</strong>，比如<strong>吴恩达老师</strong>或者<strong>林轩田老师</strong>在Coursera上的课程视频来对机器学习有一个初步了解，并通过课程配套的<strong>编程习题</strong>来动手实现一下算法，来提升一些感性的认识。</p><hr><h3 id="第二阶段-经典教材学习"><a href="#第二阶段-经典教材学习" class="headerlink" title="第二阶段-经典教材学习"></a>第二阶段-经典教材学习</h3><p>&emsp;&emsp;之后再选择一本<strong>经典教材</strong>，学习其中<strong>理论和算法的基础部分</strong>。同时也可以尝试把讲到的算法实现一下，这样将书本和实践结合起来的办法，我觉得比较有效，这个过程的学习可以<strong>与第一个阶段同时进行</strong>，学习经典的书本的时候参考视频可以加深理解，目前很多书本都有相应的视频学习课程。</p><hr><h3 id="第三阶段-实战"><a href="#第三阶段-实战" class="headerlink" title="第三阶段-实战"></a>第三阶段-实战</h3><p>&emsp;&emsp;通过这两个阶段的学习，已经<strong>掌握了机器学习的基本原理</strong>，并且对常用的经典算法，如boosting, svm, logistic regression乃至neural network比较熟悉以后，就可以考虑做一个<strong>大的project</strong>, 例如尝试参加一个在线的<strong>数据科学竞赛</strong>，通过这样一个过程，可能就能真正体会到入门的感觉。</p><hr><h3 id="第三阶段-提升"><a href="#第三阶段-提升" class="headerlink" title="第三阶段-提升"></a>第三阶段-提升</h3><p>&emsp;&emsp;借助一些比较经典的、但是也需要一些基础的书来进行提升阶段的学习。</p><div class="note info">如果只是想在毕业之后能找到算法工程师的工作，《统计学习方法》、CS229、CS231N、《deep learning》这些书再加上leetcode、数据挖掘比赛、以及相关项目经验就已经足够</div><hr><p><br></p><h2 id="课程与教材学习"><a href="#课程与教材学习" class="headerlink" title="课程与教材学习"></a>课程与教材学习</h2><p>&emsp;&emsp;现在机器学习部分主要是想根据书本进行学习，同时借助相应的视频课程，也就是上面自己总结学习路线的第一个和第二个阶段。</p><div class="note default"><br><i class="fa fa-square"></i> 《统计学习方法》（李航）<br><i class="fa fa-square"></i> 《机器学习》（周志华）<br><i class="fa fa-square"></i> ISL(An Introduction to Statistical Learning: with Applications in R)<br><i class="fa fa-square"></i> 机器学习Machine-Learning<br><i class="fa fa-square"></i> 《机器学习实战》<br><i class="fa fa-square"></i> 《机器学习实战：基于Scikit-Learn和TensorFlow》<br><i class="fa fa-square"></i> 机器学习基石、技法视频<br><i class="fa fa-square"></i> 吴恩达机器学习视频<br><i class="fa fa-square"></i> ISL配套视频<br><i class="fa fa-square"></i> 上交张志华统计机器学习视频<br></div><hr><h3 id="《统计学习方法》（李航）"><a href="#《统计学习方法》（李航）" class="headerlink" title="《统计学习方法》（李航）"></a>《统计学习方法》（李航）</h3><div class="note info"><br>这本书比较精炼，基本上是把模型推导一遍然后给出一个很简单的例子帮助你理解（完整的解释与论证）。<br></div><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>《统计学习方法》（李航）</a><hr><h3 id="《机器学习》（周志华）"><a href="#《机器学习》（周志华）" class="headerlink" title="《机器学习》（周志华）"></a>《机器学习》（周志华）</h3><div class="note info"><br>比较简单，有些只是提及，并没有很好地解释和证明，更系统和全面一点；是偏教材的书籍，需要有人引导才能更好地使用。<br></div><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>《机器学习》（周志华）</a><hr><h3 id="ISL-An-Introduction-to-Statistical-Learning-with-Applications-in-R"><a href="#ISL-An-Introduction-to-Statistical-Learning-with-Applications-in-R" class="headerlink" title="ISL(An Introduction to Statistical Learning: with Applications in R)"></a>ISL(An Introduction to Statistical Learning: with Applications in R)</h3><div class="note info"><br>ESL的基础书，统计学习的入门书，通俗易懂；监督学习占了大部分篇幅，我觉得这本书最好的部分就是模型的讨论都围绕variance和bias的trade-off展开，还有就是对模型的整体性能。<br></div><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>ISL(An Introduction to Statistical Learning: with Applications in R)</a><hr><h3 id="机器学习Machine-Learning"><a href="#机器学习Machine-Learning" class="headerlink" title="机器学习Machine-Learning"></a>机器学习Machine-Learning</h3><div class="note info"><br>github上别人总结的学习路径，可以看看。<br></div><a class="btn" href="https://github.com/JustFollowUs/Machine-Learning" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>机器学习Machine-Learning</a><hr><h3 id="《机器学习实战》"><a href="#《机器学习实战》" class="headerlink" title="《机器学习实战》"></a>《机器学习实战》</h3><div class="note info"><br>用最基本的pyton语法，从底层上让你构建代码；理论讲的不是很清楚不是很透彻<br></div><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>《机器学习实战》</a><hr><h3 id="《机器学习实战：基于Scikit-Learn和TensorFlow》"><a href="#《机器学习实战：基于Scikit-Learn和TensorFlow》" class="headerlink" title="《机器学习实战：基于Scikit-Learn和TensorFlow》"></a>《机器学习实战：基于Scikit-Learn和TensorFlow》</h3><div class="note info"><br>评价较好<br></div><a class="btn" href="https://wizardforcel.gitbooks.io/hands-on-ml-with-sklearn-and-tf/content/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>《机器学习实战：基于Scikit-Learn和TensorFlow》</a><hr><h3 id="机器学习基石、技法视频"><a href="#机器学习基石、技法视频" class="headerlink" title="机器学习基石、技法视频"></a>机器学习基石、技法视频</h3><div><br><a class="btn" href="https://www.bilibili.com/video/av36731342?from=search&seid=9794092689876019617" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>机器学习基石视频</a><br></div><div><br><a class="btn" href="https://www.bilibili.com/video/av36760800?from=search&seid=9794092689876019617" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>机器学习基技法视频</a><br></div><hr><h3 id="吴恩达机器学习视频"><a href="#吴恩达机器学习视频" class="headerlink" title="吴恩达机器学习视频"></a>吴恩达机器学习视频</h3><a class="btn" href="https://www.bilibili.com/video/av9912938?from=search&seid=12568278012054372391" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>吴恩达机器学习视频</a><hr><h3 id="ISL配套视频"><a href="#ISL配套视频" class="headerlink" title="ISL配套视频"></a>ISL配套视频</h3><a class="btn" href="https://www.bilibili.com/video/av31018744/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>ISL配套视频</a><hr><h3 id="上交张志华统计机器学习视频"><a href="#上交张志华统计机器学习视频" class="headerlink" title="上交张志华统计机器学习视频"></a>上交张志华统计机器学习视频</h3><a class="btn" href="https://www.bilibili.com/video/av24367356?from=search&seid=9713216174558800309" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>上交张志华统计机器学习视频</a><hr><p><br></p><h2 id="机器学习实战项目"><a href="#机器学习实战项目" class="headerlink" title="机器学习实战项目"></a>机器学习实战项目</h2><h3 id="好的项目"><a href="#好的项目" class="headerlink" title="好的项目"></a>好的项目</h3><p>&emsp;&emsp;搜集的好的机器学习项目</p><div class="note default"><br><i class="fa fa-square"></i> AI项目实战<br></div><h4 id="AI项目实战"><a href="#AI项目实战" class="headerlink" title="AI项目实战"></a>AI项目实战</h4><a class="btn" href="[https://www.bilibili.com/video/av24367356?from=search&seid=9713216174558800309](https://mp.weixin.qq.com/s?__biz=MzA5MzY4NTQwMA==&mid=2651007079&idx=2&sn=ce6c0bca93524953faadb247076c54f3&chksm=8bad9b90bcda12866997c37169bc32ba7327cce704849eb47b99ad9dc3bbb2bdb14ef98bb60d&mpshare=1&scene=1&srcid=1120LZcC29PgcfzRodOBFIiC#rd)"><i class="fa fa-telegram fa-lg fa-fw"></i>AI项目实战</a><hr><p><br></p><h3 id="竞赛"><a href="#竞赛" class="headerlink" title="竞赛"></a>竞赛</h3><div class="note info"><ul><li><a href="https://www.kaggle.com/competitions" target="_blank" rel="noopener">Kaggle</a></li><li><a href="http://www.tipdm.org/bdrace/index.html" target="_blank" rel="noopener">“泰迪杯”数据挖掘挑战赛</a></li><li><a href="http://bdc.saikr.com/bdc" target="_blank" rel="noopener">中国高校计算机大赛——大数据挑战赛</a></li><li><a href="https://www.kesci.com/home/competition" target="_blank" rel="noopener">Kesci 科赛</a></li><li><a href="https://challenger.ai/?lan=zh" target="_blank" rel="noopener">AI Challenger 全球AI挑战赛</a></li><li><a href="https://www.datafountain.cn/" target="_blank" rel="noopener">datafountain-DF竞赛平台</a></li><li><a href="http://student.saschampion.com/" target="_blank" rel="noopener">sas中国高校数据分析大赛</a></li><li><a href="http://www.sescn.org.cn" target="_blank" rel="noopener">统计建模大赛</a></li><li><a href="http://gmcm.seu.edu.cn/" target="_blank" rel="noopener">研究生数学建模竞赛</a></li><li><a href="http://www.m2ct.org/index.jsp" target="_blank" rel="noopener">深圳杯数学建模挑战赛</a></li><li><a href="http://shumo.neepu.edu.cn/index.php/Home/Index/index.html" target="_blank" rel="noopener">电工杯数学建模</a></li></ul></div><table><thead><tr><th style="text-align:center">竞赛名称</th><th style="text-align:center">时间范围</th><th style="text-align:center">所需时间</th></tr></thead><tbody><tr><td style="text-align:center">“泰迪杯”数据挖掘挑战赛</td><td style="text-align:center">3.31 4.11 4.15</td><td style="text-align:center">差不多一个半月</td></tr><tr><td style="text-align:center">中国高校计算机大赛-大数据挑战赛</td><td style="text-align:center">5.26 7.25 8.20</td><td style="text-align:center">差不多三个月</td></tr><tr><td style="text-align:center">研究生数学建模竞赛</td><td style="text-align:center">9.10 9.13 9.15 9.19 9.20 9.21</td><td style="text-align:center">三天</td></tr><tr><td style="text-align:center">深圳杯数学建模挑战赛</td><td style="text-align:center">4.15 6.10 8月下旬</td><td style="text-align:center">不详</td></tr><tr><td style="text-align:center">电工杯数学建模</td><td style="text-align:center">5.23 5.25 5.28 7.15</td><td style="text-align:center">不详</td></tr><tr><td style="text-align:center">统计建模大赛</td><td style="text-align:center">5-6月</td><td style="text-align:center">不详</td></tr><tr><td style="text-align:center">sas中国高校数据分析大赛</td><td style="text-align:center">10.10</td><td style="text-align:center">不详</td></tr></tbody></table><hr><p><br></p><h3 id="竞赛对应的教程学习"><a href="#竞赛对应的教程学习" class="headerlink" title="竞赛对应的教程学习"></a>竞赛对应的教程学习</h3><div class="note info"><ul><li><a href="http://www.chioka.in/kaggle-competition-solutions/" target="_blank" rel="noopener">Kaggle Competition Past Solutions</a></li><li><a href="https://zhuanlan.zhihu.com/p/25686876" target="_blank" rel="noopener">Kaggle入门，看这一篇就够了</a></li><li><a href="https://www.jianshu.com/p/47ede942df77" target="_blank" rel="noopener">Kaggle比赛：Text Normalization for English银牌全程记录</a></li><li><a href="http://scarletpan.github.io/2017/04/28/summary-of-get-a-silver-medal-in-kaggle/" target="_blank" rel="noopener">Kaggle 首战拿银总结</a></li><li><a href="https://www.kaggle.com/xirudieyi/house-prices" target="_blank" rel="noopener">House Prices: 比赛经验分享</a></li><li><a href="https://blog.csdn.net/han_xiaoyang/article/details/49797143" target="_blank" rel="noopener">Kaggle泰坦尼克</a></li><li><a href="https://dnc1994.com/2016/04/rank-10-percent-in-first-kaggle-competition/" target="_blank" rel="noopener">如何在 Kaggle 首战中进入前 10%</a></li><li><a href="https://blog.csdn.net/u012162613/article/details/41929171" target="_blank" rel="noopener">大数据竞赛平台——Kaggle 入门篇</a></li><li><a href="https://study.163.com/course/introduction.htm?courseId=1003551009#/courseDetail?tab=1" target="_blank" rel="noopener">Python机器学习kaggle案例</a></li><li><a href="https://www.kesci.com/home/project/5a0575cd60680b295c1ecff2" target="_blank" rel="noopener">DATA TRAIN | 数据分析学习计划</a></li><li><a href="http://chinavis.org/2019/" target="_blank" rel="noopener">可视化与可视分析</a></li></ul></div><hr><p><br></p><h2 id="优秀的博主和网站"><a href="#优秀的博主和网站" class="headerlink" title="优秀的博主和网站"></a>优秀的博主和网站</h2><div class="note info"><ul><li><a href="http://redstonewill.com/" target="_blank" rel="noopener">机器学习、深度学习各种资料，很完善</a></li><li><a href="https://github.com/ageron/handson-ml" target="_blank" rel="noopener">Jupyter notebooks Machine Learning and Deep Learning in python using Scikit-Learn and TensorFlow.</a></li><li><a href="http://www.apachecn.org/" target="_blank" rel="noopener">各种资源的中文翻译</a></li><li><a href="https://plushunter.github.io/" target="_blank" rel="noopener">人大机器学习笔记</a></li><li><a href="https://www.cnblogs.com/maybe2030/" target="_blank" rel="noopener">机器学习算法</a></li><li><a href="https://blog.csdn.net/c406495762/column/info/16415" target="_blank" rel="noopener">Python3机器学习</a></li><li><a href="https://blog.csdn.net/pipisorry" target="_blank" rel="noopener">机器学习、深度学习</a></li><li><a href="http://bourneli.github.io/" target="_blank" rel="noopener">鹅厂大佬</a></li><li><a href="https://www.jianshu.com/p/516f009c0875" target="_blank" rel="noopener">Scikit-learn使用总结</a></li></ul></div><hr><p><br></p><h2 id="收藏的机器学习相关书本和笔记"><a href="#收藏的机器学习相关书本和笔记" class="headerlink" title="收藏的机器学习相关书本和笔记"></a>收藏的机器学习相关书本和笔记</h2><div class="note info"><ul><li><a href="https://zhuanlan.zhihu.com/p/51171643" target="_blank" rel="noopener">李沐 动手学深度学习</a></li><li><a href="https://yoyoyohamapi.gitbooks.io/mit-ml/content/" target="_blank" rel="noopener">斯坦福机器学习笔记</a></li><li><a href="https://wizardforcel.gitbooks.io/hands-on-ml-with-sklearn-and-tf/content/" target="_blank" rel="noopener">Sklearn 与 TensorFlow 机器学习实用指南</a></li><li><a href="https://github.com/apachecn/hands-on-ml-zh" target="_blank" rel="noopener">Sklearn 与 TensorFlow 机器学习实用指南</a></li><li><a href="http://sklearn.apachecn.org/#/" target="_blank" rel="noopener">scikit-learn (sklearn) 官方文档中文版</a></li><li><a href="https://github.com/Ming-Lian/Machine-Learning-Course-in-UCAS" target="_blank" rel="noopener">国科大机器学习课程&amp;机器学习笔记</a></li><li><a href="https://github.com/apachecn/AiLearning" target="_blank" rel="noopener">AiLearning: 机器学习 - MachineLearning - ML、深度学习 - DeepLearning - DL、自然语言处理 NLP</a></li><li><a href="https://feisky.xyz/machine-learning/" target="_blank" rel="noopener">机器学习算法</a></li><li><a href="https://machine-learning-python.kspax.io/" target="_blank" rel="noopener">機器學習：使用Python</a></li><li><a href="https://hit-scir.gitbooks.io/neural-networks-and-deep-learning-zh_cn/content/" target="_blank" rel="noopener">Neural Networks and Deep Learning中文</a></li><li><a href="https://tigerneil.gitbooks.io/neural-networks-and-deep-learning-zh/content/" target="_blank" rel="noopener">神经网络与深度学习另一个版本</a></li><li><a href="https://accepteddoge.com/machine-learning-yearning-cn/docs/home/" target="_blank" rel="noopener">机器学习训练秘籍</a></li><li><a href="https://github.com/imhuay/Algorithm_Interview_Notes-Chinese" target="_blank" rel="noopener">Algorithm_Interview_Notes-Chinese</a></li><li><a href="https://github.com/ageron/tf2_course" target="_blank" rel="noopener">Notebooks for my “Deep Learning with TensorFlow 2 and Keras” course</a></li></ul></div><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;需要学习的机器学习内容汇总，包括自己总结的学习路线、书本和视频内容学习、竞赛等实战项目、很好的博主和网站以及收藏的shell相关书本等相关内容。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="规划" scheme="http://showteeth.tech/categories/%E8%A7%84%E5%88%92/"/>
    
    
      <category term="学习计划" scheme="http://showteeth.tech/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="机器学习" scheme="http://showteeth.tech/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python学习计划</title>
    <link href="http://showteeth.tech/posts/22463.html"/>
    <id>http://showteeth.tech/posts/22463.html</id>
    <published>2019-02-23T03:35:14.000Z</published>
    <updated>2019-02-27T03:15:00.936Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>需要学习的Python内容汇总，包括面向对象、常用模块使用、其他技巧整理、常用工具整理、实战项目、优秀的博主和网站以及收藏的Python相关书本等相关内容。</p></div><a id="more"></a><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>&emsp;&emsp;这个是我一直想要学习的内容，但是由于诸多原因还没能学习，所以把这个放在了Python学习的第一位。</p><div><br><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>面向对象</a><br></div><div><br><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>面向对象-网页收藏夹</a><br></div><hr><p><br></p><h2 id="常用模块使用"><a href="#常用模块使用" class="headerlink" title="常用模块使用"></a>常用模块使用</h2><p>&emsp;&emsp;这里是一些比较常用的模块的学习。</p><div class="note default"><br><i class="fa fa-square"></i> numpy-数组与矩阵运算<br><i class="fa fa-square"></i> matplotlib-绘图<br><i class="fa fa-square"></i> Seaborn-绘图<br><i class="fa fa-square"></i> SciPy-科学计算<br><i class="fa fa-square"></i> argparse-命令行选项与参数解析<br><i class="fa fa-square"></i> Bokeh-交互式数据可视化<br><i class="fa fa-square"></i> HDF5-大数据存储与读取<br><i class="fa fa-square"></i> tqdm-显示运行进度条<br><i class="fa fa-square"></i> logging-日志<br><i class="fa fa-square"></i> glob-文件操作相关模块<br><i class="fa fa-square"></i> os-处理文件和目录<br><i class="fa fa-square"></i> sys-程序与python解释器的交互<br><i class="fa fa-square"></i> rpy2-调用R语言<br><i class="fa fa-square"></i> collections-内建的一个集合模块<br><br></div><hr><h3 id="numpy-数组与矩阵运算"><a href="#numpy-数组与矩阵运算" class="headerlink" title="numpy-数组与矩阵运算"></a>numpy-数组与矩阵运算</h3><div><br><a class="btn" href="https://wklchris.github.io/Py3-numpy.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>numpy-数组与矩阵运算</a><br></div><div><br><a class="btn" href="https://mp.weixin.qq.com/s/5TB0_7gcv5CHV5KyRHGD7Q" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>numpy-数组与矩阵运算</a><br></div><hr><h3 id="matplotlib-绘图"><a href="#matplotlib-绘图" class="headerlink" title="matplotlib-绘图"></a>matplotlib-绘图</h3><a class="btn" href="https://matplotlib.org/users/pyplot_tutorial.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>matplotlib-绘图</a><hr><h3 id="Seaborn-绘图"><a href="#Seaborn-绘图" class="headerlink" title="Seaborn-绘图"></a>Seaborn-绘图</h3><a class="btn" href="https://zhuanlan.zhihu.com/p/27435863" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Seaborn-绘图</a><hr><h3 id="SciPy-科学计算"><a href="#SciPy-科学计算" class="headerlink" title="SciPy-科学计算"></a>SciPy-科学计算</h3><a class="btn" href="https://www.kancloud.cn/wizardforcel/scipy-lecture-notes/129867" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>SciPy-科学计算</a><hr><h3 id="argparse-命令行选项与参数解析"><a href="#argparse-命令行选项与参数解析" class="headerlink" title="argparse-命令行选项与参数解析"></a>argparse-命令行选项与参数解析</h3><a class="btn" href="http://blog.xiayf.cn/2013/03/30/argparse/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>argparse-命令行选项与参数解析</a><hr><h3 id="Bokeh-交互式数据可视化"><a href="#Bokeh-交互式数据可视化" class="headerlink" title="Bokeh-交互式数据可视化"></a>Bokeh-交互式数据可视化</h3><a class="btn" href="https://zhuanlan.zhihu.com/p/52093055" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Bokeh-交互式数据可视化</a><hr><h3 id="HDF5-大数据存储与读取"><a href="#HDF5-大数据存储与读取" class="headerlink" title="HDF5-大数据存储与读取"></a>HDF5-大数据存储与读取</h3><a class="btn" href="https://www.jianshu.com/p/ae12525450e8" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>HDF5-大数据存储与读取</a><hr><h3 id="tqdm-显示运行进度条"><a href="#tqdm-显示运行进度条" class="headerlink" title="tqdm-显示运行进度条"></a>tqdm-显示运行进度条</h3><a class="btn" href="https://tqdm.github.io/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>tqdm-显示运行进度条</a><hr><h3 id="logging-日志"><a href="#logging-日志" class="headerlink" title="logging-日志"></a>logging-日志</h3><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>logging-日志</a><hr><h3 id="glob-文件操作相关模块"><a href="#glob-文件操作相关模块" class="headerlink" title="glob-文件操作相关模块"></a>glob-文件操作相关模块</h3><a class="btn" href="https://www.jianshu.com/p/542e55b29324" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>glob-文件操作相关模块</a><hr><h3 id="os-处理文件和目录"><a href="#os-处理文件和目录" class="headerlink" title="os-处理文件和目录"></a>os-处理文件和目录</h3><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>os-处理文件和目录</a><hr><h3 id="sys-程序与python解释器的交互"><a href="#sys-程序与python解释器的交互" class="headerlink" title="sys-程序与python解释器的交互"></a>sys-程序与python解释器的交互</h3><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>sys-程序与python解释器的交互</a><hr><h3 id="rpy2-调用R语言"><a href="#rpy2-调用R语言" class="headerlink" title="rpy2-调用R语言"></a>rpy2-调用R语言</h3><div><br><a class="btn" href="https://blog.csdn.net/suzyu12345/article/details/50587267" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>rpy2-调用R语言</a><br></div><div><br><a class="btn" href="https://www.cnblogs.com/lyrichu/p/6819079.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>rpy2-调用R语言</a><br></div><hr><h3 id="collections-内建的一个集合模块"><a href="#collections-内建的一个集合模块" class="headerlink" title="collections-内建的一个集合模块"></a>collections-内建的一个集合模块</h3><div><br><a class="btn" href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431953239820157155d21c494e5786fce303f3018c86000" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>collections-内建的一个集合模块</a><br></div><hr><p><br></p><h2 id="其他技巧整理"><a href="#其他技巧整理" class="headerlink" title="其他技巧整理"></a>其他技巧整理</h2><p>&emsp;&emsp;这部分内容虽然不是具体的模块，但是对他们的理解和应用对于Python的学习非常有益处。</p><div class="note default"><br><i class="fa fa-square"></i> main函数的理解<br><i class="fa fa-square"></i> 接入pipeline<br></div><hr><h3 id="main函数的理解"><a href="#main函数的理解" class="headerlink" title="main函数的理解"></a>main函数的理解</h3><div><br><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>接入pipeline</a><br></div><hr><h3 id="接入pipeline"><a href="#接入pipeline" class="headerlink" title="接入pipeline"></a>接入pipeline</h3><div><br><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>接入pipeline</a><br></div><hr><p><br></p><h2 id="常用工具整理"><a href="#常用工具整理" class="headerlink" title="常用工具整理"></a>常用工具整理</h2><h3 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h3><div><br><a class="btn" href="https://jupyter-notebook.readthedocs.io/en/stable/public_server.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>jupyter server搭建</a><br></div><div><br><a class="btn" href="https://bitmingw.com/2017/07/09/run-jupyter-notebook-server/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>jupyter server搭建</a><br></div><div><br><a class="btn" href="https://zhuanlan.zhihu.com/p/32600329" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>关于Jupyter Notebook的28个技巧</a><br></div><div><br><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>印象笔记</a><br></div><hr><p><br></p><h2 id="实战项目"><a href="#实战项目" class="headerlink" title="实战项目"></a>实战项目</h2><p>&emsp;&emsp;这部分是收集的一些实战项目，可以在学习的过程中穿插学习，巩固对知识的掌握</p><p></p><div class="note default"><br><i class="fa fa-square"></i> 以撸代码的形式学习Python<br><i class="fa fa-square"></i> Python项目-w3cschool<br><i class="fa fa-square"></i> 电影分析-爬虫+可视化<br><i class="fa fa-square"></i> 12个Python实战项目教程<br><i class="fa fa-square"></i> Python练手项目推荐<br><i class="fa fa-square"></i> Python100例测试<br></div><br><p></p><hr><h3 id="以撸代码的形式学习Python"><a href="#以撸代码的形式学习Python" class="headerlink" title="以撸代码的形式学习Python"></a>以撸代码的形式学习Python</h3><a class="btn" href="https://github.com/xianhu/LearnPython" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>以撸代码的形式学习Python</a><hr><h3 id="Python项目-w3cschool"><a href="#Python项目-w3cschool" class="headerlink" title="Python项目-w3cschool"></a>Python项目-w3cschool</h3><a class="btn" href="https://123.w3cschool.cn/python_projects" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>以撸代码的形式学习Python</a><hr><h3 id="电影分析-爬虫-可视化"><a href="#电影分析-爬虫-可视化" class="headerlink" title="电影分析-爬虫+可视化"></a>电影分析-爬虫+可视化</h3><a class="btn" href="https://mp.weixin.qq.com/s?__biz=MzAwOTQ4MzY1Nw==&mid=2247487205&idx=1&sn=82bbe82f1274b8dd6b83ad24aeb08203&chksm=9b5faa03ac2823159ce36c35f7e2c96519737994f6b5efab2190203341eedc65310c1db15cc6&mpshare=1&scene=1&srcid=1127wHAXUaLUP0tzR8jyduMA#rd" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>电影分析-爬虫+可视化</a><hr><h3 id="12个Python实战项目教程"><a href="#12个Python实战项目教程" class="headerlink" title="12个Python实战项目教程"></a>12个Python实战项目教程</h3><a class="btn" href="https://mp.weixin.qq.com/s?__biz=MzUzMjk1MDI0OQ==&mid=2247484138&idx=1&sn=43417bbcd4094bc8bd05dfe037025e6d&chksm=faaa3f6ccdddb67a02b78ae74af243785556c41021e93cf2f847aec6317e62fb0d426feda057&mpshare=1&scene=1&srcid=1126FWvmWRNX8eJdim9fEufv#rd" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>12个Python实战项目教程</a><hr><h3 id="Python练手项目推荐"><a href="#Python练手项目推荐" class="headerlink" title="Python练手项目推荐"></a>Python练手项目推荐</h3><a class="btn" href="https://www.zhihu.com/question/29372574" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Python练手项目推荐</a><hr><h3 id="Python100例测试"><a href="#Python100例测试" class="headerlink" title="Python100例测试"></a>Python100例测试</h3><a class="btn" href="http://www.runoob.com/python/python-100-examples.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>Python100例测试</a><hr><p><br></p><h2 id="优秀的博主和网站"><a href="#优秀的博主和网站" class="headerlink" title="优秀的博主和网站"></a>优秀的博主和网站</h2><div class="note info"><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰</a></li><li><a href="http://liyangbit.com/" target="_blank" rel="noopener">Python数据之道</a></li></ul></div><hr><p><br></p><h2 id="收藏的Python相关书本"><a href="#收藏的Python相关书本" class="headerlink" title="收藏的Python相关书本"></a>收藏的Python相关书本</h2><div class="note info"><ul><li><a href="https://jackaudrey.gitbooks.io/python-numpy/content/" target="_blank" rel="noopener">Python之numpy教程</a></li><li><a href="https://wizardforcel.gitbooks.io/matplotlib-user-guide/content/1.html" target="_blank" rel="noopener">Matplotlib用户指南</a></li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p25_creating_cached_instances.html" target="_blank" rel="noopener">类与对象</a></li><li><a href="https://l1nwatch.gitbooks.io/writing_solid_python_code_gitbook/content/" target="_blank" rel="noopener">编写高质量代码改善 Python 程序的 91 个建议</a></li><li><a href="https://wizardforcel.gitbooks.io/core-python-2e/content/" target="_blank" rel="noopener">Python 核心编程 第二版</a></li><li><a href="https://eastlakeside.gitbooks.io/interpy-zh/content/" target="_blank" rel="noopener">Python进阶</a></li><li><a href="https://xidianwlc.gitbooks.io/python-data-structrue-and-algrothms/content/" target="_blank" rel="noopener">Python数据结构与算法</a></li><li><a href="https://wizardforcel.gitbooks.io/matplotlib-intro-tut/content/" target="_blank" rel="noopener">Python 数据科学入门教程</a></li><li><a href="https://wizardforcel.gitbooks.io/hands-on-ml-with-sklearn-and-tf/content/" target="_blank" rel="noopener">Sklearn 与 TensorFlow 机器学习实用指南</a></li><li><a href="http://sklearn.apachecn.org/#/" target="_blank" rel="noopener">scikit-learn (sklearn) 官方文档中文版</a></li><li><a href="https://wizardforcel.gitbooks.io/sklearn-cookbook/content/" target="_blank" rel="noopener">Scikit-learn 秘籍</a></li><li><a href="https://github.com/apachecn/python_data_analysis_and_mining_action" target="_blank" rel="noopener">python数据分析与挖掘实战的代码笔记</a></li><li><a href="https://germey.gitbooks.io/python3webspider/content/" target="_blank" rel="noopener">Python3网络爬虫开发实战</a></li><li><a href="https://datartisan.gitbooks.io/begining-text-mining-with-python/content/" target="_blank" rel="noopener">Python 文本数据分析初学指南</a></li></ul></div><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;需要学习的Python内容汇总，包括面向对象、常用模块使用、其他技巧整理、常用工具整理、实战项目、优秀的博主和网站以及收藏的Python相关书本等相关内容。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="规划" scheme="http://showteeth.tech/categories/%E8%A7%84%E5%88%92/"/>
    
    
      <category term="学习计划" scheme="http://showteeth.tech/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="Python" scheme="http://showteeth.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习计划</title>
    <link href="http://showteeth.tech/posts/34794.html"/>
    <id>http://showteeth.tech/posts/34794.html</id>
    <published>2019-02-22T13:06:39.000Z</published>
    <updated>2019-03-01T08:58:23.679Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>需要学习的Linux内容汇总，包括基本命令、其他一些常用的总结、shell编程、小技巧、其他博主的命令总结、很好的博主和网站以及收藏的shell相关书本等相关内容。</p></div><a id="more"></a><h2 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h2><p>&emsp;&emsp;这些命令是在工作和学习中常用的一些命令，有些我之前系统的学习过，但是学习的笔记都存放在我的印象笔记上，等有时间了会把这些笔记整理到这个博客上（回顾之前学习的内容），感觉博客上面记笔记会比较清爽，便于后期回顾学习，还没有系统学习过的命令后期都将直接呈现在这个博客上。下面列出了需要学习的常用命令，接下来将依据这个进行学习，同时在学习中遇到新的常用命令也会进行补充和完善，同时这一页主要是一个综括页，具体的每一个命令的学习笔记都将单独的页面展示，但是可以通过这个页面直接链接过去。</p><div class="note primary"><br><i class="fa fa-check-square"></i> awk系列-强大的文本处理语言<br><i class="fa fa-check-square"></i> find-搜索文件名<br><i class="fa fa-check-square"></i> grep-搜索文件内容<br><i class="fa fa-check-square"></i> sed-文本处理工具<br><i class="fa fa-check-square"></i> sort-排序<br><i class="fa fa-check-square"></i> uniq-去重<br><i class="fa fa-check-square"></i> join-连接文本<br><i class="fa fa-check-square"></i> cut-按列切分文件字段工具<br><i class="fa fa-square"></i> comm-文件比较，文本文件的交集、差集与求差<br><i class="fa fa-square"></i> cat-显示、读取或拼接文件内容<br><i class="fa fa-square"></i> wget-下载网站文件或网页<br><i class="fa fa-square"></i> curl-命令行下的高级网络工具<br><i class="fa fa-square"></i> nohup-不挂断地运行命令<br><i class="fa fa-square"></i> 打印输出<br><i class="fa fa-square"></i> 数据归档和解压缩<br><i class="fa fa-square"></i> paste-按列合并文件<br><i class="fa fa-square"></i> split-按大小分割文件<br><i class="fa fa-square"></i> csplit-根据文本内容切割文件<br><i class="fa fa-square"></i> scp-跨平台复制命令<br><i class="fa fa-square"></i> shuf-随机打乱文件<br><i class="fa fa-square"></i> seq-产生固定步长整数<br><i class="fa fa-square"></i> ps-报告当前系统的进程状态<br><i class="fa fa-square"></i> rsnyc-远程数据同步<br><i class="fa fa-square"></i> xargs-将输入转换成命令行参数<br><i class="fa fa-square"></i> read-从键盘或文件中获取标准输入<br><i class="fa fa-square"></i> time-计算命令执行花费的时间<br><i class="fa fa-square"></i> 获取时间日期格式和延时<br><i class="fa fa-square"></i> 获取时间日期格式和延时<br></div><hr><h3 id="awk系列-强大的文本处理语言"><a href="#awk系列-强大的文本处理语言" class="headerlink" title="awk系列-强大的文本处理语言"></a>awk系列-强大的文本处理语言</h3><p>该系列包括13个小节，已经学习完毕 ，笔记都保存在印象笔记上。</p><hr><h3 id="find-搜索文件名"><a href="#find-搜索文件名" class="headerlink" title="find-搜索文件名"></a>find-搜索文件名</h3><hr><h3 id="grep-搜索文件内容"><a href="#grep-搜索文件内容" class="headerlink" title="grep-搜索文件内容"></a>grep-搜索文件内容</h3><hr><h3 id="sed-文本处理工具"><a href="#sed-文本处理工具" class="headerlink" title="sed-文本处理工具"></a>sed-文本处理工具</h3><a class="btn" href="http://showteeth.tech/posts/1752.html"><i class="fa fa-telegram fa-lg fa-fw"></i>sed-文本处理工具</a><hr><h3 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort-排序"></a>sort-排序</h3><a class="btn" href="http://showteeth.tech/posts/61024.html"><i class="fa fa-telegram fa-lg fa-fw"></i>sort-排序</a><hr><h3 id="uniq-去重"><a href="#uniq-去重" class="headerlink" title="uniq-去重"></a>uniq-去重</h3><a class="btn" href="http://showteeth.tech/posts/20744.html"><i class="fa fa-telegram fa-lg fa-fw"></i>uniq-去重</a><hr><h3 id="join-连接文本"><a href="#join-连接文本" class="headerlink" title="join-连接文本"></a>join-连接文本</h3><a class="btn" href="http://showteeth.tech/posts/5579.html"><i class="fa fa-telegram fa-lg fa-fw"></i>join-连接文本</a><hr><h3 id="cut-按列切分文件字段工具"><a href="#cut-按列切分文件字段工具" class="headerlink" title="cut-按列切分文件字段工具"></a>cut-按列切分文件字段工具</h3><a class="btn" href="http://showteeth.tech/posts/64687.html"><i class="fa fa-telegram fa-lg fa-fw"></i>cut-按列切分文件字段工具</a><hr><h3 id="comm-文件比较，文本文件的交集、差集与求差"><a href="#comm-文件比较，文本文件的交集、差集与求差" class="headerlink" title="comm-文件比较，文本文件的交集、差集与求差"></a>comm-文件比较，文本文件的交集、差集与求差</h3><a class="btn" href="http://man.linuxde.net/comm" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>comm-文件比较，文本文件的交集、差集与求差</a><hr><h3 id="cat-显示、读取或拼接文件内容"><a href="#cat-显示、读取或拼接文件内容" class="headerlink" title="cat-显示、读取或拼接文件内容"></a>cat-显示、读取或拼接文件内容</h3><a class="btn" href="http://man.linuxde.net/cat" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>cat-显示、读取或拼接文件内容</a><hr><h3 id="wget-下载网站文件或网页"><a href="#wget-下载网站文件或网页" class="headerlink" title="wget-下载网站文件或网页"></a>wget-下载网站文件或网页</h3><a class="btn" href="http://man.linuxde.net/wget" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>wget-下载网站文件或网页</a><hr><h3 id="curl-命令行下的高级网络工具"><a href="#curl-命令行下的高级网络工具" class="headerlink" title="curl-命令行下的高级网络工具"></a>curl-命令行下的高级网络工具</h3><a class="btn" href="http://man.linuxde.net/curl" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>wget-下载网站文件或网页</a><hr><h3 id="nohup-不挂断地运行命令"><a href="#nohup-不挂断地运行命令" class="headerlink" title="nohup-不挂断地运行命令"></a>nohup-不挂断地运行命令</h3><a class="btn" href="https://www.cnblogs.com/EasonJim/p/6850009.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>nohup-不挂断地运行命令</a><hr><h3 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h3><a class="btn" href="http://man.linuxde.net/shell-script/shell-1" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>打印输出</a><hr><h3 id="数据归档和解压缩"><a href="#数据归档和解压缩" class="headerlink" title="数据归档和解压缩"></a>数据归档和解压缩</h3><a class="btn" href="http://man.linuxde.net/shell-script" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>数据归档和解压缩</a><hr><h3 id="paste-按列合并文件"><a href="#paste-按列合并文件" class="headerlink" title="paste-按列合并文件"></a>paste-按列合并文件</h3><a class="btn" href="http://man.linuxde.net/paste" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>paste-按列合并文件</a><hr><h3 id="split-按大小分割文件"><a href="#split-按大小分割文件" class="headerlink" title="split-按大小分割文件"></a>split-按大小分割文件</h3><a class="btn" href="http://man.linuxde.net/split" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>split-按大小分割文件</a><hr><h3 id="csplit-根据文本内容切割文件"><a href="#csplit-根据文本内容切割文件" class="headerlink" title="csplit-根据文本内容切割文件"></a>csplit-根据文本内容切割文件</h3><a class="btn" href="http://man.linuxde.net/csplit" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>csplit-根据文本内容切割文件</a><hr><h3 id="scp-跨平台复制命令"><a href="#scp-跨平台复制命令" class="headerlink" title="scp-跨平台复制命令"></a>scp-跨平台复制命令</h3><a class="btn" href="http://man.linuxde.net/scp" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>scp-跨平台复制命令</a><hr><h3 id="shuf-随机打乱文件"><a href="#shuf-随机打乱文件" class="headerlink" title="shuf-随机打乱文件"></a>shuf-随机打乱文件</h3><a class="btn" href="https://linux.cn/article-9635-1.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>shuf-随机打乱文件</a><hr><h3 id="seq-产生固定步长整数"><a href="#seq-产生固定步长整数" class="headerlink" title="seq-产生固定步长整数"></a>seq-产生固定步长整数</h3><a class="btn" href="https://man.linuxde.net/seq" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>seq-产生固定步长整数</a><hr><h3 id="ps-报告当前系统的进程状态"><a href="#ps-报告当前系统的进程状态" class="headerlink" title="ps-报告当前系统的进程状态"></a>ps-报告当前系统的进程状态</h3><a class="btn" href="https://wangchujiang.com/linux-command/c/ps.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>ps-报告当前系统的进程状态</a><hr><h3 id="rsnyc-远程数据同步"><a href="#rsnyc-远程数据同步" class="headerlink" title="rsnyc-远程数据同步"></a>rsnyc-远程数据同步</h3><a class="btn" href="http://man.linuxde.net/rsync" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>rsnyc-远程数据同步</a><hr><h3 id="xargs-将输入转换成命令行参数"><a href="#xargs-将输入转换成命令行参数" class="headerlink" title="xargs-将输入转换成命令行参数"></a>xargs-将输入转换成命令行参数</h3><a class="btn" href="http://man.linuxde.net/xargs" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>xargs-将输入转换成命令行参数</a><hr><h3 id="read-从键盘或文件中获取标准输入"><a href="#read-从键盘或文件中获取标准输入" class="headerlink" title="read-从键盘或文件中获取标准输入"></a>read-从键盘或文件中获取标准输入</h3><a class="btn" href="http://man.linuxde.net/read" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>read-从键盘或文件中获取标准输入</a><hr><h3 id="time-计算命令执行花费的时间"><a href="#time-计算命令执行花费的时间" class="headerlink" title="time-计算命令执行花费的时间"></a>time-计算命令执行花费的时间</h3><a class="btn" href="http://man.linuxde.net/time" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>time-计算命令执行花费的时间</a><hr><h3 id="获取时间日期格式和延时"><a href="#获取时间日期格式和延时" class="headerlink" title="获取时间日期格式和延时"></a>获取时间日期格式和延时</h3><a class="btn" href="http://man.linuxde.net/shell-script" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>获取时间日期格式和延时</a><hr><p><br></p><h2 id="其他一些常用内容总结"><a href="#其他一些常用内容总结" class="headerlink" title="其他一些常用内容总结"></a>其他一些常用内容总结</h2><p>&emsp;&emsp;这些虽然不是具体的linux命令，但是在具体学习中页非常实用，所以有必要进行积累和整理。</p><div class="note default"><br><i class="fa fa-check-square"></i> Linux中特殊符号用法<br><i class="fa fa-check-square"></i> 浮点计算并保留小数<br><i class="fa fa-check-square"></i> 字符串截取方法<br><i class="fa fa-check-square"></i> 单行命令嵌套<br><i class="fa fa-check-square"></i> 输入输出重定向<br></div><hr><h3 id="Linux中特殊符号用法"><a href="#Linux中特殊符号用法" class="headerlink" title="Linux中特殊符号用法"></a>Linux中特殊符号用法</h3><a class="btn" href="http://showteeth.tech/posts/55603.html"><i class="fa fa-telegram fa-lg fa-fw"></i>Linux中特殊符号用法</a><hr><h3 id="浮点计算并保留小数"><a href="#浮点计算并保留小数" class="headerlink" title="浮点计算并保留小数"></a>浮点计算并保留小数</h3><a class="btn" href="http://showteeth.tech/posts/28430.html"><i class="fa fa-telegram fa-lg fa-fw"></i>浮点计算并保留小数</a><hr><h3 id="字符串截取方法"><a href="#字符串截取方法" class="headerlink" title="字符串截取方法"></a>字符串截取方法</h3><a class="btn" href="http://showteeth.tech/posts/43811.html"><i class="fa fa-telegram fa-lg fa-fw"></i>字符串截取方法</a><hr><h3 id="单行命令嵌套"><a href="#单行命令嵌套" class="headerlink" title="单行命令嵌套"></a>单行命令嵌套</h3><a class="btn" href="http://showteeth.tech/50164.html"><i class="fa fa-telegram fa-lg fa-fw"></i>单行命令嵌套</a><h3 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h3><a class="btn" href="http://showteeth.tech/posts/55603.html"><i class="fa fa-telegram fa-lg fa-fw"></i>输入输出重定向</a><hr><p><br></p><h2 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h2><p>&emsp;&emsp;这一块平常接触没有那些常用命令那么频繁，但是也很多很实用（不用为了一个简单的目的去编写一个Python脚本），所以这里需要系统的学习一下。</p><div class="note default"><br><i class="fa fa-check-square"></i> 传递参数<br><i class="fa fa-square"></i> 循环结构<br><i class="fa fa-square"></i> if判断<br><i class="fa fa-square"></i> 数组<br><i class="fa fa-square"></i> 数学运算<br></div><hr><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><a class="btn" href="http://man.linuxde.net/shell-script/shell-5" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>循环结构</a><hr><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><a class="btn" href="http://man.linuxde.net/shell-script/shell-5" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>if判断</a><hr><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><a class="btn" href="http://man.linuxde.net/shell-script/shell-4" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>传递参数</a><hr><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><a class="btn" href="https://baijiahao.baidu.com/s?id=1608244941950314734&wfr=spider&for=pc https://www.cnblogs.com/hanframe/p/3564313.html" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>数组</a><hr><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><a class="btn" href="http://man.linuxde.net/shell-script/shell-1" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>数学运算</a><hr><p><br></p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>&emsp;&emsp;这里总结一下使用常用命令以及进行shell编程的一些常用小技巧。</p><h3 id="awk使用技巧"><a href="#awk使用技巧" class="headerlink" title="awk使用技巧"></a>awk使用技巧</h3><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>awk使用技巧</a><hr><h3 id="shell技巧-非shell脚本"><a href="#shell技巧-非shell脚本" class="headerlink" title="shell技巧-非shell脚本"></a>shell技巧-非shell脚本</h3><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>shell技巧-非shell脚本</a><hr><h3 id="shell脚本技巧"><a href="#shell脚本技巧" class="headerlink" title="shell脚本技巧"></a>shell脚本技巧</h3><a class="btn" href="http://showteeth.tech/"><i class="fa fa-telegram fa-lg fa-fw"></i>shell脚本技巧</a><hr><p><br></p><h2 id="其他博主的命令总结"><a href="#其他博主的命令总结" class="headerlink" title="其他博主的命令总结"></a>其他博主的命令总结</h2><p>&emsp;&emsp;其他优秀的博主整理的常用命令，可作为自查以及必要时查阅。</p><div class="note info"><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxODM4MjA5MA==&amp;mid=2247487779&amp;idx=2&amp;sn=792e34b6d074f91368a4b2bafc1b1d03&amp;chksm=97ea3b46a09db2504a99d0105f4c24e995df7404b9603bd6ecaa53ff789df12dc785c8d5e8aa&amp;mpshare=1&amp;scene=1&amp;srcid=1124yMS6YBS7wVs10BXncBTP#rd" target="_blank" rel="noopener">97条 Linux 常用命令总结</a></li><li><a href="http://weiyanying.com/2018/03/24/Linux%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">文件与目录基础自查</a></li></ul></div><hr><p><br></p><h2 id="很好的博主和网站"><a href="#很好的博主和网站" class="headerlink" title="很好的博主和网站"></a>很好的博主和网站</h2><div class="note info"><ul><li><a href="http://www.zsythink.net/" target="_blank" rel="noopener">大佬博客，讲解非常细致</a></li><li><a href="http://man.linuxde.net/shell-script" target="_blank" rel="noopener">常用命令和shell总结、很完善</a></li><li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">查询各种linux命令，基本都有且分类清楚</a></li><li><a href="https://wangchujiang.com/linux-command/" target="_blank" rel="noopener">查询各种linux命令，基本都有</a></li><li><a href="https://www.cnblogs.com/peida/tag/%E6%AF%8F%E6%97%A5%E4%B8%80linux%E5%91%BD%E4%BB%A4/default.html?page=4" target="_blank" rel="noopener">其他博主的每日一个linux命令</a></li><li><a href="https://www.jb51.net/list/list_235_1.htm" target="_blank" rel="noopener">讲解以及实际问题代码</a></li></ul></div><hr><p><br></p><h2 id="收藏的shell相关书本"><a href="#收藏的shell相关书本" class="headerlink" title="收藏的shell相关书本"></a>收藏的shell相关书本</h2><div class="note info"><ul><li><a href="https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/" target="_blank" rel="noopener">鸟哥的Linux私房菜：基础学习篇</a></li><li><a href="https://linuxstory.gitbooks.io/advanced-bash-scripting-guide-in-chinese/content/" target="_blank" rel="noopener">高级Bash脚本编程指南</a></li><li><a href="https://tinylab.gitbooks.io/shellbook/content/zh/preface/01-chapter1.html" target="_blank" rel="noopener">Shell 编程范例</a></li><li><a href="https://nicesu.gitbooks.io/shell-guide/content/" target="_blank" rel="noopener">shell脚本</a></li><li><a href="https://www.kancloud.cn/thinkphp/linux-command-line/39431" target="_blank" rel="noopener">linux command line中文版</a></li></ul></div><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;需要学习的Linux内容汇总，包括基本命令、其他一些常用的总结、shell编程、小技巧、其他博主的命令总结、很好的博主和网站以及收藏的shell相关书本等相关内容。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="规划" scheme="http://showteeth.tech/categories/%E8%A7%84%E5%88%92/"/>
    
    
      <category term="学习计划" scheme="http://showteeth.tech/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="Linux" scheme="http://showteeth.tech/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>next-markdown技巧和模板-持续更新</title>
    <link href="http://showteeth.tech/posts/37746.html"/>
    <id>http://showteeth.tech/posts/37746.html</id>
    <published>2019-02-16T15:38:36.000Z</published>
    <updated>2019-02-27T03:13:07.366Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>博客中常用markdown的样式和模板</p></div><a id="more"></a><h2 id="markdown技巧"><a href="#markdown技巧" class="headerlink" title="markdown技巧"></a>markdown技巧</h2><h3 id="分割线和空行"><a href="#分割线和空行" class="headerlink" title="分割线和空行"></a>分割线和空行</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">上面是分割线</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">上面是空行</span><br></pre></td></tr></table></figure><p></p><hr><br><strong>上面是分割线</strong><br><br><br><strong>上面是空行</strong><p></p><hr><h3 id="markdown引用以及html写法"><a href="#markdown引用以及html写法" class="headerlink" title="markdown引用以及html写法"></a>markdown引用以及html写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>引用内容<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果前后间隙很小，可以像下面这样写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>引用内容<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><blockquote>引用内容</blockquote><p></p><blockquote>引用内容</blockquote><p></p><hr><h3 id="居中和右对齐"><a href="#居中和右对齐" class="headerlink" title="居中和右对齐"></a>居中和右对齐</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 居中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 右对齐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:right"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><center>内容</center><div style="text-align:right">内容</div><hr><h3 id="字体大小和颜色"><a href="#字体大小和颜色" class="headerlink" title="字体大小和颜色"></a>字体大小和颜色</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#FF0000"</span> <span class="attr">size</span>=<span class="string">"8px"</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#FFFF00"</span> <span class="attr">size</span>=<span class="string">"6px"</span>&gt;</span>黄色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#00FF00"</span> <span class="attr">size</span>=<span class="string">"4px"</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><ul><li><font color="#FF0000" size="8px">红色</font></li><li><font color="#FFFF00" size="6px">黄色</font></li><li><font color="#00FF00" size="4px">绿色</font></li><li>更多颜色请查看 <a href="http://www.bootcss.com/p/websafecolors" target="_blank" rel="noopener">web安全色</a>、<a href="http://tool.oschina.net/commons?type=3" target="_blank" rel="noopener">颜色对照表</a></li></ul><hr><h3 id="字体高亮显示"><a href="#字体高亮显示" class="headerlink" title="字体高亮显示"></a>字体高亮显示</h3><div class="note info">使用mark标签进行标记，高亮显示文档中的文字</div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>这是一个标记<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">使用mark标签进行标记，<span class="tag">&lt;<span class="name">mark</span>&gt;</span>高亮显示<span class="tag">&lt;/<span class="name">mark</span>&gt;</span>文档中的文字</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><p>使用mark标签进行标记，<mark>高亮显示</mark>文档中的文字</p><hr><h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</span><br><span class="line">| ------ | ------ | ------ |</span><br><span class="line">| *短文本* | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><table><thead><tr><th>一个普通标题</th><th>一个普通标题</th><th>一个普通标题</th></tr></thead><tbody><tr><td><em>短文本</em></td><td>中等文本</td><td>稍微长一点的文本</td></tr><tr><td>稍微长一点的文本</td><td>短文本</td><td>中等文本</td></tr></tbody></table><div class="note warning"><ul><li>表格的语句<mark>上一行必须为空行</mark>，不然表格不生效;</li><li>内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略;</li><li>-的数量至少有一个;</li><li>|、-、:之间的多余空格会被忽略，不影响布局;</li><li>表格内容中可以套用其他用法，如加粗、斜体等。</li></ul></div><h4 id="表格对齐问题"><a href="#表格对齐问题" class="headerlink" title="表格对齐问题"></a>表格对齐问题</h4><ul><li>-:表示内容和标题栏居右对齐；</li><li>:-表示内容和标题栏居左对齐；</li><li>:-:表示内容和标题栏居中对齐；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</span><br><span class="line">| :------ | :------: | ------: |</span><br><span class="line">| *短文本* | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><table><thead><tr><th style="text-align:left">一个普通标题</th><th style="text-align:center">一个普通标题</th><th style="text-align:right">一个普通标题</th></tr></thead><tbody><tr><td style="text-align:left"><em>短文本</em></td><td style="text-align:center">中等文本</td><td style="text-align:right">稍微长一点的文本</td></tr><tr><td style="text-align:left">稍微长一点的文本</td><td style="text-align:center">短文本</td><td style="text-align:right">中等文本</td></tr></tbody></table><a class="btn" href="http://showteeth.tech/posts/65136.html"><i class="fa fa-telegram fa-lg fa-fw"></i>合并单元格、修改表格样式</a><hr><h3 id="Todo-list"><a href="#Todo-list" class="headerlink" title="Todo list"></a>Todo list</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><ul><br><li><i class="fa fa-check-square"></i> 已完成</li><br><li><i class="fa fa-square"></i> 未完成</li><br></ul><hr><h3 id="Note-嵌套-Todo-list"><a href="#Note-嵌套-Todo-list" class="headerlink" title="Note 嵌套 Todo list"></a>Note 嵌套 Todo list</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一共有两种写法，效果看下面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 已完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 未完成</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong><br></p><div class="note primary"><br><i class="fa fa-check-square"></i> 已完成<br><i class="fa fa-check-square"></i> 已完成<br><i class="fa fa-check-square"></i> 已完成<br><i class="fa fa-check-square"></i> 已完成<br><i class="fa fa-check-square"></i> 已完成<br><i class="fa fa-square"></i> 未完成<br><i class="fa fa-square"></i> 未完成<br><i class="fa fa-square"></i> 未完成<br></div><div class="note primary"><br><p><br><i class="fa fa-check-square"></i> 已完成<br><i class="fa fa-check-square"></i> 已完成<br><i class="fa fa-check-square"></i> 已完成<br><i class="fa fa-check-square"></i> 已完成<br><i class="fa fa-check-square"></i> 已完成<br><i class="fa fa-square"></i> 未完成<br><i class="fa fa-square"></i> 未完成<br><i class="fa fa-square"></i> 未完成<br></p><br></div><hr><h3 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h3><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ```[language] [title] [url] [link-text] --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意前后都，上面演示如果后面加了会出错</li><li>language表示代码语言</li><li><code>title</code>表示出现在代码框左上角的标题</li><li><code>url</code>表示超链接地址</li><li><code>link-text</code>表示超链接的名称</li><li>这 4 项应该是根据<em>空格来分隔</em>，而不是[]，故请不要加[]。除非如果你想<strong>写后面两个</strong>，但不想写前面两个，那么就<strong>必须加 []</strong> 了，要这样写：[] [] [url] [link text] <strong>个人只验证出可以加title，url和text没验证成功。</strong></li></ul><p><strong>效果如下：</strong><br></p><figure class="highlight html"><figcaption><span>title</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><div class="note info">各种支持语言的名称可以查看<a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">这篇文章</a></div><hr><h4 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`test`</span><br></pre></td></tr></table></figure><hr><h3 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h3><div class="note default">放大图标的方法示例：</div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-download"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 普通</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-download fa-lg"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 变大 33%</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-download fa-2x"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 两倍大</span><br><span class="line"></span><br><span class="line">#fa-fw：ensuring proper alignment of the icons</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-download fa-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 图标和文字之间合适间距</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><ul><li><i class="fa fa-download"></i> 普通</li><li><i class="fa fa-download fa-lg"></i> 变大 33%</li><li><i class="fa fa-download fa-2x"></i> 两倍大</li><li><i class="fa fa-download fa-fw"></i> 图标和文字之间合适间距</li></ul><div class="note info"><code>fa-fw</code>：ensuring proper alignment of the icons</div><hr><h3 id="note标签"><a href="#note标签" class="headerlink" title="note标签"></a>note标签</h3><div class="note info">next主题的note标签功能我一发现就爱上了，实在很好看啊~~~~</div><p>首先该功能可以在<code>next\_config.yml</code>配置文件中进行配置，默认是打开的，但是可以挑选自己喜欢的模式。<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Note tag (bs-callout).</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: flat</span><br><span class="line">  icons: true</span><br><span class="line">  border_radius: 3</span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure><p></p><p>我自己选择了其中的<code>flat style</code>，其用法如下：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note default"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>default<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note success"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>success<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note info"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>info<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note warning"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>warning<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger no-icon"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger no-icon<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">note danger, note danger, note danger</span><br><span class="line">note danger, note danger, note danger</span><br><span class="line">note danger, note danger, note danger</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>效果如下：</strong></p><div class="note default"><p>default</p></div><br><div class="note primary"><p>primary</p></div><br><div class="note success"><p>success</p></div><br><div class="note info"><p>info</p></div><br><div class="note warning"><p>warning</p></div><br><div class="note danger"><p>danger</p></div><br><div class="note danger no-icon"><p>danger no-icon</p></div><div class="note danger"><p>note danger, note danger, note danger<br>note danger, note danger, note danger<br>note danger, note danger, note danger</p></div><div class="note info"><code>next\_config.yml</code>三种样式的具体情况请看<a href="https://github.com/iissnan/hexo-theme-next/pull/1697" target="_blank" rel="noopener">网站</a></div><hr><h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><div class="note info">该标签也是在<code>next\_config.yml</code>配置文件中，默认是打开的</div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* Usage:</span><br><span class="line">*</span><br><span class="line">* &#123;% label [class] %&#125;Content&#123;% endlabel %&#125;</span><br><span class="line">*</span><br><span class="line">* [class] : default | primary | success | info | warning | danger.</span><br><span class="line">*           If not defined, default class will be selected.</span><br></pre></td></tr></table></figure><span class="label default">default</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label default@default %&#125;</span><br></pre></td></tr></table></figure><span class="label primary">primary</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label primary@primary %&#125;</span><br></pre></td></tr></table></figure><span class="label success">success</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label success@success %&#125;</span><br></pre></td></tr></table></figure><span class="label info">info</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label info@info %&#125;</span><br></pre></td></tr></table></figure><span class="label warning">warning</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label warning@warning %&#125;</span><br></pre></td></tr></table></figure><span class="label danger">danger</span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label danger@danger %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Lorem &#123;% label @ipsum %&#125; &#123;% label primary@dolor sit %&#125; amet, consectetur &#123;% label success@adipiscing elit, %&#125; sed &#123;% label info@do eiusmod %&#125; tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line"></span><br><span class="line">Ut enim *&#123;% label warning @ad %&#125;* minim veniam, quis **&#123;% label danger @nostrud %&#125;** exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</span><br><span class="line"></span><br><span class="line">Duis aute irure dolor in reprehenderit in voluptate ~~&#123;% label default @velit %&#125;~~ <span class="tag">&lt;<span class="name">mark</span>&gt;</span>esse<span class="tag">&lt;/<span class="name">mark</span>&gt;</span> cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong><br>Lorem <span class="label default">ipsum</span> <span class="label primary">dolor sit</span> amet, consectetur <span class="label success">adipiscing elit,</span> sed <span class="label info">do eiusmod</span> tempor incididunt ut labore et dolore magna aliqua.</p><p>Ut enim <em><span class="label warning">ad</span></em> minim veniam, quis <strong><span class="label danger">nostrud</span></strong> exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p><p>Duis aute irure dolor in reprehenderit in voluptate <del><span class="label default">velit</span></del> <mark>esse</mark> cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p><div class="note info"><a href="https://almostover.ru/2016-01/hexo-theme-next-test/#" target="_blank" rel="noopener">更多相关使用请看网站</a></div><hr><h3 id="Tab-选项卡"><a href="#Tab-选项卡" class="headerlink" title="Tab 选项卡"></a>Tab 选项卡</h3><div class="note info">该标签也是在<code>next\_config.yml</code>配置文件中</div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Tabs tag.</span><br><span class="line">tabs:</span><br><span class="line">  enable: true</span><br><span class="line">  transition:</span><br><span class="line">    tabs: true</span><br><span class="line">    labels: true</span><br><span class="line">  border_radius: 3</span><br></pre></td></tr></table></figure><div class="note info">用法讲解：</div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">tabs.js | global hexo script.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">&#123;% tabs [Unique name], [index] %&#125;</span><br><span class="line"><span class="comment">&lt;!-- tab [Tab caption]@[icon] --&gt;</span></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">[Unique name]      : Unique name of tabs block tag without comma.</span><br><span class="line">                   Will be used in #id's as prefix for each tab with their index numbers.</span><br><span class="line">                   If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span><br><span class="line">                   Only for current url of post/page must be unique!</span><br><span class="line">[index]            : Index number of active tab.</span><br><span class="line">                   If not defined, first tab (1) will be selected.</span><br><span class="line">                   If index is -1, no tab will be selected. It's will be something like spoiler.</span><br><span class="line">                   May be not defined.</span><br><span class="line">[Tab caption]      : Caption of current tab.</span><br><span class="line">                   If not caption specified, unique name with tab index suffix will be used as caption of tab.</span><br><span class="line">                   If not caption specified, but specified icon, caption will empty.</span><br><span class="line">                   May be not defined.</span><br><span class="line">[icon]             : Font awesome icon.</span><br><span class="line">                    May be not defined.</span><br></pre></td></tr></table></figure><h4 id="设定选中第二个选项卡"><a href="#设定选中第二个选项卡" class="headerlink" title="设定选中第二个选项卡"></a>设定选中第二个选项卡</h4><p>应用示例：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 选项卡, 2 %&#125;</span><br><span class="line"><span class="comment">&lt;!-- tab --&gt;</span></span><br><span class="line">**这是选项卡 1** 呵呵哈哈哈哈哈哈</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tab --&gt;</span></span><br><span class="line">**这是选项卡 2** 额。。。</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tab --&gt;</span></span><br><span class="line">**这是选项卡 3** 哇，你找到我了！</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>效果如下：</strong><br></p><div class="tabs" id="选项卡"><ul class="nav-tabs"><li class="tab"><a href="#选项卡-1">选项卡 1</a></li><li class="tab active"><a href="#选项卡-2">选项卡 2</a></li><li class="tab"><a href="#选项卡-3">选项卡 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项卡-1"><p><strong>这是选项卡 1</strong> 呵呵哈哈哈哈哈哈</p></div><div class="tab-pane active" id="选项卡-2"><p><strong>这是选项卡 2</strong> 额。。。</p></div><div class="tab-pane" id="选项卡-3"><p><strong>这是选项卡 3</strong> 哇，你找到我了！</p></div></div></div><p></p><div class="note info"><p>tabs 选项卡, 2：<br>选项卡表示选项卡的名称，如果为tab，得到的选项卡显示为tab 1、tab 2、tab 3；<br>2 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容(也就是不显示呵呵哈哈哈哈哈哈这一些话，点击之后才会显示)。</p></div><hr><h4 id="自定义每个选项卡的名称"><a href="#自定义每个选项卡的名称" class="headerlink" title="自定义每个选项卡的名称"></a>自定义每个选项卡的名称</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Fourth unique name %&#125;</span><br><span class="line"><span class="comment">&lt;!-- tab Solution 1 --&gt;</span></span><br><span class="line">**This is Tab 1.**</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tab Solution 2 --&gt;</span></span><br><span class="line">**This is Tab 2.**</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tab Solution 3 --&gt;</span></span><br><span class="line">**This is Tab 3.**</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong><br></p><div class="tabs" id="fourth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-unique-name-1">Solution 1</a></li><li class="tab"><a href="#fourth-unique-name-2">Solution 2</a></li><li class="tab"><a href="#fourth-unique-name-3">Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="fourth-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="fourth-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div><p></p><div class="note info">上面的solution 1、2、3即为自定义的，每个tab都可以设置自己的</div><hr><h4 id="每个tab只显示图标"><a href="#每个tab只显示图标" class="headerlink" title="每个tab只显示图标"></a>每个tab只显示图标</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Fifth unique name %&#125;</span><br><span class="line"><span class="comment">&lt;!-- tab @text-width --&gt;</span></span><br><span class="line">**This is Tab 1.**</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tab @amazon --&gt;</span></span><br><span class="line">**This is Tab 2.**</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tab @bold --&gt;</span></span><br><span class="line">**This is Tab 3.**</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong><br></p><div class="tabs" id="fifth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#fifth-unique-name-1"><i class="fa fa-text-width" style="text-align:center"></i></a></li><li class="tab"><a href="#fifth-unique-name-2"><i class="fa fa-amazon" style="text-align:center"></i></a></li><li class="tab"><a href="#fifth-unique-name-3"><i class="fa fa-bold" style="text-align:center"></i></a></li></ul><div class="tab-content"><div class="tab-pane active" id="fifth-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="fifth-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="fifth-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div><p></p><div class="note info">上面的<code>@amazon</code>即为图标icon</div><hr><h4 id="既显示图标有显示名称"><a href="#既显示图标有显示名称" class="headerlink" title="既显示图标有显示名称"></a>既显示图标有显示名称</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Sixth unique name %&#125;</span><br><span class="line"><span class="comment">&lt;!-- tab Solution 1@text-width --&gt;</span></span><br><span class="line">**This is Tab 1.**</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tab Solution 2@amazon --&gt;</span></span><br><span class="line">**This is Tab 2.**</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tab Solution 3@bold --&gt;</span></span><br><span class="line">**This is Tab 3.**</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><div class="note warning">这个貌似会报错</div><hr><h4 id="制作链接，快速访问多个tabs组"><a href="#制作链接，快速访问多个tabs组" class="headerlink" title="制作链接，快速访问多个tabs组"></a>制作链接，快速访问多个tabs组</h4><div class="note info">参见<a href="https://almostover.ru/2016-01/hexo-theme-next-test/" target="_blank" rel="noopener">网址</a></div><hr><h4 id="tabs中套用其他标签"><a href="#tabs中套用其他标签" class="headerlink" title="tabs中套用其他标签"></a>tabs中套用其他标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Tags %&#125;</span><br><span class="line"><span class="comment">&lt;!-- tab --&gt;</span></span><br><span class="line">**This is Tab 1.**</span><br><span class="line"></span><br><span class="line">1. One</span><br><span class="line">2. Two</span><br><span class="line">3. Three</span><br><span class="line"></span><br><span class="line">Tabbed code block:</span><br><span class="line"></span><br><span class="line">nano /etc</span><br><span class="line"></span><br><span class="line">&#123;% code %&#125;</span><br><span class="line">code block tag</span><br><span class="line">code block tag</span><br><span class="line">code block tag</span><br><span class="line">&#123;% endcode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default %&#125;</span><br><span class="line">Note default tag.</span><br><span class="line">&#123;% endnote %&#125;&#123;% youtube A1Qb4zfurA8 %&#125;</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tab --&gt;</span></span><br><span class="line">**This is Tab 2.**</span><br><span class="line"></span><br><span class="line">* Five</span><br><span class="line">* Six</span><br><span class="line">* Seven</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">&#123;% youtube rX3W5evpeJE %&#125;</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tab --&gt;</span></span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong><br></p><div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><a href="#tags-1">Tags 1</a></li><li class="tab"><a href="#tags-2">Tags 2</a></li><li class="tab"><a href="#tags-3">Tags 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tags-1"><p><strong>This is Tab 1.</strong></p><ol><li>One</li><li>Two</li><li>Three</li></ol><p>Tabbed code block:</p><pre><code>nano /etc</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">code block tag</span><br><span class="line">code block tag</span><br><span class="line">code block tag</span><br></pre></td></tr></table></figure><div class="note default"><p>Note default tag.</p></div><div class="video-container"><iframe src="//www.youtube.com/embed/A1Qb4zfurA8" frameborder="0" allowfullscreen></iframe></div></div><div class="tab-pane" id="tags-2"><p><strong>This is Tab 2.</strong></p><ul><li>Five</li><li>Six</li><li>Seven</li></ul><div class="note primary"><div class="video-container"><iframe src="//www.youtube.com/embed/rX3W5evpeJE" frameborder="0" allowfullscreen></iframe></div></div></div><div class="tab-pane" id="tags-3"><p><strong>This is Tab 3.</strong></p><div class="note success"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p></div></div></div></div><p></p><hr><h3 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># fa-lg：放大图标33%</span><br><span class="line"># fa-fw：图标和文字之间合理间距显示</span><br><span class="line"># download：图标的名称，fa-download，这里只写download即可</span><br><span class="line">&#123;% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-fw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">&#123;% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-fw %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-rotate-90 %&#125;</span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong><br><a class="btn" href="https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>更多关于按钮的使用点这里</a></p><div class="text-center"><br><a class="btn" href="https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>更多关于按钮的使用点这里</a><br></div><a class="btn" href="https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-rotate-90"></i>更多关于按钮的使用点这里</a><div class="note info">点击上面的按钮可以跳转到另一个网址，查看更过关于按钮的操作</div><div class="note success"><ul><li>可以将其放在html语句中进行居中等各种操作</li><li>btn后跟着点击按钮之后想访问的链接</li><li>fa-lg：放大图标33%</li><li>fa-fw：图标和文字之间合理间距显示</li><li>fa-rotate-90：顺时针旋转90度</li><li>download：图标的名称，fa-download，这里只写download即可</li></ul></div><hr><p><br></p><h2 id="插入照片"><a href="#插入照片" class="headerlink" title="插入照片"></a>插入照片</h2><p>因为图片功能在markdown语法中比较常用，所以将其单列出来，便于查找。</p><h3 id="使用七牛作为图床"><a href="#使用七牛作为图床" class="headerlink" title="使用七牛作为图床"></a>使用七牛作为图床</h3><p>用法实例：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnimg test2.png title:"test" alt:"图片说明" 'class:class1 class2' extend:?imageView2/2/w/600 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将其插入html语句中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">&#123;% qnimg test2.png title:"test" alt:"图片说明" 'class:class1 class2' extend:?imageView2/2/w/600 %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>title：鼠标移到图片上显示的名称<br>alt：图片不能正常加载时显示的说明文字<br>extend:?imageView2/2/w/600 ：表示生成宽度最多600px的缩略图</p></div><p><strong>最终效果：</strong></p><img title="宽度为600" alt="图片说明" class="class1 class2" src="http://pn9abh3rj.bkt.clouddn.com/static/images/test2.png?imageView2/2/w/600"><div class="note info">好像会自动进行居中处理</div><div align="right"><br><img title="宽度为300" alt="图片说明" class="class1 class2" src="http://pn9abh3rj.bkt.clouddn.com/static/images/test2.png?imageView2/2/w/300"><br></div><hr><h3 id="常规markdown语法"><a href="#常规markdown语法" class="headerlink" title="常规markdown语法"></a>常规markdown语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![图片描述，相当于alt](http://pn9abh3rj.bkt.clouddn.com/test.png "Optional title，相当于title")</span><br><span class="line"><span class="comment">&lt;!-- 居中操作可以使用center标签将上述包裹 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">![图片描述，相当于alt](http://pn9abh3rj.bkt.clouddn.com/test.png "Optional title，相当于title")</span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><p><img src="http://pn9abh3rj.bkt.clouddn.com/test.png" alt="markdown_pic" title="使用markdown插入图片"></p><center><br><img src="http://pn9abh3rj.bkt.clouddn.com/test.png" alt="markdown_pic" title="使用markdown+center标签居中插入图片"><br></center><div class="note info"><p><code>Optional title</code> 是用来在鼠标移到图片上时显示的title</p></div><div class="note warning"><p>使用markdown插入图片的缺点：一般的宽和高等属性不好修改，各个编辑器支持的写法可能有区别</p></div><hr><h3 id="html代码插入图片"><a href="#html代码插入图片" class="headerlink" title="html代码插入图片"></a>html代码插入图片</h3><p><strong>针对使用markdown插入图片的缺点，使用html语句可以很好的解决</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用img标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pn9abh3rj.bkt.clouddn.com/test.png"</span> <span class="attr">width</span> = <span class="string">"300"</span> <span class="attr">height</span> = <span class="string">"200"</span> <span class="attr">alt</span>=<span class="string">"图片名称"</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用div标签包裹 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pn9abh3rj.bkt.clouddn.com/test.png"</span>  <span class="attr">title</span>=<span class="string">"使用html插入图片"</span>  <span class="attr">alt</span>=<span class="string">"图片名称"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最终效果：</strong></p><p><img src="http://pn9abh3rj.bkt.clouddn.com/test.png" width="300" height="200" alt="图片名称" title="使用html插入图片" align="center"></p><div align="center"><br><img src="http://pn9abh3rj.bkt.clouddn.com/test.png" title="使用html插入图片" alt="图片名称"><br></div><div class="note warning"><ul><li>不推荐使用这个img标签来进行对齐操作，容易和文本混在一起，居中的时候还好；</li><li>推荐使用div标签包裹img标签。</li></ul></div><hr><p><br></p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><div class="note success"><ul><li><strong>博客一般都以二级标题开始写起</strong></li><li><strong>html代码如div标签后面一定要空行</strong></li><li><strong>标签之间一般都是可以嵌套的</strong></li><li><strong>插入图片推荐使用div标签包裹img标签实现</strong></li><li><strong>写完一段记得空行！！！尽量每写完一段就空一行，尤其是代码段和文字之间，不然可能会出现markdown语法不能识别的情况（前面的错误可能导致后续很多语法都不能正常识别，在找错误的时候看第一个不能识别的位置）</strong></li></ul></div><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://walesexcitedmei.github.io/2018/08/30/HEXO-NexT-%E4%B8%BB%E9%A2%98%E6%8F%90%E9%AB%98%E5%8D%9A%E5%AE%A2%E9%A2%9C%E5%80%BC/" target="_blank" rel="noopener">很详细很好的技巧文章</a></li><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">也是很好的教程，可结合上一个看</a></li><li><a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">支持highlight的语言</a></li><li><a href="https://almostover.ru/2016-01/hexo-theme-next-test/#" target="_blank" rel="noopener">note、label、button、tab使用讲解及示例</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/pull/1697" target="_blank" rel="noopener">note、label、tab使用讲解及示例</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;博客中常用markdown的样式和模板&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://showteeth.tech/categories/hexo/"/>
    
    
      <category term="markdown" scheme="http://showteeth.tech/tags/markdown/"/>
    
      <category term="next" scheme="http://showteeth.tech/tags/next/"/>
    
  </entry>
  
</feed>
