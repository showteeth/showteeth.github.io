<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>showteeth&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://showteeth.tech/"/>
  <updated>2019-08-13T07:12:53.339Z</updated>
  <id>http://showteeth.tech/</id>
  
  <author>
    <name>showteeth</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux系列之用户、用户组和权限管理</title>
    <link href="http://showteeth.tech/posts/61241.html"/>
    <id>http://showteeth.tech/posts/61241.html</id>
    <published>2019-08-13T05:29:19.000Z</published>
    <updated>2019-08-13T07:12:53.339Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<code>Linux</code>中<strong>用户、用户组和权限管理</strong>的相关知识。<strong>用户管理</strong>中，首先使用<code>adduser</code><strong>创建账号</strong>，然后使用<code>passwd</code>给创建的账号<strong>设置密码</strong>；在<strong>分组管理</strong>中，首先使用<code>groups</code>和<code>id</code>命令<strong>查看了用户的分组</strong>信息，然后使用<code>usermod</code><strong>更改了用户主分组</strong>；在<strong>权限管理</strong>中，首先介绍了文件(夹)的权限信息，然后使用<code>chmod</code><strong>修改文(夹)权限</strong>，最后使用<code>chown</code> 和 <code>chgrp</code> 命令来分别<strong>修改文件(夹)的所属用户和组</strong></p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实验室新来了几个同学，需要给他们创建账号使用集群，刚好实验室之前的集群用户和用户组非常混乱，这里就统一学习和管理一下。</p><hr><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h3><p>首先需要创建新账户，创建账户有两个命令：<code>useradd</code>和<code>adduser</code>，关于<a href="https://askubuntu.com/questions/345974/what-is-the-difference-between-adduser-and-useradd" target="_blank" rel="noopener">两者的区别</a>：</p><blockquote><p>adduser and addgroup add users and groups to the system according to command line options and configuration information in <strong>/etc/adduser.conf</strong>. They are <strong>friendlier front ends</strong> to the low level tools like useradd, groupadd and usermod programs, by default choosing Debian policy conformant UID and GID values, creating a home directory with skeletal configuration, running a custom script, and other features.</p></blockquote><blockquote><p>useradd is a <strong>low level utility</strong> for adding users. On Debian, administrators should usually use adduser(8) instead.</p></blockquote><p>另外使用<code>useradd</code>命令不会自动创建<code>/home/username</code>目录(可以通过添加<code>-m</code>参数指定创建)，而使用<code>adduser</code>会自动创建<code>/home/username</code>目录，两个命令创建的用户家目录都可以通过<code>-d</code>参数指定。</p><p>这里我使用的命令是：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户名为zhengshuang，家目录在/workstation/zhengshuang的用户</span></span><br><span class="line">adduser -d /workstation/zhengshuang zhengshuang</span><br><span class="line"></span><br><span class="line">  drwx------.  2 zhengshuang zhengshuang 4.0K Aug 13 02:17 zhengshuang</span><br><span class="line">  drwxr-xr--.  6 root        root        4.0K Aug  8 11:55 softwares</span><br></pre></td></tr></table></figure><p></p><p>发现创建完成之后会自动创建一个与用户名同名的分组，这种情况下如果创建多个账号，每个人都是不同的分组，以后不方便管理，所以这里需要对其分组进行更改。</p><hr><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">passwd zhengshuang</span><br><span class="line">  Changing password <span class="keyword">for</span> user zhengshuang.</span><br><span class="line">  New password: </span><br><span class="line">  Retype new password: </span><br><span class="line">  passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure><hr><h3 id="删除账号"><a href="#删除账号" class="headerlink" title="删除账号"></a>删除账号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除账号以及家目录</span></span><br><span class="line"><span class="comment"># -r, --remove：remove home directory and mail spool</span></span><br><span class="line">userdel -r username</span><br></pre></td></tr></table></figure><hr><p><br></p><h2 id="分组管理"><a href="#分组管理" class="headerlink" title="分组管理"></a>分组管理</h2><h3 id="查看分组信息"><a href="#查看分组信息" class="headerlink" title="查看分组信息"></a>查看分组信息</h3><p>可以先看看所有的分组信息：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有分组信息</span></span><br><span class="line">getent group</span><br><span class="line"><span class="comment"># 查看所有分组信息</span></span><br><span class="line">cut -d<span class="string">':'</span> -f 1 /etc/group</span><br><span class="line"><span class="comment"># 也可以顺便查看所有的用户信息</span></span><br><span class="line">cut -d<span class="string">':'</span> -f 1 /etc/passwd</span><br></pre></td></tr></table></figure><p></p><p>使用<code>groups</code>命令查看某个用户的分组信息：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看zhengshuang的分组信息</span></span><br><span class="line">groups zhengshuang</span><br><span class="line">  zhengshuang : zhengshuang</span><br></pre></td></tr></table></figure><p></p><p>使用<code>id</code>命令查看某个用户的分组信息：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id zhengshuang</span><br><span class="line">  uid=1027(zhengshuang) gid=1029(zhengshuang) groups=1029(zhengshuang)</span><br></pre></td></tr></table></figure><p></p><p>可以发现这个结果比前面使用<code>groups</code>的输出更加复杂一些：这里有一个 <code>gid</code>，表示<strong>主工作组(primary group)</strong>，后面还有个 <code>groups</code>，它列出了用户<strong>所在的所有组</strong>；<strong>主工作组只有一个，而后者(secondary groups)的数量则不限</strong>。总的来说，可以使用<code>id</code>命令看到用户组的结果和使用 <code>groups</code> 命令看到的结果是一致的。</p><hr><p>###添加组</p><p>为了解决创建用户步骤遗留下来的问题，首先需要添加组：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加lab分组</span></span><br><span class="line">groupadd lab</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="更改用户主分组"><a href="#更改用户主分组" class="headerlink" title="更改用户主分组"></a>更改用户主分组</h3><p>更改用户主分组：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -g:force use GROUP as new primary group</span></span><br><span class="line">usermod -g lab zhengshuang</span><br><span class="line">  drwx------.  2 zhengshuang lab         4.0K Aug 13 02:17 zhengshuang</span><br><span class="line">  drwxr-xr--.  6 root        root        4.0K Aug  8 11:55 softwares</span><br></pre></td></tr></table></figure><p></p><p>这里使用了<code>-g</code>来改变用户的主用户组，也就是前面<code>gid</code>显示组别，也是<code>ll</code>显示的组别，而如果不想改变主用户组，而是添加用户组：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -a:append the user to the supplemental GROUPS </span></span><br><span class="line"><span class="comment">#    mentioned by the -G option without removing him/her from other groups</span></span><br><span class="line"><span class="comment"># -G:new list of supplementary GROUPS</span></span><br><span class="line">usermod -a -G examplegroup exampleusername1,exampleusername2,exampleusername3...</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="创建用户并指定分组"><a href="#创建用户并指定分组" class="headerlink" title="创建用户并指定分组"></a>创建用户并指定分组</h3><p>在使用adduser创建用户的同时也可以指定分组信息：</p><ul><li><code>-g</code>：name or ID of the primary group of the new account</li><li><code>-G</code>：list of supplementary groups of the new account</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser -d /workstation/zhengshuang zhengshuang -g lab</span><br></pre></td></tr></table></figure><hr><h3 id="删除分组"><a href="#删除分组" class="headerlink" title="删除分组"></a>删除分组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除默认创建用户时的分组</span></span><br><span class="line">groupdel zhengshuang</span><br></pre></td></tr></table></figure><hr><p><br></p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><div class="note info"><p>这部分参考了<a href="https://cuiqingcai.com/6284.html" target="_blank" rel="noopener">这篇博客文章</a>，讲解非常细致。</p></div><h3 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ls -l  /etc/nginx </span><br><span class="line">  total 80</span><br><span class="line">  drwxr-xr-x   7 root root  4096 Jun 21 22:16 ./</span><br><span class="line">  drwxr-xr-x 103 root root  4096 Sep  4 18:04 ../</span><br><span class="line">  drwxr-xr-x   2 root root  4096 Jul 12  2017 conf.d/</span><br><span class="line">  -rw-r--r--   1 root root  1077 Feb 12  2017 fastcgi.conf</span><br><span class="line">  -rw-r--r--   1 root root  1007 Feb 12  2017 fastcgi_params</span><br><span class="line">  -rw-r--r--   1 root root  2837 Feb 12  2017 koi-utf</span><br><span class="line">  -rw-r--r--   1 root root  2223 Feb 12  2017 koi-win</span><br><span class="line">  -rw-r--r--   1 root root  3957 Feb 12  2017 mime.types</span><br><span class="line">  -rw-r--r--   1 root root  1505 Jun 21 20:24 nginx.conf</span><br><span class="line">  -rw-r--r--   1 root root 12288 Jun 21 20:44 .nginx.conf.swp</span><br><span class="line">  -rw-r--r--   1 root root   180 Feb 12  2017 proxy_params</span><br><span class="line">  -rw-r--r--   1 root root   636 Feb 12  2017 scgi_params</span><br><span class="line">  drwxr-xr-x   2 root root  4096 Jun 21 22:42 sites-available/</span><br><span class="line">  drwxr-xr-x   2 root root  4096 Jun 21 19:08 sites-enabled/</span><br><span class="line">  drwxr-xr-x   2 root root  4096 Jun 21 19:08 snippets/</span><br><span class="line">  -rw-r--r--   1 root root   664 Feb 12  2017 uwsgi_params</span><br><span class="line">  drwxr-xr-x   2 root root  4096 Jun 22 02:44 vhosts/</span><br><span class="line">  -rw-r--r--   1 root root  3071 Feb 12  2017 win-utf</span><br></pre></td></tr></table></figure><p>可以发现每一行都是一个文件或文件夹的信息，一共包括七列：</p><ul><li>第一列是文件的<strong>权限信息</strong></li><li>第二列表示该文件夹<strong>连接的文件数(？？)</strong></li><li>第三列表示文件<strong>所属用户</strong></li><li>第四列表示文件<strong>所属用户组</strong></li><li>第五列表示<strong>文件大小（字节）</strong></li><li>第六列表示<strong>最后修改日期</strong></li><li>第七列表示<strong>文件名</strong></li></ul><p>其中<strong>第一列</strong>的文件<strong>权限信息</strong>是非常重要的，它由十个字符组成：</p><ul><li>第一个字符代表文件的类型，有三种，<code>-</code> 代表这是一个文件，<code>d</code> 代表这是一个文件夹，<code>l</code> 代表这是一个链接。</li><li>第 <code>2-4</code> 个字符代表文件<strong>所有者</strong>对该文件的权限，<ul><li><code>r</code> 就是读</li><li><code>w</code> 就是写</li><li><code>x</code> 就是执行，如果是<strong>文件夹</strong>的话，<strong>执行就意味着查看文件夹下的内容</strong>，例如 <code>rw-</code> 就代表文件所有者可以对该文件进行读取和写入。</li></ul></li><li>第 <code>5-7</code> 个字符代表文件<strong>所属组</strong>对该文件的权限，含义是一样的，如 <code>r-x</code>就代表该文件<strong>所属组内的所有用户</strong>对该文件有读取和执行的权限。</li><li>第 <code>8-10</code> 个字符代表是<strong>其他用户</strong>对该文件的权限，含义也是一样的，如 <code>r–</code> 就代表<strong>非所有者、非用户组的用户</strong>只拥有对该文件的读取权限。</li></ul><hr><h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><p>可以使用<code>chmod</code>命令来修改文件的权限，其中<strong>权限的表示</strong>有两种：</p><ul><li>一种是<strong>数字权限命名</strong>，<code>rwx</code> 对应一个<strong>二进制数字</strong>，如 <code>101</code> 就代表拥有<strong>读取和执行</strong>的权限，而转为十进制的话，<code>r</code> 就代表 <code>4</code>，<code>w</code>就代表 <code>2</code>，<code>x</code> 就代表 <code>1</code>，然后<strong>三个数字加起来就和二进制数字对应起来了</strong>。如 <code>7=4+2+1</code>，这就对应着 <code>rwx</code>；<code>5=4+1</code>，这就对应着 <code>r-x</code>。所以，相应地 <code>777</code> 就代表了 <code>rwxrwxrwx</code>，即<strong>所有者、所属用户组、其他用户对该文件都拥有读取、写入、执行的权限，这是相当危险的</strong>！</li><li>也可以使用<strong>代号来赋予权限</strong>，代号有 <code>u</code>、<code>g</code>、<code>o</code>、<code>a</code> 四中，分别代表<strong>所有者权限</strong>，<strong>用户组权限</strong>，<strong>其他用户权限</strong>和<strong>所有用户权限</strong>，这些代号后面通过 <code>+</code> 和 <code>–</code> 符号来<strong>控制权限的添加和移除</strong>，再后面跟上权限类型就好。例如：<code>u-x</code>就是给所有者移除 <code>x</code> 权限，也就是执行权限.</li></ul><p>如果是需要修改<strong>文件夹</strong>的权限，可以对文件夹进行<strong>递归赋权限</strong>操作：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 share 文件夹和其内所有内容都赋予 777 权限</span></span><br><span class="line">chmod -R 777 share</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="修改文件所有者和组"><a href="#修改文件所有者和组" class="headerlink" title="修改文件所有者和组"></a>修改文件所有者和组</h3><p>通过上面的<code>chmod</code>命令可以给文件(夹)针对不同的用户和组添加不同的权限，但是前提是要确定文件(夹)所属的用户和组具体。这里可以使用<code>chown</code> 和 <code>chgrp</code> 命令来分别<strong>修改文件(夹)的所属用户和组</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改文件的所属用户</span></span><br><span class="line">chown &lt;username&gt; &lt;file&gt;</span><br><span class="line"><span class="comment"># 修改文件的所属组</span></span><br><span class="line">chgrp &lt;group&gt; &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件夹的所属用户</span></span><br><span class="line">chown -R &lt;username&gt; &lt;file&gt;</span><br><span class="line"><span class="comment"># 修改文件夹的所属组</span></span><br><span class="line">chgrp -R &lt;group&gt; &lt;file&gt;</span><br></pre></td></tr></table></figure><p></p><p>实践：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ll</span><br><span class="line">  total 4.0K</span><br><span class="line">  drwxr-xr-x. 8 root root 4.0K Aug 13 03:46 Mouseproject</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归修改文件的所属用户</span></span><br><span class="line">chown -R zhengshuang Mouseproject</span><br><span class="line">  total 4.0K</span><br><span class="line">  drwxr-xr-x. 8 zhengshuang root 4.0K Aug 13 03:46 Mouseproject</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归修改文件的所属组</span></span><br><span class="line">chgrp lab -R Mouseproject</span><br><span class="line">  total 4.0K</span><br><span class="line">  drwxr-xr-x. 8 zhengshuang lab 4.0K Aug 13 03:46 Mouseproject</span><br></pre></td></tr></table></figure><p></p><p>通过上述修改(没有修改文件权限，默认的权限即可满足需求)，Mouseproject文件夹中的数据就可以被<code>zhengshuang</code>用户<code>rwx</code>，被<code>lab</code>组的其他用户<code>r-x</code>，被<code>非lab组</code>的其他用户<code>r-x</code>了。</p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.howtogeek.com/50787/add-a-user-to-a-group-or-second-group-on-linux/" target="_blank" rel="noopener">Create a New User and Assign a Group in One Command</a></li><li><a href="https://cuiqingcai.com/6284.html" target="_blank" rel="noopener">详解 Linux 下的用户管理、用户组管理和权限管理</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;code&gt;Linux&lt;/code&gt;中&lt;strong&gt;用户、用户组和权限管理&lt;/strong&gt;的相关知识。&lt;strong&gt;用户管理&lt;/strong&gt;中，首先使用&lt;code&gt;adduser&lt;/code&gt;&lt;strong&gt;创建账号&lt;/strong&gt;，然后使用&lt;code&gt;passwd&lt;/code&gt;给创建的账号&lt;strong&gt;设置密码&lt;/strong&gt;；在&lt;strong&gt;分组管理&lt;/strong&gt;中，首先使用&lt;code&gt;groups&lt;/code&gt;和&lt;code&gt;id&lt;/code&gt;命令&lt;strong&gt;查看了用户的分组&lt;/strong&gt;信息，然后使用&lt;code&gt;usermod&lt;/code&gt;&lt;strong&gt;更改了用户主分组&lt;/strong&gt;；在&lt;strong&gt;权限管理&lt;/strong&gt;中，首先介绍了文件(夹)的权限信息，然后使用&lt;code&gt;chmod&lt;/code&gt;&lt;strong&gt;修改文(夹)权限&lt;/strong&gt;，最后使用&lt;code&gt;chown&lt;/code&gt; 和 &lt;code&gt;chgrp&lt;/code&gt; 命令来分别&lt;strong&gt;修改文件(夹)的所属用户和组&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>shell系列之eval、printf和组合数</title>
    <link href="http://showteeth.tech/posts/13990.html"/>
    <id>http://showteeth.tech/posts/13990.html</id>
    <published>2019-08-12T13:09:39.000Z</published>
    <updated>2019-08-12T14:06:54.981Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<strong>使用shell得到组合数</strong>，其中用到了三个方面的trick：<code>特殊符号{}</code>、<code>printf中的{,}</code>，<code>eval命令</code>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天在学习过程中遇到一个步骤需要得到组合数，之前也学习过使用使用python的<a href="http://showteeth.tech/posts/49907.html">itertools库(itertools.combinations)</a>得到组合数，但是这里是在shell中某一步需要得到组合数，再使用Python非常不划算，就想着直接使用shell得到组合数，在shell中得到组合数可以使用特殊符号<code>{}</code>，这个<a href="http://showteeth.tech/posts/55603.html">之前</a>也学习过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单纯的数字的组合数</span></span><br><span class="line"><span class="built_in">echo</span> &#123;0..1&#125;&#123;0..1&#125;</span><br><span class="line">  00 01 10 11</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字结合字母的组合数</span></span><br><span class="line"><span class="built_in">echo</span> &#123;0..1&#125;&#123;a..b&#125;</span><br><span class="line">  0a 0b 1a 1b</span><br></pre></td></tr></table></figure><p>这里主要是遇到了两个trick进行命令行的简化。</p><h2 id="命令行的简化"><a href="#命令行的简化" class="headerlink" title="命令行的简化"></a>命令行的简化</h2><p>先给出简化的命令行形式：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">'&#123;0..1&#125;'</span>&#123;,,&#125; )</span><br><span class="line">  000 001 010 011 100 101 110 111</span><br></pre></td></tr></table></figure><p></p><p>上述命令涉及到两个小trick：</p><ul><li><code>printf的{,}</code></li><li><code>eval命令</code></li></ul><h3 id="printf的"><a href="#printf的" class="headerlink" title="printf的{,}"></a>printf的{,}</h3><p>分解上述命令为：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">'&#123;0..1&#125;'</span>&#123;,,&#125; )</span><br><span class="line">  &#123;0..1&#125;&#123;0..1&#125;&#123;0..1&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以发现printf应该是将<code>&#39;{0..1}&#39;</code>作为字符串打印了三遍，这是为什么呢？其中的<code>{,,}</code>是干什么的呢？</p><p>再次将上述命令分解为常见的形式：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">'&#123;0..1&#125;'</span>)</span><br><span class="line">  &#123;0..1&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以发现，这里只打印出了一遍<code>{0..1}</code>，相较于存在<code>{,,}</code>的情形少打印了两遍，也就是说，存在<code>{,,}</code>会打印三遍<code>{0..1}</code>，两个逗号打印三遍，刚好两个逗号将3个字符(串)分开，那么如果如果存在一个逗号，是不是就是打印两遍呢？：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">'&#123;0..1&#125;'</span>&#123;,&#125; )</span><br><span class="line">  &#123;0..1&#125;&#123;0..1&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里确实是打印了两遍，联想之前学习的<a href="http://showteeth.tech/posts/47162.html">printf的用法</a>，猜测{,}是重复之前的字符，并且其中的,是重复的次数-1：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">'abc'</span>&#123;,&#125;)</span><br><span class="line">  abcabc</span><br></pre></td></tr></table></figure><p></p><h3 id="eval命令"><a href="#eval命令" class="headerlink" title="eval命令"></a>eval命令</h3><p>在搞清楚上面<code>printf</code>的trick之后，再来看看<code>eval</code>命令，关于<code>eval</code>命令，大部分的介绍都是：当将命令行放入<code>eval</code>命令中后，shell在执行命令行之前扫描它两次，第一次会进行变量替换或运算，第二次是执行替换之后的命令(将<code>eval</code>之后的命令当成一个命令执行)；其<a href="https://www.tutorialspoint.com/unix_commands/eval" target="_blank" rel="noopener">英文说明</a>：</p><blockquote><p>eval is a built in linux or unix command. The eval command is used to <strong>execute the arguments as a shell command on unix or linux system</strong>. Eval command comes in handy <strong>when you have a unix or linux command stored in a variable</strong> and you <strong>want to execute that command stored in the string</strong>. The eval command <strong>first evaluates the argument</strong> and then <strong>runs the command stored in the argument</strong>.</p></blockquote><p>使用示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">COMMAND=<span class="string">"ls -lrt"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$&#123;COMMAND&#125;</span></span><br><span class="line">  total 702</span><br><span class="line">  -rw-rw-r-- 1 user user 3595660 Aug 12 12:02 H12881_WO-1_filter_final.vcf.gz</span><br><span class="line">  -rw-rw-r-- 1 user user 3447580 Aug 12 12:02 H892.2_WO-1_filter_final.vcf.gz</span><br><span class="line">  -rw-rw-r-- 1 user user    7803 Aug 12 12:03 H892.2_WO-1_filter_final.vcf.gz.tbi</span><br><span class="line">  -rw-rw-r-- 1 user user    7799 Aug 12 12:03 H12881_WO-1_filter_final.vcf.gz.tbi</span><br><span class="line">  -rw-rw-r-- 1 user user 3621459 Aug 12 12:19 H892_WO-1_filter_final.vcf.gz</span><br><span class="line">  -rw-rw-r-- 1 user user    7816 Aug 12 12:19 H892_WO-1_filter_final.vcf.gz.tbi</span><br><span class="line">  drwxrwxr-x 2 user user    4096 Aug 12 20:15 dir</span><br><span class="line">  -rw-rw-r-- 1 user user 4653958 Aug 12 20:35 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><p>具体到这次的命令行中：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="built_in">echo</span> $(<span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">'&#123;0..1&#125;'</span>&#123;,,&#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤一：</span></span><br><span class="line">将$(<span class="built_in">printf</span> <span class="string">"%s"</span> <span class="string">'&#123;0..1&#125;'</span>&#123;,,&#125; )替换为&#123;0..1&#125;&#123;0..1&#125;&#123;0..1&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤二：</span></span><br><span class="line"><span class="built_in">echo</span> &#123;0..1&#125;&#123;0..1&#125;&#123;0..1&#125;</span><br></pre></td></tr></table></figure><p></p><p>关于<code>eval</code>命令的更多用法，在后续学习中慢慢补充吧。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://unix.stackexchange.com/questions/204069/all-possible-combinations-of-characters-and-numbers" target="_blank" rel="noopener">All possible combinations of characters and numbers</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;strong&gt;使用shell得到组合数&lt;/strong&gt;，其中用到了三个方面的trick：&lt;code&gt;特殊符号{}&lt;/code&gt;、&lt;code&gt;printf中的{,}&lt;/code&gt;，&lt;code&gt;eval命令&lt;/code&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>shell系列之cp和mv的进阶用法</title>
    <link href="http://showteeth.tech/posts/15765.html"/>
    <id>http://showteeth.tech/posts/15765.html</id>
    <published>2019-08-10T13:45:12.000Z</published>
    <updated>2019-08-10T14:17:28.617Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了使用<code>cp</code>和<code>mv</code>命令将<strong>多个文件(夹)复制或者剪切到同一个目录</strong>中的方法以及<strong>将一(多)个文件拷贝到多个目录</strong>的方法。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在<code>linux</code>下使用<code>cp</code>和<code>mv</code>命令时，经常会遇到需要<strong>将多个文件复制或者剪切到同一个目录</strong>下以及<strong>将一(多)个文件复制到多个目录中</strong>，这种时候使用简单的<code>cp</code>和<code>mv</code>就很难达到目的。</p><hr><h2 id="将多个文件复制到同一个目录"><a href="#将多个文件复制到同一个目录" class="headerlink" title="将多个文件复制到同一个目录"></a>将多个文件复制到同一个目录</h2><p><code>cp</code>命令使用较多的是<code>-r</code>和<code>-f</code>参数，但是这两个参数并不能解决目前的问题，这里需要使用另一个参数：<code>-t</code>-<strong>将所有的原文件(夹)复制到目标文件夹(copy all SOURCE arguments into DIRECTORY)</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将多个目录复制到同一个目录</span></span><br><span class="line">cp -r dir1 dir2 dir3 -t target_dir</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="将一-多-个文件拷贝到多个目录"><a href="#将一-多-个文件拷贝到多个目录" class="headerlink" title="将一(多)个文件拷贝到多个目录"></a>将一(多)个文件拷贝到多个目录</h2><p>在这种情况下单凭<code>cp</code>命令是不能完成这个任务的，因为<code>cp</code>命令的介绍：<code>Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.</code>并没有提到过可以将一(多)个文件复制到多个目录，这种情况下就需要借助之前学习的命令<a href="http://showteeth.tech/posts/30003.html">xargs</a>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xargs -n：指定一次处理的参数个数</span></span><br><span class="line"><span class="comment"># 每次只传递给cp一个目录</span></span><br><span class="line"><span class="built_in">echo</span> dir1 dir2 dir3 | xargs -n 1 cp file1 file2</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>注意<code>xargs</code>一定要加<code>-n 1</code>，不然会将<code>dir1</code>、<code>dir2</code>、<code>file1</code>、<code>file2</code>全部复制到<code>dir3</code></p></div><hr><h2 id="将多个文件剪切到同一个目录"><a href="#将多个文件剪切到同一个目录" class="headerlink" title="将多个文件剪切到同一个目录"></a>将多个文件剪切到同一个目录</h2><p>和<code>cp</code>命令类似，<code>mv</code>命令也有一个<code>-t</code>参数，可以将多个文件(夹)剪切到同一个目录：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv dir1 dir2 dir3 -t target_dir1</span><br></pre></td></tr></table></figure><p></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/195655/how-to-copy-a-file-to-multiple-directories-using-the-gnu-cp-command" target="_blank" rel="noopener">How to copy a file to multiple directories using the gnu cp command</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了使用&lt;code&gt;cp&lt;/code&gt;和&lt;code&gt;mv&lt;/code&gt;命令将&lt;strong&gt;多个文件(夹)复制或者剪切到同一个目录&lt;/strong&gt;中的方法以及&lt;strong&gt;将一(多)个文件拷贝到多个目录&lt;/strong&gt;的方法。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>shell-同时给多个变量赋值</title>
    <link href="http://showteeth.tech/posts/60071.html"/>
    <id>http://showteeth.tech/posts/60071.html</id>
    <published>2019-08-09T13:56:41.000Z</published>
    <updated>2019-08-10T02:58:51.060Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<strong>如何将程序的输出结果同时赋值给多个变量</strong>，主要有两种方法：<strong><code>read</code>命令结合<code>&lt;&lt;&lt;</code></strong>、使用<strong>数组存储</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天写了一个<code>bash shell</code>小程序，有多个输出，想要将这多个输出同时传递给多个变量。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方法主要有两种：使用reads命令、使用数组。</p><h3 id="使用read命令"><a href="#使用read命令" class="headerlink" title="使用read命令"></a>使用read命令</h3><p>之前也学习过<a href="http://showteeth.tech/posts/59492.html">read命令</a>，其可以<strong>从键盘或文件中获取输入</strong>，这里需要的是使用read从<strong>命令行</strong>读入变量，就需要结合之前的重定向符号<code>&lt;&lt;&lt;</code>，这里需要回顾一下<code>&lt;</code>、<code>&lt;&lt;</code>、<code>&lt;&lt;&lt;</code>三者的区别，之前在<a href="http://showteeth.tech/posts/55603.html">这篇文章</a>中也学习过：</p><ul><li><code>&lt;</code>：从<strong>文件</strong>获取读入</li><li><code>&lt;&lt; text</code>：从<strong>命令行</strong>读取输入，直到一个与<strong>text字符相同的行结束</strong></li><li><code>&lt;&lt;&lt;</code>：将<strong>word(字符)</strong>，注意不是上面的file读入。</li></ul><p>具体的使用如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接存储变量</span></span><br><span class="line"><span class="built_in">read</span> a b c &lt;&lt;&lt;$(<span class="built_in">echo</span> -e <span class="string">"1\t2\t3"</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$a</span>\t<span class="variable">$b</span>\t<span class="variable">$c</span>"</span></span><br><span class="line">  1       2       3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用数组存储变量</span></span><br><span class="line"><span class="built_in">read</span> -a array &lt;&lt;&lt;$(<span class="built_in">echo</span> -e <span class="string">"1\t2\t3"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">  1</span><br><span class="line">  2</span><br><span class="line">  3</span><br><span class="line"><span class="comment"># 使用的数组下标</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!array[@]&#125;</span></span><br><span class="line">  0 1 2</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">array2=($(<span class="built_in">echo</span> -e <span class="string">"1\t2\t3"</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;array2[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">  1</span><br><span class="line">  2</span><br><span class="line">  3</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/1952404/linux-bash-multiple-variable-assignment" target="_blank" rel="noopener">Linux bash: Multiple variable assignment</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;strong&gt;如何将程序的输出结果同时赋值给多个变量&lt;/strong&gt;，主要有两种方法：&lt;strong&gt;&lt;code&gt;read&lt;/code&gt;命令结合&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/strong&gt;、使用&lt;strong&gt;数组存储&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之没有root安装packages</title>
    <link href="http://showteeth.tech/posts/9464.html"/>
    <id>http://showteeth.tech/posts/9464.html</id>
    <published>2019-08-09T03:06:05.000Z</published>
    <updated>2019-08-10T02:58:51.054Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了在没有<code>root</code>权限的条件下给系统(<code>centos</code>)自带的<code>python</code>安装<code>packages</code>的方法，主要是使用<code>pip install --user package</code>，安装的路径在<code>~/.local/</code></p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为课题的需要，今天打算另一个集群2.7的python中安装<code>pybedtools</code>包，但是安装却发现如下报错：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IOError: [Errno 13] Permission denied: <span class="string">'/usr/lib/python2.7/site-packages/six.py'</span></span><br></pre></td></tr></table></figure><p></p><p>这一看就是没有访问权限的问题，毕竟是别人的集群，没有root权限想要安装package到自带的python中就不能使用上述方法。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>使用如下方法进行安装：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --user pybedtools</span><br></pre></td></tr></table></figure><p></p><p>这种包默认的安装路径是在<code>~/.local/</code></p><p>如果上述方法不奏效，可以参考<a href="https://stackoverflow.com/questions/7465445/how-to-install-python-modules-without-root-access" target="_blank" rel="noopener">How to install python modules without root access?</a>中的其他方法。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/7465445/how-to-install-python-modules-without-root-access" target="_blank" rel="noopener">How to install python modules without root access?</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了在没有&lt;code&gt;root&lt;/code&gt;权限的条件下给系统(&lt;code&gt;centos&lt;/code&gt;)自带的&lt;code&gt;python&lt;/code&gt;安装&lt;code&gt;packages&lt;/code&gt;的方法，主要是使用&lt;code&gt;pip install --user package&lt;/code&gt;，安装的路径在&lt;code&gt;~/.local/&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="tricks" scheme="http://showteeth.tech/categories/Python/tricks/"/>
    
    
      <category term="tricks" scheme="http://showteeth.tech/tags/tricks/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之加速Python小tips</title>
    <link href="http://showteeth.tech/posts/47268.html"/>
    <id>http://showteeth.tech/posts/47268.html</id>
    <published>2019-07-27T09:43:31.000Z</published>
    <updated>2019-07-27T10:02:53.103Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<strong>Python中加速计算的一些小tips</strong>，其中有很多方法只是<strong>略有提及</strong>，并没有做深入地学习，目前只是大致了解一些针对不同情形可以使用什么加速方法，<strong>后续使用的时候再有针对性地学习</strong>。</p></div><a id="more"></a><h2 id="分析代码运行时间"><a href="#分析代码运行时间" class="headerlink" title="分析代码运行时间"></a>分析代码运行时间</h2><p>总结：</p><ul><li>测试代码<strong>单次运行时间</strong>：<code>time.time()</code>之差，或者使用<code>%%time</code>，如果是单行，可以使用<code>%time</code>；</li><li><strong>平均</strong>用时：<code>timeit</code>模块或者<code>%%timeit</code></li><li>按<strong>函数</strong>分析运行时间：<code>profile</code>模块或者<code>%prun</code></li><li>按<strong>行</strong>分析代码运行时间：<code>line_profiler</code>或者<code>%lprun</code></li></ul><h3 id="测试代码的运行时间"><a href="#测试代码的运行时间" class="headerlink" title="测试代码的运行时间"></a>测试代码的运行时间</h3><h4 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 记录开始时间</span></span><br><span class="line">tic=time.time()</span><br><span class="line"><span class="comment"># 运行陈程序</span></span><br><span class="line">much_job=[x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">3</span>)]</span><br><span class="line"><span class="comment"># 记录结束时间</span></span><br><span class="line">toc=time.time()</span><br><span class="line"><span class="comment"># 小数点后保留5位小数</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'used &#123;:.5&#125;s'</span>.format(toc-tic))</span><br></pre></td></tr></table></figure><pre><code>used 0.13954s</code></pre><h4 id="jupyter中的方法"><a href="#jupyter中的方法" class="headerlink" title="jupyter中的方法"></a>jupyter中的方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">much_job=[x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">3</span>)]</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 135 ms, sys: 7.1 ms, total: 142 msWall time: 140 ms</code></pre><h3 id="测试代码平均用时"><a href="#测试代码平均用时" class="headerlink" title="测试代码平均用时"></a>测试代码平均用时</h3><h4 id="通用方法-1"><a href="#通用方法-1" class="headerlink" title="通用方法"></a>通用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> timeit</span><br><span class="line">g=<span class="keyword">lambda</span> x:x**<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (g(<span class="number">2</span>)**<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">timeit(<span class="string">'main()'</span>,globals=&#123;<span class="string">'main'</span>:main&#125;,number=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>2.5913002900779247e-05</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(timeit)</span><br></pre></td></tr></table></figure><pre><code>Help on function timeit in module timeit:timeit(stmt=&apos;pass&apos;, setup=&apos;pass&apos;, timer=&lt;built-in function perf_counter&gt;, number=1000000, globals=None)    Convenience function to create Timer object and call timeit method.</code></pre><h4 id="jupyter中的方法-1"><a href="#jupyter中的方法-1" class="headerlink" title="jupyter中的方法"></a>jupyter中的方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">10</span></span><br><span class="line">g=<span class="keyword">lambda</span> x:x**<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (g(<span class="number">2</span>)**<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><pre><code>2.34 µs ± 211 ns per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre><h3 id="分析函数运行时间"><a href="#分析函数运行时间" class="headerlink" title="分析函数运行时间"></a>分析函数运行时间</h3><h4 id="通用方法-2"><a href="#通用方法-2" class="headerlink" title="通用方法"></a>通用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(x <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    result=[relu(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">-100000</span>,<span class="number">100000</span>,<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> profile</span><br><span class="line">profile.run(<span class="string">'main()'</span>)</span><br></pre></td></tr></table></figure><pre><code>      200006 function calls in 0.672 secondsOrdered by: standard namencalls  tottime  percall  cumtime  percall filename:lineno(function)     1    0.000    0.000    0.672    0.672 :0(exec)     1    0.000    0.000    0.000    0.000 :0(setprofile)200000    0.322    0.000    0.322    0.000 &lt;ipython-input-9-aae7666d2db5&gt;:1(relu)     1    0.000    0.000    0.671    0.671 &lt;ipython-input-9-aae7666d2db5&gt;:4(main)     1    0.348    0.348    0.671    0.671 &lt;ipython-input-9-aae7666d2db5&gt;:5(&lt;listcomp&gt;)     1    0.001    0.001    0.672    0.672 &lt;string&gt;:1(&lt;module&gt;)     1    0.000    0.000    0.672    0.672 profile:0(main())     0    0.000             0.000          profile:0(profiler)</code></pre><h4 id="jupyter中的方法-2"><a href="#jupyter中的方法-2" class="headerlink" title="jupyter中的方法"></a>jupyter中的方法</h4><p>和前面的结果相同，但是是以弹框的形式展示的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%prun main()</span><br></pre></td></tr></table></figure><h3 id="按行分析代码运行时间"><a href="#按行分析代码运行时间" class="headerlink" title="按行分析代码运行时间"></a>按行分析代码运行时间</h3><p><code>%lprun</code>命令如果不能得到正确的输出，可以参考：<a href="https://stackoverflow.com/questions/19942653/interactive-python-cannot-get-lprun-to-work-although-line-profiler-is-impor" target="_blank" rel="noopener">Interactive Python: cannot get <code>%lprun</code> to work, although line_profiler is imported properly</a></p><h4 id="通用方法-3"><a href="#通用方法-3" class="headerlink" title="通用方法"></a>通用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(x <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    result=[relu(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">-100000</span>,<span class="number">100000</span>,<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> line_profiler <span class="keyword">import</span> LineProfiler</span><br><span class="line">lprofile = LineProfiler(main,relu)</span><br><span class="line">lprofile.run(<span class="string">'main()'</span>)</span><br><span class="line">lprofile.print_stats()</span><br></pre></td></tr></table></figure><pre><code>Timer unit: 1e-06 sTotal time: 0.077296 sFile: &lt;ipython-input-72-aae7666d2db5&gt;Function: relu at line 1Line #      Hits         Time  Per Hit   % Time  Line Contents==============================================================     1                                           def relu(x):     2    200000      77296.0      0.4    100.0      return(x if x&gt;0 else 0)Total time: 0.259755 sFile: &lt;ipython-input-72-aae7666d2db5&gt;Function: main at line 4Line #      Hits         Time  Per Hit   % Time  Line Contents==============================================================     4                                           def main():     5         1     259754.0 259754.0    100.0      result=[relu(x) for x in range(-100000,100000,1)]     6         1          1.0      1.0      0.0      return (result)</code></pre><h4 id="jupyter中的方法-3"><a href="#jupyter中的方法-3" class="headerlink" title="jupyter中的方法"></a>jupyter中的方法</h4><p>如果报错：UsageError: Line magic function <code>%lprun</code> not found.<br><a href="https://stackoverflow.com/questions/19942653/interactive-python-cannot-get-lprun-to-work-although-line-profiler-is-impor" target="_blank" rel="noopener">解决方法</a>：</p><ul><li>暂时的解决方法：<code>%load_ext line_profiler</code></li><li>永久的解决方法：在<code>~/.ipython/profile_default/ipython_config.py</code>(如果没有这个文件，可以使用<code>ipython profile create</code>创建)文件中添加<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c.TerminalIPythonApp.extensions = [</span><br><span class="line">    <span class="string">'line_profiler'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%load_ext line_profiler</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%lprun -f main -f relu main()</span><br></pre></td></tr></table></figure><h2 id="加速查找"><a href="#加速查找" class="headerlink" title="加速查找"></a>加速查找</h2><p>总结：</p><ul><li>在<strong>单个列表</strong>中查找某个元素：使用<code>set</code>比使用<code>list</code>快</li><li><strong>两个列表联合</strong>查找：使用<code>dict</code>比使用两个<code>list</code>要快</li></ul><h3 id="使用set而不是list进行查找"><a href="#使用set而不是list进行查找" class="headerlink" title="使用set而不是list进行查找"></a>使用set而不是list进行查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=(i**<span class="number">2</span> + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>) )</span><br></pre></td></tr></table></figure><h4 id="低速方法-list"><a href="#低速方法-list" class="headerlink" title="低速方法-list"></a>低速方法-list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_data=list(data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="number">1098987</span> <span class="keyword">in</span> list_data</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 25.4 ms, sys: 0 ns, total: 25.4 msWall time: 25.1 msFalse</code></pre><h4 id="高速方法-set"><a href="#高速方法-set" class="headerlink" title="高速方法-set"></a>高速方法-set</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_data=set(data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="number">1098987</span> <span class="keyword">in</span> set_data</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 7 µs, sys: 0 ns, total: 7 µsWall time: 12.9 µsFalse</code></pre><h3 id="使用dict而非两个list进行匹配查找"><a href="#使用dict而非两个list进行匹配查找" class="headerlink" title="使用dict而非两个list进行匹配查找"></a>使用dict而非两个list进行匹配查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_a=[<span class="number">2</span>*i<span class="number">-1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>)]</span><br><span class="line">list_b=[i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> list_a]</span><br></pre></td></tr></table></figure><h4 id="低速方法-两个list"><a href="#低速方法-两个list" class="headerlink" title="低速方法-两个list"></a>低速方法-两个list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">print</span> (list_b[list_a.index(<span class="number">876567</span>)])</span><br></pre></td></tr></table></figure><pre><code>768369705489CPU times: user 12 ms, sys: 0 ns, total: 12 msWall time: 11.9 ms</code></pre><h4 id="高速方法-dict"><a href="#高速方法-dict" class="headerlink" title="高速方法-dict"></a>高速方法-dict</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">b=[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">dict(zip(a,b))</span><br></pre></td></tr></table></figure><pre><code>{1: 3, 2: 4}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_ab=dict(zip(list_a,list_b))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">print</span> (dict_ab.get(<span class="number">876567</span>))</span><br></pre></td></tr></table></figure><pre><code>768369705489CPU times: user 179 µs, sys: 12 µs, total: 191 µsWall time: 109 µs</code></pre><h2 id="加速循环"><a href="#加速循环" class="headerlink" title="加速循环"></a>加速循环</h2><p>总结：</p><ul><li>使用<code>for</code>循环比使用<code>while</code>循环更加快</li><li><strong>避免在循环中重复计算</strong></li></ul><h3 id="优先使用for循环而不是while循环"><a href="#优先使用for循环而不是while循环" class="headerlink" title="优先使用for循环而不是while循环"></a>优先使用for循环而不是while循环</h3><h4 id="低速方法-while"><a href="#低速方法-while" class="headerlink" title="低速方法-while"></a>低速方法-while</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">s,i=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10000</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    s += i</span><br><span class="line"><span class="keyword">print</span> (s)</span><br></pre></td></tr></table></figure><pre><code>50005000CPU times: user 4.14 ms, sys: 7 µs, total: 4.15 msWall time: 4 ms</code></pre><h4 id="高速方法-for"><a href="#高速方法-for" class="headerlink" title="高速方法-for"></a>高速方法-for</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">s=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10001</span>):</span><br><span class="line">    s += i</span><br><span class="line"><span class="keyword">print</span> (s)</span><br></pre></td></tr></table></figure><pre><code>50005000CPU times: user 3.05 ms, sys: 2 µs, total: 3.06 msWall time: 2.91 ms</code></pre><h3 id="在循环体中避免重复计算"><a href="#在循环体中避免重复计算" class="headerlink" title="在循环体中避免重复计算"></a>在循环体中避免重复计算</h3><h4 id="低速方法"><a href="#低速方法" class="headerlink" title="低速方法"></a>低速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=[i**<span class="number">2</span>+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2000</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="comment"># sum重复计算</span></span><br><span class="line">b=[i/sum(a) <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 54.7 ms, sys: 76 µs, total: 54.8 msWall time: 53.6 ms</code></pre><h4 id="高速方法"><a href="#高速方法" class="headerlink" title="高速方法"></a>高速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%time </span><br><span class="line">sum_a=sum(a)</span><br><span class="line">b=[i/sum_a <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 360 µs, sys: 0 ns, total: 360 µsWall time: 367 µs</code></pre><h2 id="加速函数"><a href="#加速函数" class="headerlink" title="加速函数"></a>加速函数</h2><p>总结：</p><ul><li>使用<strong>循环代替递归</strong>，递归速度更慢一些</li><li>使用<code>lru_cache</code>的<strong>缓存机制</strong>加速递归</li><li>使用<code>numba</code>加速函数</li></ul><h3 id="使用循环代替递归"><a href="#使用循环代替递归" class="headerlink" title="使用循环代替递归"></a>使用循环代替递归</h3><h4 id="低速方法-递归"><a href="#低速方法-递归" class="headerlink" title="低速方法-递归"></a>低速方法-递归</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> <span class="keyword">if</span> n <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">else</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>))</span><br><span class="line"><span class="keyword">print</span> (fib(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><pre><code>832040CPU times: user 273 ms, sys: 2.78 ms, total: 275 msWall time: 274 ms</code></pre><h4 id="高速方法-循环"><a href="#高速方法-循环" class="headerlink" title="高速方法-循环"></a>高速方法-循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>)</span><br><span class="line">    a,b=<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n):</span><br><span class="line">        a,b=b,a+b</span><br><span class="line">    <span class="keyword">return</span> (b)</span><br><span class="line">print(fib(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><pre><code>832040CPU times: user 195 µs, sys: 13 µs, total: 208 µsWall time: 149 µs</code></pre><h3 id="缓存机制加速递归函数"><a href="#缓存机制加速递归函数" class="headerlink" title="缓存机制加速递归函数"></a>缓存机制加速递归函数</h3><h4 id="低速方法-递归-1"><a href="#低速方法-递归-1" class="headerlink" title="低速方法-递归"></a>低速方法-递归</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> <span class="keyword">if</span> n <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">else</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>))</span><br><span class="line"><span class="keyword">print</span> (fib(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><pre><code>832040CPU times: user 275 ms, sys: 2.79 ms, total: 277 msWall time: 275 ms</code></pre><h4 id="高速方法-缓存"><a href="#高速方法-缓存" class="headerlink" title="高速方法-缓存"></a>高速方法-缓存</h4><p><a href="http://kuanghy.github.io/2016/04/20/python-cache" target="_blank" rel="noopener">lru_cache参考链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最多缓存100个函数运行的结果</span></span><br><span class="line"><span class="comment"># 如果为None，则无限制，设置为2n时，性能最佳</span></span><br><span class="line"><span class="meta">@lru_cache(100)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> <span class="keyword">if</span> n <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">else</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>))</span><br><span class="line"><span class="keyword">print</span> (fib(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><pre><code>832040CPU times: user 293 µs, sys: 19 µs, total: 312 µsWall time: 227 µs</code></pre><h3 id="使用numba加速Python函数"><a href="#使用numba加速Python函数" class="headerlink" title="使用numba加速Python函数"></a>使用numba加速Python函数</h3><h4 id="低速方法-1"><a href="#低速方法-1" class="headerlink" title="低速方法"></a>低速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_power</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_power_sum</span><span class="params">(n)</span>:</span></span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        s=s+my_power(i)</span><br><span class="line">    <span class="keyword">return</span> (s)</span><br><span class="line"></span><br><span class="line">print(my_power_sum(<span class="number">1000000</span>))</span><br></pre></td></tr></table></figure><pre><code>333333833333500000CPU times: user 456 ms, sys: 1.81 ms, total: 458 msWall time: 456 ms</code></pre><h4 id="高速方法-numba"><a href="#高速方法-numba" class="headerlink" title="高速方法-numba"></a>高速方法-numba</h4><p>参考链接：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/27152060" target="_blank" rel="noopener">Python · numba 的基本应用</a></li><li><a href="https://www.jianshu.com/p/69d9d7e37bc5" target="_blank" rel="noopener">加速python运行-numba</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">from</span> numba <span class="keyword">import</span> jit</span><br><span class="line"><span class="meta">@jit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_power</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@jit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_power_sum</span><span class="params">(n)</span>:</span></span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        s=s+my_power(i)</span><br><span class="line">    <span class="keyword">return</span> (s)</span><br><span class="line"></span><br><span class="line">print(my_power_sum(<span class="number">1000000</span>))</span><br></pre></td></tr></table></figure><pre><code>333333833333500000CPU times: user 100 ms, sys: 1.11 ms, total: 101 msWall time: 100 ms</code></pre><h2 id="使用标准库函数进行加速"><a href="#使用标准库函数进行加速" class="headerlink" title="使用标准库函数进行加速"></a>使用标准库函数进行加速</h2><p>总结：</p><ul><li>使用<code>collections.Counter</code>加速计数</li><li>使用<code>collections.ChainMap</code>加速字典合并</li></ul><h3 id="使用collections-Counter加速计数"><a href="#使用collections-Counter加速计数" class="headerlink" title="使用collections.Counter加速计数"></a>使用collections.Counter加速计数</h3><h4 id="低速方法-2"><a href="#低速方法-2" class="headerlink" title="低速方法"></a>低速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=[x**<span class="number">2</span>%<span class="number">1989</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2000000</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">values_count=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    i_cnt=values_count.get(i,<span class="number">0</span>)</span><br><span class="line">    values_count[i]=i_cnt + <span class="number">1</span></span><br><span class="line">print(values_count.get(<span class="number">4</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><pre><code>8044CPU times: user 682 ms, sys: 440 µs, total: 682 msWall time: 680 ms</code></pre><p>函数的使用:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.get(key, default=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p></p><p>参数：</p><ul><li><code>key</code> – 字典中要查找的键。</li><li><code>default</code> – 如果指定键的值不存在时，返回该默认值值</li></ul><h4 id="高速方法-collections"><a href="#高速方法-collections" class="headerlink" title="高速方法-collections"></a>高速方法-collections</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">values_count=Counter(data)</span><br><span class="line">print(values_count.get(<span class="number">4</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><pre><code>8044CPU times: user 234 ms, sys: 0 ns, total: 234 msWall time: 233 ms</code></pre><h3 id="使用collections-ChainMap加速字典合并"><a href="#使用collections-ChainMap加速字典合并" class="headerlink" title="使用collections.ChainMap加速字典合并"></a>使用collections.ChainMap加速字典合并</h3><h4 id="低速方法-3"><a href="#低速方法-3" class="headerlink" title="低速方法"></a>低速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_a=&#123;i:i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">2</span>)&#125;</span><br><span class="line">dict_b=&#123;i:<span class="number">2</span>*i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">3</span>)&#125;</span><br><span class="line">dict_c=&#123;i:<span class="number">3</span>*i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">5</span>)&#125;</span><br><span class="line">dict_d=&#123;i:<span class="number">4</span>*i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">7</span>)&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">result=dict_a.copy()</span><br><span class="line">result.update(dict_b)</span><br><span class="line">result.update(dict_c)</span><br><span class="line">result.update(dict_d)</span><br><span class="line">print(result.get(<span class="number">9999</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><pre><code>10000CPU times: user 79.9 ms, sys: 33.6 ms, total: 113 msWall time: 112 ms</code></pre><h4 id="高速方法-1"><a href="#高速方法-1" class="headerlink" title="高速方法"></a>高速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line">chain=ChainMap(dict_a,dict_b,dict_c,dict_d)</span><br><span class="line">print(result.get(<span class="number">9999</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><pre><code>10000CPU times: user 186 µs, sys: 18 µs, total: 204 µsWall time: 150 µs</code></pre><h2 id="使用numpy向量化代替list"><a href="#使用numpy向量化代替list" class="headerlink" title="使用numpy向量化代替list"></a>使用numpy向量化代替list</h2><p>总结：</p><ul><li>使用<code>array</code>代替<code>list</code>进行运算</li><li>使用<code>np.ufunc</code>代替<code>math.func</code></li><li>使用<code>np.where</code>代替<code>if</code></li></ul><h3 id="使用array代替list"><a href="#使用array代替list" class="headerlink" title="使用array代替list"></a>使用array代替list</h3><h4 id="低速方法-list-1"><a href="#低速方法-list-1" class="headerlink" title="低速方法-list"></a>低速方法-list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">a=range(<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">3</span>)</span><br><span class="line">b=range(<span class="number">1000000</span>,<span class="number">1</span>,<span class="number">-3</span>)</span><br><span class="line">c=[<span class="number">3</span>*a[i] - <span class="number">2</span>*b[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(a))]</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 176 ms, sys: 7.75 ms, total: 184 msWall time: 181 ms</code></pre><h4 id="高速方法-2"><a href="#高速方法-2" class="headerlink" title="高速方法"></a>高速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array_a=np.arange(<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">3</span>)</span><br><span class="line">array_b=np.arange(<span class="number">1000000</span>,<span class="number">1</span>,<span class="number">-3</span>)</span><br><span class="line">array_c=<span class="number">3</span>*array_a - <span class="number">2</span>*array_b</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 4.18 ms, sys: 935 µs, total: 5.12 msWall time: 3.65 ms</code></pre><h3 id="使用np-ufunc代替math-func"><a href="#使用np-ufunc代替math-func" class="headerlink" title="使用np.ufunc代替math.func"></a>使用np.ufunc代替math.func</h3><h4 id="低速方法-math-func"><a href="#低速方法-math-func" class="headerlink" title="低速方法-math.func"></a>低速方法-math.func</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a=range(<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">3</span>)</span><br><span class="line">b=[math.log(x) <span class="keyword">for</span> x <span class="keyword">in</span> a]</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 117 ms, sys: 1.88 ms, total: 119 msWall time: 116 ms</code></pre><h4 id="高速方法-np-ufunc"><a href="#高速方法-np-ufunc" class="headerlink" title="高速方法-np.ufunc"></a>高速方法-np.ufunc</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array_a=np.arange(<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">3</span>)</span><br><span class="line">array_b=np.log(array_a)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 20.8 ms, sys: 1.98 ms, total: 22.8 msWall time: 21.3 ms</code></pre><h3 id="使用np-where代替if"><a href="#使用np-where代替if" class="headerlink" title="使用np.where代替if"></a>使用np.where代替if</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array_a=np.arange(<span class="number">-100000</span>,<span class="number">1000000</span>)</span><br></pre></td></tr></table></figure><h4 id="低速方法-4"><a href="#低速方法-4" class="headerlink" title="低速方法"></a>低速方法</h4><p><code>np.vectorize</code>可以将普通函数转换为支持向量化的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">relu=np.vectorize(<span class="keyword">lambda</span> x:x <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">array_b=relu(array_a)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 241 ms, sys: 29.1 ms, total: 270 msWall time: 325 ms</code></pre><h4 id="高速方法-3"><a href="#高速方法-3" class="headerlink" title="高速方法"></a>高速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">relu=<span class="keyword">lambda</span> x:np.where(x&gt;<span class="number">0</span>,x,<span class="number">0</span>)</span><br><span class="line">array_b=relu(array_a)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 4.86 ms, sys: 1e+03 µs, total: 5.86 msWall time: 4.36 ms</code></pre><h2 id="加速pandas"><a href="#加速pandas" class="headerlink" title="加速pandas"></a>加速pandas</h2><p>总结：</p><ul><li>运算时：使用<code>np.ufunc</code>函数代替<code>applymap</code></li><li>初始化dataframe时：使用<strong>预分配存储</strong>代替<strong>动态扩容</strong></li><li>读写文件时：使用<code>csv</code>文件代替<code>excel</code>文件读写</li><li>使用pandas多进程工具<code>pandarallel</code></li></ul><h3 id="使用np-ufunc函数代替applymap"><a href="#使用np-ufunc函数代替applymap" class="headerlink" title="使用np.ufunc函数代替applymap"></a>使用np.ufunc函数代替applymap</h3><h4 id="低速方法-使用applymap"><a href="#低速方法-使用applymap" class="headerlink" title="低速方法-使用applymap"></a>低速方法-使用applymap</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.DataFrame(np.random.randint(<span class="number">-10</span>,<span class="number">11</span>,size=(<span class="number">100000</span>,<span class="number">26</span>)),</span><br><span class="line">               columns=list(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>))</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><br><style scoped></style><br><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th><th>g</th><th>h</th><th>i</th><th>j</th><th>...</th><th>q</th><th>r</th><th>s</th><th>t</th><th>u</th><th>v</th><th>w</th><th>x</th><th>y</th><th>z</th></tr></thead><tbody><tr><th>0</th><td>-1</td><td>10</td><td>-6</td><td>7</td><td>1</td><td>8</td><td>3</td><td>0</td><td>4</td><td>-8</td><td>...</td><td>8</td><td>-7</td><td>-5</td><td>8</td><td>-8</td><td>-6</td><td>8</td><td>4</td><td>6</td><td>-4</td></tr><tr><th>1</th><td>7</td><td>-4</td><td>3</td><td>-9</td><td>0</td><td>-7</td><td>-10</td><td>3</td><td>-6</td><td>6</td><td>...</td><td>5</td><td>4</td><td>-5</td><td>10</td><td>2</td><td>-7</td><td>-1</td><td>-10</td><td>-7</td><td>0</td></tr><tr><th>2</th><td>-7</td><td>10</td><td>3</td><td>5</td><td>4</td><td>4</td><td>6</td><td>0</td><td>-8</td><td>-5</td><td>...</td><td>1</td><td>-1</td><td>0</td><td>2</td><td>4</td><td>-5</td><td>0</td><td>6</td><td>2</td><td>0</td></tr><tr><th>3</th><td>-8</td><td>10</td><td>-4</td><td>4</td><td>8</td><td>-9</td><td>-10</td><td>-10</td><td>2</td><td>-6</td><td>...</td><td>10</td><td>8</td><td>9</td><td>10</td><td>3</td><td>7</td><td>-1</td><td>2</td><td>0</td><td>5</td></tr><tr><th>4</th><td>4</td><td>3</td><td>3</td><td>9</td><td>-5</td><td>-1</td><td>4</td><td>1</td><td>3</td><td>-6</td><td>...</td><td>3</td><td>-1</td><td>-2</td><td>6</td><td>9</td><td>-1</td><td>0</td><td>2</td><td>-1</td><td>6</td></tr></tbody></table><br><p>5 rows × 26 columns</p><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%time dfresult=df.applymap(<span class="keyword">lambda</span> x:np.sin(x)+np.cos(x))</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 9.28 s, sys: 72 ms, total: 9.36 sWall time: 9.35 s</code></pre><h4 id="高速方法-np-ufunc-1"><a href="#高速方法-np-ufunc-1" class="headerlink" title="高速方法-np.ufunc"></a>高速方法-np.ufunc</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">dfresult=np.sin(df) + np.cos(df)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 256 ms, sys: 41.3 ms, total: 298 msWall time: 325 ms</code></pre><h3 id="使用预分配存储代替动态扩容"><a href="#使用预分配存储代替动态扩容" class="headerlink" title="使用预分配存储代替动态扩容"></a>使用预分配存储代替动态扩容</h3><h4 id="低速方法-动态扩容"><a href="#低速方法-动态扩容" class="headerlink" title="低速方法-动态扩容"></a>低速方法-动态扩容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">df=pd.DataFrame(columns=list(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    df.loc[i,:]=range(i,i+<span class="number">26</span>)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 12.5 s, sys: 0 ns, total: 12.5 sWall time: 12.5 s</code></pre><h4 id="高速方法-预分配存储"><a href="#高速方法-预分配存储" class="headerlink" title="高速方法-预分配存储"></a>高速方法-预分配存储</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">df=pd.DataFrame(np.zeros((<span class="number">10000</span>,<span class="number">26</span>)),</span><br><span class="line">                columns=list(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    df.loc[i,:]=range(i,i+<span class="number">26</span>)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 3.06 s, sys: 16.4 ms, total: 3.07 sWall time: 3 s</code></pre><h3 id="使用csv文件代替excel文件读写"><a href="#使用csv文件代替excel文件读写" class="headerlink" title="使用csv文件代替excel文件读写"></a>使用csv文件代替excel文件读写</h3><h4 id="低速方法-写入excel文件"><a href="#低速方法-写入excel文件" class="headerlink" title="低速方法-写入excel文件"></a>低速方法-写入excel文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">df.to_excel(<span class="string">'data.xlsx'</span>)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 4.64 s, sys: 37.4 ms, total: 4.68 sWall time: 4.86 s</code></pre><h4 id="高速方法-写入csv文件"><a href="#高速方法-写入csv文件" class="headerlink" title="高速方法-写入csv文件"></a>高速方法-写入csv文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">df.to_csv(<span class="string">'data.csv'</span>)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 300 ms, sys: 1.9 ms, total: 302 msWall time: 300 ms</code></pre><h3 id="使用pandas多进程工具pandarallel"><a href="#使用pandas多进程工具pandarallel" class="headerlink" title="使用pandas多进程工具pandarallel"></a>使用pandas多进程工具pandarallel</h3><h4 id="低速方法-5"><a href="#低速方法-5" class="headerlink" title="低速方法"></a>低速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.DataFrame(np.random.randint(<span class="number">-10</span>,<span class="number">11</span>,size=(<span class="number">100000</span>,<span class="number">26</span>)),</span><br><span class="line">               columns=list(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>))</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><br><style scoped></style><br><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th><th>g</th><th>h</th><th>i</th><th>j</th><th>...</th><th>q</th><th>r</th><th>s</th><th>t</th><th>u</th><th>v</th><th>w</th><th>x</th><th>y</th><th>z</th></tr></thead><tbody><tr><th>0</th><td>-2</td><td>6</td><td>10</td><td>10</td><td>-1</td><td>6</td><td>-9</td><td>7</td><td>-3</td><td>1</td><td>...</td><td>-10</td><td>-8</td><td>5</td><td>8</td><td>-4</td><td>7</td><td>-3</td><td>9</td><td>9</td><td>4</td></tr><tr><th>1</th><td>4</td><td>1</td><td>-6</td><td>-1</td><td>-2</td><td>-5</td><td>-1</td><td>7</td><td>1</td><td>3</td><td>...</td><td>-10</td><td>10</td><td>7</td><td>3</td><td>0</td><td>3</td><td>1</td><td>-2</td><td>8</td><td>0</td></tr><tr><th>2</th><td>0</td><td>1</td><td>-2</td><td>-3</td><td>2</td><td>4</td><td>2</td><td>-7</td><td>8</td><td>3</td><td>...</td><td>4</td><td>10</td><td>-1</td><td>2</td><td>-7</td><td>-6</td><td>10</td><td>4</td><td>-4</td><td>-9</td></tr><tr><th>3</th><td>-4</td><td>5</td><td>-9</td><td>-8</td><td>-2</td><td>-7</td><td>-1</td><td>3</td><td>-2</td><td>-4</td><td>...</td><td>10</td><td>-9</td><td>-3</td><td>-8</td><td>-4</td><td>-3</td><td>-5</td><td>-3</td><td>-1</td><td>-2</td></tr><tr><th>4</th><td>8</td><td>3</td><td>-7</td><td>2</td><td>3</td><td>9</td><td>-10</td><td>0</td><td>0</td><td>-2</td><td>...</td><td>4</td><td>3</td><td>9</td><td>3</td><td>5</td><td>-2</td><td>-9</td><td>-5</td><td>-10</td><td>-4</td></tr></tbody></table><br><p>5 rows × 26 columns</p><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">result=df.apply(np.sum,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 11.1 s, sys: 0 ns, total: 11.1 sWall time: 11.1 s</code></pre><h4 id="高速方法-pandarallel"><a href="#高速方法-pandarallel" class="headerlink" title="高速方法-pandarallel"></a>高速方法-pandarallel</h4><p>参考链接：</p><ul><li>pandarallel的<a href="https://github.com/nalepae/pandarallel" target="_blank" rel="noopener">github</a></li><li><a href="https://nbviewer.jupyter.org/github/nalepae/pandarallel/blob/master/docs/examples.ipynb" target="_blank" rel="noopener">使用示例</a></li><li><a href="https://zhuanlan.zhihu.com/p/61746020" target="_blank" rel="noopener">用法的中文翻译</a></li></ul><p>支持的相关方法：</p><table><thead><tr><th>Without parallelisation</th><th>With parallelisation</th></tr></thead><tbody><tr><td><code>df.apply(func)</code></td><td><code>df.parallel_apply(func)</code></td></tr><tr><td><code>df.applymap(func)</code></td><td><code>df.parallel_applymap(func)</code></td></tr><tr><td><code>df.groupby(args).apply(func)</code></td><td><code>df.groupby(args).parallel_apply(func)</code></td></tr><tr><td><code>df.groupby(args1).col_name.rolling(args2).apply(func)</code></td><td><code>df.groupby(args1).col_name.rolling(args2).parallel_apply(func)</code></td></tr><tr><td><code>series.map(func)</code></td><td><code>series.parallel_map(func)</code></td></tr><tr><td><code>series.apply(func)</code></td><td><code>series.parallel_apply(func)</code></td></tr><tr><td><code>series.rolling(args).apply(func)</code></td><td><code>series.rolling(args).parallel_apply(func)</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">from</span> pandarallel <span class="keyword">import</span> pandarallel</span><br><span class="line">pandarallel.initialize(nb_workers=<span class="number">4</span>)</span><br><span class="line">result=df.parallel_apply(np.sum,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>New pandarallel memory created - Size: 2000 MBPandarallel will run on 4 workersCPU times: user 38.8 ms, sys: 58.8 ms, total: 97.6 msWall time: 3.3 s</code></pre><h2 id="使用dask进行加速"><a href="#使用dask进行加速" class="headerlink" title="使用dask进行加速"></a>使用dask进行加速</h2><p><a href="https://docs.dask.org/en/latest/why.html" target="_blank" rel="noopener">dask简介</a>：</p><blockquote><p>Dask provides ways to scale <code>Pandas</code>, <code>Scikit-Learn</code>, and <code>Numpy</code> workflows with minimal rewriting. It integrates well with these tools so that it copies most of their API and uses their data structures internally. Moreover, Dask is co-developed with these libraries to ensure that they evolve consistently, minimizing friction caused from transitioning from workloads on a local laptop, to a multi-core workstation, and to a distributed cluster. Analysts familiar with Pandas/Scikit-Learn/Numpy will be immediately familiar with their Dask equivalents, and have much of their intuition carry over to a scalable context.</p></blockquote><p><br></p><p><a href="https://docs.dask.org/en/latest/use-cases.html" target="_blank" rel="noopener">适用情形</a>：<br>Dask use cases can be roughly divided in the following two categories:</p><ul><li>Large <code>NumPy/Pandas/Lists</code> with <code>dask.array</code>, <code>dask.dataframe</code>, <code>dask.bag</code> to analyze large datasets with familiar techniques. This is similar to Databases, Spark, or big array libraries</li><li>Custom task scheduling. You submit a graph of functions that depend on each other for custom workloads. This is similar to Luigi, Airflow, Celery, or Makefiles</li></ul><p>学习教程:</p><ul><li><a href="https://cloud.tencent.com/developer/article/1010999" target="_blank" rel="noopener">python︱大规模数据存储与读取、并行计算：Dask库简述</a></li><li><a href="https://juejin.im/post/5c1feeaf5188257f9242b65c" target="_blank" rel="noopener">译|在 Python 中，如何运用 Dask 数据进行并行数据分析</a></li></ul><h3 id="使用dask加速dataframe"><a href="#使用dask加速dataframe" class="headerlink" title="使用dask加速dataframe"></a>使用dask加速dataframe</h3><h4 id="低速方法-6"><a href="#低速方法-6" class="headerlink" title="低速方法"></a>低速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df=pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">6</span>,size=(<span class="number">100000000</span>,<span class="number">5</span>)),</span><br><span class="line">               columns=list(<span class="string">'abcde'</span>))</span><br><span class="line">%time df.groupby(<span class="string">'a'</span>).mean()</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 4.13 s, sys: 3.72 s, total: 7.85 sWall time: 8.03 s</code></pre><div><br><style scoped></style><br><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>b</th><th>c</th><th>d</th><th>e</th></tr><tr><th>a</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>0</th><td>2.500325</td><td>2.499488</td><td>2.500634</td><td>2.500346</td></tr><tr><th>1</th><td>2.499725</td><td>2.499342</td><td>2.499707</td><td>2.500463</td></tr><tr><th>2</th><td>2.499565</td><td>2.499577</td><td>2.500171</td><td>2.499852</td></tr><tr><th>3</th><td>2.499790</td><td>2.499861</td><td>2.499205</td><td>2.500443</td></tr><tr><th>4</th><td>2.500874</td><td>2.499877</td><td>2.499486</td><td>2.499790</td></tr><tr><th>5</th><td>2.499937</td><td>2.499493</td><td>2.500126</td><td>2.500856</td></tr></tbody></table><br></div><h4 id="高速方法-dask"><a href="#高速方法-dask" class="headerlink" title="高速方法-dask"></a>高速方法-dask</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dask.dataframe <span class="keyword">as</span> dd</span><br><span class="line">df_dask=dd.from_pandas(df,npartitions=<span class="number">40</span>)</span><br><span class="line">%time df_dask.groupby(<span class="string">'a'</span>).mean().compute()</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 12 s, sys: 6.58 s, total: 18.6 sWall time: 8.44 s</code></pre><div><br><style scoped></style><br><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>b</th><th>c</th><th>d</th><th>e</th></tr><tr><th>a</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>0</th><td>2.500325</td><td>2.499488</td><td>2.500634</td><td>2.500346</td></tr><tr><th>1</th><td>2.499725</td><td>2.499342</td><td>2.499707</td><td>2.500463</td></tr><tr><th>2</th><td>2.499565</td><td>2.499577</td><td>2.500171</td><td>2.499852</td></tr><tr><th>3</th><td>2.499790</td><td>2.499861</td><td>2.499205</td><td>2.500443</td></tr><tr><th>4</th><td>2.500874</td><td>2.499877</td><td>2.499486</td><td>2.499790</td></tr><tr><th>5</th><td>2.499937</td><td>2.499493</td><td>2.500126</td><td>2.500856</td></tr></tbody></table><br></div><h3 id="使用dask-delayed进行加速"><a href="#使用dask-delayed进行加速" class="headerlink" title="使用dask.delayed进行加速"></a>使用dask.delayed进行加速</h3><h4 id="低速方法-7"><a href="#低速方法-7" class="headerlink" title="低速方法"></a>低速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">muchjob</span><span class="params">(x)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> (x**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">result = [muchjob(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">result</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 22 ms, sys: 15.4 ms, total: 37.4 msWall time: 25 s[0, 1, 4, 9, 16]</code></pre><h4 id="高速方法-4"><a href="#高速方法-4" class="headerlink" title="高速方法"></a>高速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">from</span> dask <span class="keyword">import</span> delayed,compute</span><br><span class="line"><span class="keyword">from</span> dask <span class="keyword">import</span> threaded,multiprocessing</span><br><span class="line">values=[delayed(muchjob)(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">result=compute(*values,schediler=<span class="string">'multiprocessing'</span>)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 10.2 ms, sys: 2.93 ms, total: 13.1 msWall time: 5.01 s</code></pre><h2 id="应用多线程多进程加速"><a href="#应用多线程多进程加速" class="headerlink" title="应用多线程多进程加速"></a>应用多线程多进程加速</h2><p>总结：</p><ul><li>针对<code>IO密集型</code>任务：应用<code>多线程</code>加速</li><li>针对<code>CPU密集型</code>任务：应用<code>多进程</code>加速</li></ul><h3 id="应用多线程加速IO密集型任务"><a href="#应用多线程加速IO密集型任务" class="headerlink" title="应用多线程加速IO密集型任务"></a>应用多线程加速IO密集型任务</h3><h4 id="低速方法-串行"><a href="#低速方法-串行" class="headerlink" title="低速方法-串行"></a>低速方法-串行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writefile</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(str(i)+ <span class="string">'.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        s=(<span class="string">'hello %d'</span> %i)*<span class="number">10000000</span></span><br><span class="line">        f.write(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 串行任务</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    writefile(i)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 441 ms, sys: 971 ms, total: 1.41 sWall time: 1.4 s</code></pre><h4 id="高速方法-多线程"><a href="#高速方法-多线程" class="headerlink" title="高速方法-多线程"></a>高速方法-多线程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writefile</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(str(i)+ <span class="string">'.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        s=(<span class="string">'hello %d'</span> %i)*<span class="number">10000000</span></span><br><span class="line">        f.write(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程任务</span></span><br><span class="line">thread_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t=threading.Thread(target=writefile,args=(i,))</span><br><span class="line">    <span class="comment"># 设置守护线程</span></span><br><span class="line">    t.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    thread_list.append(t)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    t.start()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">    <span class="comment"># 等待子线程结束</span></span><br><span class="line">    t.join()</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 527 ms, sys: 1.51 s, total: 2.04 sWall time: 3.97 s</code></pre><h3 id="应用多进程加速CPU密集型任务"><a href="#应用多进程加速CPU密集型任务" class="headerlink" title="应用多进程加速CPU密集型任务"></a>应用多进程加速CPU密集型任务</h3><h4 id="低速方法-8"><a href="#低速方法-8" class="headerlink" title="低速方法"></a>低速方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">muchjob</span><span class="params">(x)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> (x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 串行任务</span></span><br><span class="line">ans=[muchjob(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)]</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><pre><code>[0, 1, 4, 9, 16, 25, 36, 49]CPU times: user 38.3 ms, sys: 20.4 ms, total: 58.8 msWall time: 40 s</code></pre><h4 id="高速方法-多进程"><a href="#高速方法-多进程" class="headerlink" title="高速方法-多进程"></a>高速方法-多进程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line">data=range(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">muchjob</span><span class="params">(x)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> (x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多进程任务</span></span><br><span class="line">pool=multiprocessing.Pool(processes=<span class="number">4</span>)</span><br><span class="line">result=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    result.append(pool.apply_async(muchjob,(i,)))</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br><span class="line">ans=[res.get() <span class="keyword">for</span> res <span class="keyword">in</span> result]</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><pre><code>[0, 1, 4, 9, 16, 25, 36, 49]CPU times: user 18.5 ms, sys: 523 ms, total: 541 msWall time: 10.8 s</code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzU3OTQzNTU2OA==&amp;mid=2247484946&amp;idx=1&amp;sn=b569829e5fef81be667847146ce65dfe&amp;chksm=fd676b4dca10e25bcaa96e3cf1244aaf290e195215136b5d34a6be0a7d1b951c1b7601ae9696&amp;token=647482703&amp;lang=zh_CN#rd" target="_blank" rel="noopener">24式加速你的Python</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;strong&gt;Python中加速计算的一些小tips&lt;/strong&gt;，其中有很多方法只是&lt;strong&gt;略有提及&lt;/strong&gt;，并没有做深入地学习，目前只是大致了解一些针对不同情形可以使用什么加速方法，&lt;strong&gt;后续使用的时候再有针对性地学习&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/categories/Python/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>解决conda的依赖冲突问题</title>
    <link href="http://showteeth.tech/posts/52735.html"/>
    <id>http://showteeth.tech/posts/52735.html</id>
    <published>2019-07-25T13:56:19.000Z</published>
    <updated>2019-07-27T09:47:53.901Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本文记录了在conda升级到<code>4.7.10</code>版本后出现的<code>Solving environment: failed</code>问题以及解决方案。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在将实验室的conda版本升级到<code>4.7.10</code>之后就一直出现：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collecting package metadata (current_repodata.json): <span class="keyword">done</span></span><br><span class="line">Solving environment: failed with current_repodata.json, will retry with next repodata <span class="built_in">source</span>.</span><br><span class="line">Collecting package metadata (repodata.json): <span class="keyword">done</span></span><br><span class="line">Solving environment: failed</span><br><span class="line">Initial quick solve with frozen env failed.  Unfreezing env and trying again.</span><br><span class="line">Solving environment: failed</span><br></pre></td></tr></table></figure><p></p><p>在网上找了很多，发现有很多和我相同的情况，比如<code>Stack Overflow</code>上的<a href="https://stackoverflow.com/questions/57117855/conda-4-7-7-4-6-collecting-package-metadata-current-repodata-json-chann" target="_blank" rel="noopener">这个问题</a>、<code>conda</code>中的这个<a href="https://github.com/conda/conda/issues/8967" target="_blank" rel="noopener">issue</a>，大部分的解决方案都是降低<code>conda</code>的版本，但是使用这种方法并没有解决我的问题。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="降低conda"><a href="#降低conda" class="headerlink" title="降低conda"></a>降低conda</h3><p>这个方法被证明在我的问题上是错误的：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">conda update conda -c bioconda</span><br><span class="line">Collecting package metadata (current_repodata.json): <span class="keyword">done</span></span><br><span class="line">Solving environment: failed with current_repodata.json, will retry with next repodata <span class="built_in">source</span>.</span><br><span class="line">Collecting package metadata (repodata.json): <span class="keyword">done</span></span><br><span class="line">Solving environment: failed</span><br><span class="line">Initial quick solve with frozen env failed.  Unfreezing env and trying again.</span><br><span class="line">Solving environment: failed</span><br><span class="line"></span><br><span class="line">UnsatisfiableError: The following specifications were found to be incompatible with each other:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Package libssh2 conflicts <span class="keyword">for</span>:</span><br><span class="line">r=3.5.1 -&gt; mro-basics=3.5.1 -&gt; r-revoioq[version=<span class="string">'&gt;=10.0.0,&lt;10.0.1.0a0,&gt;=8.0.9,&lt;8.0.10.0a0'</span>] -&gt; r-runit[version=<span class="string">'&gt;=0.4.26'</span>] -&gt; mro-base[version=<span class="string">'3.4.3.*,3.5.0.*,3.5.1.*'</span>] -&gt; mro-base_impl==3.5.1=h9a62091_0 -&gt; curl[version=<span class="string">'&gt;=7.58.0'</span>] -&gt; libcurl==7.61.1=hbdb9355_2 -&gt; libssh2[version=<span class="string">'&gt;=1.8.0,&lt;1.9.0a0,&gt;=1.8.0,&lt;2.0a0,&gt;=1.8.2,&lt;1.9.0a0'</span>]</span><br><span class="line">jupyterhub -&gt; pycurl -&gt; libcurl[version=<span class="string">'&gt;=7.60.0,&lt;8.0a0,&gt;=7.63.0,&lt;8.0a0,&gt;=7.64.1,&lt;8.0a0'</span>] -&gt; libssh2[version=<span class="string">'&gt;=1.8.0,&lt;1.9.0a0,&gt;=1.8.0,&lt;2.0a0,&gt;=1.8.2,&lt;1.9.0a0'</span>]</span><br><span class="line">git -&gt; curl[version=<span class="string">'&gt;=7.44.0,&lt;8,&gt;=7.59.0,&lt;8.0a0,&gt;=7.64.0,&lt;8.0a0'</span>] -&gt; libcurl==7.65.2=h20c2e04_0 -&gt; libssh2[version=<span class="string">'&gt;=1.8.0,&lt;1.9.0a0,&gt;=1.8.0,&lt;2.0a0,&gt;=1.8.2,&lt;1.9.0a0'</span>]</span><br><span class="line">rpy2 -&gt; r-dbplyr -&gt; r-dplyr[version=<span class="string">'&gt;=0.5.0.9004,&gt;=0.7.4,&gt;=0.8.0'</span>] -&gt; r-tidyselect[version=<span class="string">'&gt;=0.2.3,&gt;=0.2.5'</span>] -&gt; r-purrr -&gt; r-tibble -&gt; r-pillar[version=<span class="string">'&gt;=1.1.0,&gt;=1.3.1'</span>] -&gt; r-utf8[version=<span class="string">'&gt;=1.1.0,&gt;=1.1.3'</span>] -&gt; mro-base[version=<span class="string">'&gt;=3.4.3,&lt;3.5.0a0,&gt;=3.5.0,&lt;3.5.1.0a0,&gt;=3.5.1,&lt;3.5.2.0a0'</span>] -&gt; mro-base_impl==3.5.1=h9a62091_0 -&gt; curl[version=<span class="string">'&gt;=7.58.0'</span>] -&gt; libcurl==7.61.1=h20c2e04_0 -&gt; libssh2[version=<span class="string">'&gt;=1.8.0,&lt;1.9.0a0,&gt;=1.8.0,&lt;2.0a0,&gt;=1.8.2,&lt;1.9.0a0'</span>]</span><br><span class="line">rpy2 -&gt; r-dbplyr -&gt; r-dplyr[version=<span class="string">'&gt;=0.5.0.9004,&gt;=0.7.4,&gt;=0.8.0'</span>] -&gt; r-tidyselect[version=<span class="string">'&gt;=0.2.3,&gt;=0.2.5'</span>] -&gt; r-purrr -&gt; r-tibble -&gt; r-pillar[version=<span class="string">'&gt;=1.1.0,&gt;=1.3.1'</span>] -&gt; r-utf8[version=<span class="string">'&gt;=1.1.0,&gt;=1.1.3'</span>] -&gt; mro-base[version=<span class="string">'&gt;=3.4.3,&lt;3.5.0a0,&gt;=3.5.0,&lt;3.5.1.0a0,&gt;=3.5.1,&lt;3.5.2.0a0'</span>] -&gt; mro-base_impl==3.5.1=h9a62091_0 -&gt; curl[version=<span class="string">'&gt;=7.58.0'</span>] -&gt; libcurl==7.65.2=h20c2e04_0 -&gt; libssh2[version=<span class="string">'&gt;=1.8.0,&lt;1.9.0a0,&gt;=1.8.0,&lt;2.0a0,&gt;=1.8.2,&lt;1.9.0a0'</span>]</span><br></pre></td></tr></table></figure><p></p><p>虽然我发现使用不同的<code>channels</code>可以得到不同的依赖问题，给我了一种使用某个<code>channel</code>可以这个问题的错觉，但在尝试了诸如<code>bioconda</code>、<code>conda-canary</code>和<code>conda-forge</code>等几大常用的<code>channels</code>之后放弃了这种方法。</p><hr><h3 id="Unfreezing-env"><a href="#Unfreezing-env" class="headerlink" title="Unfreezing env"></a>Unfreezing env</h3><p>按照上面出现的错误提示：<code>Initial quick solve with frozen env failed. Unfreezing env and trying again.</code>，之前没见过这个<code>frozen env</code>，然后我就查找了<a href="https://github.com/conda/conda/issues/4864" target="_blank" rel="noopener">相关资料</a>：</p><blockquote><p>I have a new feature in mind for conda env: The ability to (temporarily) canonically disallow changing installed packages in an environment. The main use case I have in mind is when working in a shared user account that gets accessed by different people of potentially strongly varying degrees of conda-fu. The main goal is to avoid that people accidentally break background processing tasks because messing with supposed to be stable python anaconda environments.</p></blockquote><p>上面说可以使用如下命令进行<code>freeze</code>和<code>unfreeze env</code>:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda env freeze [name_of_environment]</span><br><span class="line">conda env unfreeze [name_of_environment]</span><br></pre></td></tr></table></figure><p></p><p>但是实际操作：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usage: conda-env [-h] &#123;create,<span class="built_in">export</span>,list,remove,update&#125; ...</span><br><span class="line">conda-env: error: invalid choice: <span class="string">'freeze'</span> (choose from <span class="string">'create'</span>, <span class="string">'export'</span>, <span class="string">'list'</span>, <span class="string">'remove'</span>, <span class="string">'update'</span>)</span><br></pre></td></tr></table></figure><p></p><p>遂作罢。</p><hr><h3 id="升级anaconda"><a href="#升级anaconda" class="headerlink" title="升级anaconda"></a>升级anaconda</h3><p>这个方法是<strong>偶然</strong>的方法，本来都准备将所有有冲突的包卸载掉进行重新安装，但是想着反正都要尝试，那就试试这个吧，结果没想到一下子<strong>成功</strong>了：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update anaconda</span><br></pre></td></tr></table></figure><p></p><p>虽然问题是解决了，但是<strong>想知道是怎么成功的</strong>，<strong>为什么需要升级anaconda？</strong>、<strong>升级conda和升级anaconda的区别是什么？</strong></p><p><a href="https://stackoverflow.com/questions/30034840/what-are-the-differences-between-conda-and-anaconda" target="_blank" rel="noopener">简单的解释</a>：</p><blockquote><p><code>conda</code> is the package manager. <code>Anaconda</code> is a set of about a hundred packages including <code>conda</code>, <code>numpy</code>, <code>scipy</code>, <code>ipython notebook</code>, and so on.</p></blockquote><p><a href="https://stackoverflow.com/questions/45421163/anaconda-vs-miniconda/45421527#45421527" target="_blank" rel="noopener">更官方的解释</a>：</p><blockquote><p>Note that <code>Conda</code> is the <strong>package manager</strong> (e.g. conda list displays all installed packages in the environment), whereas <code>Anaconda</code> and <code>Miniconda</code> are <strong>distributions</strong>. A <strong>software distribution</strong> is a collection of <code>packages</code>, <code>pre-built</code> and <code>pre-configured</code>, that can be installed and used on a system. A <strong>package manager</strong> is a <code>tool</code> that automates the process of <code>installing</code>, <code>updating</code>, and <code>removing</code> packages.</p></blockquote><p>上述两个说法很好地解释了conda和anaconda的区别，但是至于<strong>为什么需要升级anaconda？</strong>还没有想到或者找到比较合理的解释，先留个坑吧。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;本文记录了在conda升级到&lt;code&gt;4.7.10&lt;/code&gt;版本后出现的&lt;code&gt;Solving environment: failed&lt;/code&gt;问题以及解决方案。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="工具" scheme="http://showteeth.tech/categories/Python/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://showteeth.tech/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装R出现的问题汇总</title>
    <link href="http://showteeth.tech/posts/27971.html"/>
    <id>http://showteeth.tech/posts/27971.html</id>
    <published>2019-07-25T07:35:06.000Z</published>
    <updated>2019-07-27T09:47:53.887Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了在<code>Linux(centos)</code>下从<strong>源码</strong>安装<code>R</code>以及安装<code>R package</code>出现的一些问题。</p></div><a id="more"></a><h2 id="–with-readline-yes"><a href="#–with-readline-yes" class="headerlink" title="–with-readline=yes"></a>–with-readline=yes</h2><p><strong>错误表现</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure: error: --with-readline=yes (default) and headers/libs are not available</span><br></pre></td></tr></table></figure><p></p><p>在网上找了很多关于这个问题的解决方法，主要包括：</p><ul><li><code>--with-readline=no</code>：这个方法是最傻的办法，使用之后R代码可能不能补全以及鼠标不能左右移动，极大了降低了开发速度</li><li><code>yum install readline-devel</code>：因为我的系统是centos，所以很多都说需要这样安装一下就可以了，但是这并不能解决我的问题，系统提示我已经安装了这个package并且已经是最新版本了。</li></ul><p><strong>我的解决办法</strong>:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对已经安装了readline以及readline-devel</span></span><br><span class="line"><span class="comment"># 在config.site文件中指定CPPFLAGS、LDFLAGS</span></span><br><span class="line"><span class="comment"># 这两个目录包括了readline的相关文件</span></span><br><span class="line">CPPFLAGS=<span class="string">'-I/usr/include'</span></span><br><span class="line">LDFLAGS=<span class="string">'-L/usr/lib64'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后在configure中加上LDFLAGS="-lncurses"接口</span></span><br><span class="line">./configure --prefix=`<span class="built_in">pwd</span>` --with-x=no --<span class="built_in">enable</span>-R-shlib=yes LDFLAGS=<span class="string">"-lncurses"</span></span><br></pre></td></tr></table></figure><p></p><p>关于<code>CPPFLAGS</code>、<code>LDFLAGS</code>可以查阅<a href="http://showteeth.tech/posts/62231.html">这篇文章</a>.</p><hr><h2 id="conda中R找不到zlib"><a href="#conda中R找不到zlib" class="headerlink" title="conda中R找不到zlib"></a>conda中R找不到zlib</h2><p>在安装<code>Rhdf5lib</code> package出现如下问题：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: either specify a valid zlib installation with --with-zlib=DIR or <span class="built_in">disable</span> zlib usage with --without-zlib</span><br></pre></td></tr></table></figure><p></p><p>和前面的<code>readline</code>相同，都是已经安装了相应的库，但仍然提示找不到，不过这个好像是<code>conda</code>中<code>R</code>的一个普遍问题：<a href="https://github.com/grimbough/Rhdf5lib/issues/21" target="_blank" rel="noopener">issue</a></p><p><strong>我的解决方法</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 治标不治本，只能解决这次安装的需求</span></span><br><span class="line"><span class="comment"># step 1：下载源码文件</span></span><br><span class="line">wget https://bioconductor.org/packages/release/bioc/src/contrib/Rhdf5lib_1.6.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2：指定LDFLAGS</span></span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">"-L/home/softwares/anaconda3/envs/r351/lib/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step3：在命令行下安装</span></span><br><span class="line">/home/softwares/anaconda3/envs/r351/bin/R CMD INSTALL  Rhdf5lib_1.6.0.tar.gz</span><br></pre></td></tr></table></figure><p></p><hr><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了在&lt;code&gt;Linux(centos)&lt;/code&gt;下从&lt;strong&gt;源码&lt;/strong&gt;安装&lt;code&gt;R&lt;/code&gt;以及安装&lt;code&gt;R package&lt;/code&gt;出现的一些问题。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="工具" scheme="http://showteeth.tech/categories/Linux/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://showteeth.tech/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装软件报错：version ZLIB_1.2.9 not found</title>
    <link href="http://showteeth.tech/posts/741.html"/>
    <id>http://showteeth.tech/posts/741.html</id>
    <published>2019-07-24T07:22:17.000Z</published>
    <updated>2019-07-25T07:22:30.756Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了由<code>/lib64/libz.so.1: version &#39;ZLIB_1.2.9&#39; not found</code>问题导致Rstudio中报错<code>Error in RStudioGD()</code>的解决方法。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在使用<code>rstudio server</code>的时候忽然出现如下报错，并且<code>R</code>不能继续画图(R的优势所在，对我而言)：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error <span class="keyword">in</span> RStudioGD() : </span><br><span class="line">  Shadow graphics device error: r error 4 (R code execution error)</span><br><span class="line">In addition: There were 50 or more warnings (use warnings() to see the first 50)</span><br></pre></td></tr></table></figure><p></p><p>在网上查了很多资料，大部分都说需要重装<code>R</code>语言，但是我觉得很不可思议啊，我啥也没做，为啥会需要重装R呢，这不科学，所以我还是先按照提示的信息使用<code>warnings()</code>查看了一下报错信息，前几个报错信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1: In grDevices:::png(<span class="string">"/tmp/Rtmp1WZiNp/1150e349a3c44bcfbf9fd2adc0969720.png"</span>,  ... :</span><br><span class="line">  unable to load shared object <span class="string">'/home/softwares/anaconda3/envs/r351/lib/R/library/grDevices/libs//cairo.so'</span>:</span><br><span class="line">  /lib64/libz.so.1: version `ZLIB_1.2.9<span class="string">' not found (required by /home/softwares/anaconda3/envs/r351/lib/R/library/grDevices/libs//../../../../libpng16.so.16)</span></span><br></pre></td></tr></table></figure><p>看到这个拨错信息我先松了一口气，<code>/lib64/libz.so.1: version &#39;ZLIB_1.2.9&#39; not found</code>这个错误不是常见的错误嘛，可能是这个导致的。</p><p><br></p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>报错提示表明在<code>/lib64/libz.so.1</code>中缺少<code>ZLIB_1.2.9</code>或更高版本，具体包含哪些版本可以使用如下命令查看：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">strings /lib64/libz.so.1 |grep <span class="string">"ZLIB*"</span></span><br><span class="line">  ZLIB_1.2.0</span><br><span class="line">  ZLIB_1.2.0.2</span><br><span class="line">  ZLIB_1.2.0.8</span><br><span class="line">  ZLIB_1.2.2</span><br><span class="line">  ZLIB_1.2.2.3</span><br><span class="line">  ZLIB_1.2.2.4</span><br><span class="line">  ZLIB_1.2.3.3</span><br><span class="line">  ZLIB_1.2.3.4</span><br><span class="line">  ZLIB_1.2.3.5</span><br><span class="line">  ZLIB_1.2.5.1</span><br><span class="line">  ZLIB_1.2.5.2</span><br></pre></td></tr></table></figure><p></p><p>通过输出结果发现缺少是没有相应的版本。</p><p>解决这个问题的方法非常简单，总的来说就是查找和替换，使用带有<code>ZLIB_1.2.9</code>或更高版本替换<code>/lib64/libz.so.1</code>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找</span></span><br><span class="line">find / -name <span class="string">"libz.so.1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认其中的某一个libz.so.1含有ZLIB_1.2.9</span></span><br><span class="line">strings /home/softwares/anaconda3/lib/libz.so.1 |grep <span class="string">"ZLIB*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">rm /usr/lib64/libz.so.1</span><br><span class="line"><span class="comment"># 也可以使用ln -s来创建软连接</span></span><br><span class="line">cp /home/softwares/anaconda3/lib/libz.so.1 /usr/lib64/</span><br></pre></td></tr></table></figure><p></p><p>在解决这个问题之后，发现再次使用<code>R</code>，之前出现的问题也再没有出现，所以说<strong>还是要提前查看报错信息</strong>，<strong>不要一股脑地相信搜到的解决方案</strong>，对我的这个问题，即使重装R(很麻烦)也是不会得到解决的！</p><p><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在管理实验室集群过程中经常遇到这个问题，在安装一些软件或者更新一些系统文件的时候某些包含低版本函数的共享库(<code>so</code>后缀的文件)会自动替换之前设置好的包含高版本函数的共享库，比较常见的除了这里出现的<code>ZLIB_1.2.9</code>还有<code>GLIBCXX_3.4.15</code>等，所有这些问题的解决方法都是和上述类似的，查找-替换。</p><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了由&lt;code&gt;/lib64/libz.so.1: version &amp;#39;ZLIB_1.2.9&amp;#39; not found&lt;/code&gt;问题导致Rstudio中报错&lt;code&gt;Error in RStudioGD()&lt;/code&gt;的解决方法。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="工具" scheme="http://showteeth.tech/categories/Linux/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://showteeth.tech/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之itertools-Python内置迭代器模块</title>
    <link href="http://showteeth.tech/posts/49907.html"/>
    <id>http://showteeth.tech/posts/49907.html</id>
    <published>2019-07-13T07:35:01.000Z</published>
    <updated>2019-07-14T06:28:23.671Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了Python中的迭代器相关的库-<code>itertools</code>；主要学习了三类迭代器：<strong>无线迭代器</strong>(<code>count</code>、<code>cycle</code>、<code>repeat</code>)、<strong>有限迭代器</strong>(<code>accumulate</code>、<code>chain</code>、<code>compress</code>、<code>dropwhile</code>、<code>takewhile</code>、<code>filterfalse</code>、<code>groupby</code>、<code>islice</code>、<code>starmap</code>、<code>tee</code>、<code>zip_longest</code>)以及<strong>组合迭代器</strong>(<code>product</code>、<code>permutation</code>、<code>combination</code>)。</p></div><a id="more"></a><h2 id="itertools简介"><a href="#itertools简介" class="headerlink" title="itertools简介"></a>itertools简介</h2><p>迭代器的特点是：<strong>惰性求值（Lazy evaluation）</strong>，即只有当迭代至某个值时，它才会被计算，这个特点使得<strong>迭代器特别适合于遍历大文件或无限集合等</strong>，因为我们<strong>不用一次性将它们存储在内存中</strong>。</p><p>Python 内置的 <code>itertools</code> 模块包含了<strong>一系列用来产生不同类型迭代器的函数或类</strong>，这些函数的<strong>返回都是一个迭代器</strong>，我们可以通过 <code>for</code> 循环来遍历取值，也可以使用 <code>next()</code> 来取值。</p><p><code>itertools</code> 模块提供的迭代器函数有以下几种类型：</p><p><strong>无限迭代器</strong>：<strong>生成一个无限序列</strong>，比如自然数序列 1, 2, 3, 4, …；<br><strong>有限迭代器</strong>：<strong>接收一个或多个序列</strong>（sequence）作为参数，进行<strong>组合、分组和过滤</strong>等；<br><strong>组合生成器</strong>：序列的<strong>排列、组合，求序列的笛卡儿积</strong>等.</p><hr><h2 id="无限迭代器"><a href="#无限迭代器" class="headerlink" title="无限迭代器"></a>无限迭代器</h2><p>itertools 模块提供了三个函数（事实上，它们是类）用于生成一个无限序列迭代器：</p><table><tr><th width="10%">迭代器</th><th width="10%">参数</th><th width="30%">说明</th><th width="30%">结果</th><th width="20%">示例</th></tr><tr><td>count()</td><td>start, [step]</td><td>接收两个参数，第一个参数指定开始值，默认为 0，第二个参数指定步长，默认为 1</td><td>start, start+step, start+2*step, …</td><td>count(10) --&gt; 10 11 12 13 14...</td></tr><tr><td>cycle()</td><td>p</td><td>接收一个参数，对该参数进行单个字符的拆分之后循环输出</td><td>p0, p1, … plast, p0, p1, …</td><td>cycle('ABCD') --&gt; A B C D A B CD ...</td></tr><tr><td>repeat()</td><td>elem [,n]</td><td>接收两个参数，一个是用于重复的对象，另一个是重复的次数</td><td>elem, elem, elem, … endlessly or up to n times</td><td>repeat(10, 3) --&gt; 10 10 10</td></tr></table><h3 id="count-等差数列"><a href="#count-等差数列" class="headerlink" title="count-等差数列"></a>count-等差数列</h3><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(start=<span class="number">0</span>, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="comment"># count(10) --&gt; 10 11 12 13 14 ...</span></span><br><span class="line">    <span class="comment"># count(2.5, 0.5) -&gt; 2.5 3.0 3.5 ...</span></span><br><span class="line">    n = start</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n += step</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="comment"># 创建一个从0开始，步长为1的无限序列</span></span><br><span class="line">nums=itertools.count()</span><br><span class="line"><span class="comment"># 使用循环获取迭代器中的元素，然后输出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> i &gt;<span class="number">20</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建从10开始，步长为2的无限序列</span></span><br><span class="line">nums_1=itertools.count(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nums_1:</span><br><span class="line">    <span class="keyword">if</span> i &gt;<span class="number">20</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分数形式的等差数列</span></span><br><span class="line"><span class="keyword">import</span> fractions</span><br><span class="line"><span class="comment"># 得到分数形式的start和step</span></span><br><span class="line">start = fractions.Fraction(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">step = fractions.Fraction(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip(itertools.count(start, step), [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</span><br><span class="line">    print(<span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(*i))</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,</span><br><span class="line"></span><br><span class="line">10,12,14,16,18,20,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分数形式的输出结果</span></span><br><span class="line">1/3: a</span><br><span class="line">2/3: b</span><br><span class="line">1: c</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="cycle-循环"><a href="#cycle-循环" class="headerlink" title="cycle-循环"></a>cycle-循环</h3><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cycle</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="comment"># cycle('ABCD') --&gt; A B C D A B C D A B C D ...</span></span><br><span class="line">    saved = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> element</span><br><span class="line">        saved.append(element)</span><br><span class="line">    <span class="keyword">while</span> saved:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> saved:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串也是可迭代对象</span></span><br><span class="line"><span class="comment"># 创建一个循环输出A、B、C的迭代器</span></span><br><span class="line">cycle_s=itertools.cycle(<span class="string">'ABC'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环的方式输出</span></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cycle_s:</span><br><span class="line">    flag+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> flag &gt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个循环暑促胡1，2，3的迭代器</span></span><br><span class="line">cycle_li=itertools.cycle([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环的方式输出</span></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cycle_li:</span><br><span class="line">    flag+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> flag &gt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A,B,C,A,B,C,A,B,C,A,</span><br><span class="line"></span><br><span class="line">1,2,3,1,2,3,1,2,3,1,</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="repeat-重复"><a href="#repeat-重复" class="headerlink" title="repeat-重复"></a>repeat-重复</h3><div class="note info"><p><strong>重复和前面的循环的区别在于</strong>：循环是针对<strong>可迭代对象的每个元素</strong>进行的循环输出，而重复则是<strong>对整个可迭代对象</strong>的重复输出。</p></div><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(object, times=None)</span>:</span></span><br><span class="line">    <span class="comment"># repeat(10, 3) --&gt; 10 10 10</span></span><br><span class="line">    <span class="keyword">if</span> times <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> object</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(times):</span><br><span class="line">            <span class="keyword">yield</span> object</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个对hello world整个字符进行重复3次的迭代器</span></span><br><span class="line">repeat_s=itertools.repeat(<span class="string">"hello world"</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 使用for循环输出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> repeat_s:</span><br><span class="line">    <span class="keyword">print</span> (i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对列表进行重复</span></span><br><span class="line">repeat_li=itertools.repeat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 使用for循环输出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> repeat_li:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world,hello world,hello world,</span><br><span class="line"></span><br><span class="line">[1, 2, 3],[1, 2, 3],[1, 2, 3],</span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="有限迭代器"><a href="#有限迭代器" class="headerlink" title="有限迭代器"></a>有限迭代器</h2><p>itertools 模块提供了多个函数（类），接收一个或多个迭代对象作为参数，对它们进行组合、分组和过滤等：</p><table><tr><th width="20%">迭代器</th><th width="10%">参数</th><th width="30%">说明</th><th width="20%">结果</th><th width="20%">示例</th></tr><tr><td>accumulate()</td><td>p [,func]</td><td>接收两个参数，第一个参数为迭代器对象，第二个参数为对迭代器对象进行的累计操作，默认的操作方式是求和，也就是累计求和</td><td>p0, p0+p1, p0+p1+p2, …</td><td>accumulate([1,2,3,4,5]) --&gt; 1 3 610 15</td></tr><tr><td>chain()</td><td>p, q, …</td><td>接收多个可迭代对象作为参数，将它们连接起来迭代输出</td><td>p0, p1, … plast, q0, q1, …</td><td>chain('ABC', 'DEF') --&gt; A B C D EF</td></tr><tr><td>chain.from_iterable()</td><td>iterable</td><td></td><td>p0, p1, … plast, q0, q1, …</td><td>chain.from_iterable(['ABC','DEF']) --&gt; A B C D E F</td></tr><tr><td>compress()</td><td>data, selectors</td><td>接收两个参数，第一个为可迭代对象，第二个为选择列表，用于对可迭代对象中的元素进行筛选</td><td>(d[0] if s[0]), (d[1] if s[1]), …</td><td>compress('ABCDEF', [1,0,1,0,1,1])--&gt; A C E F</td></tr><tr><td>dropwhile()</td><td>pred, seq</td><td>接收两个参数，第一个参数为函数，用来对可迭代对象进行筛选，保留使函数第一次为false的所有后续元素；第二个参数为可迭代对象</td><td>seq[n], seq[n+1], starting when pred fails</td><td>dropwhile(lambda x: x&lt;5,[1,4,6,4,1]) --&gt; 6 4 1</td></tr><tr><td>takewhile()</td><td>pred, seq</td><td>接收两个参数，第一个参数为函数，用来对可迭代对象进行筛选，保留使函数第一次为false的之前元素；第二个参数为可迭代对象；与前面的dropwhile功能恰恰相反</td><td>seq[0], seq[1], until pred fails</td><td>takewhile(lambda x: x&amp;lt;5,[1,4,6,4,1]) --&amp;gt; 1 4</td></tr><tr><td>filterfalse()</td><td>pred, seq</td><td>接收两个参数，第一个参数为函数(可以为None)，用来对可迭代对象进行筛选，丢弃所有使函数为True的结果，注意与dropwhile区分；第二个参数为可迭代对象</td><td>elements of seq where pred(elem) is false</td><td>filterfalse(lambda x: x%2,range(10)) --&gt; 0 2 4 6 8</td></tr><tr><td>groupby()</td><td>iterable[, key]</td><td>接收两个参数，第一个参数为可迭代对象，第二个参数为分组函数，默认情况下将可迭代对象中连续的相同元素归为一组，注意必须是连续</td><td>sub-iterators grouped by value of key(v)</td><td></td></tr><tr><td>islice()</td><td>seq, [start,] stop [, step]</td><td>接收三个参数，至少提供一个参数，且如果只提供一个参数则该参数代表stop</td><td>elements from seq[start:stop:step]</td><td>islice('ABCDEFG', 2, None) --&gt; CD E F G</td></tr><tr><td>starmap()</td><td>func, seq</td><td>接收两个参数，第一个参数为函数，第二个参数为可迭代对象，将可迭代对象中的每个元素作为参数元组传递给函数执行</td><td>func(*seq[0]), func(*seq[1]), …</td><td>starmap(pow, [(2,5), (3,2),(10,3)]) --&gt; 32 9 1000</td></tr><tr><td>tee()</td><td>it, n</td><td>接收两个参数，第一个参数为可迭代对象，第二个参数为可迭代对象需要重复的次数</td><td>it1, it2, … itn splits one iterator into n</td><td></td></tr><tr><td>zip_longest()</td><td>p, q, …</td><td>接收多个迭代器参数以及一个fillvalue<br>参数，主要是用于将多个可迭代对象对应位置的元素作为一个元组，将所有元组组成一个迭代器，并返回</td><td>(p[0], q[0]), (p[1], q[1]), …</td><td>zip_longest('ABCD', 'xy',fillvalue='-') --&gt; Ax By C- D-</td></tr></table><h3 id="accumulate-迭代器对象的累计操作"><a href="#accumulate-迭代器对象的累计操作" class="headerlink" title="accumulate-迭代器对象的累计操作"></a>accumulate-迭代器对象的累计操作</h3><p><code>accumulate</code>接收两个参数，第一个参数为<strong>迭代器对象</strong>，第二个参数为<strong>对迭代器对象进行的累计操作</strong>，<strong>默认的操作方式是求和</strong>，也就是累计求和。</p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accumulate</span><span class="params">(iterable, func=operator.add)</span>:</span></span><br><span class="line">    <span class="string">'Return running totals'</span></span><br><span class="line">    <span class="comment"># accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15</span></span><br><span class="line">    <span class="comment"># accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        total = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">yield</span> total</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">        total = func(total, element)</span><br><span class="line">        <span class="keyword">yield</span> total</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">data = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment"># 默认的累加操作</span></span><br><span class="line">accumulate_add=itertools.accumulate(data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> accumulate_add:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 累积操作</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">accumulate_mul=itertools.accumulate(data,operator.mul)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> accumulate_mul:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 累积求和</span></span><br><span class="line">3,7,13,15,16,25,25,32,37,45,</span><br><span class="line"><span class="comment"># 累积求积</span></span><br><span class="line">3,12,72,144,144,1296,0,0,0,0,</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="chain-串联多个序列"><a href="#chain-串联多个序列" class="headerlink" title="chain-串联多个序列"></a>chain-串联多个序列</h3><p><code>chain</code>接收多个可迭代对象作为参数，将它们『连接』起来，作为一个新的迭代器返回.</p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chain</span><span class="params">(*iterables)</span>:</span></span><br><span class="line">    <span class="comment"># chain('ABC', 'DEF') --&gt; A B C D E F</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iterables:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个将多个序列串联起来的迭代器</span></span><br><span class="line">chain=itertools.chain([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'ABC'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环输出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chain:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,2,3,A,B,C,</span><br></pre></td></tr></table></figure><p></p><p>如果<strong>用于chain的iterables事先并不知道</strong>，可以使用<code>chain.from_iterable()</code>来和创建<code>chain</code>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_iterables_to_chain</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.chain.from_iterable(make_iterables_to_chain()):</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> a b c</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="compress-通过序列筛选"><a href="#compress-通过序列筛选" class="headerlink" title="compress-通过序列筛选"></a>compress-通过序列筛选</h3><p><code>compress</code> 可用于对可迭代对象进行筛选，当 <code>selectors</code> 的某个元素为 <code>true</code> 时，则保留 <code>data</code> 对应位置的元素，否则去除。</p><p><strong>函数原型</strong>:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(data, selectors)</span>:</span></span><br><span class="line">    <span class="comment"># compress('ABCDEF', [1,0,1,0,1,1]) --&gt; A C E F</span></span><br><span class="line">    <span class="keyword">return</span> (d <span class="keyword">for</span> d, s <span class="keyword">in</span> izip(data, selectors) <span class="keyword">if</span> s)</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对列表进行筛选</span></span><br><span class="line">compress_li=itertools.compress([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 使用for循环输出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> compress_li:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字符串进行筛选</span></span><br><span class="line">compress_s=itertools.compress(<span class="string">'ABC'</span>,[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 使用for循环输出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> compress_s:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将迭代器对象转化为list</span></span><br><span class="line">list(compress_s)</span><br><span class="line">  [<span class="string">'A'</span>, <span class="string">'C'</span>]</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,3,</span><br><span class="line"></span><br><span class="line">A,C,</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="dropwhile-丢弃第一次false之前的内容"><a href="#dropwhile-丢弃第一次false之前的内容" class="headerlink" title="dropwhile-丢弃第一次false之前的内容"></a>dropwhile-丢弃第一次false之前的内容</h3><p><code>dropwhile</code>接收两个参数，其中第一个参数为<code>predicate</code>，第二个参数为迭代对象。对于 <code>iterable</code> 中的元素，<strong>如果 <code>predicate(item)</code> 为 true</strong>，则<strong>丢弃</strong>该元素，否则返回该项及所有后续项。需要特别注意的是：<strong>在条件为false之后的第一次, 返回迭代器中剩下来的项(不管剩下的项中是否还会使条件为true)</strong></p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropwhile</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># dropwhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 6 4 1</span></span><br><span class="line">    iterable = iter(iterable)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">      <span class="comment"># 遇到使条件不成立的立马退出循环</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 将后续的元素迭代输出</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数对迭代器进行筛选</span></span><br><span class="line">dropwhile=itertools.dropwhile(<span class="keyword">lambda</span> x: x&lt;<span class="number">1</span>,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 使用for循环调用</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dropwhile:</span><br><span class="line">    print(i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropwhile_filter</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x&lt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="comment"># 使用for循环调用</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dropwhile:</span><br><span class="line">    print(i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次false之后的内容，不管后续会不会出现true</span></span><br><span class="line">dropwhile_1=itertools.dropwhile(<span class="keyword">lambda</span> x: x &lt; <span class="number">5</span>, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dropwhile_1:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1,2,</span><br><span class="line"></span><br><span class="line">1,2,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即使后续的2、1小于5，但是在6之后</span></span><br><span class="line"><span class="comment"># 所以也会输出</span></span><br><span class="line">6,2,1,</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="takewhile-获取第一次false之前的内容"><a href="#takewhile-获取第一次false之前的内容" class="headerlink" title="takewhile-获取第一次false之前的内容"></a>takewhile-获取第一次false之前的内容</h3><p><code>takewhile</code>和<code>dropwhile</code>用法相似(功能恰恰相反)，都是接收两个参数，其中第一个参数为<code>predicate</code>，第二个参数为迭代对象。对于 <code>iterable</code> 中的元素，如果 <code>predicate(item)</code> 为 <code>true</code>，则<strong>保留</strong>该元素，只要 <code>predicate(item)</code> 为 <code>false</code>，则<strong>立即停止迭代</strong>。</p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takewhile</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 1 4</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">        <span class="comment"># 不满足函数，则直接为停止循环</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一次false之前的内容</span></span><br><span class="line">takewhile=itertools.takewhile(<span class="keyword">lambda</span> x: x&lt;<span class="number">1</span>,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> takewhile:</span><br><span class="line">    <span class="keyword">print</span> (i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一次false之前的内容，不管之后会不会继续有true的结果</span></span><br><span class="line">takewhile_1=itertools.takewhile(<span class="keyword">lambda</span> x: x &lt; <span class="number">5</span>, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> takewhile_1:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line"></span><br><span class="line">1,3,</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="filterfalse-丢弃所有的true的内容"><a href="#filterfalse-丢弃所有的true的内容" class="headerlink" title="filterfalse-丢弃所有的true的内容"></a>filterfalse-丢弃所有的true的内容</h3><p><code>filterfalse</code> 接收两个参数，第一个参数为<code>predicate</code>，第二个参数为迭代对象。将迭代器中 p<code>redicate(item)</code> 为 <code>False</code> 的元素组成一个迭代器返回，<strong>将<mark>所有</mark>的function(item) 为 True 的元素过滤</strong>，<strong>如果predicate为None(这在dropwhile中是不允许的)，则输出所有的false结果，如0</strong>。</p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filterfalse</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># filterfalse(lambda x: x%2, range(10)) --&gt; 0 2 4 6 8</span></span><br><span class="line">    <span class="keyword">if</span> predicate <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        predicate = bool</span><br><span class="line">    <span class="comment"># 这里是对所有的迭代器元素，和前面的dropwhile的不同</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和前面的dropwhile不同，过滤掉所有的使函数为True结果</span></span><br><span class="line"><span class="comment"># 而不是过滤掉dropwhile中第一次false之前的内容</span></span><br><span class="line">filterfalse=itertools.filterfalse(<span class="keyword">lambda</span> x: x &lt; <span class="number">5</span>, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filterfalse:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># filterfalse的函数还支持None</span></span><br><span class="line"><span class="comment"># dropwhile不支持</span></span><br><span class="line">filterfalse_1=itertools.filterfalse(<span class="keyword">None</span>, [<span class="number">0</span>, <span class="number">6</span>,<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filterfalse_1:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6,</span><br><span class="line"></span><br><span class="line"><span class="comment"># predicate为None</span></span><br><span class="line">0,0,</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p><code>filterfalse</code>和<code>dropwhile</code>的区别：</p><ul><li><code>dropwhile</code>是返回第一次false之后的所有结果，不管第一次false之后的内容含不含true的结果；而<code>filterfalse</code>是对所有的true的结果都进行过滤；</li><li><code>filterfalse</code>的predicate可以是None，而<code>dropwhile</code>不可以</li></ul></div><hr><h3 id="groupby-分组"><a href="#groupby-分组" class="headerlink" title="groupby-分组"></a>groupby-分组</h3><p><code>groupby</code>可以接收两个参数，<strong>第一个参数为迭代器</strong>，第二个参数为<strong>对迭代器进行分组的key</strong>，如果<strong>key不指定</strong>，则默认对 <code>iterable</code> 中的<strong>连续相同项进行分组</strong>，返回一个 <strong>(key, sub-iterator) 的迭代器</strong>。<mark>需要特别注意的是：不管是默认还是自定义key函数，作用的都是相邻的，如果相邻的在函数上的值相同才会归为一类，如果不相邻，即使在函数上值相同也不会归为一类。</mark></p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">groupby</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># [k for k, g in groupby('AAAABBBCCDAABBB')] --&gt; A B C D A B</span></span><br><span class="line">    <span class="comment"># [list(g) for k, g in groupby('AAAABBBCCD')] --&gt; AAAA BBB CC D</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable, key=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            key = <span class="keyword">lambda</span> x: x</span><br><span class="line">        self.keyfunc = key</span><br><span class="line">        self.it = iter(iterable)</span><br><span class="line">        self.tgtkey = self.currkey = self.currvalue = object()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.currkey == self.tgtkey:</span><br><span class="line">            self.currvalue = next(self.it)    <span class="comment"># Exit on StopIteration</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br><span class="line">        self.tgtkey = self.currkey</span><br><span class="line">        <span class="keyword">return</span> (self.currkey, self._grouper(self.tgtkey))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_grouper</span><span class="params">(self, tgtkey)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.currkey == tgtkey:</span><br><span class="line">            <span class="keyword">yield</span> self.currvalue</span><br><span class="line">            self.currvalue = next(self.it)    <span class="comment"># Exit on StopIteration</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认地，将相邻连续的作为一组</span></span><br><span class="line">groupby=itertools.groupby(<span class="string">'aaabbbaaccd'</span>)</span><br><span class="line"><span class="comment"># 循环输出</span></span><br><span class="line"><span class="comment"># 将子迭代器转化为list输出</span></span><br><span class="line"><span class="keyword">for</span> key,sub_iter <span class="keyword">in</span> groupby:</span><br><span class="line">    <span class="keyword">print</span> (key,<span class="string">":"</span>,list(sub_iter)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数进行分组</span></span><br><span class="line">data = [<span class="string">'a'</span>, <span class="string">'bb'</span>, <span class="string">'ccc'</span>, <span class="string">'dd'</span>, <span class="string">'eee'</span>, <span class="string">'f'</span>]</span><br><span class="line"><span class="comment"># 这里使用元素的长度进行分组</span></span><br><span class="line"><span class="keyword">for</span> key, value_iter <span class="keyword">in</span> itertools.groupby(data, len):</span><br><span class="line">    print(key,<span class="string">":"</span>,list(value_iter))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先对可迭代的序列对象进行排序</span></span><br><span class="line">data=sorted(data,key=len)</span><br><span class="line"><span class="keyword">for</span> key, value_iter <span class="keyword">in</span> itertools.groupby(data, len):</span><br><span class="line">    print(key,<span class="string">":"</span>,list(value_iter))</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a : [<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line">b : [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>]</span><br><span class="line">a : [<span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line">c : [<span class="string">'c'</span>, <span class="string">'c'</span>]</span><br><span class="line">d : [<span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的分组并不是正常的分组结果</span></span><br><span class="line"><span class="comment"># 原因是没有排序</span></span><br><span class="line">1 : [<span class="string">'a'</span>]</span><br><span class="line">2 : [<span class="string">'bb'</span>]</span><br><span class="line">3 : [<span class="string">'ccc'</span>]</span><br><span class="line">2 : [<span class="string">'dd'</span>]</span><br><span class="line">3 : [<span class="string">'eee'</span>]</span><br><span class="line">1 : [<span class="string">'f'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先对可迭代对象进行排序后的输出结果</span></span><br><span class="line">1 : [<span class="string">'a'</span>, <span class="string">'f'</span>]</span><br><span class="line">2 : [<span class="string">'bb'</span>, <span class="string">'dd'</span>]</span><br><span class="line">3 : [<span class="string">'ccc'</span>, <span class="string">'eee'</span>]</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="islice-切片操作"><a href="#islice-切片操作" class="headerlink" title="islice()-切片操作"></a>islice()-切片操作</h3><p>islice接收参数参数：start, stop, step；start默认为0, stop默认为系统最大输出, step默认为1</p><ul><li>如果只提供一个参数（必须要提供一个），那么该参数会被当成stop(和平常见到的不同)，如果是None则表示输出全部</li><li>如果提供两个参数，那么第一个是start，第二个是stop</li><li>如果提供三个参数，那么分别对应start、stop、step</li></ul><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">islice</span><span class="params">(iterable, *args)</span>:</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2) --&gt; A B</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2, 4) --&gt; C D</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2, None) --&gt; C D E F G</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 0, None, 2) --&gt; A C E G</span></span><br><span class="line">    s = slice(*args)</span><br><span class="line">    start, stop, step = s.start <span class="keyword">or</span> <span class="number">0</span>, s.stop <span class="keyword">or</span> sys.maxsize, s.step <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line">    it = iter(range(start, stop, step))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        nexti = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># Consume *iterable* up to the *start* position.</span></span><br><span class="line">        <span class="keyword">for</span> i, element <span class="keyword">in</span> zip(range(start), iterable):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i, element <span class="keyword">in</span> enumerate(iterable):</span><br><span class="line">            <span class="keyword">if</span> i == nexti:</span><br><span class="line">                <span class="keyword">yield</span> element</span><br><span class="line">                nexti = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># Consume to *stop*.</span></span><br><span class="line">        <span class="keyword">for</span> i, element <span class="keyword">in</span> zip(range(i + <span class="number">1</span>, stop), iterable):</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只提供一个参数，为stop</span></span><br><span class="line">islice=itertools.islice(<span class="string">"abcdef"</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供两个参数，依次为start、stop</span></span><br><span class="line">islice_1=itertools.islice(<span class="string">"abcdef"</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice_1:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供两个参数，其中一个为None</span></span><br><span class="line">islice_2=itertools.islice(<span class="string">"abcdef"</span>,<span class="number">2</span>,<span class="keyword">None</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice_2:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 提供三个参数</span></span><br><span class="line">islice_3=itertools.islice(<span class="string">"abcdef"</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice_3:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只提供一个参数</span></span><br><span class="line">a,b,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供两个参数</span></span><br><span class="line">c,d,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供两个参数，其中一个为None</span></span><br><span class="line">c,d,e,f,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供三个参数</span></span><br><span class="line">c,e,</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="starmap-将iter作为参数元组传给函数"><a href="#starmap-将iter作为参数元组传给函数" class="headerlink" title="starmap-将iter作为参数元组传给函数"></a>starmap-将iter作为参数元组传给函数</h3><p><code>starmap</code>接收两个参数，第一个参数为<code>function</code>，第二个参数为<code>iterable</code>；对迭代器 <code>iterable</code> 中的每个元素<strong>作为 <code>function</code> 的参数列表</strong>执行，即 <code>function(*item)</code>。需要注意的是：<strong>只有当 <code>iterable</code> 生成的项适用于这种调用函数的方式时，此函数才有效</strong>。</p><p>需要注意的是原来使用较多的<code>map</code>、<code>imap</code>函数已经单独成了<a href="https://docs.python.org/3/library/functions.html#map" target="_blank" rel="noopener">内建的函数</a>，不包含在<code>itertools</code>库中。</p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">starmap</span><span class="params">(function, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># starmap(pow, [(2,5), (3,2), (10,3)]) --&gt; 32 9 1000</span></span><br><span class="line">    <span class="keyword">for</span> args <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> function(*args)</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">values = [(<span class="number">0</span>, <span class="number">5</span>), (<span class="number">1</span>, <span class="number">6</span>), (<span class="number">2</span>, <span class="number">7</span>), (<span class="number">3</span>, <span class="number">8</span>), (<span class="number">4</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="comment"># 将(0,5)作为参数传递给函数，这点与map函数不同</span></span><br><span class="line"><span class="comment"># 返回0、5、0*5的结果</span></span><br><span class="line">starmap=itertools.starmap(<span class="keyword">lambda</span> x,y:(x, y, x*y), values)</span><br><span class="line"><span class="comment"># 注意这里的starmap中的每个元素都是一个三元组</span></span><br><span class="line"><span class="comment"># 直接使用三个%d就可以得出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> starmap:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d * %d = %d'</span> % i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用内建的函数</span></span><br><span class="line">starmap_1=itertools.starmap(pow, values)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> starmap_1:</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0 * 5 = 0</span><br><span class="line">1 * 6 = 6</span><br><span class="line">2 * 7 = 14</span><br><span class="line">3 * 8 = 24</span><br><span class="line">4 * 9 = 36</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用内建函数</span></span><br><span class="line">0,1,128,6561,262144,</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="tee-将一个迭代器复制为多个迭代器"><a href="#tee-将一个迭代器复制为多个迭代器" class="headerlink" title="tee-将一个迭代器复制为多个迭代器"></a>tee-将一个迭代器复制为多个迭代器</h3><p><code>tee</code>接收两个参数，第一个是<strong>可迭代对象</strong>，第二个是可迭代对象<strong>被复制的次数</strong>，<strong>默认是2</strong>。该函数的用处在于：<mark>迭代器是一次性的，用过就无效了，需要在程序中多次使用某个迭代器，就用<code>tee</code>复制。</mark>需要注意的是：<strong>在新的复制得到的迭代器被使用后，原始的迭代器就失效了</strong>。</p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tee</span><span class="params">(iterable, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    deques = [collections.deque() <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(mydeque)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> mydeque:             <span class="comment"># when the local deque is empty</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    newval = next(it)   <span class="comment"># fetch a new value and</span></span><br><span class="line">                <span class="keyword">except</span> StopIteration:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> deques:        <span class="comment"># load it to all the deques</span></span><br><span class="line">                    d.append(newval)</span><br><span class="line">            <span class="keyword">yield</span> mydeque.popleft()</span><br><span class="line">    <span class="keyword">return</span> tuple(gen(d) <span class="keyword">for</span> d <span class="keyword">in</span> deques)</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字符串作为可迭代对象</span></span><br><span class="line">iter1, iter2 = itertools.tee(<span class="string">'abcde'</span>)</span><br><span class="line"><span class="comment"># 输出复制的可迭代对象内容</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(iter1,iter2):</span><br><span class="line">    <span class="keyword">print</span> (i,<span class="string">":"</span>,j,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在新的复制得到的迭代器被使用后，原始的迭代器就失效了</span></span><br><span class="line"><span class="comment"># 不会有输出结果</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">    <span class="keyword">print</span> (i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自行创建可迭代对象</span></span><br><span class="line">r = itertools.islice(itertools.count(), <span class="number">5</span>)</span><br><span class="line">i1, i2 = itertools.tee(r)</span><br><span class="line"><span class="comment"># 输出复制的可迭代对象的内容</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(i1,i2):</span><br><span class="line">    <span class="keyword">print</span> (i,<span class="string">":"</span>,j,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出内容：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a : a,b : b,c : c,d : d,e : e,</span><br><span class="line"></span><br><span class="line">0 : 0,1 : 1,2 : 2,3 : 3,4 : 4,</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="zip-longest-整合可迭代对象对应位置元素"><a href="#zip-longest-整合可迭代对象对应位置元素" class="headerlink" title="zip_longest-整合可迭代对象对应位置元素"></a>zip_longest-整合可迭代对象对应位置元素</h3><p><code>zip_longest</code>接收多个迭代器参数以及一个<code>fillvalue</code>参数，主要是用于<strong>将多个可迭代对象对应位置的元素作为一个元组，将所有元组组成一个迭代器，并返回</strong>；与经常使用的<code>zip</code>以<strong>最短的迭代器对象为标准</strong>不同，这里的<code>zip_longest</code>以<strong>最长的迭代器对象为标准</strong>，其他不足的迭代器对象默认使用<code>None</code>不足，这个<code>None</code>可以通过<code>fillvalue</code>参数修改。</p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_longest</span><span class="params">(*args, fillvalue=None)</span>:</span></span><br><span class="line">    <span class="comment"># zip_longest('ABCD', 'xy', fillvalue='-') --&gt; Ax By C- D-</span></span><br><span class="line">    iterators = [iter(it) <span class="keyword">for</span> it <span class="keyword">in</span> args]</span><br><span class="line">    num_active = len(iterators)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> num_active:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        values = []</span><br><span class="line">        <span class="keyword">for</span> i, it <span class="keyword">in</span> enumerate(iterators):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                value = next(it)</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                num_active -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> num_active:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                iterators[i] = repeat(fillvalue)</span><br><span class="line">                value = fillvalue</span><br><span class="line">            values.append(value)</span><br><span class="line">        <span class="keyword">yield</span> tuple(values)</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用的zip函数以最短的迭代器为标准</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=<span class="string">'ab'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip(a,b):</span><br><span class="line">    <span class="keyword">print</span> (i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="comment"># zip_longest以最长的迭代器为标准</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.zip_longest(a,b):</span><br><span class="line">    <span class="keyword">print</span> (i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定filtervalue</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.zip_longest(a,b,fillvalue=<span class="string">'_'</span>):</span><br><span class="line">    <span class="keyword">print</span> (i)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zip输出结果</span></span><br><span class="line">(1, <span class="string">'a'</span>)</span><br><span class="line">(2, <span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip_longest输出结果</span></span><br><span class="line">(1, <span class="string">'a'</span>)</span><br><span class="line">(2, <span class="string">'b'</span>)</span><br><span class="line">(3, None)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定filtervalue</span></span><br><span class="line">(1, <span class="string">'a'</span>)</span><br><span class="line">(2, <span class="string">'b'</span>)</span><br><span class="line">(3, <span class="string">'_'</span>)</span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="组合生成器"><a href="#组合生成器" class="headerlink" title="组合生成器"></a>组合生成器</h2><p>itertools 模块还提供了多个组合生成器函数，用于求序列的排列、组合等：</p><table><tr><th width="35%">迭代器</th><th width="10%">参数</th><th width="30%">说明</th><th width="25%">结果</th></tr><tr><td>product()</td><td>p, q, … [repeat=1]</td><td>接收多个可迭代对象以及一个repeat参数，用于指定重复生成序列的次数，主要作用是求多个可迭代对象的笛卡尔积</td><td>cartesian product, equivalent to a nested for-loop</td></tr><tr><td>permutations()</td><td>p[, r]</td><td>接收两个参数，第一个参数为迭代器对象，第二个参数为排列的序列长度，如果不指定序列长度，那么默认为可迭代对象的元素长度，具体的排列结果计算公式为：A(n,m)</td><td>r-length tuples, all possible orderings, no repeated elements</td></tr><tr><td>combinations()</td><td>p, r</td><td>和前面的permutations参数相同，但是这里的序列长度参数不可以省略，并且combinations输出的是组合，结果数目为C(n,m)</td><td>r-length tuples, in sorted order, no repeated elements</td></tr><tr><td>combinations_with_replacement()</td><td>p, r</td><td>在combinations的基础上增加重复元素的项，如(A,A)</td><td>r-length tuples, in sorted order, with repeated elements</td></tr><tr><td>product('ABCD', repeat=2)</td><td></td><td></td><td>AA AB AC AD BA BB BC BD CA CB CC CD DA DB DCDD</td></tr><tr><td>permutations('ABCD', 2)</td><td></td><td></td><td>AB AC AD BA BC BD CA CB CD DA DB DC</td></tr><tr><td>combinations('ABCD', 2)</td><td></td><td></td><td>AB AC AD BC BD CD</td></tr><tr><td>combinations_with_replacement('ABCD',2)</td><td></td><td></td><td>AA AB AC AD BB BC BD CC CD DD</td></tr></table><h3 id="product-笛卡尔积"><a href="#product-笛卡尔积" class="headerlink" title="product-笛卡尔积"></a>product-笛卡尔积</h3><p><code>product</code> 接收多个可迭代对象以及一个<code>repeat</code>参数，用于<strong>指定重复生成序列的次数</strong>，主要作用是<strong>求多个可迭代对象的笛卡尔积，和嵌套的 for 循环等价</strong>。</p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(*args, repeat=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="comment"># product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy</span></span><br><span class="line">    <span class="comment"># product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111</span></span><br><span class="line">    pools = [tuple(pool) <span class="keyword">for</span> pool <span class="keyword">in</span> args] * repeat</span><br><span class="line">    result = [[]]</span><br><span class="line">    <span class="keyword">for</span> pool <span class="keyword">in</span> pools:</span><br><span class="line">        result = [x+[y] <span class="keyword">for</span> x <span class="keyword">in</span> result <span class="keyword">for</span> y <span class="keyword">in</span> pool]</span><br><span class="line">    <span class="keyword">for</span> prod <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">yield</span> tuple(prod)</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product((<span class="number">0</span>,<span class="number">1</span>), (<span class="number">0</span>,<span class="number">1</span>), (<span class="number">0</span>,<span class="number">1</span>)):</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定repeat参数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(<span class="string">'ABC'</span>, repeat=<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(0, 0, 0),(0, 0, 1),(0, 1, 0),(0, 1, 1),(1, 0, 0),(1, 0, 1),(1, 1, 0),(1, 1, 1),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定repeat参数</span></span><br><span class="line">(<span class="string">'A'</span>, <span class="string">'A'</span>),(<span class="string">'A'</span>, <span class="string">'B'</span>),(<span class="string">'A'</span>, <span class="string">'C'</span>),(<span class="string">'B'</span>, <span class="string">'A'</span>),(<span class="string">'B'</span>, <span class="string">'B'</span>),(<span class="string">'B'</span>, <span class="string">'C'</span>),(<span class="string">'C'</span>, <span class="string">'A'</span>),(<span class="string">'C'</span>, <span class="string">'B'</span>),(<span class="string">'C'</span>, <span class="string">'C'</span>),</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="permutations-排列"><a href="#permutations-排列" class="headerlink" title="permutations-排列"></a>permutations-排列</h3><p><code>permutations</code>接收两个参数，第一个参数为<strong>迭代器对象</strong>，第二个参数为<strong>排列的序列长度</strong>，如果<strong>不指定序列长度，那么默认为可迭代对象的元素长度</strong>，具体的排列结果计算公式为：<code>A(n,m)</code></p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(iterable, r=None)</span>:</span></span><br><span class="line">    <span class="comment"># permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC</span></span><br><span class="line">    <span class="comment"># permutations(range(3)) --&gt; 012 021 102 120 201 210</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    r = n <span class="keyword">if</span> r <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> r</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = list(range(n))</span><br><span class="line">    cycles = list(range(n, n-r, <span class="number">-1</span>))</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            cycles[i] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cycles[i] == <span class="number">0</span>:</span><br><span class="line">                indices[i:] = indices[i+<span class="number">1</span>:] + indices[i:i+<span class="number">1</span>]</span><br><span class="line">                cycles[i] = n - i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = cycles[i]</span><br><span class="line">                indices[i], indices[-j] = indices[-j], indices[i]</span><br><span class="line">                <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># product</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(iterable, r=None)</span>:</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    r = n <span class="keyword">if</span> r <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> r</span><br><span class="line">    <span class="keyword">for</span> indices <span class="keyword">in</span> product(range(n), repeat=r):</span><br><span class="line">        <span class="keyword">if</span> len(set(indices)) == r:</span><br><span class="line">            <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不指定长度，默认为3</span></span><br><span class="line"><span class="comment"># A(3,3)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(<span class="string">'ABC'</span>):</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定长度为2</span></span><br><span class="line"><span class="comment"># A(3,2)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(<span class="string">'ABC'</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不指定长度</span></span><br><span class="line">(<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>),(<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>),(<span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>),(<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>),(<span class="string">'C'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>),(<span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>),</span><br><span class="line"><span class="comment"># 指定长度为2</span></span><br><span class="line">(<span class="string">'A'</span>, <span class="string">'B'</span>),(<span class="string">'A'</span>, <span class="string">'C'</span>),(<span class="string">'B'</span>, <span class="string">'A'</span>),(<span class="string">'B'</span>, <span class="string">'C'</span>),(<span class="string">'C'</span>, <span class="string">'A'</span>),(<span class="string">'C'</span>, <span class="string">'B'</span>),</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="combinations-组合"><a href="#combinations-组合" class="headerlink" title="combinations-组合"></a>combinations-组合</h3><p>和前面的<code>permutations</code><strong>参数</strong>相同，但是这里的<strong>序列长度参数不可以省略</strong>，并且<code>combinations</code>输出的是组合，结果数目为<code>C(n,m)</code>。</p><p><strong>函数原型</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    <span class="comment"># combinations('ABCD', 2) --&gt; AB AC AD BC BD CD</span></span><br><span class="line">    <span class="comment"># combinations(range(4), 3) --&gt; 012 013 023 123</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = list(range(r))</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != i + n - r:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, r):</span><br><span class="line">            indices[j] = indices[j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合permutations</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">for</span> indices <span class="keyword">in</span> permutations(range(n), r):</span><br><span class="line">        <span class="keyword">if</span> sorted(indices) == list(indices):</span><br><span class="line">            <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><p></p><p>使用示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出长度为3的组合</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.combinations(<span class="string">'ABC'</span>,<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出长度为2的组合</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.combinations(<span class="string">'ABC'</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出长度为3的组合</span></span><br><span class="line">(<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 长度为2的组合</span></span><br><span class="line">(<span class="string">'A'</span>, <span class="string">'B'</span>),(<span class="string">'A'</span>, <span class="string">'C'</span>),(<span class="string">'B'</span>, <span class="string">'C'</span>),</span><br></pre></td></tr></table></figure><p></p><p><code>combinations_with_replacement</code> 和 <code>combinations</code> 类似，但它生成的组合包含自身元素：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.combinations_with_replacement(<span class="string">'ABC'</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">print</span> (i,end=<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果中包含重复元素的项</span></span><br><span class="line">(<span class="string">'A'</span>, <span class="string">'A'</span>),(<span class="string">'A'</span>, <span class="string">'B'</span>),(<span class="string">'A'</span>, <span class="string">'C'</span>),(<span class="string">'B'</span>, <span class="string">'B'</span>),(<span class="string">'B'</span>, <span class="string">'C'</span>),(<span class="string">'C'</span>, <span class="string">'C'</span>),</span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://funhacks.net/2017/02/13/itertools/" target="_blank" rel="noopener">高效的 itertools 模块</a></li><li><a href="http://wklken.me/posts/2013/08/20/python-extra-itertools.html" target="_blank" rel="noopener">Python-进阶-itertools模块小结</a></li><li><a href="https://pymotw.com/3/itertools/index.html" target="_blank" rel="noopener">itertools — Iterator Functions</a></li><li><a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" target="_blank" rel="noopener">itertools — Functions creating iterators for efficient looping</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了Python中的迭代器相关的库-&lt;code&gt;itertools&lt;/code&gt;；主要学习了三类迭代器：&lt;strong&gt;无线迭代器&lt;/strong&gt;(&lt;code&gt;count&lt;/code&gt;、&lt;code&gt;cycle&lt;/code&gt;、&lt;code&gt;repeat&lt;/code&gt;)、&lt;strong&gt;有限迭代器&lt;/strong&gt;(&lt;code&gt;accumulate&lt;/code&gt;、&lt;code&gt;chain&lt;/code&gt;、&lt;code&gt;compress&lt;/code&gt;、&lt;code&gt;dropwhile&lt;/code&gt;、&lt;code&gt;takewhile&lt;/code&gt;、&lt;code&gt;filterfalse&lt;/code&gt;、&lt;code&gt;groupby&lt;/code&gt;、&lt;code&gt;islice&lt;/code&gt;、&lt;code&gt;starmap&lt;/code&gt;、&lt;code&gt;tee&lt;/code&gt;、&lt;code&gt;zip_longest&lt;/code&gt;)以及&lt;strong&gt;组合迭代器&lt;/strong&gt;(&lt;code&gt;product&lt;/code&gt;、&lt;code&gt;permutation&lt;/code&gt;、&lt;code&gt;combination&lt;/code&gt;)。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>vim使用技巧</title>
    <link href="http://showteeth.tech/posts/57195.html"/>
    <id>http://showteeth.tech/posts/57195.html</id>
    <published>2019-07-12T15:31:34.000Z</published>
    <updated>2019-07-13T07:26:55.058Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章搜集整理了在学习中经常会使用的一些vim快捷键以及技巧。</p></div><a id="more"></a><h2 id="vim模式"><a href="#vim模式" class="headerlink" title="vim模式"></a>vim模式</h2><p>vim 包括 <code>normal</code> 和 <code>insert</code> 两种模式：</p><ul><li><code>normal</code> 模式下所有按键都是<strong>功能键</strong>，直接vim打开文件就是normal模式。</li><li>在 <code>insert</code> 模式下可以<strong>正常的输入内容</strong>，打开文件之后需要输入<code>i</code>之后才会进入insert模式</li></ul><hr><h2 id="配置vim"><a href="#配置vim" class="headerlink" title="配置vim"></a>配置vim</h2><p>在home目录下创建一个<code>.vimrc</code>文件，添加如下代码来进行显示行号、代码缩进等配置，以后打开文件就不用额外输入来显示行号：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> number             <span class="comment"># 显示行号</span></span><br><span class="line"><span class="built_in">set</span> autoindent         <span class="comment"># 自动缩进</span></span><br><span class="line"><span class="built_in">set</span> nowrap             <span class="comment"># 不换行</span></span><br></pre></td></tr></table></figure><p></p><h2 id="打开快速定位"><a href="#打开快速定位" class="headerlink" title="打开快速定位"></a>打开快速定位</h2><p>直接定位到文本末尾：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim + test.txt</span><br></pre></td></tr></table></figure><p></p><p>定位到文本的第几行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接进入文本的第5行</span></span><br><span class="line">vim +5 test.txt</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="显示和取消行号"><a href="#显示和取消行号" class="headerlink" title="显示和取消行号"></a>显示和取消行号</h2><ul><li>显示行号：<code>normal</code>模式下输入<code>:set nu</code></li><li>取消显示行号：<code>normal</code>模式下输入<code>:set nonu</code></li></ul><hr><h2 id="快速移动"><a href="#快速移动" class="headerlink" title="快速移动"></a>快速移动</h2><h3 id="行内快速移动"><a href="#行内快速移动" class="headerlink" title="行内快速移动"></a>行内快速移动</h3><ul><li><code>0</code>：<strong>行头</strong></li><li><code>$</code>：<strong>行尾</strong></li><li><code>t.</code>：<strong>到’.’符号前的第一个字符</strong>，其中的<code>.</code>可以是<strong>任意字符</strong></li><li><code>f1</code>：到<strong>下一个’1’的位置</strong>，其中的1可以是<strong>任意字符</strong></li><li><code>w</code>：到<strong>下一个单词开头</strong>，各种<strong>分隔符</strong>也会被当成单词，如<code>-\%{&quot;</code></li><li><code>e</code>：到<strong>下一个单词结尾</strong>，各种<strong>分隔符</strong>也会被当成单词，如<code>-\%{&quot;</code></li></ul><h3 id="行间快速移动"><a href="#行间快速移动" class="headerlink" title="行间快速移动"></a>行间快速移动</h3><ul><li><code>:66</code>：<strong>移动到第几行</strong></li><li><code>gg</code>：到<strong>第一行</strong></li><li><code>G</code>：到<strong>最后一行</strong></li><li><code>5G</code>：到<strong>第5行</strong></li></ul><h3 id="屏幕瞬间移动"><a href="#屏幕瞬间移动" class="headerlink" title="屏幕瞬间移动"></a>屏幕瞬间移动</h3><p>这里的瞬间移动是<strong>视野的瞬间移动，光标是不会动的</strong>，不同于之前的两种瞬间移动：</p><ul><li><strong>后滚一屏</strong>：<code>ctrl+f</code></li><li><strong>前滚半屏</strong>：<code>ctrl+b</code></li><li><strong>定位屏幕中间</strong>：<code>zz</code></li><li>屏幕<strong>顶端</strong>：<code>zt</code></li><li>屏幕<strong>底部</strong>：<code>zb</code></li></ul><hr><h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h2><p><code>normal</code>模式下：</p><ul><li><code>o</code>：<strong>另起新行编辑</strong></li><li><code>x</code>：<strong>删除</strong>字符</li><li><code>6x</code>：<strong>删除 6</strong> 个字符</li><li><code>dd</code>：<strong>删除所在行</strong></li><li>删除到行首 <code>d^</code>; 行尾 <code>d$</code></li></ul><hr><h2 id="复制与粘贴"><a href="#复制与粘贴" class="headerlink" title="复制与粘贴"></a>复制与粘贴</h2><p><code>normal</code>模式下：</p><ul><li><strong>复制</strong>光标所在行(<strong>单行</strong>)：<code>yy</code></li><li><strong>粘贴</strong>复制的内容：<ul><li><code>p</code>：将内容粘贴在<strong>光标后一行</strong></li><li><code>P</code>：将内容粘贴在<strong>光标前一行</strong></li></ul></li><li><strong>多行复制</strong>：<ul><li>step1：<code>V</code></li><li>step2：移动光标自由选择</li><li>step3：<code>y</code>为复制选择的多行内容，<code>d</code>为剪切选择的多行内容</li></ul></li></ul><hr><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><code>normal</code>模式下：</p><ul><li><code>/whatyouneed</code>：<strong>搜索whatyouneed</strong></li><li><code>n</code>：<strong>切换到下一个</strong>匹配的位置</li><li><code>:noh</code>：取消搜索的高亮</li></ul><hr><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p><code>normal</code>模式下：</p><ul><li><code>:s/a/b/g</code>：替换当前行<strong>所有</strong> a 为 b</li><li><code>:%s/a/b/</code>：替换<strong>每行第一个</strong> a 为 b</li><li><code>:%s/a/b/g</code>：替换<strong>每行所有</strong> a 为 b</li><li><strong>反悔模式</strong>：<code>:%s/a/b/gc</code>，vim <strong>匹配文字高亮并询问</strong><ul><li><code>y</code>：表示<strong>替换当前</strong></li><li><code>n</code>：表示<strong>不替换当前</strong></li><li><code>a</code>：表示<strong>全部替换</strong></li><li><code>q</code>：表示<strong>退出</strong>不玩儿了</li><li><code>l</code>：表示<strong>把当前替换后就退出</strong>不玩儿了</li></ul></li></ul><hr><h2 id="重复与撤销"><a href="#重复与撤销" class="headerlink" title="重复与撤销"></a>重复与撤销</h2><ul><li><code>.</code>：<strong>重复此前</strong>的操作</li><li><code>u</code>：<strong>撤销此前</strong>的操作，可以多次使用，表示撤销</li><li><code>5u</code>：<strong>撤销此前的 5 个操作</strong></li></ul><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://mp.weixin.qq.com/s/SQKqEPggz8NoQ5XqOTcfxw" target="_blank" rel="noopener">vim 操作应知应会 10 点</a></li><li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-tip-vim/index.html" target="_blank" rel="noopener">技巧：快速提高 Vi/Vim 使用效率的原则与途径</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章搜集整理了在学习中经常会使用的一些vim快捷键以及技巧。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="工具" scheme="http://showteeth.tech/categories/Linux/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://showteeth.tech/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之Python小技巧</title>
    <link href="http://showteeth.tech/posts/45492.html"/>
    <id>http://showteeth.tech/posts/45492.html</id>
    <published>2019-07-12T14:48:07.000Z</published>
    <updated>2019-07-13T07:26:55.054Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要搜集了在日常学习中遇到的一些小的python使用技巧。</p></div><a id="more"></a><h2 id="使用-i运行python程序"><a href="#使用-i运行python程序" class="headerlink" title="使用-i运行python程序"></a>使用-i运行python程序</h2><p>在命令行中运行python脚本的典型方法是：<code>python hello.py</code>。但是，如果在运行相同的脚本文件时额外添加一个 <code>-i</code>，例如<code>python -i hello.py</code>，这会带来更多好处。我们来看看是怎么回事：</p><ul><li>首先，一旦程序结束，python不会退出编译器，因此，我们可以检查变量的值和程序中定义的函数的正确性</li><li>其次，我们可以轻松地调用python调试器，因为我们仍然在编译器中：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用python调试的包</span></span><br><span class="line"><span class="comment"># 这将把我们带到代码发生异常的位置，然后我们可以去处理代码。</span></span><br><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line">pdb.pm()</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/python_i_op.png" alt="python_i_op.png"></p><p><a href="https://mp.weixin.qq.com/s/n5yLhdtFmrxMQv6NNpZYCw" target="_blank" rel="noopener">参考链接</a></p><hr><h2 id="便捷运行Python程序"><a href="#便捷运行Python程序" class="headerlink" title="便捷运行Python程序"></a>便捷运行Python程序</h2><p>正常情况下运行python脚本需要使用<code>python hello.py</code>的形式，但是这样会比较麻烦，毕竟会多输入<code>python</code>这几个字符，为了便捷运行Python程序，可以使用如下方式：</p><h3 id="修改脚本权限"><a href="#修改脚本权限" class="headerlink" title="修改脚本权限"></a>修改脚本权限</h3><p>为了能够执行脚本，第一步就是需要将脚本改为可执行的文件，后续就可以直接通过<code>./hello.py</code>的形式运行脚本：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给脚本增加可执行权限</span></span><br><span class="line">chmod +x hello.py</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="增加程序运行标识"><a href="#增加程序运行标识" class="headerlink" title="增加程序运行标识"></a>增加程序运行标识</h3><p>在python脚本的第一行增加<code>#!/usr/bin/python</code>告诉系统这个脚本需要使用python程序执行，正如所有的bash脚本第一行都要加上<code>#!/bin/bash</code>一样:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>需要注意的是：<code>#!/usr/bin/python</code>指定的Python是<code>/usr/bin/python</code>，版本通常为2.7，而不是自己设置的环境变量中的python版本(可以通过<code>which python</code>查看)。</p></div><p>指定python为<strong>环境变量中指定的Python版本</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定使用环境变量中的python版本</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br></pre></td></tr></table></figure><p></p><p>上面命令调用的Python版本和在命令行中直接输入Python得到的版本相同(<code>which python</code>)</p><p>事实上也可以通过<code>#!/usr/bin/env</code>来指定Python<strong>搜索module的默认路径</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置Python module的默认搜索路径为/opt/webscripts/</span></span><br><span class="line"><span class="comment">#!/usr/bin/env PYTHONPATH=/opt/webscripts/ python</span></span><br></pre></td></tr></table></figure><p></p><p>参考链接：</p><ul><li><a href="http://www.bnikolic.co.uk/blog/python-running-cline.html" target="_blank" rel="noopener">Running Python Programs from the Command-line</a></li><li><a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" target="_blank" rel="noopener">PYTHONPATH</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要搜集了在日常学习中遇到的一些小的python使用技巧。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/categories/Python/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>shell编写更加鲁棒shell脚本</title>
    <link href="http://showteeth.tech/posts/44703.html"/>
    <id>http://showteeth.tech/posts/44703.html</id>
    <published>2019-06-27T03:06:45.000Z</published>
    <updated>2019-07-05T15:42:18.862Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了编写robust bash脚本的一些技巧，包括<strong>使用<code>set -u</code>来在运行脚本之前检查变量传递</strong>、<strong>使用<code>set -e</code>在遇到命令的非零运行状态直接退出</strong>、<strong>变量和文件名记得使用引号</strong>、<mark>使用trap命令来清除临时或者需要更新的文件</mark>等方法，都是一些非常实用而且平常不太注意的技巧！</p></div><a id="more"></a><h2 id="set-u-运行脚本之前检查变量传递"><a href="#set-u-运行脚本之前检查变量传递" class="headerlink" title="set -u :运行脚本之前检查变量传递"></a>set -u :运行脚本之前检查变量传递</h2><p>在使用shell脚本过程中，常常需要给脚本传递变量，为了达到这个目的最简单的方法就是使用<code>test=$1</code>这种方式，表明除去脚本名之后的第一个命令行参数为需要传递给<code>test</code>的变量值：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">test_1=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test_1&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>上面的脚本以为是直接输出传递的变量内容，所以如果没有给变量赋值就直接输出空白，不会影响程序运行。而如果需要对传入的变量进行一系列的操作的话，这种忘记传递变量的做法就会使得脚本运行结果与期望结果差异较大或者带来一些不可逆的影响，为了避免这种情况，shell提供了<code>set -u</code>，这个命令可以<strong>在运行脚本之前检查变量是否赋值完全，如果缺少变量就会停止运行，直接退出程序</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -u</span><br><span class="line">test_1=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test_1&#125;</span></span><br></pre></td></tr></table></figure><p>直接运行上述程序：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错提示缺少变量</span></span><br><span class="line">./set_u.sh </span><br><span class="line">  ./set_u.sh: line 3: <span class="variable">$1</span>: unbound variable</span><br></pre></td></tr></table></figure><p></p><p>使用<code>set -o nounset</code>(more readable)也能达到<code>set -u</code>同样的目的。</p><hr><h2 id="set-e：非零运行状态直接退出"><a href="#set-e：非零运行状态直接退出" class="headerlink" title="set -e：非零运行状态直接退出"></a>set -e：非零运行状态直接退出</h2><p>建议在<strong>所有的shell脚本之前</strong>都加上<code>set -e</code>，其作用是使脚本<strong>在遇到任何一个non-zero返回值(未正确运行)的时候自动退出脚本，防止错误的叠加</strong>。与<code>set -e</code>相同的还有<code>set -o errexit</code>(more readable).</p><p>当然也可以<strong>手动检查</strong>一些程序的运行状态，使用<code>$?</code>，<code>$?</code>返回<strong>最后运行的命令的结束代码</strong>，<strong>正常运行的命令结束代码为0，出错或者出现异常结束代码不为0</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"$?"</span>-ne 0]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"command failed"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><p>如果<strong>只关心程序的某一部分的命令退出状态</strong>，可以关闭这种error检查机制：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> +e</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line"><span class="built_in">set</span> -e</span><br></pre></td></tr></table></figure><p></p><p>对于pipeline的话，默认情况下shell会返回pipeline中最后一个命令的运行状态，例如<code>false | true</code>会返回<code>true</code>，这可能不是我们想要的结果，如果想要这种不合理的pipeline直接停止，可以使用<code>set -o pipefail</code>。</p><hr><h2 id="变量和文件名记得使用引号"><a href="#变量和文件名记得使用引号" class="headerlink" title="变量和文件名记得使用引号"></a>变量和文件名记得使用引号</h2><p>在使用<code>if</code>操作时经常遇到的错误就是<code>-bash: [: too many arguments</code>，这就是因为用于test的<strong>变量可能含有空格</strong>，而如果没有给变量增加引号，那么就会得到两个参数，这种情况下就会报错：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量值存在空格</span></span><br><span class="line">file=<span class="string">"test hello"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$file</span> == <span class="string">"foo"</span> ];<span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"yes"</span>;<span class="keyword">fi</span></span><br><span class="line">  -bash: [: too many arguments</span><br></pre></td></tr></table></figure><p></p><p>而如果增加空格之后就<a href="http://showteeth.tech/posts/58105.html">不会出现上述错误</a>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$file</span>"</span> == <span class="string">"foo"</span> ];<span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"yes"</span>;<span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><p>同样的，在使用<code>find</code>、<code>xargs</code>命令时如果文件名中存在空格可能就会报错，<strong>正确的做法</strong>就是在find中使用<code>-print0</code>来separate filenames with a null character rather than new lines. 然后在xargs中使用<code>-0</code>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="string">"foo bar"</span></span><br><span class="line">find | xargs ls</span><br><span class="line">  ls: ./foo: No such file or directory</span><br><span class="line">  ls: bar: No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在find中使用-print0，在xargs中使用-0</span></span><br><span class="line">find -print0 | xargs -0 ls</span><br><span class="line">./foo bar</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="使用trap命令来清除临时或者需要更新的文件"><a href="#使用trap命令来清除临时或者需要更新的文件" class="headerlink" title="使用trap命令来清除临时或者需要更新的文件"></a>使用trap命令来清除临时或者需要更新的文件</h2><p>trap命令可以在接收到退出信号的时候进行相应的操作来清除临时文件以及需要更新但是没有更新完成的文件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$lockfile</span> ]; <span class="keyword">then</span></span><br><span class="line">   touch <span class="variable">$lockfile</span></span><br><span class="line">   critical-section</span><br><span class="line">   rm <span class="variable">$lockfile</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"critical-section is already running"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><p>上述命令如果顺利执行，那么最开始如果没有<code>$lockfile</code>则会创建一个<code>$lockfile</code>，在<code>critical-section</code>中会对其进行调用，最后会删除这个文件，下一次继续运行<code>critical-section</code>的时候会通过检测<code>$lockfile</code>是不是存在从而决定是不是需要继续运行；如果在执行<code>critical-section</code>时遇到一些终止信号，例如<code>Ctrl + C</code>，那么就会直接退出，此时创建的<code>$lockfile</code>依旧存在，下次就不会继续运行<code>critical-section</code>；为了解决这种情况可以使用trap命令，在运行<code>critical-section</code>时如果遇到终止信号，会在退出时执行某种操作，如rm：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$lockfile</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># 遇到终止信号会先删除$lockfile，然后退出</span></span><br><span class="line">  <span class="comment"># 注意这里如要使用exit指定退出</span></span><br><span class="line">  <span class="comment"># 如果不指定就会继续执行</span></span><br><span class="line">  <span class="comment"># 脚本不会退出</span></span><br><span class="line">   <span class="built_in">trap</span> <span class="string">"rm -f <span class="variable">$lockfile</span>; exit"</span> INT TERM EXIT</span><br><span class="line">   touch <span class="variable">$lockfile</span></span><br><span class="line">   critical-section</span><br><span class="line">   rm <span class="variable">$lockfile</span></span><br><span class="line">   <span class="comment"># 个人理解是如果运行到这里就不用管最开始的trap了，因为前面一步就将$lockfile删除了</span></span><br><span class="line">   <span class="comment"># 重置trap</span></span><br><span class="line">   <span class="built_in">trap</span> - INT TERM EXIT</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"critical-section is already running"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><p>有很多信号都可以用来设置trap，这里只列举了三个常用的：<br><table><tr><th width="10%">Signal</th><th width="90%">Description</th></tr><tr><td>INT</td><td>Interrupt – This signal is sent when someone kills the script by pressing ctrl-c.</td></tr><tr><td>TERM</td><td>Terminate – this signal is sent when someone sends the TERM signal using the kill command.</td></tr><tr><td>EXIT</td><td>Exit – this is a pseudo-signal and is triggered when your script exits, either through reaching the end of the script, an exit command or by a command failing when usingset -e.</td></tr></table></p><p>关于trap命令进一步的阅读：</p><ul><li><a href="https://www.ibm.com/developerworks/cn/aix/library/au-usingtraps/index.html" target="_blank" rel="noopener">在脚本中使用 trap</a></li><li><a href="http://man.linuxde.net/trap" target="_blank" rel="noopener">trap命令</a></li></ul><hr><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.davidpashley.com/articles/writing-robust-shell-scripts/" target="_blank" rel="noopener">Writing Robust Bash Shell Scripts</a></li><li><a href="https://github.com/vsbuffalo/devnotes/wiki/Bash-Script-Tips" target="_blank" rel="noopener">Bash Script Tips</a></li></ul><hr><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了编写robust bash脚本的一些技巧，包括&lt;strong&gt;使用&lt;code&gt;set -u&lt;/code&gt;来在运行脚本之前检查变量传递&lt;/strong&gt;、&lt;strong&gt;使用&lt;code&gt;set -e&lt;/code&gt;在遇到命令的非零运行状态直接退出&lt;/strong&gt;、&lt;strong&gt;变量和文件名记得使用引号&lt;/strong&gt;、&lt;mark&gt;使用trap命令来清除临时或者需要更新的文件&lt;/mark&gt;等方法，都是一些非常实用而且平常不太注意的技巧！&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>tr-转换、删除、压缩重复字符</title>
    <link href="http://showteeth.tech/posts/46339.html"/>
    <id>http://showteeth.tech/posts/46339.html</id>
    <published>2019-06-20T12:59:49.000Z</published>
    <updated>2019-07-06T13:30:56.045Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<code>sed</code>命令的简化版<code>tr</code>命令，其可以实现<strong>替换</strong>、<strong>删除</strong>、<strong>压缩(去重)</strong>等操作。主要参数包括：<code>-d</code>删除、<code>-s</code>压缩、<code>-t</code>截断SET1、<code>-c</code>取补SET1。默认情况下，如果同时提供了<code>SET1</code>、<code>SET2</code>那么就会进行替换操作；<code>-c</code>取补SET1<strong>不能单独使用</strong>，可以结合<code>-d</code>或者<strong>增加SET2实现替换操作</strong>。</p></div><a id="more"></a><h2 id="tr命令简介"><a href="#tr命令简介" class="headerlink" title="tr命令简介"></a>tr命令简介</h2><p><code>tr</code>命令可以从标准输入删除或者替换字符，并将结果写到标准输出。</p><p>通过使用 <code>tr</code>，可以<strong>非常容易地实现 <code>sed</code> 的许多最基本功能</strong>，<strong>可以将 <code>tr</code> 看作为 <code>sed</code> 的（极其）简化的变体</strong>。它可以用一个字符来替换另一个字符，或者可以完全除去一些字符；也可以用它来除去重复字符。</p><hr><h2 id="tr命令格式"><a href="#tr命令格式" class="headerlink" title="tr命令格式"></a>tr命令格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Usage: </span><br><span class="line">  tr [OPTION]... SET1 [SET2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用说明</span></span><br><span class="line">Translate(替换), squeeze, and/or delete characters from standard input, writing to standard output.</span><br></pre></td></tr></table></figure><hr><h2 id="tr命令参数"><a href="#tr命令参数" class="headerlink" title="tr命令参数"></a>tr命令参数</h2><table><tr><th width="10%">参数</th><th width="20%">完整参数</th><th width="70%">说明</th></tr><tr><td>-c,-C</td><td>--complement</td><td>取SET1的补集</td></tr><tr><td>-d</td><td>--delete</td><td>删除所有属于SET1的字符</td></tr><tr><td>-s</td><td>--squeeze-repeats</td><td>把连续重复的字符(SET1中指定的)以单独一个字符表示</td></tr><tr><td>-t</td><td>--truncate-set1</td><td>截断SET1长度，使其与SET2等长</td></tr></table><hr><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><table><tr><th width="10">字符</th><th width="40">说明</th><th width="10">字符</th><th width="40">说明</th></tr><tr><td>\NNN</td><td>八进制值的字符(1-3位8进制的数)</td><td>[:alnum:]</td><td>所有字母字符与数字</td></tr><tr><td>\\</td><td>反斜杠</td><td>[:alpha:]</td><td>所有字母字符</td></tr><tr><td>\a</td><td>Ctrl-G，铃声</td><td>[:blank:]</td><td>所有水平空格</td></tr><tr><td>\b</td><td>Ctrl-H，退格符</td><td>[:cntrl:]</td><td>所有控制字符</td></tr><tr><td>\f</td><td>Ctrl-L，走行换页</td><td>[:digit:]</td><td>所有数字</td></tr><tr><td>\n</td><td>Ctrl-J，新行</td><td>[:graph:]</td><td>所有可打印的字符(不包含空格符)</td></tr><tr><td>\r</td><td>Ctrl-M，回车</td><td>[:lower:]</td><td>所有小写字母</td></tr><tr><td>\t</td><td>Ctrl-I，tab键</td><td>[:print:]</td><td>所有可打印的字符(包含空格符)</td></tr><tr><td>\v</td><td>Ctrl-X，水平制表符</td><td>[:punct:]</td><td>所有标点字符</td></tr><tr><td>CHAR1-CHAR2</td><td>指定字符范围从 CHAR1 到 CHAR2 ，范围的指定以 ASCII 码的次序为基础，只能由小到大，不能由大到小</td><td>[:space:]</td><td>所有水平与垂直空格符</td></tr><tr><td>[CHAR*]</td><td>这是 SET2 专用的设定，功能是重复指定的字符到与 SET1 相同长度为止</td><td>[:upper:]</td><td>所有大写字母</td></tr><tr><td>[CHAR*REPEAT]</td><td>这也是 SET2 专用的设定，功能是重复指定的字符到设定的 REPEAT 次数为止。除非其首位数字是 0，否则 Number 一律视为是十进制整数；如果首位数字是 0，那么视为八进制整数</td><td>[:xdigit:]</td><td>所有 16 进位制的数字</td></tr></table><hr><h2 id="tr命令使用实例"><a href="#tr命令使用实例" class="headerlink" title="tr命令使用实例"></a>tr命令使用实例</h2><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>如果<strong>同时指定</strong>了<code>SET1</code>和<code>SET2</code>，并且<strong>中间没有添加任何参数</strong>，那么tr命令就会<strong>从标准输入</strong>中<strong>将SET1中所包含的每一个字符替换</strong>为SET2中<strong>相同位置</strong>上的字符，需要注意的是：<strong>如果SET1中指定的字符在原始的字符中出现多次，那么就会使用SET2中对应位置的字符进行全部替换(全局替换)</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将所有的大写字母都替换为小写字母</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"HELLO WORLD"</span> |tr <span class="string">'A-Z'</span> <span class="string">'a-z'</span></span><br><span class="line">  hello world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种方式实现</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"HELLO WORLD"</span> |tr [:upper:] [:lower:]</span><br><span class="line">  hello world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将空格转化为制表符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"HELLO WORLD"</span> |tr [:space:] <span class="string">'\t'</span></span><br><span class="line">  HELLO   WORLD </span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接修改文件内容</span></span><br><span class="line">cat test.txt </span><br><span class="line">  hello world</span><br><span class="line">  HELLO WORLD</span><br><span class="line">tr <span class="string">'A-Z'</span> <span class="string">'a-z'</span> &lt; test.txt </span><br><span class="line">  hello world</span><br><span class="line">  hello world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果SET1中指定的字符在原始的字符中出现多次</span></span><br><span class="line"><span class="comment"># 那么就会使用SET2中对应位置的字符进行全部替换</span></span><br><span class="line"><span class="comment"># 指定的字符对应关系是将L替换为l，但是会将原始字符的所有都进行替换</span></span><br><span class="line"><span class="comment"># 相当于sed的g</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"HELLO"</span> |tr <span class="string">'HEL'</span> <span class="string">'hel'</span></span><br><span class="line">  hellO</span><br></pre></td></tr></table></figure><p><code>&#39;A-Z&#39;</code> 和 <code>&#39;a-z&#39;</code>都是集合，集合是可以自己制定的，例如：<code>&#39;ABD-}&#39;</code>、<code>&#39;bB.,&#39;</code>、<code>&#39;a-de-h&#39;</code>、<code>&#39;a-c0-9&#39;</code>都属于集合，集合里可以使用<code>&#39;\n&#39;</code>、<code>&#39;\t&#39;</code>，可以可以使用其他<code>ASCII</code>字符。</p><p><mark>使用tr命令进行替换的时候需要特别注意<code>SET1</code>、<code>SET2</code>的长度问题</mark>：</p><ul><li>如果<strong>SET1比SET2短</strong>，那么会自动<strong>忽略</strong>SET2中剩余的部分</li><li>如果<strong>SET1比SET2长</strong>，那么会将SET2中最后一个字符进行<strong>重复</strong>，这里可以结合-t参数进行截断SET1至于SET2等长</li><li>尽量保持SET1和SET2字符长度的统一</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SET1比SET2短，SET2中多余的部分会被去除掉</span></span><br><span class="line"><span class="comment"># 只会对H进行替换为h</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"HELLO"</span> |tr <span class="string">'H'</span> <span class="string">'he'</span></span><br><span class="line">  hELLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># SET1比SET2长，SET2中的最后一个字符会重复</span></span><br><span class="line"><span class="comment"># HE被替换为hh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"HELLO"</span> |tr <span class="string">'HE'</span> <span class="string">'h'</span></span><br><span class="line">  hhLLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然SET1比SET2长，但是使用了-t参数可以截断SET1至于SET2等长</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"HELLO"</span> |tr -t <span class="string">'HE'</span> <span class="string">'h'</span></span><br><span class="line">  hELLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果SET1比SET2长，可以指定字符进行重复使得两者等长</span></span><br><span class="line"><span class="comment"># 指定重复h来使其等长，默认情况是重复e</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"HELLO"</span> |tr <span class="string">'HEL'</span> <span class="string">'[h*]e'</span></span><br><span class="line">  hheeO</span><br></pre></td></tr></table></figure><div class="note info"><ul><li>SET1和SET2只是一个字符的<strong>对应关系</strong>，至于真正的替换是对应字符在原始字符串上的<strong>全局替换</strong></li><li>注意SET1和SET2长度不同的对应情况，总的来说就是<strong>以SET1为准</strong></li><li>这种替换的映射关系可以用于进行<strong>加密和解密操作</strong></li></ul></div><hr><h3 id="d：删除"><a href="#d：删除" class="headerlink" title="-d：删除"></a>-d：删除</h3><p>如果想要改变tr命令默认的替换行为，可以使用<code>-d</code>参数：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除所有的数字</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello 123 world 456"</span> | tr -d <span class="string">'0-9'</span></span><br><span class="line">  <span class="comment"># 注意这里有两个空格</span></span><br><span class="line">  hello  world</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="c：取补集"><a href="#c：取补集" class="headerlink" title="-c：取补集"></a>-c：取补集</h3><p>如果想删除指定字符集以外的字符(保留指定字符)，可以使用<code>-c</code>参数：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除除了数字之外的所有字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello 123 world 456"</span> | tr -d -c <span class="string">'0-9'</span></span><br><span class="line">  123456</span><br></pre></td></tr></table></figure><p></p><p>需要注意的是：<code>-c</code>参数不能够单独使用，如果单独使用会报错，需要<strong>结合<code>-d</code></strong>或者<strong>增加SET2来实现替换操作</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello 123 world 456"</span> | tr -c <span class="string">'0-9'</span></span><br><span class="line">  tr: missing operand after ‘0-9’</span><br><span class="line">  Two strings must be given when translating.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后的换行符也是ao的补集</span></span><br><span class="line"><span class="comment"># 所以最后的换行符也被替换为了y</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"abcdefo"</span>| tr -c <span class="string">"ao"</span> <span class="string">"y"</span></span><br><span class="line">  ayyyyyoy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果SET2指定了多个字符，那么将以最后一个字符进行替换</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"abcdefo"</span>| tr -c <span class="string">"ao"</span> <span class="string">"ym"</span></span><br><span class="line">  ammmmmom</span><br></pre></td></tr></table></figure><p></p><div class="note info"><ul><li><code>-c</code>参数不能单独使用，需要结合<code>-d</code>或者<strong>增加SET2来实现替换操作</strong></li><li>注意<code>\n</code>这种特殊的字符，取补集可能会造成一些不想发生的替换</li><li>如果SET2指定了多个字符，那么将以最后一个字符进行替换</li></ul></div><hr><h3 id="s：压缩重复字符"><a href="#s：压缩重复字符" class="headerlink" title="-s：压缩重复字符"></a>-s：压缩重复字符</h3><p>如果想将重复的字符只显示一个，可以使用<code>-s</code>参数：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将重复出现的空格、s、n都压缩为单个的字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"thissss is      a text linnnnnnne."</span> | tr -s <span class="string">' sn'</span></span><br><span class="line">  this is a text line.</span><br></pre></td></tr></table></figure><p></p><p><code>-s</code>参数压缩之后再进行替换操作：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先压缩得到this is a text line.</span></span><br><span class="line"><span class="comment"># 然后将空格、s、s都替换为H</span></span><br><span class="line"><span class="comment"># 同时对最后的H也进行了压缩，不会出现两个H同时出现</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"thissss is      a text linnnnnnne."</span> | tr -s <span class="string">' sn'</span> <span class="string">'H'</span></span><br><span class="line">  thiHiHaHtextHliHe.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用不同的字符替换</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"thissss is      a text linnnnnnne."</span> | tr -s <span class="string">' s'</span> <span class="string">'HT'</span></span><br><span class="line">  thiTHiTHaHtextHlinnnnnnne.</span><br></pre></td></tr></table></figure><p></p><div class="note info"><ul><li>如果不指定SET2，则仅只压缩，不做替换</li><li>如果指定了SET2，则压缩后还一一对应地进行替换，注意替换与压缩的对应关系：<strong>先压缩，然后再替换</strong></li></ul></div><hr><h2 id="使用实战"><a href="#使用实战" class="headerlink" title="使用实战"></a>使用实战</h2><h3 id="解决windows下的文件与linux下文件换行符的问题"><a href="#解决windows下的文件与linux下文件换行符的问题" class="headerlink" title="解决windows下的文件与linux下文件换行符的问题"></a>解决windows下的文件与linux下文件换行符的问题</h3><p>直接使用<code>vim</code>编辑器的快捷键：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim test.txt</span></span><br><span class="line"><span class="comment"># :set ff=unix</span></span><br><span class="line"><span class="comment"># esc + :wq</span></span><br></pre></td></tr></table></figure><p></p><p>使用<code>tr</code>命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tr -s <span class="string">"\r"</span> <span class="string">"\n"</span> &lt; file &gt; new_file</span><br><span class="line">或</span><br><span class="line">tr -d <span class="string">"\r"</span> &lt; file &gt; new_file</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="使用tr进行数学运算"><a href="#使用tr进行数学运算" class="headerlink" title="使用tr进行数学运算"></a>使用tr进行数学运算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算1-9的数字之和</span></span><br><span class="line"><span class="comment"># 之后补的0是必须的，不然得到的是1+2+3..+9+</span></span><br><span class="line"><span class="built_in">echo</span> 1 2 3 4 5 6 7 8 9 | xargs -n1 | <span class="built_in">echo</span> $(( $(tr <span class="string">'\n'</span> <span class="string">'+'</span>) 0 ))</span><br><span class="line">  45</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_71/com.ibm.aix.cmds5/tr.htm" target="_blank" rel="noopener">IBM tr 命令</a></li><li><a href="http://man.linuxde.net/tr" target="_blank" rel="noopener">tr命令</a></li><li><a href="https://www.jianshu.com/p/2c185f32999b" target="_blank" rel="noopener">Shell tr 命令简介</a></li><li><a href="https://www.cnblogs.com/f-ck-need-u/p/7521506.html" target="_blank" rel="noopener">SHELL脚本–tr命令用法和特性全解</a></li><li><a href="https://www.jianshu.com/p/ae3f5994b0e3" target="_blank" rel="noopener">23. Linux tr命令</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;code&gt;sed&lt;/code&gt;命令的简化版&lt;code&gt;tr&lt;/code&gt;命令，其可以实现&lt;strong&gt;替换&lt;/strong&gt;、&lt;strong&gt;删除&lt;/strong&gt;、&lt;strong&gt;压缩(去重)&lt;/strong&gt;等操作。主要参数包括：&lt;code&gt;-d&lt;/code&gt;删除、&lt;code&gt;-s&lt;/code&gt;压缩、&lt;code&gt;-t&lt;/code&gt;截断SET1、&lt;code&gt;-c&lt;/code&gt;取补SET1。默认情况下，如果同时提供了&lt;code&gt;SET1&lt;/code&gt;、&lt;code&gt;SET2&lt;/code&gt;那么就会进行替换操作；&lt;code&gt;-c&lt;/code&gt;取补SET1&lt;strong&gt;不能单独使用&lt;/strong&gt;，可以结合&lt;code&gt;-d&lt;/code&gt;或者&lt;strong&gt;增加SET2实现替换操作&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用基本命令" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="常用基本命令" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux隔行输出文本信息</title>
    <link href="http://showteeth.tech/posts/43739.html"/>
    <id>http://showteeth.tech/posts/43739.html</id>
    <published>2019-06-20T12:49:06.000Z</published>
    <updated>2019-07-05T15:40:49.959Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了Linux中隔行输出文本的方法，包括使用<code>sed</code>和<code>awk</code>命令，使用这两种方法都有一些较为通用的控制隔行输出的命令行，在<code>sed</code>中是<code>sed -n X~Np file</code>，在<code>awk</code>中是<code>awk &#39;NR%N==X&#39; test.txt</code>，其中<strong>N为隔的行数</strong>，<strong>X为输出的第几行</strong>。</p></div><a id="more"></a><h2 id="使用sed命令进行隔行输出"><a href="#使用sed命令进行隔行输出" class="headerlink" title="使用sed命令进行隔行输出"></a>使用sed命令进行隔行输出</h2><h3 id="输出奇数行和偶数行"><a href="#输出奇数行和偶数行" class="headerlink" title="输出奇数行和偶数行"></a>输出奇数行和偶数行</h3><p>输出<strong>奇数行</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line"><span class="comment"># 先print，然后next</span></span><br><span class="line"><span class="comment"># 再进行print</span></span><br><span class="line">sed -n <span class="string">'p;n'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="comment"># 每两行中的第一行输出</span></span><br><span class="line">sed -n <span class="string">'1~2p'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><p>输出<strong>偶数行</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line"><span class="comment"># 和上面的输出奇数行相反</span></span><br><span class="line"><span class="comment"># 先next，然后再print</span></span><br><span class="line">sed -n <span class="string">'n;p'</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="comment"># 每两行中的第二行输出</span></span><br><span class="line">sed -n <span class="string">'2~2p'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><h3 id="较为通用的方法"><a href="#较为通用的方法" class="headerlink" title="较为通用的方法"></a>较为通用的方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出第10、20、30行</span></span><br><span class="line"><span class="comment"># Every tenth line (10, 20, 30, ...)</span></span><br><span class="line">sed -n 10~10p file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出第1、11、21行</span></span><br><span class="line"><span class="comment"># Every tenth line (1, 11, 21, ...)</span></span><br><span class="line">sed -n 1~10p file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用-e参数来进行组合输出</span></span><br><span class="line"><span class="comment"># 增加某些没有规律的情况</span></span><br><span class="line"><span class="comment"># First plus every tenth (1, 10, 20, 30, ...)</span></span><br><span class="line">sed -n -e 1p -e 10~10p file</span><br></pre></td></tr></table></figure><p>其实使用前面<code>next和print</code>的方法也可以实现类似的效果，但<strong>比较麻烦</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每隔两行输出</span></span><br><span class="line">sed -n <span class="string">'p;n;n'</span> test.txt</span><br><span class="line">  1 4 7 10</span><br></pre></td></tr></table></figure><p></p><div class="note info"><ul><li>使用<code>sed -n 1~10p file</code>方法来进行规律性地输出是比较通用的方法，这种方法的结构是：<strong>每个多少行(~之后的内容)输出第几行(~之前的内容)</strong></li><li>还可以结合<code>-e</code>参数来组合输出，指定多个<code>pattern</code></li></ul></div><hr><h2 id="使用awk命令来控制隔行输出"><a href="#使用awk命令来控制隔行输出" class="headerlink" title="使用awk命令来控制隔行输出"></a>使用awk命令来控制隔行输出</h2><h3 id="输出奇数行和偶数行-1"><a href="#输出奇数行和偶数行-1" class="headerlink" title="输出奇数行和偶数行"></a>输出奇数行和偶数行</h3><p>输出<strong>奇数行</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用了NR这个内置变量</span></span><br><span class="line"><span class="comment"># 表示行号，当前处理文本行的行号</span></span><br><span class="line"><span class="comment"># 使用取余数的方法</span></span><br><span class="line">awk <span class="string">'NR%2==1'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><p>输出<strong>偶数行</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'NR%2==0'</span> test.txt</span><br></pre></td></tr></table></figure><p></p><h3 id="更为通用的方法"><a href="#更为通用的方法" class="headerlink" title="更为通用的方法"></a>更为通用的方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示每隔n行输出第p行</span></span><br><span class="line"><span class="comment"># n=10 and p=1, printing line 1,11,21,31,41</span></span><br><span class="line">awk <span class="string">'NR%n==p'</span> test.txt</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul><li><a href="https://stackoverflow.com/questions/9968916/print-every-nth-line-into-a-row-using-gawk" target="_blank" rel="noopener">print every nth line into a row using gawk</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了Linux中隔行输出文本的方法，包括使用&lt;code&gt;sed&lt;/code&gt;和&lt;code&gt;awk&lt;/code&gt;命令，使用这两种方法都有一些较为通用的控制隔行输出的命令行，在&lt;code&gt;sed&lt;/code&gt;中是&lt;code&gt;sed -n X~Np file&lt;/code&gt;，在&lt;code&gt;awk&lt;/code&gt;中是&lt;code&gt;awk &amp;#39;NR%N==X&amp;#39; test.txt&lt;/code&gt;，其中&lt;strong&gt;N为隔的行数&lt;/strong&gt;，&lt;strong&gt;X为输出的第几行&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之rpy2-在Python中使用R</title>
    <link href="http://showteeth.tech/posts/63643.html"/>
    <id>http://showteeth.tech/posts/63643.html</id>
    <published>2019-06-15T01:44:42.000Z</published>
    <updated>2019-06-15T08:32:42.774Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要学习了可以<strong>在Python中使用R的模块rpy2</strong>，具体的用法参见文章内容。</p></div><a id="more"></a><h2 id="rpy2简介"><a href="#rpy2简介" class="headerlink" title="rpy2简介"></a>rpy2简介</h2><p>本来我一直以为Python是完全可以替代R的。以前我一直以为R最强大的功能在于绘图，使用R语言可以绘制很漂亮的图片，然而自从Python的各种绘图包(eg：matplotlib、seabrn、plotly…)出现以来，R在这方面的优势在我看来就有些弱化，我开始将自己的工作重心转移到Python上，然而最近需要做一个非线性拟合的工作，查找的很多资料都是R的，这才让我意识到R在统计分析方面的优势是非常巨大的，Python虽然也有scipy这种包，但是相比于R来说还是太弱了，毕竟R就是搞统计使用的。</p><p>言归正传，Python和R两者是相互补充的，而不是相互竞争的，所以将这两种语言联合起来使用非常重要，因为自己还是使用Python比较顺手，所以这里就介绍能够在Python中调用R的rpy2包，关于R中使用Python的包这里就不做介绍了。</p><hr><h2 id="rpy2安装"><a href="#rpy2安装" class="headerlink" title="rpy2安装"></a>rpy2安装</h2><p><a href="https://rpy2.readthedocs.io/en/version_2.8.x/overview.html#easy-install-and-pip" target="_blank" rel="noopener">rpy2官方文档</a>提供了很多安装方法，其中最简单的当然是直接使用pip的方式进行安装，有其他需要的可以查看官方文档：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install rpy2</span><br></pre></td></tr></table></figure><p></p><h2 id="rpy2使用准备"><a href="#rpy2使用准备" class="headerlink" title="rpy2使用准备"></a>rpy2使用准备</h2><h3 id="导入rpy2包"><a href="#导入rpy2包" class="headerlink" title="导入rpy2包"></a>导入rpy2包</h3><p><strong>rpy2提供了两种接口</strong>：</p><ul><li>low-level：<code>rpy2.rinterface</code></li><li>high-level：<code>rpy2.robjects</code>，<strong>高级的接口使得在Python中使用R更加的自然</strong></li></ul><p><strong>查看版本信息</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rpy2</span><br><span class="line"><span class="comment"># 输出版本信息</span></span><br><span class="line">print(rpy2.__version__)</span><br></pre></td></tr></table></figure><p></p><pre><code>3.0.4</code></pre><p><strong>查看使用的R信息</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!which R</span><br></pre></td></tr></table></figure><p></p><pre><code>/home/softwares/anaconda3/bin/R</code></pre><p><strong>导入高级接口</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import rpy2.robjects as robjects</span><br></pre></td></tr></table></figure><p></p><h3 id="导入R包"><a href="#导入R包" class="headerlink" title="导入R包"></a>导入R包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入引用R包的函数importr</span></span><br><span class="line">from rpy2.robjects.packages import importr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入base包</span></span><br><span class="line">base = importr(<span class="string">'base'</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="安装R包"><a href="#安装R包" class="headerlink" title="安装R包"></a>安装R包</h3><p>正式开始安装R包之前的准备工作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import rpy2's package module</span></span><br><span class="line"><span class="comment"># 可以用于判断相应的包是不是已经安装</span></span><br><span class="line"><span class="keyword">import</span> rpy2.robjects.packages <span class="keyword">as</span> rpackages</span><br><span class="line"><span class="comment"># import R's utility package</span></span><br><span class="line">utils = rpackages.importr(<span class="string">'utils'</span>)</span><br><span class="line"><span class="comment"># select a mirror for R packages</span></span><br><span class="line">utils.chooseCRANmirror(ind=<span class="number">1</span>) <span class="comment"># select the first mirror in the list</span></span><br></pre></td></tr></table></figure><pre><code>&lt;rpy2.rinterface.NULLType object at 0x7f14e864b7c8&gt; [RTYPES.NILSXP]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断相应的包是不是已经安装</span></span><br><span class="line">rpackages.isinstalled(<span class="string">'base'</span>)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p>开始安装相应的R包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要安装的R包的名称</span></span><br><span class="line">packnames = (<span class="string">'ggplot2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入R的字符串向量函数</span></span><br><span class="line"><span class="keyword">from</span> rpy2.robjects.vectors <span class="keyword">import</span> StrVector</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断需要安装R包是不是已经安装过，如果没有再进行安装</span></span><br><span class="line">names_to_install = [x <span class="keyword">for</span> x <span class="keyword">in</span> packnames <span class="keyword">if</span> <span class="keyword">not</span> rpackages.isinstalled(x)]</span><br><span class="line"><span class="keyword">if</span> len(names_to_install) &gt; <span class="number">0</span>:</span><br><span class="line">    utils.install_packages(StrVector(names_to_install))</span><br></pre></td></tr></table></figure><h2 id="The-r-instance"><a href="#The-r-instance" class="headerlink" title="The r instance"></a>The r instance</h2><h3 id="Getting-R-objects"><a href="#Getting-R-objects" class="headerlink" title="Getting R objects"></a>Getting R objects</h3><p>得到像在R console中一样的输出，如下使用<code>robjects.r[&#39;pi&#39;]</code>就相当于在R中直接输入pi一样，得到pi的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pi = robjects.r[<span class="string">'pi'</span>]</span><br><span class="line">pi</span><br></pre></td></tr></table></figure><span>FloatVector with 1 elements.</span><table><tbody><tr><td>3.141593</td></tr></tbody></table><p>需要注意的：</p><ul><li>上面的<strong>返回值是一个vector，而不是一个值</strong>，如果希望得到这个值，可以使用类似Python列表操作的方法</li><li>这里使用下标为0即可得到值，但是在<code>R console</code>中需要使用<code>pi[1]</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>3.141592653589793</code></pre><h3 id="计算R代码的值"><a href="#计算R代码的值" class="headerlink" title="计算R代码的值"></a>计算R代码的值</h3><h4 id="运行单行代码"><a href="#运行单行代码" class="headerlink" title="运行单行代码"></a>运行单行代码</h4><p>前面使用<code>robjects.r[&#39;pi&#39;]</code>是直接调用了<code>__getitem__</code>方法，这里是使用了计算代码的值，两者的结果相同，但是实际的内部实现不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pi = robjects.r(<span class="string">'pi'</span>)</span><br><span class="line">pi</span><br></pre></td></tr></table></figure><span>FloatVector with 1 elements.</span><table><tbody><tr><td>3.141593</td></tr></tbody></table><p>和前面相同，上面返回的也是vector而不是具体的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>3.141592653589793</code></pre><h4 id="运行大段代码"><a href="#运行大段代码" class="headerlink" title="运行大段代码"></a>运行大段代码</h4><p>运行大段代码时<span class="mark">创建的变量和返回的结果保存在<code>Global Environment</code>中(也就是说是所有R代码的global variables，不是局部的变量)</span>，<code>Global Environment</code>就是Rstudio右上角的分栏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">robjects.r(<span class="string">'''</span></span><br><span class="line"><span class="string">        # create a function `f`</span></span><br><span class="line"><span class="string">        f &lt;- function(r, verbose=FALSE) &#123;</span></span><br><span class="line"><span class="string">            if (verbose) &#123;</span></span><br><span class="line"><span class="string">                cat("I am calling f().\n")</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            2 * pi * r</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        # call the function `f` with argument value 3</span></span><br><span class="line"><span class="string">        f(3)</span></span><br><span class="line"><span class="string">        '''</span>)</span><br></pre></td></tr></table></figure><span>FloatVector with 1 elements.</span><table><tbody><tr><td>18.849556</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为函数f已经存在于Global Environment</span></span><br><span class="line"><span class="comment"># 所有后面如果需要使用，可以直接调用，不用再次声明</span></span><br><span class="line">r_f = robjects.r[<span class="string">'f'</span>]</span><br><span class="line">r_f(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><span>FloatVector with 1 elements.</span><table><tbody><tr><td>31.415927</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">robjects.r(<span class="string">'xx &lt;- seq(-.3, 5, len = 101)'</span>)</span><br></pre></td></tr></table></figure><span>FloatVector with 101 elements.</span><table><tbody><tr><td>-0.300000</td><td>-0.247000</td><td>-0.194000</td><td>...</td><td>4.894000</td><td>4.947000</td><td>5.000000</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仍然可以调用前面的xx变量结果</span></span><br><span class="line">robjects.r(<span class="string">'xx'</span>)</span><br></pre></td></tr></table></figure><span>FloatVector with 101 elements.</span><table><tbody><tr><td>-0.300000</td><td>-0.247000</td><td>-0.194000</td><td>...</td><td>4.894000</td><td>4.947000</td><td>5.000000</td></tr></tbody></table><h3 id="R向量"><a href="#R向量" class="headerlink" title="R向量"></a>R向量</h3><p>在R中，大部分的数据都是以vectors的形式保存的，即使有些可能看上去像是值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前面的pi其实就是一个长度为1的vector</span></span><br><span class="line">len(robjects.r[<span class="string">'pi'</span>])</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><p></p><div class="mark"><br>如果直接使用R脚本得到一个vector然后再使用Python的<code>add()</code>操作，会相当于对R的vector进行了<code>concatenation</code>操作(<code>function c() in R</code>)：</div><i class="fa fa-lightbulb-o"></i><p></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">piplus2 = robjects.r(<span class="string">'pi'</span>) + <span class="number">2</span></span><br><span class="line">piplus2</span><br></pre></td></tr></table></figure><span>FloatVector with 2 elements.</span><table><tbody><tr><td>3.141593</td><td>2.000000</td></tr></tbody></table><p><strong>以R的形式显示vector(显示为c()的形式)</strong>，可以使用<code>vector.r_repr()</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (piplus2.r_repr())</span><br></pre></td></tr></table></figure><pre><code>c(3.14159265358979, 2)</code></pre><h3 id="创建R向量"><a href="#创建R向量" class="headerlink" title="创建R向量"></a>创建R向量</h3><p>创建的向量可以是<code>字符串类型的(robjects.StrVector)</code>、<code>整型的(robjects.IntVector)</code>以及<code>浮点型的(robjects.FloatVector)</code>，不同的类型使用不用的方法创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串向量</span></span><br><span class="line">res = robjects.StrVector([<span class="string">'abc'</span>, <span class="string">'def'</span>])</span><br><span class="line">print(res.r_repr())</span><br></pre></td></tr></table></figure><pre><code>c(&quot;abc&quot;, &quot;def&quot;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整型向量</span></span><br><span class="line">res=robjects.IntVector([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> (res.r_repr())</span><br></pre></td></tr></table></figure><pre><code>1:3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 浮点型向量</span></span><br><span class="line">res=robjects.FloatVector([<span class="number">1.1</span>,<span class="number">1.2</span>,<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> (res.r_repr())</span><br></pre></td></tr></table></figure><pre><code>c(1.1, 1.2, 1)</code></pre><p>创建矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v = robjects.FloatVector([<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span>])</span><br><span class="line"><span class="comment"># 通过matrix函数来创建</span></span><br><span class="line">m = robjects.r[<span class="string">'matrix'</span>](v, nrow = <span class="number">2</span>)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><pre><code>     [,1] [,2] [,3][1,]  1.1  3.3  5.5[2,]  2.2  4.4  6.6</code></pre><h3 id="调用R函数"><a href="#调用R函数" class="headerlink" title="调用R函数"></a>调用R函数</h3><p><span class="mark">默认情况下，调用R函数返回的是R对象</span>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line">rsum = robjects.r[<span class="string">'sum'</span>]</span><br><span class="line"><span class="comment"># 计算vector的值</span></span><br><span class="line">rsum(robjects.IntVector([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line"><span class="comment"># 返回的结果还是vector</span></span><br></pre></td></tr></table></figure><span>IntVector with 1 elements.</span><table><tbody><tr><td>6</td></tr></tbody></table><p>调用可以传递参数的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rsort = robjects.r[<span class="string">'sort'</span>]</span><br><span class="line"><span class="comment"># 传递参数：是否降序排列</span></span><br><span class="line">res = rsort(robjects.IntVector([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]), decreasing=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">print(res.r_repr())</span><br></pre></td></tr></table></figure><pre><code>3:1</code></pre><h3 id="获取帮助文档"><a href="#获取帮助文档" class="headerlink" title="获取帮助文档"></a>获取帮助文档</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rpy2.robjects.packages <span class="keyword">import</span> importr</span><br><span class="line">utils=importr(<span class="string">'utils'</span>)</span><br><span class="line">help_doc=utils.help(<span class="string">"help"</span>)</span><br><span class="line"><span class="comment"># 返回的仍然是vector</span></span><br><span class="line">help_doc</span><br></pre></td></tr></table></figure><span>StrVector with 1 elements.</span><table><tbody><tr><td>'/home/softwares/anaconda3/lib/R/library/utils/he...</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到具体的值</span></span><br><span class="line">help_doc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>&apos;/home/softwares/anaconda3/lib/R/library/utils/help/help&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出完整的帮助文档，而不是帮助文档的位置</span></span><br><span class="line">str(help_doc)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str(utils.help(<span class="string">"sum"</span>))</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?importr</span><br></pre></td></tr></table></figure><h3 id="将pandas的dataframe转为R的dataframe"><a href="#将pandas的dataframe转为R的dataframe" class="headerlink" title="将pandas的dataframe转为R的dataframe"></a>将pandas的dataframe转为R的dataframe</h3><p>创建pandas的dataframe：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">pd_df = pd.DataFrame(&#123;<span class="string">'int_values'</span>: [1,2,3],</span><br><span class="line">                      <span class="string">'str_values'</span>: [<span class="string">'abc'</span>, <span class="string">'def'</span>, <span class="string">'ghi'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">pd_df</span><br></pre></td></tr></table></figure><p></p><p>转化为R的dataframe：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import rpy2.robjects as ro</span><br><span class="line">from rpy2.robjects.packages import importr</span><br><span class="line">from rpy2.robjects import pandas2ri</span><br><span class="line"></span><br><span class="line">from rpy2.robjects.conversion import localconverter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体的转化过程</span></span><br><span class="line">with localconverter(ro.default_converter + pandas2ri.converter):</span><br><span class="line">  r_from_pd_df = ro.conversion.py2rpy(pd_df)</span><br><span class="line"></span><br><span class="line">r_from_pd_df</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (r_from_pd_df)</span><br></pre></td></tr></table></figure><p></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://rpy2.readthedocs.io/en/version_2.8.x/getting-started.html" target="_blank" rel="noopener">rpy2官方文档</a></li><li><a href="https://rpy2.github.io/doc/v3.0.x/html/generated_rst/pandas.html" target="_blank" rel="noopener">dataframe之间的相互转换</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要学习了可以&lt;strong&gt;在Python中使用R的模块rpy2&lt;/strong&gt;，具体的用法参见文章内容。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Linux解决软件缺失库文件</title>
    <link href="http://showteeth.tech/posts/62465.html"/>
    <id>http://showteeth.tech/posts/62465.html</id>
    <published>2019-06-13T07:16:52.000Z</published>
    <updated>2019-06-13T15:20:31.603Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了如何在<strong>没有root</strong>、<strong>不能直接安装缺失共享库</strong>的前提下<strong>如何补全缺失共享库</strong>的方法，主要是<strong>借助其他软件安装好的该共享库并建立软连接实现</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天使用<code>bgzip</code>命令的时候报错：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgzip: error <span class="keyword">while</span> loading shared libraries: libcrypto.so.1.0.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p></p><p>按照错误来说是缺失了共享库的信息，具体缺失的共享库为<code>libcrypto.so.1.0.0</code></p><hr><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="有root"><a href="#有root" class="headerlink" title="有root"></a>有root</h3><p>最简单粗暴的方法就是缺什么安装什么，但是这种共享库文件的安装肯定是需要root权限的，因为使用的是学校的集群，所以肯定没有权限，这种方法对于大部分用户来说都不是很适用，但还是列出来，万一是自家的集群呢：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu系统使用</span></span><br><span class="line"><span class="comment"># 重装libssl1.0.0</span></span><br><span class="line">sudo apt-get install libssl1.0.0</span><br><span class="line"></span><br><span class="line">sudo apt-get install apt-file</span><br><span class="line">sudo apt-file update</span><br><span class="line">apt-file search libcrypto.so.1.0.0</span><br></pre></td></tr></table></figure><p></p><p>参考链接：<a href="https://unix.stackexchange.com/questions/283607/libraries-libcrypto-so-1-0-0-cannot-open-shared-object-file-no-such-file-or-d" target="_blank" rel="noopener">libraries: libcrypto.so.1.0.0: cannot open shared object file: No such file or directory</a></p><hr><h3 id="没有root权限"><a href="#没有root权限" class="headerlink" title="没有root权限"></a>没有root权限</h3><p>没有root权限下的解决是主要的解决方式(有root权限当然也可以使用这种做法)，也是今天想要记录的原因，之前没有这么解决过。</p><h4 id="使用ldd命令查看依赖"><a href="#使用ldd命令查看依赖" class="headerlink" title="使用ldd命令查看依赖"></a>使用ldd命令查看依赖</h4><p><code>ldd</code>命令是用来查看命令运行所需的共享库,常用来解决命令因缺少某个库文件而不能运行的一些问题。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看命令的绝对路径</span></span><br><span class="line"><span class="built_in">which</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看命令的依赖信息</span></span><br><span class="line">ldd /usr/bin/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 返回信息</span></span><br><span class="line">        linux-vdso.so.1 =&gt;  (0x00007ffe16971000)</span><br><span class="line">        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fa91c0db000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007fa91c4a9000)</span><br></pre></td></tr></table></figure><p></p><p>如果<strong>不能找到相应的依赖</strong>会返回：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libcrypto.so.1.0.0 =&gt; not found</span><br></pre></td></tr></table></figure><p></p><div class="note info"><ul><li><mark>ldd命令一定要使用绝对路径</mark>，即使是linux系统自带的命令(built-in)，不然不会得到结果</li><li><strong>结果信息解读</strong>：<ul><li>第一列: <strong>程序需要依赖什么库</strong></li><li>第二列: <strong>系统提供的</strong>与程序需要的库所对应的库</li><li>第三列: 库加载的开始地址</li></ul></li></ul></div><hr><h4 id="直接在集群上查找丢失的共享库"><a href="#直接在集群上查找丢失的共享库" class="headerlink" title="直接在集群上查找丢失的共享库"></a>直接在集群上查找丢失的共享库</h4><p>很多共享库其他软件在安装的时候可能会自动安装，所以直接查找其他软件安装的共享库并使用是个不错的选择：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找丢失的共享库信息</span></span><br><span class="line">find ~ -name libcrypto.so.1.0.0</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="建立软连接"><a href="#建立软连接" class="headerlink" title="建立软连接"></a>建立软连接</h4><p>将找到的共享库建立软连接到软件安装的lib目录中：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看软件安装路径</span></span><br><span class="line"><span class="built_in">which</span> bgzip</span><br><span class="line"><span class="comment"># 软件是使用anaconda安装的</span></span><br><span class="line">  ~/usr/anaconda2/bin/bgzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立软连接</span></span><br><span class="line">ln -s /Share2/home/wangjb/usr/anaconda2/pkgs/openssl-1.0.2l-0/lib/libcrypto.so.1.0.0 /Share2/home/wangjb/usr/anaconda2/bin/../lib/libcrypto.so.1.0.0</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>注意：这的<code>/Share2/home/wangjb/usr/anaconda2/bin/../lib</code>目录其实就是<code>/Share2/home/wangjb/usr/anaconda2/lib</code>目录，但是看软件所有的依赖包都是这种写法，所以这里也采用了这种写法。</p></div><hr><h4 id="再次查看依赖包"><a href="#再次查看依赖包" class="headerlink" title="再次查看依赖包"></a>再次查看依赖包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ldd ~/usr/anaconda2/bin/bgzip</span><br><span class="line">        linux-vdso.so.1 =&gt;  (0x00007ffc36ddb000)</span><br><span class="line">        liblzma.so.5 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/liblzma.so.5 (0x00007fa05de85000)</span><br><span class="line">        libbz2.so.1.0 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/libbz2.so.1.0 (0x00007fa05dc73000)</span><br><span class="line">        libz.so.1 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/libz.so.1 (0x00007fa05da5b000)</span><br><span class="line">        libm.so.6 =&gt; /lib64/libm.so.6 (0x00007fa05d759000)</span><br><span class="line">        libcurl.so.4 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/libcurl.so.4 (0x00007fa05e220000)</span><br><span class="line">        <span class="comment"># 之前缺失的共享包这里有了</span></span><br><span class="line">        libcrypto.so.1.0.0 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/libcrypto.so.1.0.0 (0x00007fa05d322000)</span><br><span class="line"></span><br><span class="line">        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007fa05d106000)</span><br><span class="line">        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fa05cd43000)</span><br><span class="line">        librt.so.1 =&gt; /lib64/librt.so.1 (0x00007fa05cb3b000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007fa05e0ab000)</span><br><span class="line">        libssh2.so.1 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/./libssh2.so.1 (0x00007fa05e1ed000)</span><br><span class="line">        libssl.so.1.1 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/./libssl.so.1.1 (0x00007fa05e157000)</span><br><span class="line">        libcrypto.so.1.1 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/./libcrypto.so.1.1 (0x00007fa05c843000)</span><br><span class="line">        libgssapi_krb5.so.2 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/./libgssapi_krb5.so.2 (0x00007fa05e107000)</span><br><span class="line">        libkrb5.so.3 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/./libkrb5.so.3 (0x00007fa05c767000)</span><br><span class="line">        libk5crypto.so.3 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/./libk5crypto.so.3 (0x00007fa05e0e8000)</span><br><span class="line">        libcom_err.so.3 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/./libcom_err.so.3 (0x00007fa05e0e1000)</span><br><span class="line">        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007fa05c563000)</span><br><span class="line">        libkrb5support.so.0 =&gt; /Share2/home/wangjb/usr/anaconda2/bin/../lib/././libkrb5support.so.0 (0x00007fa05e0d1000)</span><br><span class="line">        libresolv.so.2 =&gt; /lib64/libresolv.so.2 (0x00007fa05c349000)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次测试软件</span></span><br><span class="line">bgzip --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 正常使用</span></span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/ldd.html" target="_blank" rel="noopener">ldd 查看程序依赖库</a></li><li><a href="https://blog.csdn.net/littleblack201608/article/details/87252579" target="_blank" rel="noopener">WGS数据分析流程学习与开发过程全纪录（1）</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了如何在&lt;strong&gt;没有root&lt;/strong&gt;、&lt;strong&gt;不能直接安装缺失共享库&lt;/strong&gt;的前提下&lt;strong&gt;如何补全缺失共享库&lt;/strong&gt;的方法，主要是&lt;strong&gt;借助其他软件安装好的该共享库并建立软连接实现&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="工具" scheme="http://showteeth.tech/categories/Linux/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://showteeth.tech/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Linux没有root权限安装软件</title>
    <link href="http://showteeth.tech/posts/62231.html"/>
    <id>http://showteeth.tech/posts/62231.html</id>
    <published>2019-06-06T09:18:35.000Z</published>
    <updated>2019-07-24T06:31:29.275Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章总结了在<strong>没有root权限下如何下载安装软件</strong>，主要包括<strong>下载源码包(<code>yumdownloader</code>)</strong>、<strong>配置(<code>./configure</code>)</strong>、<strong>编译(<code>make</code>)</strong>和<strong>安装(<code>make install</code>)</strong>四步。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用集群的过程中难免会遇到需要root权限才能安装一些软件的问题，比如在centos上使用<code>yum install</code>这种包管理程序来安装软件就需要使用<code>sudo yum install</code>才能正确安装，但是作为一般的用户，哪里会有roo权限可以使用，但是有些软件又是必须的，所以才有了这篇文章。</p><hr><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里以nginx为例</span></span><br><span class="line">tar -zvxf nginx-1.2.3.tar.gz</span><br></pre></td></tr></table></figure><p><strong>关于如何下载源码</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载yum-utils，支持yumdownloader命令</span></span><br><span class="line">yum install yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载mypkg的源码</span></span><br><span class="line">yumdownloader --<span class="built_in">source</span> mypkg --destdir=DESTDIR</span><br><span class="line"><span class="comment"># --destdir=DESTDIR  指定下载目录，默认是当前目录 destination directory (defaults to current directory)</span></span><br><span class="line"><span class="comment"># --source operate on source packages</span></span><br></pre></td></tr></table></figure><p></p><p>参考链接：<a href="https://access.redhat.com/solutions/10154" target="_blank" rel="noopener">How to use yum to download a package without installing it</a></p><hr><h3 id="创建软件安装目录"><a href="#创建软件安装目录" class="headerlink" title="创建软件安装目录"></a>创建软件安装目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir nginx</span><br></pre></td></tr></table></figure><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入第一步压缩包解压目录</span></span><br><span class="line"><span class="built_in">cd</span> source_code_folder</span><br><span class="line"><span class="comment"># 配置信息，prefix为软件安装目录</span></span><br><span class="line">./configure --prefix=/path/to/install/nginx</span><br></pre></td></tr></table></figure><div class="note info"><p>非root用户最重要的配置项是安装目录prefix，例如 <code>./configure –prefix=/path/to/bin</code>，在无法自动找到依赖库位置的情况下，用 <code>–with-xx-dir=xxx</code> 的形式<strong>配置依赖库位置</strong>.</p></div><hr><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><div class="note info"><p>make时指定 <code>-j</code> 参数并行编译，能<strong>显著减少编译耗时</strong></p></div><hr><h2 id="关于configure、make、make-install"><a href="#关于configure、make、make-install" class="headerlink" title="关于configure、make、make install"></a>关于configure、make、make install</h2><ul><li><code>./configure</code> 是用来<strong>检测你的安装平台的目标特征的，可以生成 <code>Makefile</code></strong>。比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本；</li><li><code>make</code> 是用来编译的，它从<code>Makefile</code>中读取指令，然后<strong>编译</strong>；</li><li><code>make install</code>是用来安装的，它也从<code>Makefile</code>中读取指令，<strong>安装到指定的位置</strong>。</li></ul><h3 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h3><p><code>configure</code>命令一般用来生成 <code>Makefile</code>，为下一步的编译做准备，你可以通过在 <code>configure</code> 后加上参数来对安装进行控制，比如代码:<code>./configure –prefix=/usr</code> 意思是<strong>将该软件安装在 /usr 下面</strong>，<strong>执行文件就会安装在 /usr/bin （而不是默认的 /usr/local/bin)</strong>，<strong>资源文件就会安装在 /usr/share（而不是默认的/usr/local/share）</strong>。同时一些软件的配置文件你可以通过指定 <code>–sys-config=</code> 参数进行设定。有一些软件还可以加上 <code>–with</code>、<code>–enable</code>、<code>–without</code>、<code>–disable</code> 等等参数对编译加以控制，你可以通过允许 <code>./configure –help</code> 察看详细的说明帮助。</p><p>用了 <code>--prefix</code> 选项的好处：</p><ul><li><strong>方便维护</strong>，如果没有用这个选项，安装过程结束后，<strong>该软件所需的软件被复制到不同的系统目录下，很难弄清楚到底复制了那些文件、都复制到哪里去了—基本上是一塌糊涂</strong></li><li><strong>卸载软件或移植软件</strong>。当某个安装的软件不再需要时，<strong>只须简单的删除该安装目录</strong>，就可以把软件卸载得干干净净；<strong>移植软件只需拷贝整个目录到另外一个机器即可（相同的操作系统）</strong></li></ul><h4 id="LDFLAGS和CPPFLAGS"><a href="#LDFLAGS和CPPFLAGS" class="headerlink" title="LDFLAGS和CPPFLAGS"></a>LDFLAGS和CPPFLAGS</h4><ul><li><p><code>LDFLAGS</code>：<code>gcc</code> 等编译器会用到的一些优化参数，也可以在里面指定库文件的位置。用法：<code>LDFLAGS=-L/usr/lib -L/path/to/your/lib</code>。每安装一个包都几乎一定的会在安装目录里建立一个<code>lib</code>目录。如果<strong>明明安装了某个包</strong>，而安装另一个包时，它<strong>愣是说找不到</strong>，可以将那个包的lib路径加入的<code>LDFALGS</code>中试一下。</p></li><li><p><code>CPPFLAGS</code>：<code>C</code>预处理器参数（ <code>C</code> 和 <code>Fortran</code> 编译器也会用到），用法：<code>CPPFLAGS=&quot;-I/usr/local/libtool-2.4.6/include -I/usr/local/gmp-6.1.0/include&quot;</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个LDFLAGS和CPPFLAGS可以使用空格分开</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/guile-2.2.4 LDFLAGS=<span class="string">"-L/usr/local/libtool-2.4.6/lib -L/usr/local/gmp-6.1.0/lib"</span> CPPFLAGS=<span class="string">"-I/usr/local/libtool-2.4.6/include -I/usr/local/gmp-6.1.0/include"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不想将这当做configure的参数使用，可以在执行configure之前</span></span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">"-L/usr/local/libtool-2.4.6/lib -L/usr/local/gmp-6.1.0/lib"</span></span><br><span class="line"><span class="comment"># 那么执行configure以后，Makefile将会设置这个选项， 链接时会有这个参数，编译出来的可执行程序的库文件搜索路径就得到扩展了。</span></span><br></pre></td></tr></table></figure><p>更多相关参数：<br><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/cppflags.png" alt="cppflags.png"></p><p><a href="https://www.cnblogs.com/taskiller/archive/2012/12/14/2817650.html" target="_blank" rel="noopener">参考链接</a></p><hr><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>这一步就是<strong>编译</strong>，大多数的源代码包都经过这一步进行编译（当然<strong>有些perl或python编写的软件需要调用perl或python来进行编译</strong>）。如果 在 make 过程中出现 error ，你就要记下错误代码（注意不仅仅是最后一行），然后你可以向开发者提交 bugreport（一般在 INSTALL 里有提交地址），或者你的系统少了一些依赖库等，这些需要自己仔细研究错误代码。</p><p><strong>可能遇到的错误</strong>：<strong>make *</strong> 没有指明目标并且找不到 makefile。 停止。问题很明了，<code>没有Makefile</code>，怎么办，原来是要<code>先./configure 一下，再make</code>**</p><hr><h3 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h3><p>这条命令来进行安装（当然<strong>有些软件需要先运行 <code>make check</code> 或 <code>make test</code> 来进行一些测试</strong>）。</p><p>如果安装失败可以使用<code>make clean</code>来<strong>清除编译产生的可执行文件及目标文件(object file，*.o)</strong>。</p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/qq_19004627/article/details/79090078" target="_blank" rel="noopener">linux无root权限安装软件</a></li><li><a href="https://www.tlanyan.me/work-with-linux-without-root-permission/" target="_blank" rel="noopener">linux下非root用户安装软件入门</a></li><li><a href="https://www.cnblogs.com/tinywan/p/7230039.html" target="_blank" rel="noopener">Linux 命令详解（三）./configure、make、make install 命令</a></li><li><a href="https://cnbin.github.io/blog/2015/06/22/linux-slash-configure-prefix-ming-ling/" target="_blank" rel="noopener">Linux ./configure –prefix 命令</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章总结了在&lt;strong&gt;没有root权限下如何下载安装软件&lt;/strong&gt;，主要包括&lt;strong&gt;下载源码包(&lt;code&gt;yumdownloader&lt;/code&gt;)&lt;/strong&gt;、&lt;strong&gt;配置(&lt;code&gt;./configure&lt;/code&gt;)&lt;/strong&gt;、&lt;strong&gt;编译(&lt;code&gt;make&lt;/code&gt;)&lt;/strong&gt;和&lt;strong&gt;安装(&lt;code&gt;make install&lt;/code&gt;)&lt;/strong&gt;四步。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="工具" scheme="http://showteeth.tech/categories/Linux/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://showteeth.tech/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>rename-批量修改文件名称</title>
    <link href="http://showteeth.tech/posts/50712.html"/>
    <id>http://showteeth.tech/posts/50712.html</id>
    <published>2019-06-05T11:37:02.000Z</published>
    <updated>2019-06-06T09:17:47.143Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了用来<strong>修改文件名称的命令rename(不是系统自带的，需要下载)</strong>，相比于传统的<code>mv命令</code>，<code>rename</code>可以支持<strong>使用正则表达式来批量操作文件列表(可以使用通配符)</strong>；但是需要注意的是<strong>rename只能修改文件的名称，而不能修改目录的名称</strong>，但是<strong>mv却可以修改文件名称</strong>，只是不能支持批量操作而已，<strong>借助循环就可以达到批量替换的目的</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于课题的需要，要<strong>对很多文件的名称进行修改</strong>，然而每个单独进行修改会很麻烦，并且还希望<strong>只替代部分信息</strong>，比如<code>a_1.txt</code>，后面的<code>_1.txt</code>是还需要保留的信息。</p><hr><h2 id="mv命令修改"><a href="#mv命令修改" class="headerlink" title="mv命令修改"></a>mv命令修改</h2><p>mv命令是move的简写，原本是用来移动文件(相当于是剪切)，但是如果被移动文件和目标文件在同一个目录下就可以实现名称的修改，但是这个在单独修改每个文件名称时比较好用(也包括循环修改，其实也是每次只修改一个，只是加了循环而已)：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将当前目录下的a_1.txt修改为b_1.txt</span></span><br><span class="line">mv ./a_1.txt ./b_1.txt</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="rename命令"><a href="#rename命令" class="headerlink" title="rename命令"></a>rename命令</h2><p>rename顾名思义就是直接修改名称的命令，这个命令是linux自带的命令，之前一直没有发现，最近遇到问题需要进行大规模修改的时候，直接搜索到这个命令可以更加方便地使用。</p><div class="note info"><p>rename有两个版本，一个是linux自带的，在功能不是很强大，在<code>/usr/bin/rename</code>中，和mv命令差不多，另一个是<code>perl语言的rename</code>，功能更加强大，但需要自己安装，后面使用的都是这个自己安装的rename命令。</p></div><h3 id="rename安装"><a href="#rename安装" class="headerlink" title="rename安装"></a>rename安装</h3><ul><li><p>下载安装包，从<a href="https://cpan.metacpan.org/authors/id/P/PE/PEDERST/" target="_blank" rel="noopener">这个链接下载</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载perl安装包</span></span><br><span class="line">wget https://cpan.metacpan.org/authors/id/P/PE/PEDERST/rename-1.9.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf rename-1.9.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"rename-1.9"</span></span><br><span class="line">perl <span class="string">"Makefile.PL"</span></span><br><span class="line">  Checking <span class="keyword">if</span> your kit is complete...</span><br><span class="line">  Looks good</span><br><span class="line">  Generating a Unix-style Makefile</span><br><span class="line">  Writing Makefile <span class="keyword">for</span> rename</span><br><span class="line">  Writing MYMETA.yml and MYMETA.json</span><br><span class="line">make</span><br><span class="line">  <span class="string">"/Share2/home/wangjb/usr/anaconda2/bin/perl"</span> <span class="string">"-Iblib/arch"</span> <span class="string">"-Iblib/lib"</span> bin/rename.PL bin/rename</span><br><span class="line">  Extracting rename</span><br><span class="line">  cp bin/rename blib/script/rename</span><br><span class="line">  <span class="string">"/Share2/home/wangjb/usr/anaconda2/bin/perl"</span> -MExtUtils::MY -e <span class="string">'MY-&gt;fixin(shift)'</span> -- blib/script/rename</span><br><span class="line">  Manifying 1 pod document</span><br><span class="line">make install</span><br><span class="line">  Manifying 1 pod document</span><br><span class="line">  Installing /Share2/home/wangjb/usr/anaconda2/man/man1/rename.1</span><br><span class="line">  Installing /Share2/home/wangjb/usr/anaconda2/bin/rename</span><br><span class="line">  Appending installation info to /Share2/home/wangjb/usr/anaconda2/lib/perl5/5.22.0/x86_64-linux-thread-multi/perllocal.pod</span><br></pre></td></tr></table></figure></li></ul><p>PS：<strong>安装直接将其安装在anaconda中了</strong></p><div class="note info"><ul><li>如果想<strong>指定安装路径</strong>可以在<code>perl &quot;Makefile.PL&quot;</code>的时候加上<code>INSTALL_BASE</code>( can be set to modify the base installation directory.)。eg: <code>perl &quot;Makefile.PL&quot; INSTALL_BASE=/usr/local</code></li><li>也可以直接使用cpan安装，具体的安装教程请参考<a href="https://stackoverflow.com/questions/22577767/get-the-perl-rename-utility-instead-of-the-built-in-rename" target="_blank" rel="noopener">这个链接</a></li></ul></div><hr><h3 id="rename格式"><a href="#rename格式" class="headerlink" title="rename格式"></a>rename格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  rename [OPTION]... PERLEXPR FILE...</span><br><span class="line">  Rename FILE(s) using PERLEXPR on each filename.</span><br><span class="line">  <span class="comment"># 另一种写法，感觉有点像sed命令的使用</span></span><br><span class="line">  rename [options] <span class="string">"s/oldname/newname/"</span> file</span><br></pre></td></tr></table></figure><ul><li>原字符串<code>oldname</code>：将要<strong>被替换的字符串</strong></li><li>目标字符串<code>newname</code>：原字符替换成的<strong>目标字符串</strong></li><li>文件<code>file</code>：指定要改变文件名的<strong>文件列表</strong></li></ul><div class="note info"><ul><li>上面的<code>oldname</code>和<code>newname</code>都支持<strong>正则表达式</strong></li><li><code>file</code>列表支持<strong>通配符</strong></li><li><a href="http://showteeth.tech/posts/37480.html">Linux通配符和正则表达式及其区别</a></li></ul></div><hr><h3 id="rename使用实例"><a href="#rename使用实例" class="headerlink" title="rename使用实例"></a>rename使用实例</h3><h4 id="替换文件名中特定字段"><a href="#替换文件名中特定字段" class="headerlink" title="替换文件名中特定字段"></a>替换文件名中特定字段</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 1_ab.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 1_ac.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 1_ad.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 2_aa.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有文件名中的a替换为b</span></span><br><span class="line"><span class="comment"># 后面语法的书写很像sed命令</span></span><br><span class="line"><span class="comment"># 默认只会替换第一个出现的字符，如2_aa.txt被修改为了2_ba.txt，第二个a没有被替换</span></span><br><span class="line">rename <span class="string">'s/a/b/'</span> *</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 1_bb.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 1_bc.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 1_bd.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 2_ba.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局替换</span></span><br><span class="line"><span class="comment"># 替换所有的模式</span></span><br><span class="line">rename <span class="string">'s/a/b/g'</span> *</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 1_bb.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 1_bc.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 1_bd.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  5 22:39 2_bb.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合正则表达式进行替换</span></span><br><span class="line"><span class="comment"># 不仅将正则匹配的内容进行了替换，并且将1_也直接替换掉了</span></span><br><span class="line"><span class="comment"># 这里使用$1、$2表示匹配上的分组信息，而不是常规的\1、\2这种</span></span><br><span class="line">rename <span class="string">'s/1_(.)(.)/$2-$1/'</span> *</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 2_bb.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 b-b.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 c-b.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 d-b.txt</span><br></pre></td></tr></table></figure><div class="note info"><p>使用<strong>正则表达式</strong>进行替换的时候使用<code>$1`</code>$2<code>这种来**表示匹配上的分组信息**，这和之前常规的</code>\1<code>、</code>\2`不同，需要注意</p></div><hr><h4 id="修改文件后缀"><a href="#修改文件后缀" class="headerlink" title="修改文件后缀"></a>修改文件后缀</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件后缀由txt修改为sh</span></span><br><span class="line">rename <span class="string">'s/.txt/.sh/'</span> *</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 2_bb.sh</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 b-b.sh</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 c-b.sh</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 d-b.sh</span><br></pre></td></tr></table></figure><hr><h4 id="添加和删除后缀"><a href="#添加和删除后缀" class="headerlink" title="添加和删除后缀"></a>添加和删除后缀</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将所有文件的后缀删除</span></span><br><span class="line">rename <span class="string">'s/.sh//'</span> *</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 2_bb</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 b-b</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 c-b</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 d-b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给所有文件统一添加后缀txt</span></span><br><span class="line">rename <span class="string">'s/$/.txt/'</span> *</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 2_bb.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 b-b.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 c-b.txt</span><br><span class="line">  -rw-rw-r--. 1 user user 0 Jun  6 05:52 d-b.txt</span><br></pre></td></tr></table></figure><hr><h2 id="修改文件夹"><a href="#修改文件夹" class="headerlink" title="修改文件夹"></a>修改文件夹</h2><p>关于文件夹的名称如果需要修改会比较麻烦，上面的<strong>rename支持修改文件的名称，但是不能支持修改目录的名称</strong>；而前面提到的<strong>mv不仅能够修改文件名称还能修目录名称(都是剪切然后粘贴的原理嘛)</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 批量修改文件夹的名称</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls`;<span class="keyword">do</span> mv <span class="variable">$i</span> $(<span class="built_in">echo</span> <span class="variable">$i</span> |sed <span class="string">'s/LJ_mtDNA_590/LJ0590_fro_wbc_190310/'</span>);<span class="keyword">done</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://einverne.github.io/post/2018/01/rename-files-batch.html" target="_blank" rel="noopener">每天学习一个命令: rename 批量修改文件名</a></li><li><a href="http://man.linuxde.net/rename" target="_blank" rel="noopener">rename命令</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了用来&lt;strong&gt;修改文件名称的命令rename(不是系统自带的，需要下载)&lt;/strong&gt;，相比于传统的&lt;code&gt;mv命令&lt;/code&gt;，&lt;code&gt;rename&lt;/code&gt;可以支持&lt;strong&gt;使用正则表达式来批量操作文件列表(可以使用通配符)&lt;/strong&gt;；但是需要注意的是&lt;strong&gt;rename只能修改文件的名称，而不能修改目录的名称&lt;/strong&gt;，但是&lt;strong&gt;mv却可以修改文件名称&lt;/strong&gt;，只是不能支持批量操作而已，&lt;strong&gt;借助循环就可以达到批量替换的目的&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用基本命令" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="常用基本命令" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter版的IGV之igv-jupyter</title>
    <link href="http://showteeth.tech/posts/53124.html"/>
    <id>http://showteeth.tech/posts/53124.html</id>
    <published>2019-06-02T12:25:00.000Z</published>
    <updated>2019-06-02T14:10:31.971Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章<strong>初步探索了igv-jupyter的配置和使用</strong>，后续使用可以添加。</p></div><a id="more"></a><h2 id="IGV"><a href="#IGV" class="headerlink" title="IGV"></a>IGV</h2><p>整合基因组浏览器(IGV)是一种高性能的可视化工具，用来交互式地探索大型综合基因组数据。IGV一直以来就是一个桌面版的软件，使用需要下载安装，但是一般的bam文件都在服务器上，这样使用起来就比较麻烦，因此<a href="https://github.com/igvteam" target="_blank" rel="noopener">igvteam</a>相继推出了<a href="https://github.com/igvteam/igv.js" target="_blank" rel="noopener">igv.js</a>以及<a href="https://github.com/igvteam/igv-jupyter" target="_blank" rel="noopener">igv-jupyter</a>用于在线查看，方便快捷。这是一篇对igv-jupyter的使用进行探索的文章。</p><hr><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>使用如下命令进行安装和下载：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用pip进行安装</span></span><br><span class="line">pip install igv-jupyter</span><br></pre></td></tr></table></figure><p></p><p>安装完成之后结合到nbextension作为插件使用：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># To install to configuration in your home directory</span></span><br><span class="line">jupyter serverextension <span class="built_in">enable</span> --py igv</span><br><span class="line">jupyter nbextension install --py igv</span><br><span class="line">jupyter nbextension <span class="built_in">enable</span> --py igv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我用的是anaconda安装的，需要使用这个</span></span><br><span class="line"><span class="comment"># 实际上我都尝试了，使用上面的命令不管用</span></span><br><span class="line"><span class="comment"># If using a virtual environment</span></span><br><span class="line">jupyter serverextension <span class="built_in">enable</span> --py igv --sys-prefix</span><br><span class="line">jupyter nbextension install --py igv --sys-prefix</span><br><span class="line">jupyter nbextension <span class="built_in">enable</span> --py igv --sys-prefix</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>关于安装，还可以参考这篇文章：<a href="http://showteeth.tech/posts/42671.html">Python系列之从github源码安装python包</a></p></div><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>按照官网的示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入igv包</span></span><br><span class="line">import igv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个igv broswer对象</span></span><br><span class="line"><span class="comment"># 该对象会显示hg19的参考基因组</span></span><br><span class="line">b = igv.Browser(&#123;<span class="string">"genome"</span>: <span class="string">"hg19"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示这个对象</span></span><br><span class="line"><span class="comment"># 具体的显示出桌面版的界面</span></span><br><span class="line">b.show()</span><br></pre></td></tr></table></figure><p></p><p>创建对象时导入的信息可以查看<a href="https://github.com/igvteam/igv.js/wiki/Browser-Configuration-2.0" target="_blank" rel="noopener">igv.js documentation</a></p><hr><h3 id="track"><a href="#track" class="headerlink" title="track"></a>track</h3><p>实例的track：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b.load_track(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Segmented CN"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"https://data.broadinstitute.org/igvdata/test/igv-web/segmented_data_080520.seg.gz"</span>,</span><br><span class="line">        <span class="string">"format"</span>: <span class="string">"seg"</span>,</span><br><span class="line">        <span class="string">"indexed"</span>: False</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p></p><p>这一步正常情况下会出现<code>OK</code>，如果出错可能会出现<code>IGV Browser not ready</code>，出现这个问题是因为igv还没有完全配置好，可能是上面的结合nbextension作为插件使用这一步的问题，需要注意使用相对应的情况，如果实在不能解决可以查看<a href="https://github.com/igvteam/igv-jupyter/issues/23" target="_blank" rel="noopener">这个issue</a>中<strong>创建新的虚拟环境安装的过程，亲测可用</strong>。</p><div class="note info"><ul><li>注意：是<strong>先调用<code>b.show()</code>之后再<code>load track</code></strong>，然后就可以在前面<code>b.show()</code>的结果中看到新添加的track，不用新调用<code>b.show()</code></li><li>自定义track需要按照这个说明：<a href="https://github.com/igvteam/igv.js/wiki/Tracks-2.0" target="_blank" rel="noopener">igv.js documentation</a></li><li><a href="https://github.com/igvteam/igv-jupyter/tree/master/examples" target="_blank" rel="noopener">定义track的各种示例</a></li></ul></div><p>实际效果如下：<br><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/igv_example.png" alt="igv_example.png"></p><hr><h3 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h3><p>####放大或者缩小<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缩小</span></span><br><span class="line">b.zoom_in()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放大</span></span><br><span class="line">b.zoom_out()</span><br></pre></td></tr></table></figure><p></p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索chr1染色体的3000-4000区域</span></span><br><span class="line">b.search(<span class="string">'chr1:3000-4000'</span>)</span><br></pre></td></tr></table></figure><h4 id="跳转到特定的基因"><a href="#跳转到特定的基因" class="headerlink" title="跳转到特定的基因"></a>跳转到特定的基因</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.search(<span class="string">'myc'</span>)</span><br></pre></td></tr></table></figure><div class="note info"><p>目前跳转到特定的基因目前只支持<code>hg38</code>、<code>hg19</code>、<code>mm10</code>，如果想自定义搜索服务需要查看<a href="https://github.com/igvteam/igv.js/wiki/Browser-Configuration-2.0#search-object-details" target="_blank" rel="noopener">igv.js documentation</a></p></div><h4 id="输出SVG"><a href="#输出SVG" class="headerlink" title="输出SVG"></a>输出SVG</h4><p>保存当前的视图到SVG<strong>需要如下两个命令</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b.get_svg()</span><br><span class="line"></span><br><span class="line">b.display_svg()</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/igvteam/igv-jupyter" target="_blank" rel="noopener">igv-jupyter的github</a></li><li><a href="https://github.com/igvteam/igv-jupyter/tree/master/examples" target="_blank" rel="noopener">定义track的各种示例</a></li><li><a href="https://github.com/igvteam/igv.js/wiki" target="_blank" rel="noopener">igv.js的wiki文档</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章&lt;strong&gt;初步探索了igv-jupyter的配置和使用&lt;/strong&gt;，后续使用可以添加。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="工具" scheme="http://showteeth.tech/categories/Python/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://showteeth.tech/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
