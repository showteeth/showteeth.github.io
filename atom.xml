<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>showteeth&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://showteeth.tech/"/>
  <updated>2020-02-21T09:10:53.978Z</updated>
  <id>http://showteeth.tech/</id>
  
  <author>
    <name>showteeth</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows神器总结</title>
    <link href="http://showteeth.tech/posts/31625.html"/>
    <id>http://showteeth.tech/posts/31625.html</id>
    <published>2020-02-21T08:54:33.000Z</published>
    <updated>2020-02-21T09:10:53.978Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了在Windows使用过程中发现的一些可以提高效率的神器。</p></div><a id="more"></a><h2 id="office插件-officeTab"><a href="#office插件-officeTab" class="headerlink" title="office插件-officeTab"></a>office插件-officeTab</h2><p>在使用word、excel以及ppt的时候经常需要<strong>同时打开等多个文件</strong>，并且<strong>在不同文件之间切换</strong>，然后默认的word、excel以及ppt都不能像浏览器的不同网页一样将不同的文件通过不同的标签显示，这样在<strong>不同文件之间切换就会浪费大量的人力和物力</strong>，所以就有人开发了<a href="https://www.extendoffice.com/product/office-tab.html" target="_blank" rel="noopener">office插件-officeTab</a>，其<strong>支持将不同的文件以标签页的形式展示，方便切换和使用</strong>。</p><p>介绍完功能就下来就是具体使用了，使用起来其实非常方便，只是如果<strong>不花钱购买则只能打开三个标签页</strong>，本人在网上找到一个破解版的资源，具体<a href="http://www.dayanzai.me/office-tab.html" target="_blank" rel="noopener">下载链接</a>。</p><hr><h2 id="资源管理器工具-QTTabBar"><a href="#资源管理器工具-QTTabBar" class="headerlink" title="资源管理器工具-QTTabBar"></a>资源管理器工具-QTTabBar</h2><p>有了前面那个office插件-officeTab的用法和思想，很容易想到<strong>文件资源管理器是不是也可以以标签页的形式打开呢</strong>，答案是肯定的，有人开发了工具<strong>QTTabBar</strong>就是专门做这个事的，具体用法<a href="https://sspai.com/post/52521" target="_blank" rel="noopener">QTTabBar 「资源管理器」该有的样子</a>介绍地很详细，这里就不赘述了。</p><p>关于语言设置，我一直不能按照<a href="https://sspai.com/post/52521" target="_blank" rel="noopener">QTTabBar 「资源管理器」该有的样子</a>刷新出语言列表，所以就在<a href="https://github.com/yfdyh000/QTTabBar_zh-CN" target="_blank" rel="noopener">github上找到了一个repo</a>，实测可用。</p><p>大爱的功能：<strong>双击空白处返回上级目录</strong>。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了在Windows使用过程中发现的一些可以提高效率的神器。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="折腾" scheme="http://showteeth.tech/categories/%E6%8A%98%E8%85%BE/"/>
    
      <category term="工具" scheme="http://showteeth.tech/categories/%E6%8A%98%E8%85%BE/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="神器" scheme="http://showteeth.tech/tags/%E7%A5%9E%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>AWK系列之对行或者列进行累计求和</title>
    <link href="http://showteeth.tech/posts/19529.html"/>
    <id>http://showteeth.tech/posts/19529.html</id>
    <published>2020-02-20T12:16:19.000Z</published>
    <updated>2020-02-20T12:42:02.455Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了<strong>使用awk对行或者列进行累计求和</strong>的方法，包括<strong>对全部的行或者列</strong>，也包括<strong>对指定的行或者列</strong>。</p></div><a id="more"></a><h2 id="示例文件"><a href="#示例文件" class="headerlink" title="示例文件"></a>示例文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat cumsum.txt</span><br><span class="line">  1 2 3 4</span><br><span class="line">  2 5 6 7</span><br><span class="line">  2 3 6 5</span><br><span class="line">  1 2 1 2</span><br></pre></td></tr></table></figure><hr><h2 id="对列进行cumsum"><a href="#对列进行cumsum" class="headerlink" title="对列进行cumsum"></a>对列进行cumsum</h2><h3 id="对所有的列进行cumsum"><a href="#对所有的列进行cumsum" class="headerlink" title="对所有的列进行cumsum"></a>对所有的列进行cumsum</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;for(i=1;i&lt;=NF;i++)&#123;sum[i]+=$i;$i=sum[i]&#125;;print $0&#125;'</span> cumsum.txt</span><br><span class="line">  1 2 3 4</span><br><span class="line">  3 7 9 11</span><br><span class="line">  5 10 15 16</span><br><span class="line">  6 12 16 18</span><br></pre></td></tr></table></figure><hr><h3 id="对指定列进行cumsum"><a href="#对指定列进行cumsum" class="headerlink" title="对指定列进行cumsum"></a>对指定列进行cumsum</h3><p>按照上面的思路，如果想<strong>对指定列进行cumsum，其他列直接输出</strong>，可以增加一个判断语句：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅对第二列进行cumsum</span></span><br><span class="line">awk <span class="string">'&#123; for (i=1; i&lt;=NF; ++i) &#123; if(i==2)&#123;sum[i]+=$i; $i=sum[i]&#125; &#125;; print $0&#125;'</span> cumsum.txt</span><br><span class="line">  1 2 3 4</span><br><span class="line">  2 7 6 7</span><br><span class="line">  2 10 6 5</span><br><span class="line">  1 12 1 2</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="对行进行cumsum"><a href="#对行进行cumsum" class="headerlink" title="对行进行cumsum"></a>对行进行cumsum</h2><h3 id="对所有的行进行cumsum"><a href="#对所有的行进行cumsum" class="headerlink" title="对所有的行进行cumsum"></a>对所有的行进行cumsum</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;for(i=1;i&lt;=NF;i++)&#123;sum+=$i;$i=sum&#125;;print $0;sum=0&#125;'</span> cumsum.txt</span><br><span class="line">  1 3 6 10</span><br><span class="line">  2 7 13 20</span><br><span class="line">  2 5 11 16</span><br><span class="line">  1 3 4 6</span><br></pre></td></tr></table></figure><hr><h3 id="对指定行进行cumsum"><a href="#对指定行进行cumsum" class="headerlink" title="对指定行进行cumsum"></a>对指定行进行cumsum</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只对第二行进行cumsum</span></span><br><span class="line">awk <span class="string">'&#123;for(i=1;i&lt;=NF;i++)&#123;if(NR==2)&#123;sum+=$i;$i=sum&#125;&#125;;print $0;sum=0&#125;'</span> cumsum.txt</span><br><span class="line">  1 2 3 4</span><br><span class="line">  2 7 13 20</span><br><span class="line">  2 3 6 5</span><br><span class="line">  1 2 1 2</span><br></pre></td></tr></table></figure><hr><h3 id="截止到指定列"><a href="#截止到指定列" class="headerlink" title="截止到指定列"></a>截止到指定列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对每一行，累加到第三列</span></span><br><span class="line">awk <span class="string">'&#123;for(i=1;i&lt;=NF;i++)&#123;if(i&lt;=3)&#123;sum+=$i;$i=sum&#125;&#125;;print $0;sum=0&#125;'</span> cumsum.txt</span><br><span class="line">  1 3 6 4</span><br><span class="line">  2 7 13 7</span><br><span class="line">  2 5 11 5</span><br><span class="line">  1 3 4 2</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/48447694/awk-cumulative-sum-in-on-dimension" target="_blank" rel="noopener">awk cumulative sum in on dimension</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了&lt;strong&gt;使用awk对行或者列进行累计求和&lt;/strong&gt;的方法，包括&lt;strong&gt;对全部的行或者列&lt;/strong&gt;，也包括&lt;strong&gt;对指定的行或者列&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="AWK" scheme="http://showteeth.tech/categories/Linux/AWK/"/>
    
    
      <category term="AWK" scheme="http://showteeth.tech/tags/AWK/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之h5py-处理HDF5文件</title>
    <link href="http://showteeth.tech/posts/59458.html"/>
    <id>http://showteeth.tech/posts/59458.html</id>
    <published>2020-02-19T08:53:24.000Z</published>
    <updated>2020-02-22T06:13:26.763Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章<strong>学习了HDF5文件格式</strong>以及<strong>学习使用Python中的h5py模块来对HDF5文件进行创建/删除分组、数据集以及对属性的设置</strong>等。</p></div><a id="more"></a><h2 id="HDF5文件"><a href="#HDF5文件" class="headerlink" title="HDF5文件"></a>HDF5文件</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>HDF(Hierarchical Data Format)</code>指一种为<strong>存储和处理大容量科学数据设计的文件格式及相应库文件</strong>。<code>HDF</code> 最早由美国国家超级计算应用中心 <code>NCSA</code> 开发，目前在非盈利组织 <code>HDF</code> 小组维护下继续发展。当前流行的版本是 <code>HDF5</code>。<code>HDF5</code> 拥有一系列的优异特性，使其<strong>特别适合进行大量科学数据的存储和操作</strong>，如可存储各种类型的数据、灵活、通用、跨平台、可扩展、高效的 <code>I/O</code> 性能、支持几乎无限量(高达 <code>EB</code>)的单文件存储等，详见其<a href="https://support.hdfgroup.org/HDF5/" target="_blank" rel="noopener">官方</a>介绍，同时<a href="http://www.nsmc.org.cn/NSMC_EN/CMACast/docs/HDF5.0_chinese.pdf" target="_blank" rel="noopener">NSMC也有对其进行介绍(中文版的)</a>。</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/hdf5_overview_1.png" alt="hdf5_overview_1.png"></p><hr><h3 id="HDF5文件组织"><a href="#HDF5文件组织" class="headerlink" title="HDF5文件组织"></a>HDF5文件组织</h3><p>一个HDF5文件就是一个<strong>由两种基本的数据对象存放多种科学数据的容器</strong>，这两种数据对象为：</p><ul><li><code>group</code>：类似<strong>文件系统中目录的作用</strong>，其可以<strong>包含一个或多个 dataset 及其它的 group</strong>，group描述了数据集dataset的分类信息，通过group可以有效地将多种 dataset 进行管理和区分</li><li><code>dataset</code>：<strong>类似文件系统中的文件</strong>，是数据元素的一个<strong>多维数组</strong>，具体的数据信息</li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/hdf5_overview_2.png" alt="hdf5_overview_2.png"></p><p>接着类比文件系统，除了具体的文件和目录之外，文件系统还可以包括一些<strong>属性特征</strong>，如目录是合适创建的、权限如何，文件是合适创建的、权限如何，HDF5文件中对于<code>group</code>和<code>dataset</code>也有这种属性描述，使用的是<code>metadata</code>。</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/hdf5_overview_3.png" alt="hdf5_overview_3.png"></p><p>然后，文件系统中获取文件时需要知道文件的相对或者绝对位置，HDF5文件也是如此，HDF5文件会<strong>从一个名为<code>/(根目录)</code>的<code>group</code>开始</strong>，所有 <code>dataset</code> 和其它 <code>group</code> 都包含在此 <code>group</code> 下，当操作 HDF5 文件时，如果没有显式指定 <code>group</code> 的 <code>dataset</code> 都是默认指 <code>/(根目录)</code> 下的 <code>dataset</code>，另外类似相对文件路径的 <code>group</code> 名字都是相对于 <code>/(根目录)</code> 的。</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/hdf5_overview_4.png" alt="hdf5_overview_4.png"></p><hr><h2 id="使用h5py操作HDF5文件"><a href="#使用h5py操作HDF5文件" class="headerlink" title="使用h5py操作HDF5文件"></a>使用h5py操作HDF5文件</h2><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><p>常规的包的安装方法：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用pip安装</span></span><br><span class="line">pip install h5py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用conda安装</span></span><br><span class="line">conda install h5py</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="打开-创建文件"><a href="#打开-创建文件" class="headerlink" title="打开/创建文件"></a>打开/创建文件</h3><p>HDF5文件和Python标准文件的使用方法类似，都<strong>支持标准的mode</strong>，比如<code>r/w/a</code>，在<strong>不使用的时候也应该进行关闭</strong>，区别是<strong>HDF5文件没有文本和二进制文件的区别</strong>。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">h5py</span>.<span class="title">File</span><span class="params">(name, mode=None, driver=None, libver=None, userblock_size=None, swmr=False, rdcc_nslots=None, rdcc_nbytes=None, rdcc_w0=None, track_order=None, **kwds)</span></span></span><br></pre></td></tr></table></figure><p></p><p>这里列出HDF5文件支持的mode：<br><table><colgroup><col width="14%"><col width="86%"></colgroup><tbody valign="top"><tr class="row-odd"><td>r</td><td>Readonly, file must exist (default)</td></tr><tr class="row-even"><td>r+</td><td>Read/write, file must exist</td></tr><tr class="row-odd"><td>w</td><td>Create file, truncate if exists</td></tr><tr class="row-even"><td>w- or x</td><td>Create file, fail if exists</td></tr><tr class="row-odd"><td>a</td><td>Read/write if exists, create otherwise</td></tr></tbody></table></p><hr><h3 id="操作group"><a href="#操作group" class="headerlink" title="操作group"></a>操作group</h3><h4 id="group简介"><a href="#group简介" class="headerlink" title="group简介"></a>group简介</h4><p>之前介绍HDF5文件的时候说过HDF5文件内部其实类似文件管理系统，在Python中对HDF5文件进行操作类似字典的操作：</p><ul><li>key(键值)：对应于group中成员(包括子group以及dataset)的name</li><li>value：对应于<strong>key中包含的(属于key这个group的)</strong>group或者dataset</li><li>额外的，打开或者创建的HDF5文件还会使用<strong>name属性</strong>来<strong>存储当前key的路径</strong></li></ul><hr><h4 id="创建分组的函数"><a href="#创建分组的函数" class="headerlink" title="创建分组的函数"></a>创建分组的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File.create_group(name, track_order=<span class="keyword">None</span>)</span><br><span class="line">Group.create_group(name, track_order=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>name</code>：创建的group的名称，可以是绝对路径也可以是相对路径</li></ul><hr><h4 id="创建HDF5文件"><a href="#创建HDF5文件" class="headerlink" title="创建HDF5文件"></a>创建HDF5文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新文件用于写操作</span></span><br><span class="line">f = h5py.File(<span class="string">'foo.hdf5'</span>,<span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前group的name，也就是路径</span></span><br><span class="line">f.name</span><br><span class="line">  <span class="string">'/'</span></span><br><span class="line"><span class="comment"># 查看此时的key和value</span></span><br><span class="line">f.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br><span class="line">f.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 file <span class="string">"foo.hdf5"</span> (mode r+)&gt;)</span><br></pre></td></tr></table></figure><hr><h4 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在打开的文件中创建分组bar，默认这个是在/目录下的</span></span><br><span class="line">grp = f.create_group(<span class="string">"bar"</span>)</span><br><span class="line"><span class="comment"># 查看此时grp的路径</span></span><br><span class="line">grp.name</span><br><span class="line">  <span class="string">'/bar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看key和value</span></span><br><span class="line"><span class="comment">## 打开的HDF5文件下面出现了创建的分组bar</span></span><br><span class="line">f.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'bar'</span>]&gt;</span><br><span class="line"><span class="comment">## 打开的文件对象</span></span><br><span class="line">f.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 file <span class="string">"foo.hdf5"</span> (mode r+)&gt;)</span><br><span class="line"><span class="comment">## 新创建的分组还没有子group，所以还是空</span></span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br><span class="line"><span class="comment">## 新创建的分组下面还没有子分组或者dataset</span></span><br><span class="line">grp.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 group <span class="string">"/bar"</span> (<span class="number">0</span> members)&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续创建分组</span></span><br><span class="line">subgrp = grp.create_group(<span class="string">"baz"</span>)</span><br><span class="line">f.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'bar'</span>]&gt;</span><br><span class="line">f.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 file <span class="string">"foo.hdf5"</span> (mode r+)&gt;)</span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'baz'</span>]&gt;</span><br><span class="line"><span class="comment"># 因为grp已经有了子分组，所以value中出现了一个member</span></span><br><span class="line">grp.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 group <span class="string">"/bar"</span> (<span class="number">1</span> members)&gt;)</span><br><span class="line">subgrp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br><span class="line">subgrp.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 group <span class="string">"/bar/baz"</span> (<span class="number">0</span> members)&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以路径的形式创建</span></span><br><span class="line">grp2 = f.create_group(<span class="string">"/some/long/path"</span>)</span><br><span class="line">grp2.name</span><br><span class="line">  /some/long/path</span><br><span class="line"><span class="comment"># 此时的根目录下就有两个分组了</span></span><br><span class="line">f.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'bar'</span>, <span class="string">'some'</span>]&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>keys()中包含的只是当前分组的下级子分组，不会包含下级子分组的子分组，也就是说没有递进关系</strong></li><li><strong>values()中包含的是当前group下的value值，会显示绝对路径</strong></li></ul><hr><h4 id="删除分组"><a href="#删除分组" class="headerlink" title="删除分组"></a>删除分组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'baz'</span>]&gt;</span><br><span class="line"><span class="comment"># 不能直接删除不为空的分组</span></span><br><span class="line"><span class="keyword">del</span> grp[<span class="string">"bar"</span>]</span><br><span class="line">  KeyError: <span class="string">"Couldn't delete link (callback link pointer is NULL (specified link may be '.' or not exist))"</span></span><br><span class="line"><span class="comment"># 删除为空的分组</span></span><br><span class="line"><span class="keyword">del</span> grp[<span class="string">"baz"</span>]</span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="操作dataset"><a href="#操作dataset" class="headerlink" title="操作dataset"></a>操作dataset</h3><h4 id="dataset简介"><a href="#dataset简介" class="headerlink" title="dataset简介"></a>dataset简介</h4><p><strong>HDF5文件中的dataset和numpy的array非常类似</strong>，都可以支持<code>slice</code>操作，并且也拥有<code>shape</code>、<code>size</code>和<code>dtype</code>属性；和numpy数组的区别的，dataset可以有多种存储方式： <code>compression</code>、<code>error-detection</code>以及<code>chunked I/O</code>。</p><p>HDF5文件支持大部分的numpy的dtype，具体地支持的列表见<a href="http://docs.h5py.org/en/latest/high/dataset.html" target="_blank" rel="noopener">FAQ</a></p><hr><h4 id="创建dateset的函数"><a href="#创建dateset的函数" class="headerlink" title="创建dateset的函数"></a>创建dateset的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Group.create_dataset(name, shape=<span class="keyword">None</span>, dtype=<span class="keyword">None</span>, data=<span class="keyword">None</span>, **kwds)</span><br></pre></td></tr></table></figure><ul><li><code>name</code>：需要创建的dataset的名称，可以是相对路径或者绝对路径</li><li><code>shape</code>：以元组形式指定的数据的维度信息</li><li><code>dtype</code>：data的数据类型</li><li><code>data</code>：用于初始化dataset，是numpy array</li></ul><hr><h4 id="创建dataset"><a href="#创建dataset" class="headerlink" title="创建dataset"></a>创建dataset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dset = f.create_dataset(<span class="string">"default"</span>, (<span class="number">100</span>,))</span><br><span class="line">dset = f.create_dataset(<span class="string">"ints"</span>, (<span class="number">100</span>,), dtype=<span class="string">'i8'</span>)</span><br><span class="line"><span class="comment"># 查看HDF5文件的keys和values</span></span><br><span class="line"><span class="comment">## keys中显示的是当前group的所有member的名称，所以子分组和dataset的名称都显示了</span></span><br><span class="line">f.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'bar'</span>, <span class="string">'default'</span>, <span class="string">'ints'</span>, <span class="string">'some'</span>]&gt;</span><br><span class="line">f.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 file <span class="string">"foo.hdf5"</span> (mode r+)&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果重复运行会报错，不会产生覆盖的效果</span></span><br><span class="line">dset = f.create_dataset(<span class="string">"default"</span>, (<span class="number">100</span>,))</span><br><span class="line">  OSError: Unable to create link (name already exists)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接将已经存在的numpy数组传入</span></span><br><span class="line">arr = np.arange(<span class="number">100</span>)</span><br><span class="line">dset = f.create_dataset(<span class="string">"init"</span>, data=arr)</span><br><span class="line">dset </span><br><span class="line">  &lt;HDF5 dataset <span class="string">"init"</span>: shape (<span class="number">100</span>,), type <span class="string">"&lt;i8"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对分组创建</span></span><br><span class="line">grp.create_dataset(<span class="string">"init"</span>, data=arr)</span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'baz'</span>, <span class="string">'init'</span>]&gt;</span><br><span class="line"><span class="comment"># 2个member，分别是子分组以及init数据集</span></span><br><span class="line">grp.values()</span><br><span class="line">  ValuesViewHDF5(&lt;HDF5 group <span class="string">"/bar"</span> (<span class="number">2</span> members)&gt;)</span><br></pre></td></tr></table></figure><p>也可以和字典一样直接创建：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grp[<span class="string">'data1'</span>] = np.random.rand(<span class="number">100</span>, <span class="number">1000</span>) - <span class="number">0.5</span></span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'init'</span>, <span class="string">'init2'</span>]&gt;</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="dataset的读写"><a href="#dataset的读写" class="headerlink" title="dataset的读写"></a>dataset的读写</h4><p>dataset的读写支持<code>slice</code>操作，主要识别的<code>slice</code>有以下几种：</p><ul><li><strong>索引</strong></li><li><code>slices</code>，如<code>[:]</code></li><li>字段名称(in the case of <strong>compound data</strong>)</li><li>最多一个的<code>Ellipsis(...)</code>对象</li><li>空的元组<code>()</code>用于<strong>得到所有的数据</strong></li><li><a href="http://docs.h5py.org/en/latest/high/dataset.html#dataset-fancy" target="_blank" rel="noopener">其他的Fancy indexing</a></li></ul><p>另外<code>dataset</code>还有<code>name</code>和<code>value</code>属性，其中<code>name</code>返回<code>dataset</code>的路径，而<code>value</code>返回所有值(用法和空元组相同)</p><h5 id="dataset读取"><a href="#dataset读取" class="headerlink" title="dataset读取"></a>dataset读取</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建多维数组</span></span><br><span class="line">arr2=np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 创建dataset</span></span><br><span class="line">dset = f.create_dataset(<span class="string">"MyDataSet"</span>, (<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>), <span class="string">'f'</span>,data=arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据集特征</span></span><br><span class="line">dset.shape</span><br><span class="line">  (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">dset.size</span><br><span class="line">  <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据集路径</span></span><br><span class="line">dset.name</span><br><span class="line">  /MyDataSet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用空白元组查看所有内容</span></span><br><span class="line">dset[()]</span><br><span class="line">  array([[[<span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">          [<span class="number">2.</span>, <span class="number">3.</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">4.</span>, <span class="number">5.</span>],</span><br><span class="line">          [<span class="number">6.</span>, <span class="number">7.</span>]]], dtype=float32)</span><br><span class="line"><span class="comment"># 使用属性获取</span></span><br><span class="line">dset.value</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">f[<span class="string">'MyDataSet'</span>].value</span><br><span class="line">  array([[[<span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">          [<span class="number">2.</span>, <span class="number">3.</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">4.</span>, <span class="number">5.</span>],</span><br><span class="line">          [<span class="number">6.</span>, <span class="number">7.</span>]]], dtype=float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用索引位置查看元素</span></span><br><span class="line">dset[<span class="number">0</span>]</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">3.</span>]], dtype=float32)</span><br><span class="line">dset[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">  array([<span class="number">0.</span>, <span class="number">1.</span>], dtype=float32)</span><br><span class="line">dset[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">  <span class="number">0.0</span></span><br><span class="line">dset[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">  <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用slice查看</span></span><br><span class="line">dset[<span class="number">0</span>,<span class="number">1</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">  array([[<span class="number">2.</span>, <span class="number">3.</span>]], dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Ellipsis(...)</span></span><br><span class="line"><span class="comment">##这里等同于dset[0]</span></span><br><span class="line">dset[<span class="number">0</span>,...]</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">3.</span>]], dtype=float32)</span><br><span class="line"></span><br><span class="line">dset[...,<span class="number">1</span>]</span><br><span class="line">  array([[<span class="number">1.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">5.</span>, <span class="number">7.</span>]], dtype=float32)</span><br></pre></td></tr></table></figure><p><strong>字典风格使用</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到一个空的分组</span></span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">dset=grp.create_dataset(<span class="string">"init"</span>, data=arr)</span><br><span class="line">dset2=grp.create_dataset(<span class="string">"init2"</span>, data=arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典风格</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> grp.keys():</span><br><span class="line">    print(grp[key].name)</span><br><span class="line">    print(grp[key].value)</span><br><span class="line">  <span class="comment"># 输出数据路径</span></span><br><span class="line">  /bar/init</span><br><span class="line">  <span class="comment"># 输出具体的数据集</span></span><br><span class="line">  [ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span></span><br><span class="line">  <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">35</span> <span class="number">36</span> <span class="number">37</span> <span class="number">38</span> <span class="number">39</span> <span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span> <span class="number">44</span> <span class="number">45</span> <span class="number">46</span> <span class="number">47</span></span><br><span class="line">  <span class="number">48</span> <span class="number">49</span> <span class="number">50</span> <span class="number">51</span> <span class="number">52</span> <span class="number">53</span> <span class="number">54</span> <span class="number">55</span> <span class="number">56</span> <span class="number">57</span> <span class="number">58</span> <span class="number">59</span> <span class="number">60</span> <span class="number">61</span> <span class="number">62</span> <span class="number">63</span> <span class="number">64</span> <span class="number">65</span> <span class="number">66</span> <span class="number">67</span> <span class="number">68</span> <span class="number">69</span> <span class="number">70</span> <span class="number">71</span></span><br><span class="line">  <span class="number">72</span> <span class="number">73</span> <span class="number">74</span> <span class="number">75</span> <span class="number">76</span> <span class="number">77</span> <span class="number">78</span> <span class="number">79</span> <span class="number">80</span> <span class="number">81</span> <span class="number">82</span> <span class="number">83</span> <span class="number">84</span> <span class="number">85</span> <span class="number">86</span> <span class="number">87</span> <span class="number">88</span> <span class="number">89</span> <span class="number">90</span> <span class="number">91</span> <span class="number">92</span> <span class="number">93</span> <span class="number">94</span> <span class="number">95</span></span><br><span class="line">  <span class="number">96</span> <span class="number">97</span> <span class="number">98</span> <span class="number">99</span>]</span><br><span class="line">  /bar/init2</span><br><span class="line">  [[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line">    [<span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">  [[<span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">    [<span class="number">6</span> <span class="number">7</span>]]]</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 注意分组并没有value属性，所以存在分组的话就不能这么用</span></span><br></pre></td></tr></table></figure><p></p><hr><h5 id="dataset修改"><a href="#dataset修改" class="headerlink" title="dataset修改"></a>dataset修改</h5><p>修改dataset值的时候需要注意和numpy array的区别：<strong>就是不能使用多重索引来修改dataset中的值，在numpy array中却可以。原因是在dataset中，index一次之后就会将得到的array加载到memory中，所以再进行一次index就不会对原始的dataset进行修改了。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新的数据集</span></span><br><span class="line">dset = f.create_dataset(<span class="string">"Test"</span>, (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">dset[()]</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]], dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用多重索引修改值</span></span><br><span class="line">dset[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">3.0</span></span><br><span class="line"><span class="comment"># dataset中的值并没有改变</span></span><br><span class="line">dset[()]</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]], dtype=float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是numpy的数组</span></span><br><span class="line">arr3=np.zeros((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">arr3</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]])</span><br><span class="line"><span class="comment"># 多重索引修改值</span></span><br><span class="line">arr3[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">3.0</span></span><br><span class="line">arr3</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]])      </span><br><span class="line"></span><br><span class="line"><span class="comment"># dataset正确的做法</span></span><br><span class="line">dset[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">3.0</span></span><br><span class="line">dset[()]</span><br><span class="line">  array([[<span class="number">0.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>]], dtype=float32)</span><br></pre></td></tr></table></figure><p>dataset不能使用多重索引(<code>dset[0][1]</code>)来修改值，但是numpy的array却可以；两者都可以使用单层索引来修改值。</p><hr><h4 id="删除dataset"><a href="#删除dataset" class="headerlink" title="删除dataset"></a>删除dataset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 [<span class="string">'init'</span>]&gt;</span><br><span class="line"><span class="comment"># 删除dateset</span></span><br><span class="line"><span class="keyword">del</span> grp[<span class="string">'init'</span>]</span><br><span class="line">grp.keys()</span><br><span class="line">  &lt;KeysViewHDF5 []&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="操作attribute"><a href="#操作attribute" class="headerlink" title="操作attribute"></a>操作attribute</h3><p>attribute是metadata的具体形式，<strong>group和dataset都可以添加attribute</strong>，添加的attribute存储在<code>group/dataset.attrs</code>中，我们可以像操作字典一样操作<code>group/dataset.attrs</code>。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加</span></span><br><span class="line">grp.attrs[<span class="string">'a'</span>]=<span class="string">'xyz'</span></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">grp.attrs[<span class="string">'a'</span>]</span><br><span class="line">  <span class="string">'xyz'</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://wenku.baidu.com/view/60ab43cb102de2bd960588c0.html?from=search" target="_blank" rel="noopener">HDF5 Tutorial</a></li><li><a href="http://docs.h5py.org/en/latest/quick.html" target="_blank" rel="noopener">h5py official doc</a></li><li><a href="https://zhuanlan.zhihu.com/p/34405536" target="_blank" rel="noopener">当Python遇上HDF5–性能优化实战</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章&lt;strong&gt;学习了HDF5文件格式&lt;/strong&gt;以及&lt;strong&gt;学习使用Python中的h5py模块来对HDF5文件进行创建/删除分组、数据集以及对属性的设置&lt;/strong&gt;等。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之collections-内建的集合模块</title>
    <link href="http://showteeth.tech/posts/46959.html"/>
    <id>http://showteeth.tech/posts/46959.html</id>
    <published>2020-02-18T13:23:40.000Z</published>
    <updated>2020-02-18T13:31:08.392Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这里写摘要，显示更好看</p></div><a id="more"></a><h2 id="开始于二级标题"><a href="#开始于二级标题" class="headerlink" title="开始于二级标题"></a>开始于二级标题</h2><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这里写摘要，显示更好看&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之tqdm-显示运行进度条</title>
    <link href="http://showteeth.tech/posts/32350.html"/>
    <id>http://showteeth.tech/posts/32350.html</id>
    <published>2020-02-18T13:18:04.000Z</published>
    <updated>2020-02-19T07:32:31.687Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<code>Python</code>中显示程序运行进度条的模块-<code>tqdm</code>，使用时可以<strong>将任意可迭代对象传入模块用于制作进度条</strong>，并且可以<strong>通过参数来静态或者动态的控制进度条前后的输出信息</strong>；同时其也<strong>针对<code>pandas</code>中常用的<code>apply</code>和<code>map</code>函数配置了专门的可以显示进度条的函数来替换</strong>；其<strong>也可以嵌入其他模块和工具</strong>，如<code>jupyter</code>中，使用非常方便。</p></div><a id="more"></a><h2 id="tqdm简介"><a href="#tqdm简介" class="headerlink" title="tqdm简介"></a>tqdm简介</h2><p>在运行较大程序的时候经常会出现等待程序运行的问题，同时由于时间过程，程序运行如果没有输出可能会出现焦虑的情况，比如想知道程序是不是真的正在运行以及运行到哪一步的，tqdm正是解决这个问题出现的一个模块，其可以显示程序运行的进度信息，盯着进度条比盯着命令行舒服多了。</p><p>当然，如果想自己输出程序的运行进度条，之前的<a href="http://showteeth.tech/posts/38536.html">这篇博客</a>也提到了使用<code>sys.stdout.write</code>配合<code>sys.stdout.flush</code>实现进度条的写法，但是使用比较麻烦，有好用的工具为啥不使用呢！</p><hr><h2 id="对可迭代对象使用"><a href="#对可迭代对象使用" class="headerlink" title="对可迭代对象使用"></a>对可迭代对象使用</h2><p>可以将<strong>任何可迭代对象传入tqdm进行使用</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">text = <span class="string">""</span></span><br><span class="line"><span class="comment"># 列表是可迭代的对象</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> tqdm([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]):</span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br><span class="line">    text = text + char</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为字符串本身就是可迭代对象，所以可以直接使用"abcd"</span></span><br><span class="line"><span class="comment"># 输出结果是相同的</span></span><br><span class="line">text = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> tqdm(<span class="string">"abcd"</span>):</span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br><span class="line">    text = text + char</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100%|██████████| 4/4 [00:01&lt;00:00,  3.98it/s]</span><br></pre></td></tr></table></figure><p></p><p>对于<code>range</code>，<code>tqdm</code>专门有一个函数为<code>trange</code>，相当于是<code>tqdm(range(i))</code>的简写：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">100</span>):</span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure><p></p><p>还可以<strong>手动设置进度条前显示的内容(可以直接在tqdm中进行设置)</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pbar = tqdm([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>])</span><br><span class="line"><span class="comment"># 自定义的信息，可以随着处理的过程而改变</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> pbar:</span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br><span class="line">    <span class="comment"># 输出的进度条前会显示处理的信息</span></span><br><span class="line">    pbar.set_description(<span class="string">"Processing %s"</span> % char)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置固定的信息</span></span><br><span class="line">pbar = tqdm([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>])</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> pbar:</span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br><span class="line">    <span class="comment"># 使用desc参数来设置固定的信息</span></span><br><span class="line">    pbar.set_description(desc=<span class="string">"Processing"</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 不使用set_description，直接在tqdm中设置</span></span><br><span class="line">pbar = tqdm([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>],desc=<span class="string">"Processing"</span>)</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> pbar:</span><br><span class="line">    time.sleep(<span class="number">0.25</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随着处理信息改变而改变</span></span><br><span class="line">Processing d: 100%|██████████| 4/4 [00:01&lt;00:00,  3.97it/s]s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 固定的输出文字</span></span><br><span class="line">Processing: 100%|██████████| 4/4 [00:01&lt;00:00,  3.97it/s]</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="嵌套到pandas中进行使用"><a href="#嵌套到pandas中进行使用" class="headerlink" title="嵌套到pandas中进行使用"></a>嵌套到pandas中进行使用</h2><p>主要针对的是<code>pandas</code>中的<code>apply(datframe)</code>和<code>map(series)</code>函数：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建dataframe</span></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">100</span>, (<span class="number">100000</span>, <span class="number">6</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入pandas.progress_apply来代替原始的pandas.apply以及pandas.Series.map_apply来代替pandas.Series.map</span></span><br><span class="line"><span class="comment"># 后面直接使用这两个函数而不是单独的apply和map</span></span><br><span class="line"><span class="comment"># Register `pandas.progress_apply` and `pandas.Series.map_apply` with `tqdm`</span></span><br><span class="line"><span class="comment"># (can use `tqdm.gui.tqdm`, `tqdm.notebook.tqdm`, optional kwargs, etc.)</span></span><br><span class="line">tqdm.pandas(desc=<span class="string">"my bar!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now you can use `progress_apply` instead of `apply`</span></span><br><span class="line"><span class="comment"># and `progress_map` instead of `map`</span></span><br><span class="line">df.progress_apply(<span class="keyword">lambda</span> x: x**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my bar!: 100%|██████████| 6/6 [00:00&lt;00:00, 42.52it/s]</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><h3 id="设置信息输出"><a href="#设置信息输出" class="headerlink" title="设置信息输出"></a>设置信息输出</h3><p>前面提到了可以在<code>tqdm</code>中设置<code>desc</code>参数(静态的信息，不随程序运行改变)或者是使用<code>set_description</code>(可以是动态的信息，也可以是静态的信息)的方式<strong>在进度条前设置信息输出</strong>，这里可以使用<code>set_postfix</code>来设置进度条后的信息(<strong>可以是动态变化的信息，也可以是固定不变的信息</strong>)：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm, trange</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random, randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> trange(<span class="number">10</span>) <span class="keyword">as</span> t:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">        <span class="comment"># 动态变化的信息，显示在进度条的左侧</span></span><br><span class="line">        t.set_description(<span class="string">'GEN %i'</span> % i)</span><br><span class="line">        <span class="comment"># Postfix设置的信息会显示在进度条的右侧</span></span><br><span class="line">        <span class="comment"># formatted automatically based on argument's datatype</span></span><br><span class="line">        t.set_postfix(loss=random(), gen=randint(<span class="number">1</span>,<span class="number">999</span>), str=<span class="string">'h'</span>,</span><br><span class="line">                      lst=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GEN 9: 100%|██████████| 10/10 [00:01&lt;00:00,  9.71it/s, gen=185, loss=0.975, lst=[1, 2], str=h]</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/tqdm/tqdm#usage" target="_blank" rel="noopener">github的manual</a></li><li><a href="https://lorexxar.cn/2016/07/21/python-tqdm/" target="_blank" rel="noopener">源码解析和参数说明-python tqdm模块分析</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;code&gt;Python&lt;/code&gt;中显示程序运行进度条的模块-&lt;code&gt;tqdm&lt;/code&gt;，使用时可以&lt;strong&gt;将任意可迭代对象传入模块用于制作进度条&lt;/strong&gt;，并且可以&lt;strong&gt;通过参数来静态或者动态的控制进度条前后的输出信息&lt;/strong&gt;；同时其也&lt;strong&gt;针对&lt;code&gt;pandas&lt;/code&gt;中常用的&lt;code&gt;apply&lt;/code&gt;和&lt;code&gt;map&lt;/code&gt;函数配置了专门的可以显示进度条的函数来替换&lt;/strong&gt;；其&lt;strong&gt;也可以嵌入其他模块和工具&lt;/strong&gt;，如&lt;code&gt;jupyter&lt;/code&gt;中，使用非常方便。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之面向对象编程</title>
    <link href="http://showteeth.tech/posts/56428.html"/>
    <id>http://showteeth.tech/posts/56428.html</id>
    <published>2020-02-18T13:14:36.000Z</published>
    <updated>2020-02-19T07:25:03.232Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这里写摘要，显示更好看</p></div><a id="more"></a><h2 id="开始于二级标题"><a href="#开始于二级标题" class="headerlink" title="开始于二级标题"></a>开始于二级标题</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这里写摘要，显示更好看&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>R系列之指定加载包的路径</title>
    <link href="http://showteeth.tech/posts/44952.html"/>
    <id>http://showteeth.tech/posts/44952.html</id>
    <published>2020-02-10T07:54:47.000Z</published>
    <updated>2020-02-18T09:56:02.298Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了在安装了<code>Rstudio server</code>之后个人用户如何<strong>使用conda将包安装在虚拟环境的目录</strong>，并<strong>将这个目录添加到R的包加载路径</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在集群上安装了<code>Rstudio server</code>，公共包使用root安装，自己需要的包会安装在自己目录下。这样的话有些非常难安装的包如果使用各种安装方法都不能正确安装的话可以尝试创建和root下的R版本相同的R虚拟环境，然后在里面使用conda安装R包，安装完成后将其转移到实际使用的R包加载路径。每次转移包虽然是可行的，但是更为方便的做法是将虚拟环境的R包安装路径添加到实际使用的R的包加载路径中，这样就会方便很多，不用担心依赖包的转移问题。</p><h2 id="暂时的方法"><a href="#暂时的方法" class="headerlink" title="暂时的方法"></a>暂时的方法</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认的R包加载路径</span></span><br><span class="line">.libPaths()</span><br><span class="line">  <span class="comment"># 自己安装的R包的加载路径</span></span><br><span class="line">  [<span class="number">1</span>] <span class="string">"/home/user/R/x86_64-conda_cos6-linux-gnu-library/3.5"</span></span><br><span class="line">  <span class="comment"># 公共包的加载路径</span></span><br><span class="line">  [<span class="number">2</span>] <span class="string">"/home/softwares/anaconda3/envs/r351/lib/R/library"</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加R包的加载路径</span></span><br><span class="line">.libPaths(c(.libPaths(),<span class="string">'/home/user/anaconda3/envs/r-reticulate/lib/R/library'</span>))</span><br><span class="line">.libPaths()</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"/home/user/R/x86_64-conda_cos6-linux-gnu-library/3.5"</span></span><br><span class="line">  [<span class="number">2</span>] <span class="string">"/home/softwares/anaconda3/envs/r351/lib/R/library"</span>         </span><br><span class="line">  [<span class="number">3</span>] <span class="string">"/home/user/anaconda3/envs/r-reticulate/lib/R/library"</span></span><br></pre></td></tr></table></figure><hr><h2 id="永久的办法"><a href="#永久的办法" class="headerlink" title="永久的办法"></a>永久的办法</h2><h3 id="查看当前设置"><a href="#查看当前设置" class="headerlink" title="查看当前设置"></a>查看当前设置</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Sys.getenv()</span><br><span class="line">  CLICOLOR_FORCE               <span class="number">1</span></span><br><span class="line">  DISPLAY                      :<span class="number">0</span></span><br><span class="line">  EDITOR                       vi</span><br><span class="line">  GIT_ASKPASS                  rpostback-askpass</span><br><span class="line">  HOME                         /home/songyabing</span><br><span class="line">  LANG                         en_US.UTF-<span class="number">8</span></span><br><span class="line">  LD_LIBRARY_PATH              /home/softwares/anaconda3/envs/r351/lib/R/lib:</span><br><span class="line">  <span class="keyword">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中和安装包路径相关的设置R_LIBS_SITE、R_LIBS_USER  </span></span><br><span class="line">Sys.getenv()[ grep(<span class="string">"LIB|PATH"</span>, names(Sys.getenv())) ]</span><br><span class="line">  LD_LIBRARY_PATH              /home/softwares/anaconda3/envs/r351/lib/R/lib:</span><br><span class="line">  PATH                         /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin</span><br><span class="line">  <span class="comment"># 这个</span></span><br><span class="line">  R_LIBS_SITE                  </span><br><span class="line">  <span class="comment"># 还有这个</span></span><br><span class="line">  R_LIBS_USER                  ~/R/x86_64-conda_cos6-linux-gnu-<span class="keyword">library</span>/<span class="number">3.5</span></span><br><span class="line">  RMARKDOWN_MATHJAX_PATH       /usr/lib/rstudio-server/resources/mathjax-<span class="number">26</span></span><br><span class="line">  RS_RPOSTBACK_PATH            /usr/lib/rstudio-server/bin/rpostback</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line">Sys.setenv(JAVA_HOME=<span class="string">"/root/usr/Java/jre1.8.0_91"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="设置-Renviron"><a href="#设置-Renviron" class="headerlink" title="设置.Renviron"></a>设置.Renviron</h3><p>在家目录(<code>~</code>)下的<code>.Renviron</code>文件(如果没有就新建一个)中添加如下内容：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个路径之间使用:分割</span></span><br><span class="line">R_LIBS_USER=/home/user/R/x86_64-conda_cos6-linux-gnu-<span class="keyword">library</span>/<span class="number">3.5</span>:/home/user/anaconda3/envs/r-reticulate/lib/R/<span class="keyword">library</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://inneka.com/programming/r/change-r-default-library-path-using-libpaths-in-rprofile-site-fails-to-work/" target="_blank" rel="noopener">Change R default library path using .libPaths in Rprofile.site fails to work</a></li><li><a href="https://stackoverflow.com/questions/15170399/change-r-default-library-path-using-libpaths-in-rprofile-site-fails-to-work" target="_blank" rel="noopener">Change R default library path using .libPaths in Rprofile.site fails to work</a></li><li><a href="https://blog.revolutionanalytics.com/2015/11/r-projects.html" target="_blank" rel="noopener">Best practices for handling packages in R projects</a></li><li><a href="https://superuser.com/questions/749283/change-rstudio-library-path-at-home-directory" target="_blank" rel="noopener">Change RStudio library path at home directory</a></li><li><a href="https://stackoverflow.com/questions/31707941/how-do-i-change-the-default-library-path-for-r-packages/42643674" target="_blank" rel="noopener">How do I change the default library path for R packages</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了在安装了&lt;code&gt;Rstudio server&lt;/code&gt;之后个人用户如何&lt;strong&gt;使用conda将包安装在虚拟环境的目录&lt;/strong&gt;，并&lt;strong&gt;将这个目录添加到R的包加载路径&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R系列之apply函数家族</title>
    <link href="http://showteeth.tech/posts/15576.html"/>
    <id>http://showteeth.tech/posts/15576.html</id>
    <published>2020-01-31T05:17:35.000Z</published>
    <updated>2020-01-31T14:55:26.323Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<code>R</code>中常用的<code>apply</code>函数家族，主要包括<code>apply</code>(对矩阵、数据框和数组进行行列的操作)、<code>lapply</code>(作用于列表和数据框，对列表中的每个元素进行循环操作；如果是数据框，则是按列进行操作；最终都返回列表)、<code>sapply</code>(<code>lapply</code>的简化版，返回值是向量)、<code>vapply</code>(类似于<code>sapply</code>，提供了可以控制返回值行名的参数)、<code>mapply</code>(相当于多变量的<code>sapply</code>)、<code>tapply</code>(分组的循环运算，相当于group by)、<code>rapply</code>(<code>lapply</code>的递归版本，只会递归到二级列表)等。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>学习<code>R</code>中<code>apply</code>函数的用法主要出于两方面的考虑：一、使用<code>apply</code>函数可以<strong>降低代码量</strong>，二、可以<strong>提高代码的运行效率</strong>，大部分的循环都可以使用<code>apply</code>函数进行替换，而R中的循环操作是基于<code>R</code>语言本身来实现的，而使用<code>apply</code>函数进行的向量操作则是基于<code>C</code>语言的，<code>C</code>语言的计算效率比R语言本身的计算效率要高很多。</p><p>原本打算将<code>apply</code>函数的用法放在<a href="http://showteeth.tech/posts/64361.html">R系列之常用函数集合</a>，但是因为这个函数家族包括的函数众多，包括<code>apply</code>、<code>sapply</code>、<code>tapply</code>、<code>mapply</code>、<code>lapply</code>、<code>apply</code>、<code>vapply</code>、<code>eapply</code>等，所以就在这里单独开一篇文章将进行学习。</p><p>这篇文章主要是基于<a href="http://blog.fens.me/r-apply/" target="_blank" rel="noopener">掌握R语言中的apply函数族</a>的学习和理解。</p><hr><h2 id="apply家族函数简介"><a href="#apply家族函数简介" class="headerlink" title="apply家族函数简介"></a>apply家族函数简介</h2><p><code>apply</code>函数族是<code>R</code>语言中数据处理的一组核心函数，通过使用<code>apply</code>函数，我们可以实现对数据的<strong>循环</strong>、<strong>分组</strong>、<strong>过滤</strong>、<strong>类型控制</strong>等操作。但是，由于在R语言中<code>apply</code>函数与其他语言循环体的处理思路是完全不一样的，所以<code>apply</code>函数族一直是很多R使用者玩不转的一类核心函数。</p><p><code>apply</code>函数<strong>本身就是解决数据循环处理的问题</strong>，为了<strong>面向不同的数据类型</strong>，<strong>不同的返回值</strong>，<code>apply</code>函数组成了一个函数族，包括了<code>8</code>个功能类似的函数。这其中有些函数很相似，有些也不是太一样的。</p><p>下面列出了这8个apply函数家族的函数：<br><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/R_apply_function_family_1.png" alt="R_apply_function_family_1.png"></p><hr><h2 id="apply函数"><a href="#apply函数" class="headerlink" title="apply函数"></a>apply函数</h2><h3 id="apply函数作用"><a href="#apply函数作用" class="headerlink" title="apply函数作用"></a>apply函数作用</h3><p><code>apply</code>函数是<strong>最常用的代替<code>for</code>循环的函数</strong>。<code>apply</code>函数可以对<strong>矩阵</strong>、<strong>数据框</strong>、<strong>数组(二维、多维)</strong>，按<strong>行</strong>或<strong>列</strong>进行循环计算，<strong>对子元素进行迭代</strong>，并<strong>把子元素以参数传递的形式给自定义的FUN函数中</strong>，并以<strong>返回计算结果</strong>。</p><h3 id="apply函数用法及参数"><a href="#apply函数用法及参数" class="headerlink" title="apply函数用法及参数"></a>apply函数用法及参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">Returns a vector or array or list of values obtained by applying a <span class="keyword">function</span> to margins of an array or matrix.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">apply(X, MARGIN, FUN, ...)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>X</code>：<strong>数组</strong>、<strong>矩阵</strong>，如果是<strong>数据框</strong>的话会自动对其进行转换为矩阵</li><li><code>MARGIN</code>：按行计算或按按列计算，<strong>1表示按行</strong>，<strong>2表示按列</strong></li><li><code>FUN</code>：调用的函数名称</li><li><code>…</code>：适用于为函数<code>FUN</code>的提供额外参数。具体的说就是<strong>如果一个函数有多个参数</strong>，那么<code>...</code>就是负责传入<strong>除了第一个参数以外的其他参数</strong></li></ul><hr><h3 id="apply函数的具体使用"><a href="#apply函数的具体使用" class="headerlink" title="apply函数的具体使用"></a>apply函数的具体使用</h3><h4 id="使用内建的函数"><a href="#使用内建的函数" class="headerlink" title="使用内建的函数"></a>使用内建的函数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到一个三行四列的矩阵</span></span><br><span class="line">x&lt;-matrix(<span class="number">1</span>:<span class="number">12</span>,ncol=<span class="number">3</span>)</span><br><span class="line">x</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">5</span>    <span class="number">9</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">6</span>   <span class="number">10</span></span><br><span class="line">  [<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">7</span>   <span class="number">11</span></span><br><span class="line">  [<span class="number">4</span>,]    <span class="number">4</span>    <span class="number">8</span>   <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对矩阵按行求和</span></span><br><span class="line">apply(x,<span class="number">1</span>,sum)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">15</span> <span class="number">18</span> <span class="number">21</span> <span class="number">24</span></span><br><span class="line"><span class="comment"># 对矩阵按列求和</span></span><br><span class="line">apply(x,<span class="number">2</span>,sum)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">10</span> <span class="number">26</span> <span class="number">42</span></span><br></pre></td></tr></table></figure><hr><h4 id="传递其他参数"><a href="#传递其他参数" class="headerlink" title="传递其他参数"></a>传递其他参数</h4><p>参数说明中，<code>...</code>适用于为函数的提供额外参数。具体的说就是如果一个函数有多个参数，那么<code>...</code>就是负责传入除了第一个参数以外的其他参数。比如说<code>sum(..., na.rm = FALSE)</code>，就有一个如何处理<code>na</code>值的参数。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个na值</span></span><br><span class="line">x[<span class="number">1</span>,<span class="number">1</span>]=<span class="literal">NA</span></span><br><span class="line">x</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">  [<span class="number">1</span>,]   <span class="literal">NA</span>    <span class="number">5</span>    <span class="number">9</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">6</span>   <span class="number">10</span></span><br><span class="line">  [<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">7</span>   <span class="number">11</span></span><br><span class="line">  [<span class="number">4</span>,]    <span class="number">4</span>    <span class="number">8</span>   <span class="number">12</span></span><br><span class="line"><span class="comment"># 直接使用apply函数，会因为存在na值而不能正常计算</span></span><br><span class="line">apply(x,<span class="number">1</span>,sum)</span><br><span class="line">  [<span class="number">1</span>] <span class="literal">NA</span> <span class="number">18</span> <span class="number">21</span> <span class="number">24</span></span><br><span class="line"><span class="comment"># 给sum函数传递额外的参数，na.rm=TRUE便可以正常计算</span></span><br><span class="line">apply(x,<span class="number">1</span>,sum,na.rm=<span class="literal">TRUE</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">14</span> <span class="number">18</span> <span class="number">21</span> <span class="number">24</span></span><br></pre></td></tr></table></figure><p></p><hr><h4 id="使用自定义的函数"><a href="#使用自定义的函数" class="headerlink" title="使用自定义的函数"></a>使用自定义的函数</h4><p>计算：让数据框的<code>x1</code>列加1，并计算出<code>x1</code>、<code>x2</code>列的均值<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到数据框</span></span><br><span class="line">x &lt;- cbind(x1 = <span class="number">3</span>, x2 = c(<span class="number">4</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">5</span>))</span><br><span class="line">x</span><br><span class="line">      x1 x2</span><br><span class="line">  [<span class="number">1</span>,]  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">2</span>,]  <span class="number">3</span>  <span class="number">3</span></span><br><span class="line">  [<span class="number">3</span>,]  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  [<span class="number">4</span>,]  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">5</span>,]  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  [<span class="number">6</span>,]  <span class="number">3</span>  <span class="number">3</span></span><br><span class="line">  [<span class="number">7</span>,]  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">8</span>,]  <span class="number">3</span>  <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line">myFUN&lt;- <span class="keyword">function</span>(x, c1, c2) &#123;</span><br><span class="line">  <span class="comment"># 这个相当于函数的返回值</span></span><br><span class="line">  <span class="keyword">return</span>(c(sum(x[c1],<span class="number">1</span>), mean(x[c2])))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用apply</span></span><br><span class="line">apply(x,<span class="number">1</span>,myFUN,c1=<span class="string">'x1'</span>,c2=c(<span class="string">'x1'</span>,<span class="string">'x2'</span>))</span><br><span class="line">       [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>] [,<span class="number">6</span>] [,<span class="number">7</span>] [,<span class="number">8</span>]</span><br><span class="line">  [<span class="number">1</span>,]  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span></span><br><span class="line">  [<span class="number">2</span>,]  <span class="number">3.5</span>    <span class="number">3</span>  <span class="number">2.5</span>    <span class="number">2</span>  <span class="number">2.5</span>    <span class="number">3</span>  <span class="number">3.5</span>    <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要注意的是不管是matrix还是array，都不能通过x['x1']这种方式得到某一列的值</span></span><br><span class="line"><span class="comment"># 但是前面自定义的myFUN中就是这种，因为apply是对每一行进行的循环，matrix和array的每一行都是一个带name的vector</span></span><br><span class="line">x[<span class="number">1</span>,]</span><br><span class="line">  x1 x2 </span><br><span class="line">  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">x[<span class="number">1</span>,][<span class="string">'x1'</span>]</span><br><span class="line">  x1 </span><br><span class="line">  <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以直接使用数字替代</span></span><br><span class="line">apply(x,<span class="number">1</span>,myFUN,c1=<span class="number">1</span>,c2=c(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">       [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>] [,<span class="number">6</span>] [,<span class="number">7</span>] [,<span class="number">8</span>]</span><br><span class="line">  [<span class="number">1</span>,]  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span>  <span class="number">4.0</span>    <span class="number">4</span></span><br><span class="line">  [<span class="number">2</span>,]  <span class="number">3.5</span>    <span class="number">3</span>  <span class="number">2.5</span>    <span class="number">2</span>  <span class="number">2.5</span>    <span class="number">3</span>  <span class="number">3.5</span>    <span class="number">4</span></span><br><span class="line">x[<span class="number">1</span>,][<span class="number">1</span>]</span><br><span class="line">  x1 </span><br><span class="line">  <span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><h4 id="关于计算效率"><a href="#关于计算效率" class="headerlink" title="关于计算效率"></a>关于计算效率</h4><p>对于上面的问题可以使用三种方法解决，这里比较三种方法的耗时：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># R语言内置的向量计算</span></span><br><span class="line">data.frame(x1=x[,<span class="number">1</span>]+<span class="number">1</span>,x2=rowMeans(x))</span><br><span class="line">    x1  x2</span><br><span class="line">  <span class="number">1</span>  <span class="number">4</span> <span class="number">3.5</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">4</span> <span class="number">3.0</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">4</span> <span class="number">2.5</span></span><br><span class="line">  <span class="number">4</span>  <span class="number">4</span> <span class="number">2.0</span></span><br><span class="line">  <span class="number">5</span>  <span class="number">4</span> <span class="number">2.5</span></span><br><span class="line">  <span class="number">6</span>  <span class="number">4</span> <span class="number">3.0</span></span><br><span class="line">  <span class="number">7</span>  <span class="number">4</span> <span class="number">3.5</span></span><br><span class="line">  <span class="number">8</span>  <span class="number">4</span> <span class="number">4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环</span></span><br><span class="line"><span class="comment">## 定义一个结果的数据框</span></span><br><span class="line">df&lt;-data.frame()</span><br><span class="line"><span class="comment">## 定义for循环</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:nrow(x))&#123;</span><br><span class="line">  row&lt;-x[i,]                                         <span class="comment"># 每行的值</span></span><br><span class="line">  df&lt;-rbind(df,rbind(c(sum(row[<span class="number">1</span>],<span class="number">1</span>), mean(row))))   <span class="comment"># 计算，并赋值到结果数据框</span></span><br><span class="line">  &#125;</span><br><span class="line">df</span><br><span class="line">    V1  V2</span><br><span class="line">  <span class="number">1</span>  <span class="number">4</span> <span class="number">3.5</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">4</span> <span class="number">3.0</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">4</span> <span class="number">2.5</span></span><br><span class="line">  <span class="number">4</span>  <span class="number">4</span> <span class="number">2.0</span></span><br><span class="line">  <span class="number">5</span>  <span class="number">4</span> <span class="number">2.5</span></span><br><span class="line">  <span class="number">6</span>  <span class="number">4</span> <span class="number">3.0</span></span><br><span class="line">  <span class="number">7</span>  <span class="number">4</span> <span class="number">3.5</span></span><br><span class="line">  <span class="number">8</span>  <span class="number">4</span> <span class="number">4.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较效率</span></span><br><span class="line">rm(list=ls())</span><br><span class="line"><span class="comment">## 封装fun1-&gt;使用apply进行计算</span></span><br><span class="line">fun1&lt;-<span class="keyword">function</span>(x)&#123;</span><br><span class="line">  myFUN&lt;- <span class="keyword">function</span>(x, c1, c2) &#123;</span><br><span class="line">    c(sum(x[c1],<span class="number">1</span>), mean(x[c2])) </span><br><span class="line">    &#125;</span><br><span class="line">  apply(x,<span class="number">1</span>,myFUN,c1=<span class="string">'x1'</span>,c2=c(<span class="string">'x1'</span>,<span class="string">'x2'</span>))</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">## 封装fun2-&gt;使用for循环</span></span><br><span class="line">fun2&lt;-<span class="keyword">function</span>(x)&#123;</span><br><span class="line">  df&lt;-data.frame()</span><br><span class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:nrow(x))&#123;</span><br><span class="line">    row&lt;-x[i,]</span><br><span class="line">    df&lt;-rbind(df,rbind(c(sum(row[<span class="number">1</span>],<span class="number">1</span>), mean(row))))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">## 封装fun3-&gt;使用内置的向量运算</span></span><br><span class="line">fun3&lt;-<span class="keyword">function</span>(x)&#123;</span><br><span class="line">  data.frame(x1=x[,<span class="number">1</span>]+<span class="number">1</span>,x2=rowMeans(x))</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">## 生成数据集</span></span><br><span class="line">x &lt;- cbind(x1=<span class="number">3</span>, x2 = c(<span class="number">400</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">500</span>))</span><br><span class="line">system.time(fun1(x))</span><br><span class="line">   user  system elapsed </span><br><span class="line">  <span class="number">0.018</span>   <span class="number">0.000</span>   <span class="number">0.018</span> </span><br><span class="line">system.time(fun2(x))</span><br><span class="line">   user  system elapsed </span><br><span class="line">  <span class="number">0.643</span>   <span class="number">0.000</span>   <span class="number">0.643</span> </span><br><span class="line">system.time(fun3(x))</span><br><span class="line">   user  system elapsed </span><br><span class="line">  <span class="number">0.002</span>   <span class="number">0.000</span>   <span class="number">0.002</span></span><br></pre></td></tr></table></figure><p></p><p>从耗时结果来看，用<strong>for循环实现的计算是耗时最长的</strong>，<strong>apply实现的循环耗时很短</strong>，而<strong>直接使用R语言内置的向量计算的操作几乎不耗时</strong>。通过上面的测试，<mark>对同一个计算来说，优先考虑R语言内置的向量计算，必须要用到循环时则使用apply函数，应该尽量避免显示的使用for,while等操作方法。</mark></p><hr><p><br></p><h2 id="lapply函数"><a href="#lapply函数" class="headerlink" title="lapply函数"></a>lapply函数</h2><h3 id="lapply函数作用"><a href="#lapply函数作用" class="headerlink" title="lapply函数作用"></a>lapply函数作用</h3><p><code>lapply</code>函数是一个最基础循环操作函数之一，用来对<code>list</code>、<code>data.frame</code>数据集进行循环，并<strong>返回和<code>X</code>长度同样的<code>list</code>结构作为结果集</strong>，通过<code>lapply</code>的开头的第一个字母<code>l</code>就可以判断返回结果集的类型。</p><hr><h3 id="lapply函数用法及参数"><a href="#lapply函数用法及参数" class="headerlink" title="lapply函数用法及参数"></a>lapply函数用法及参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">lapply returns a list of the same length as X, each element of <span class="built_in">which</span> is the result of applying FUN to the corresponding element of X.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">lapply(X, FUN, ...)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>X</code>：<code>list</code>、<code>data.frame</code>数据</li><li><code>FUN</code>：调用的函数名称</li><li><code>...</code>：传递给<code>FUN</code>的<strong>额外参数</strong></li><li>因为<code>list</code>不存在行和列，所以没有<code>MARGIN</code>参数</li></ul><hr><h3 id="lapply函数的具体使用"><a href="#lapply函数的具体使用" class="headerlink" title="lapply函数的具体使用"></a>lapply函数的具体使用</h3><h4 id="处理列表数据"><a href="#处理列表数据" class="headerlink" title="处理列表数据"></a>处理列表数据</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建一个列表</span></span><br><span class="line">x &lt;- list(a = <span class="number">1</span>:<span class="number">10</span>, b = rnorm(<span class="number">6</span>,<span class="number">10</span>,<span class="number">5</span>), c = c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>,<span class="literal">TRUE</span>))</span><br><span class="line">x</span><br><span class="line">  $a</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  $b</span><br><span class="line">  [<span class="number">1</span>] <span class="number">22.7651306</span>  <span class="number">0.6988621</span> <span class="number">15.6552733</span>  <span class="number">7.3638287</span> <span class="number">18.3299545</span>  <span class="number">4.3039968</span></span><br><span class="line"></span><br><span class="line">  $c</span><br><span class="line">  [<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到列表中每个元素的特征数，包括minimum, lower-hinge, median, upper-hinge, maximum</span></span><br><span class="line">lapply(x,fivenum)</span><br><span class="line">  $a</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1.0</span>  <span class="number">3.0</span>  <span class="number">5.5</span>  <span class="number">8.0</span> <span class="number">10.0</span></span><br><span class="line"></span><br><span class="line">  $b</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">0.6988621</span>  <span class="number">4.3039968</span> <span class="number">11.5095510</span> <span class="number">18.3299545</span> <span class="number">22.7651306</span></span><br><span class="line"></span><br><span class="line">  $c</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.5</span> <span class="number">1.0</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure><hr><h4 id="处理dataframe数据"><a href="#处理dataframe数据" class="headerlink" title="处理dataframe数据"></a>处理dataframe数据</h4><p>针对<code>dataframe</code>的数据，<code>lapply</code>会自动<strong>把数据框按列进行分组</strong>，<strong>再进行计算</strong>，<strong>返回的结果仍然是列表</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到数据</span></span><br><span class="line">x &lt;- cbind(x1=<span class="number">3</span>, x2=c(<span class="number">2</span>:<span class="number">1</span>,<span class="number">4</span>:<span class="number">5</span>))</span><br><span class="line">x</span><br><span class="line">        x1 x2</span><br><span class="line">  [<span class="number">1</span>,]  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  [<span class="number">2</span>,]  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">3</span>,]  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">4</span>,]  <span class="number">3</span>  <span class="number">5</span></span><br><span class="line"><span class="comment"># 查看x的数据结构类型</span></span><br><span class="line">class(x)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"matrix"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对dataframe对象执行lapply操作</span></span><br><span class="line">lapply(data.frame(x), sum)</span><br><span class="line">  $x1</span><br><span class="line">  [<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">  $x2</span><br><span class="line">  [<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"><span class="comment"># 返回的类型为列表</span></span><br><span class="line">class(lapply(data.frame(x), sum))</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"list"</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="sapply函数"><a href="#sapply函数" class="headerlink" title="sapply函数"></a>sapply函数</h2><h3 id="sapply函数作用"><a href="#sapply函数作用" class="headerlink" title="sapply函数作用"></a>sapply函数作用</h3><p><code>sapply</code>函数是一个简化版的<code>lapply</code>，<code>sapply</code>增加了2个参数<code>simplify</code>和<code>USE.NAMES</code>，主要就是<strong>让输出看起来更友好</strong>，<strong>返回值为向量</strong>，<strong>而不是list对象</strong>。</p><hr><h3 id="sapply函数参数及用法"><a href="#sapply函数参数及用法" class="headerlink" title="sapply函数参数及用法"></a>sapply函数参数及用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">sapply is a user-friendly version and wrapper of lapply by default returning a vector, matrix or, <span class="keyword">if</span> simplify = <span class="string">"array"</span>, an array <span class="keyword">if</span> appropriate, by applying simplify2array(). sapply(x, f, simplify = FALSE, USE.NAMES = FALSE) is the same as lapply(x, f).</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>X</code>：<code>list</code>、<code>data.frame</code>数据</li><li><code>FUN</code>：调用的函数名称</li><li><code>...</code>：传递给<code>FUN</code>的<strong>额外参数</strong></li><li><code>simplify</code>：是否数组化，当值<code>array</code>时，输出结果按数组进行分组</li><li><code>USE.NAMES</code>：如果<code>X</code>为字符串，<code>TRUE</code>设置字符串为数据名，<code>FALSE</code>不设置</li></ul><hr><h3 id="sapply函数的具体使用"><a href="#sapply函数的具体使用" class="headerlink" title="sapply函数的具体使用"></a>sapply函数的具体使用</h3><h4 id="对dataframe数据"><a href="#对dataframe数据" class="headerlink" title="对dataframe数据"></a>对dataframe数据</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到数据</span></span><br><span class="line">x &lt;- cbind(x1=<span class="number">3</span>, x2=c(<span class="number">2</span>:<span class="number">1</span>,<span class="number">4</span>:<span class="number">5</span>))</span><br><span class="line">x</span><br><span class="line">        x1 x2</span><br><span class="line">  [<span class="number">1</span>,]  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  [<span class="number">2</span>,]  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">3</span>,]  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">4</span>,]  <span class="number">3</span>  <span class="number">5</span></span><br><span class="line"><span class="comment"># 查看x的数据结构类型</span></span><br><span class="line">class(x)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"matrix"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sapply</span></span><br><span class="line">sapply(data.frame(x), sum)</span><br><span class="line">  x1 x2 </span><br><span class="line">  <span class="number">12</span> <span class="number">12</span> </span><br><span class="line"><span class="comment"># 返回结果的数据类型为带name的向量</span></span><br><span class="line">class(sapply(data.frame(x), sum))</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"numeric"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 而之前的lapply返回的是列表数据</span></span><br><span class="line">class(lapply(data.frame(x), sum))</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"list"</span></span><br></pre></td></tr></table></figure><p>如果设置<code>simplify=FALSE</code>和<code>USE.NAMES=FALSE</code>，那么完全<code>sapply</code>函数就等于<code>lapply</code>函数了：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sapply(data.frame(x), sum, simplify=<span class="literal">FALSE</span>, USE.NAMES=<span class="literal">FALSE</span>)</span><br><span class="line">  $x1</span><br><span class="line">  [<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">  $x2</span><br><span class="line">  [<span class="number">1</span>] <span class="number">12</span></span><br></pre></td></tr></table></figure><p></p><p>如果设置了<code>simplify=array</code>，输出结果按数组进行分组：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a&lt;-<span class="number">1</span>:<span class="number">2</span></span><br><span class="line">sapply(a,<span class="keyword">function</span>(x) matrix(x,<span class="number">2</span>,<span class="number">2</span>), simplify=<span class="string">'array'</span>)</span><br><span class="line">  , , <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>]</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">1</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  , , <span class="number">2</span></span><br><span class="line"></span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>]</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况，则自动合并分组</span></span><br><span class="line">sapply(a,<span class="keyword">function</span>(x) matrix(x,<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>]</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">  [<span class="number">3</span>,]    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">  [<span class="number">4</span>,]    <span class="number">1</span>    <span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><hr><h4 id="对于字符串数据"><a href="#对于字符串数据" class="headerlink" title="对于字符串数据"></a>对于字符串数据</h4><p>对于字符串的向量，会<strong>自动生成数据名得到带名称的向量</strong>:<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val&lt;-head(letters)</span><br><span class="line">val</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"d"</span> <span class="string">"e"</span> <span class="string">"f"</span></span><br><span class="line"><span class="comment"># 得到带名称的向量</span></span><br><span class="line">sapply(val,paste,USE.NAMES=<span class="literal">TRUE</span>)</span><br><span class="line">    a   b   c   d   e   f </span><br><span class="line">  <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"d"</span> <span class="string">"e"</span> <span class="string">"f"</span> </span><br><span class="line"><span class="comment"># 取消设置向量名称</span></span><br><span class="line">sapply(val,paste,USE.NAMES=<span class="literal">FALSE</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"d"</span> <span class="string">"e"</span> <span class="string">"f"</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="vapply函数"><a href="#vapply函数" class="headerlink" title="vapply函数"></a>vapply函数</h2><h3 id="vapply函数作用"><a href="#vapply函数作用" class="headerlink" title="vapply函数作用"></a>vapply函数作用</h3><p><code>vapply</code>作用类似于<code>sapply</code>，其提供了<code>FUN.VALUE</code>参数，用来控制返回值的行名。</p><hr><h3 id="vapply函数参数及用法"><a href="#vapply函数参数及用法" class="headerlink" title="vapply函数参数及用法"></a>vapply函数参数及用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">vapply is similar to sapply, but has a pre-specified <span class="built_in">type</span> of <span class="built_in">return</span> value, so it can be safer (and sometimes faster) to use.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>X</code>：<code>list</code>、<code>data.frame</code>数据</li><li><code>FUN</code>：调用的函数名称</li><li><code>FUN.VALUE</code>： 定义返回值的行名row.names</li><li><code>...</code>：传递给<code>FUN</code>的<strong>额外参数</strong></li><li><code>USE.NAMES</code>：如果<code>X</code>为字符串，<code>TRUE</code>设置字符串为数据名，<code>FALSE</code>不设置</li></ul><hr><h3 id="vapply函数的具体用法"><a href="#vapply函数的具体用法" class="headerlink" title="vapply函数的具体用法"></a>vapply函数的具体用法</h3><p><code>vapply</code>同样是<strong>对列</strong>进行的运算：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接得到数据框</span></span><br><span class="line">x &lt;- data.frame(cbind(x1=<span class="number">3</span>, x2=c(<span class="number">2</span>:<span class="number">1</span>,<span class="number">4</span>:<span class="number">5</span>)))</span><br><span class="line">x</span><br><span class="line">    x1 x2</span><br><span class="line">  <span class="number">1</span>  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">  <span class="number">4</span>  <span class="number">3</span>  <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置行名，4行分别为a,b,c,d</span></span><br><span class="line">vapply(x,cumsum,FUN.VALUE=c(<span class="string">'a'</span>=<span class="number">0</span>,<span class="string">'b'</span>=<span class="number">0</span>,<span class="string">'c'</span>=<span class="number">0</span>,<span class="string">'d'</span>=<span class="number">0</span>))</span><br><span class="line">    x1 x2</span><br><span class="line">  a  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  b  <span class="number">6</span>  <span class="number">3</span></span><br><span class="line">  c  <span class="number">9</span>  <span class="number">7</span></span><br><span class="line">  d <span class="number">12</span> <span class="number">12</span></span><br><span class="line"><span class="comment"># 不能缺失FUN.VALUE</span></span><br><span class="line">vapply(x,cumsum)</span><br><span class="line">  Error <span class="keyword">in</span> vapply(x, cumsum) : </span><br><span class="line">    argument <span class="string">"FUN.VALUE"</span> is missing, with no default</span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="mapply函数"><a href="#mapply函数" class="headerlink" title="mapply函数"></a>mapply函数</h2><h3 id="mapply函数作用"><a href="#mapply函数作用" class="headerlink" title="mapply函数作用"></a>mapply函数作用</h3><p><code>mapply</code>也是<code>sapply</code>的变形函数，类似多变量的<code>sapply</code>，但是<strong>参数定义有些变化</strong>。<strong>第一参数为自定义的FUN函数</strong>，<strong>第二个参数…可以接收多个数据，作为FUN函数的参数调用</strong>。</p><blockquote><p>Apply a Function to <strong>Multiple</strong> <strong>List</strong> or <strong>Vector</strong> Arguments</p></blockquote><p>具体来说就是：<strong>将多个参数(向量或者列表对应位置的元素作为参数)传递给函数FUN进行计算</strong>。其实大部分使用<code>mapply</code>函数的场景都可以先将向量转换为<code>dataframe</code>，然后再使用<code>apply</code>函数进行操作，但是直接使用<code>mapply</code>可以减少步骤，不用转换为<code>dataframe</code>。</p><hr><h3 id="mapply函数参数及用法"><a href="#mapply函数参数及用法" class="headerlink" title="mapply函数参数及用法"></a>mapply函数参数及用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">mapply is a multivariate version of sapply. mapply applies FUN to the first elements of each ... argument, the second elements, the third elements, and so on. Arguments are recycled <span class="keyword">if</span> necessary.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE,</span><br><span class="line">       USE.NAMES = TRUE)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>FUN</code>: 调用的函数</li><li><code>...</code>: 传递给<code>FUN</code>的<strong>额外参数</strong></li><li><code>MoreArgs</code>: 参数列表</li><li><code>SIMPLIFY</code>: 是否数组化，当值<code>array</code>时，<strong>输出结果按数组进行分组</strong></li><li><code>USE.NAMES</code>: 如果<code>X</code>为<strong>字符串</strong>，<code>TRUE</code>设置字符串为数据名，<code>FALSE</code>不设置</li></ul><hr><h3 id="mapply函数的具体用法"><a href="#mapply函数的具体用法" class="headerlink" title="mapply函数的具体用法"></a>mapply函数的具体用法</h3><p>比较3个向量大小，按索引顺序取较大的值：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">set.seed(<span class="number">1</span>)</span><br><span class="line">x&lt;-<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">y&lt;-<span class="number">5</span>:-<span class="number">4</span></span><br><span class="line">z&lt;-round(runif(<span class="number">10</span>,-<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">x</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line">y</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">5</span>  <span class="number">4</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span> -<span class="number">1</span> -<span class="number">2</span> -<span class="number">3</span> -<span class="number">4</span></span><br><span class="line">z</span><br><span class="line">  [<span class="number">1</span>] -<span class="number">2</span> -<span class="number">1</span>  <span class="number">1</span>  <span class="number">4</span> -<span class="number">3</span>  <span class="number">4</span>  <span class="number">4</span>  <span class="number">2</span>  <span class="number">1</span> -<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按索引顺序取较大的值</span></span><br><span class="line"><span class="comment"># 其实就是将x、y、z三个向量对应位置的值作为参数传递给max函数</span></span><br><span class="line">mapply(max,x,y,z)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">5</span>  <span class="number">4</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用apply</span></span><br><span class="line">df=data.frame(x=x,y=y,z=z)</span><br><span class="line">df</span><br><span class="line">      x  y  z</span><br><span class="line">  <span class="number">1</span>   <span class="number">1</span>  <span class="number">5</span> -<span class="number">2</span></span><br><span class="line">  <span class="number">2</span>   <span class="number">2</span>  <span class="number">4</span> -<span class="number">1</span></span><br><span class="line">  <span class="number">3</span>   <span class="number">3</span>  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  <span class="number">4</span>   <span class="number">4</span>  <span class="number">2</span>  <span class="number">4</span></span><br><span class="line">  <span class="number">5</span>   <span class="number">5</span>  <span class="number">1</span> -<span class="number">3</span></span><br><span class="line">  <span class="number">6</span>   <span class="number">6</span>  <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  <span class="number">7</span>   <span class="number">7</span> -<span class="number">1</span>  <span class="number">4</span></span><br><span class="line">  <span class="number">8</span>   <span class="number">8</span> -<span class="number">2</span>  <span class="number">2</span></span><br><span class="line">  <span class="number">9</span>   <span class="number">9</span> -<span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  <span class="number">10</span> <span class="number">10</span> -<span class="number">4</span> -<span class="number">4</span></span><br><span class="line"><span class="comment"># 直接使用apply函数得到每行的最大值</span></span><br><span class="line">apply(df,<span class="number">1</span>,max)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">5</span>  <span class="number">4</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p></p><p>生成4个符合正态分布的数据集，分别对应的均值和方差为<code>c(1,10,100,1000)</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set.seed(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 长度为4</span></span><br><span class="line">n&lt;-rep(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m为均值，v为方差</span></span><br><span class="line">m&lt;-v&lt;-c(<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成4组数据，按列分组</span></span><br><span class="line">mapply(rnorm,n,m,v)</span><br><span class="line">            [,<span class="number">1</span>]      [,<span class="number">2</span>]      [,<span class="number">3</span>]       [,<span class="number">4</span>]</span><br><span class="line">  [<span class="number">1</span>,] <span class="number">0.3735462</span> <span class="number">13.295078</span> <span class="number">157.57814</span>   <span class="number">378.7594</span></span><br><span class="line">  [<span class="number">2</span>,] <span class="number">1.1836433</span>  <span class="number">1.795316</span>  <span class="number">69.46116</span> -<span class="number">1214.6999</span></span><br><span class="line">  [<span class="number">3</span>,] <span class="number">0.1643714</span> <span class="number">14.874291</span> <span class="number">251.17812</span>  <span class="number">2124.9309</span></span><br><span class="line">  [<span class="number">4</span>,] <span class="number">2.5952808</span> <span class="number">17.383247</span> <span class="number">138.98432</span>   <span class="number">955.0664</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="tapply函数"><a href="#tapply函数" class="headerlink" title="tapply函数"></a>tapply函数</h2><h3 id="tapply函数的作用"><a href="#tapply函数的作用" class="headerlink" title="tapply函数的作用"></a>tapply函数的作用</h3><p><code>tapply</code>用于<strong>分组的循环计算</strong>，通过<code>INDEX</code>参数可以把数据集<code>X</code>进行分组，相当于<code>group by</code>的操作。</p><blockquote><p>Apply a Function Over a Ragged Array</p></blockquote><hr><h3 id="tapply函数参数及用法"><a href="#tapply函数参数及用法" class="headerlink" title="tapply函数参数及用法"></a>tapply函数参数及用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">Apply a <span class="keyword">function</span> to each cell of a ragged array, that is to each (non-empty) group of values given by a unique combination of the levels of certain factors.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">tapply(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>X</code>: <strong>向量</strong>，注意这里<strong>不是前面的列表、数据框和数组类型</strong></li><li><code>INDEX</code>: 用于分组的索引</li><li><code>FUN</code>: 调用的函数</li><li><code>...</code>: 传递给<code>FUN</code>的<strong>额外参数</strong></li><li><code>simplify</code>: 是否数组化，当值<code>array</code>时，<strong>输出结果按数组进行分组</strong></li></ul><hr><h3 id="tapply函数的具体用法"><a href="#tapply函数的具体用法" class="headerlink" title="tapply函数的具体用法"></a>tapply函数的具体用法</h3><p>计算<strong>不同品种</strong>的鸢尾花的<strong>花瓣(iris)长度的均值</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看示例数据</span></span><br><span class="line">str(iris)</span><br><span class="line">  <span class="string">'data.frame'</span>:<span class="number">150</span> obs. of  <span class="number">5</span> variables:</span><br><span class="line">  $ Sepal.Length: num  <span class="number">5.1</span> <span class="number">4.9</span> <span class="number">4.7</span> <span class="number">4.6</span> <span class="number">5</span> <span class="number">5.4</span> <span class="number">4.6</span> <span class="number">5</span> <span class="number">4.4</span> <span class="number">4.9</span> <span class="keyword">...</span></span><br><span class="line">  $ Sepal.Width : num  <span class="number">3.5</span> <span class="number">3</span> <span class="number">3.2</span> <span class="number">3.1</span> <span class="number">3.6</span> <span class="number">3.9</span> <span class="number">3.4</span> <span class="number">3.4</span> <span class="number">2.9</span> <span class="number">3.1</span> <span class="keyword">...</span></span><br><span class="line">  $ Petal.Length: num  <span class="number">1.4</span> <span class="number">1.4</span> <span class="number">1.3</span> <span class="number">1.5</span> <span class="number">1.4</span> <span class="number">1.7</span> <span class="number">1.4</span> <span class="number">1.5</span> <span class="number">1.4</span> <span class="number">1.5</span> <span class="keyword">...</span></span><br><span class="line">  $ Petal.Width : num  <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.4</span> <span class="number">0.3</span> <span class="number">0.2</span> <span class="number">0.2</span> <span class="number">0.1</span> <span class="keyword">...</span></span><br><span class="line">  $ Species     : Factor w/ <span class="number">3</span> levels <span class="string">"setosa"</span>,<span class="string">"versicolor"</span>,..: <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="keyword">...</span></span><br><span class="line"><span class="comment"># 按照Species进行分组计算Petal.Length的平均值</span></span><br><span class="line">tapply(iris$Petal.Length,iris$Species,mean)</span><br><span class="line">      setosa versicolor  virginica </span><br><span class="line">      <span class="number">1.462</span>      <span class="number">4.260</span>      <span class="number">5.552</span></span><br></pre></td></tr></table></figure><p></p><p>对向量x<strong>以向量t为索引进行分组</strong>求和：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">set.seed(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 定义x,y向量</span></span><br><span class="line">x&lt;-<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">x</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="comment"># 设置分组索引t</span></span><br><span class="line">t&lt;-round(runif(<span class="number">10</span>,<span class="number">1</span>,<span class="number">100</span>)%%<span class="number">2</span>)</span><br><span class="line">t</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 对x进行分组求和</span></span><br><span class="line">tapply(x,t,sum)</span><br><span class="line">  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span> </span><br><span class="line">  <span class="number">8</span> <span class="number">36</span> <span class="number">11</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="rapply函数"><a href="#rapply函数" class="headerlink" title="rapply函数"></a>rapply函数</h2><h3 id="rapply函数作用"><a href="#rapply函数作用" class="headerlink" title="rapply函数作用"></a>rapply函数作用</h3><p><code>rapply</code>是一个<strong>递归版本的<code>lapply</code></strong>，它<strong>只处理list类型数据</strong>，<strong>对list的每个元素进行递归遍历，如果list包括子元素则继续遍历</strong>。</p><blockquote><p>Recursively Apply a Function to a List</p></blockquote><hr><h3 id="rapply函数参数及用法"><a href="#rapply函数参数及用法" class="headerlink" title="rapply函数参数及用法"></a>rapply函数参数及用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">rapply is a recursive version of lapply.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">rapply(object, f, classes = <span class="string">"ANY"</span>, deflt = NULL,</span><br><span class="line">       how = c(<span class="string">"unlist"</span>, <span class="string">"replace"</span>, <span class="string">"list"</span>), ...)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>object</code>：<strong>list数据</strong></li><li><code>f</code>：调用的函数</li><li><code>classes</code>：匹配类型, <code>ANY</code>为所有类型</li><li><code>deflt</code>：非匹配类型的默认值</li><li><code>how</code>：3种操作方式，<ul><li>当为<code>replace</code>时，则用调用<code>f</code>后的结果替换原<code>list</code>中原来的元素；</li><li>当为<code>list</code>时，新建一个<code>list</code>，类型匹配调用<code>f</code>函数，不匹配赋值为<code>deflt</code>；</li><li>当为<code>unlist</code>时，会执行一次<code>unlist(recursive = TRUE)</code>的操作</li></ul></li><li><code>...</code>：更多参数，可选</li></ul><hr><h3 id="rapply函数的具体用法"><a href="#rapply函数的具体用法" class="headerlink" title="rapply函数的具体用法"></a>rapply函数的具体用法</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- list(</span><br><span class="line">  list(</span><br><span class="line">    a = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), </span><br><span class="line">    b = list(</span><br><span class="line">      c = c(<span class="number">1</span>:<span class="number">4</span>),</span><br><span class="line">      d=list(</span><br><span class="line">        m=c(<span class="number">1</span>:<span class="number">4</span>))</span><br><span class="line">    )</span><br><span class="line">  ), </span><br><span class="line">  d = <span class="string">"a test"</span>)</span><br><span class="line">x</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [[<span class="number">1</span>]]$a</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">1</span>]]$b</span><br><span class="line">  [[<span class="number">1</span>]]$b$c</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">1</span>]]$b$d</span><br><span class="line">  [[<span class="number">1</span>]]$b$d$m</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  $d</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"a test"</span></span><br><span class="line">rapply(x, sqrt, classes = <span class="string">"numeric"</span>, how = <span class="string">"replace"</span>)</span><br><span class="line">  [[<span class="number">1</span>]]</span><br><span class="line">  [[<span class="number">1</span>]]$a</span><br><span class="line">  <span class="comment"># 针对这一层的列表进行了sqrt操作</span></span><br><span class="line">  [<span class="number">1</span>] <span class="number">1.000000</span> <span class="number">1.414214</span> <span class="number">1.732051</span> <span class="number">2.000000</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 这一层的列表并没有进行任何操作</span></span><br><span class="line">  [[<span class="number">1</span>]]$b</span><br><span class="line">  [[<span class="number">1</span>]]$b$c</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  [[<span class="number">1</span>]]$b$d</span><br><span class="line">  [[<span class="number">1</span>]]$b$d$m</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  $d</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"a test"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接使用lapply</span></span><br><span class="line">lapply(x,sqrt)</span><br><span class="line">  Error <span class="keyword">in</span> FUN(X[[i]], <span class="keyword">...</span>) : non-numeric argument to mathematical <span class="keyword">function</span></span><br></pre></td></tr></table></figure><p>所以，<strong>貌似rapply只能对第二层的嵌套list进行操作，第三层的嵌套不会被继续计算？？？先留个坑吧。</strong></p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://blog.fens.me/r-apply/" target="_blank" rel="noopener">掌握R语言中的apply函数族</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;code&gt;R&lt;/code&gt;中常用的&lt;code&gt;apply&lt;/code&gt;函数家族，主要包括&lt;code&gt;apply&lt;/code&gt;(对矩阵、数据框和数组进行行列的操作)、&lt;code&gt;lapply&lt;/code&gt;(作用于列表和数据框，对列表中的每个元素进行循环操作；如果是数据框，则是按列进行操作；最终都返回列表)、&lt;code&gt;sapply&lt;/code&gt;(&lt;code&gt;lapply&lt;/code&gt;的简化版，返回值是向量)、&lt;code&gt;vapply&lt;/code&gt;(类似于&lt;code&gt;sapply&lt;/code&gt;，提供了可以控制返回值行名的参数)、&lt;code&gt;mapply&lt;/code&gt;(相当于多变量的&lt;code&gt;sapply&lt;/code&gt;)、&lt;code&gt;tapply&lt;/code&gt;(分组的循环运算，相当于group by)、&lt;code&gt;rapply&lt;/code&gt;(&lt;code&gt;lapply&lt;/code&gt;的递归版本，只会递归到二级列表)等。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>shell系列之运算符优先级</title>
    <link href="http://showteeth.tech/posts/28801.html"/>
    <id>http://showteeth.tech/posts/28801.html</id>
    <published>2020-01-08T15:09:26.000Z</published>
    <updated>2020-01-09T15:06:58.372Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章总结了<code>shell</code>和<code>AWK</code>中常见的运算符的优先级。在<code>shell</code>中总结出来是：<mark>取反&gt;算术&gt;条件&gt;逻辑&gt;赋值运算符</mark>；在<code>AWK</code>中总结出来是：<mark>Field reference(<code>$</code>)&gt;取反&gt;算术&gt;String concatenation&gt;条件&gt;正则匹配(<code>!~</code>, <code>~</code>)&gt;Array membership(<code>in</code>)&gt;逻辑&gt;赋值</mark></p></div><a id="more"></a><h2 id="shell中运算符的优先级"><a href="#shell中运算符的优先级" class="headerlink" title="shell中运算符的优先级"></a>shell中运算符的优先级</h2><p>虽然在<code>Python</code>和<code>C++</code>中都学习过运算符的优先级，已经有过一些基础，但是<code>shell</code>毕竟是一门新的脚本语言，学习<code>shell</code>中的运算符优先级一来可以了解<code>shell</code>在运算符方面的特性，二来可以巩固自己已有的知识(虽然可能很多都忘记了)，何乐而不为呢。</p><p>所谓的运算符优先级就是在脚本中，<strong>运算执行的顺序</strong>，一般而言<strong>高优先级的操作会比低优先级的操作先执行</strong>。</p><h3 id="运算符优先级的总结"><a href="#运算符优先级的总结" class="headerlink" title="运算符优先级的总结"></a>运算符优先级的总结</h3><p>实际上，<mark>只需要记住以下规则就可以了</mark>:</p><ul><li><strong>取反(逻辑或者按位)</strong>优先级很高，仅次于自加和自减操作</li><li>算数运算:先<strong>幂运算</strong>，<strong>后乘除取余</strong>，<strong>最后加减</strong></li><li>条件测试：先判断<strong>字符串空</strong>、后<strong>文件测试</strong>、再后<strong>整数比较(大于小于大于等于和小于等于)</strong>、最后是<strong>等于和不等于</strong></li><li>逻辑运算符：先<code>&amp;&amp;(-a)</code>、后<code>||(-o)</code></li><li>赋值运算符：先<strong>直接赋值(=)</strong>、后<strong>运算赋值(+=)</strong></li><li>上述按照<strong>优先级从高到低排列</strong>，也就是<mark>取反&gt;算术&gt;条件&gt;逻辑&gt;赋值运算符</mark></li><li><strong>优先级相同的操作按从左至右顺序求值</strong></li><li>可以<strong>使用括号来改变运算符的优先级</strong></li></ul><p>下面详细地列出了<code>shell</code>中常见的运算符的优先级(<strong>从高到低</strong>)：<br><table><thead><tr><th>运算符</th><th>含义</th><th>注解</th></tr></thead><tbody><tr><td>var++, var--</td><td>后缀自增, 自减</td><td>C风格运算符</td></tr><tr><td>++var, --var</td><td>前缀自增, 自减</td><td></td></tr><tr><td>!, ~</td><td>逻辑取反, 按位取反</td><td>对逻辑判断的结果取反, 对每一比特位取反</td></tr><tr><td>**</td><td>幂运算</td><td>算数运算符</td></tr><tr><td>*, /, %</td><td>乘, 除, 取余</td><td>算数运算符</td></tr><tr><td>+, -</td><td>加, 减</td><td>算数运算符</td></tr><tr><td>&lt;&lt;, &gt;&gt;</td><td>左移, 右移</td><td>比特位运算符</td></tr><tr><td>-z, -n</td><td>一元比较</td><td>若 string 为空字串(空格不为空)，则为 true; 若 string 为空字串，则为 false</td></tr><tr><td>-e, -f, -t, -x, etc</td><td>一元比较</td><td>文件测试</td></tr><tr><td>-lt, -gt, -le, -ge</td><td>复合比较</td><td>整数/字符串比较</td></tr><tr><td>-nt, -ot, -ef</td><td>复合比较</td><td>判断 file1 是否比 file2 新,判断 file1 是否比 file2 旧,判断 file1 与 file2 是否为同一文件</td></tr><tr><td>==, -eq, !=, -ne</td><td>复合比较</td><td>整数/字符串比较</td></tr><tr><td>&amp;</td><td>AND(按位与)</td><td>按位与操作</td></tr><tr><td>^</td><td>XOR(按位异或)</td><td>按位异或操作</td></tr><tr><td>|</td><td>OR(按位或)</td><td>按位或操作</td></tr><tr><td>&amp;&amp;, -a</td><td>AND(逻辑与)</td><td>逻辑与</td></tr><tr><td>||, -o</td><td>OR(逻辑或)</td><td>逻辑或</td></tr><tr><td>? :</td><td>if/else三目运算符</td><td>C风格运算符</td></tr><tr><td>=</td><td>赋值</td><td>不要与test中的等号(-eq)混淆</td></tr><tr><td>*=, /=, %=, +=, -=, &lt;&lt;=, &gt;&gt;=, &amp;=</td><td>赋值运算</td><td>先运算后赋值</td></tr><tr><td>,</td><td>逗号运算符</td><td>连接一系列语句</td></tr></tbody></table></p><hr><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先进行了幂运算，然后进行了乘法运算</span></span><br><span class="line"><span class="built_in">echo</span> $((10**2 *2))</span><br><span class="line">  200</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$remaining</span>"</span> -a <span class="string">"<span class="variable">$retry</span>"</span> -gt 0 ]; <span class="keyword">do</span></span><br><span class="line"><span class="comment"># 初看之下很恐怖...</span></span><br><span class="line"><span class="comment"># 分开来分析</span></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$remaining</span>"</span> -a <span class="string">"<span class="variable">$retry</span>"</span> -gt 0 ]; <span class="keyword">do</span></span><br><span class="line"><span class="comment">#       --condition 1-- ^^ --condition 2-</span></span><br><span class="line"><span class="comment">#  如果变量"$remaining" 长度不为0</span></span><br><span class="line"><span class="comment">#+      并且AND (-a)</span></span><br><span class="line"><span class="comment">#+ 变量 "$retry" 大于0</span></span><br><span class="line"><span class="comment">#+ 那么</span></span><br><span class="line"><span class="comment">#+ [ 方括号表达式 ] 返回成功(0)</span></span><br><span class="line"><span class="comment">#+ while-loop 开始迭代执行语句。</span></span><br><span class="line"><span class="comment">#  ==============================================================</span></span><br><span class="line"><span class="comment">#  "condition 1" 和 "condition 2" 在 AND之前执行，为什么？</span></span><br><span class="line"><span class="comment">#  因为AND(-a)优先级比-n,-gt来得低，逻辑与会在最后求值。</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://tldp.org/LDP/abs/html/opprecedence.html#AEN4294" target="_blank" rel="noopener">Table 8-1. Operator Precedence</a></li><li><a href="https://www.bookstack.cn/read/Advanced-Bash-Scripting-Guide-in-Chinese/source-part2-08_4_operator_precedence.md" target="_blank" rel="noopener">有些不是很准确-高级Bash脚本编程指南（Advanced Bash-Scripting Guide）</a></li></ul><hr><p><br></p><h2 id="awk中运算符的优先级"><a href="#awk中运算符的优先级" class="headerlink" title="awk中运算符的优先级"></a>awk中运算符的优先级</h2><h3 id="运算符优先级的总结-1"><a href="#运算符优先级的总结-1" class="headerlink" title="运算符优先级的总结"></a>运算符优先级的总结</h3><p>虽然大部分的<code>awk</code>的运算符优先级和<code>shell</code>中的相同，但是也<strong>还有一些特殊的运算符</strong>：</p><ul><li><mark>Field reference(<code>$</code>)&gt;取反&gt;算术&gt;String concatenation&gt;条件&gt;正则匹配(<code>!~</code>, <code>~</code>)&gt;Array membership(<code>in</code>)&gt;逻辑&gt;赋值</mark></li></ul><p>下面详细地列出了<code>awk</code>中常见的运算符的优先级(<strong>从高到低</strong>)：<br><table><colgroup><col><col></colgroup><tbody><tr><td><p><span class="strong"><strong>Operator</strong></span></p></td><td><p><span class="strong"><strong>Description</strong></span></p></td></tr><tr><td><p><code>(…)</code></p></td><td><p>Grouping，改变运算符的优先级</p></td></tr><tr><td><p><code>$</code></p></td><td><p>Field reference</p></td></tr><tr><td><p><code>++</code>&nbsp;or&nbsp;<code>- -</code></p></td><td><p>Increment, decrement</p></td></tr><tr><td><p><code>^</code>&nbsp;or&nbsp;<code>\*\*</code></p></td><td><p>Exponentiation，幂运算</p></td></tr><tr><td><p><code>+</code>,&nbsp;&nbsp;<code>-</code>,&nbsp;&nbsp;<code>!</code></p></td><td><p>Unary plus(正号), minus(负号), logical not(取反)，前两个需要和后面的加法和减法区分</p></td></tr><tr><td><p><code>\*</code>,&nbsp;<code>/</code>,&nbsp;&nbsp;<code>%</code></p></td><td><p>Multiplication, division or remainder</p></td></tr><tr><td><p><code>+</code>,&nbsp;<code>-</code></p></td><td><p>Addition, subtraction</p></td></tr><tr><td><p>Space</p></td><td><p>String concatenation</p></td></tr><tr><td><p><code>&amp;lt; &amp;lt;= == != &gt; &gt;= &gt;&gt;</code></p></td><td><p>Relational operators</p></td></tr><tr><td><p><code>~ !~</code></p></td><td><p>Match and no match operator</p></td></tr><tr><td><p><code>in</code></p></td><td><p>Array membership</p></td></tr><tr><td><p><code>&amp;&amp;</code></p></td><td><p>Logical and</p></td></tr><tr><td><p><code>||</code></p></td><td><p>Logical or</p></td></tr><tr><td><p><code>?:</code></p></td><td><p>Ternary operator</p></td></tr><tr><td><p><code>= += -= *= /= %= ^= **=</code></p></td><td><p>Assignment operators group right to left</p></td></tr></tbody></table></p><hr><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.gnu.org/software/gawk/manual/html_node/Precedence.html" target="_blank" rel="noopener">6.5 Operator Precedence (How Operators Nest)</a></li><li><a href="https://github.com/acmeism/RosettaCodeData/blob/master/Task/Operator-precedence/AWK/operator-precedence.awk" target="_blank" rel="noopener">operator-precedence.awk</a></li><li><a href="https://pubs.opengroup.org/onlinepubs/007908799/xcu/awk.html" target="_blank" rel="noopener">Expressions in awk</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章总结了&lt;code&gt;shell&lt;/code&gt;和&lt;code&gt;AWK&lt;/code&gt;中常见的运算符的优先级。在&lt;code&gt;shell&lt;/code&gt;中总结出来是：&lt;mark&gt;取反&amp;gt;算术&amp;gt;条件&amp;gt;逻辑&amp;gt;赋值运算符&lt;/mark&gt;；在&lt;code&gt;AWK&lt;/code&gt;中总结出来是：&lt;mark&gt;Field reference(&lt;code&gt;$&lt;/code&gt;)&amp;gt;取反&amp;gt;算术&amp;gt;String concatenation&amp;gt;条件&amp;gt;正则匹配(&lt;code&gt;!~&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;)&amp;gt;Array membership(&lt;code&gt;in&lt;/code&gt;)&amp;gt;逻辑&amp;gt;赋值&lt;/mark&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列之ComplexHeatmap使用记录</title>
    <link href="http://showteeth.tech/posts/31202.html"/>
    <id>http://showteeth.tech/posts/31202.html</id>
    <published>2019-12-19T13:13:09.000Z</published>
    <updated>2020-02-03T04:26:01.096Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要学习了使用<code>ComplexHeatmap</code>来绘制想要的热图的过程，首先以<strong>绘制差异表达基因的热图</strong>为例学习了常规热图的绘制方法，后续又<strong>详细学习了使用<code>oncoPrint</code>绘制突变谱的方法</strong>。</p></div><a id="more"></a><h2 id="输入数据类型"><a href="#输入数据类型" class="headerlink" title="输入数据类型"></a>输入数据类型</h2><p><strong>最好是矩阵</strong>，如果是<code>dataframe</code>可能会出现<code>warning</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning message:</span><br><span class="line">The input is a data frame, convert it to the matrix.</span><br></pre></td></tr></table></figure><p></p><p>如果想<strong>颠倒横纵坐标画图</strong>，可以直接使用<code>t(matrix)</code>进行转置。</p><hr><h2 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h2><p>设置颜色有多种方式，可以使用<code>ComplexHeatmap</code>推荐的<code>colorRamp2</code>函数，其优点在于<strong>可以设置不同的breaks对应的颜色值</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(circlize)</span><br><span class="line">red_green=colorRamp2(breaks=c(min(diff_genes_matrix), </span><br><span class="line">                       mean(diff_genes_matrix), </span><br><span class="line">                       max(diff_genes_matrix)),</span><br><span class="line">                       colors=c(<span class="string">"red"</span>, <span class="string">"black"</span>, <span class="string">"green"</span>))</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="设置legend"><a href="#设置legend" class="headerlink" title="设置legend"></a>设置legend</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">heatmap_legend_param = list(color_bar = <span class="string">"continuous"</span>, </span><br><span class="line">                            at = quantile(diff_genes_matrix, c(<span class="number">0</span>,<span class="number">1</span>)), </span><br><span class="line">                            labels = c(<span class="string">"Min"</span>, <span class="string">"Max"</span>),</span><br><span class="line">                            legend_height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">                            title_position = <span class="string">"leftcenter-rot"</span>)</span><br></pre></td></tr></table></figure><ul><li><code>color_bar</code>: 连续的</li><li><code>at</code>和后面的<code>labels</code>连用，在什么地方标注什么</li><li><code>legend_height</code>设置legend高度</li><li><code>title_position</code>：设置<code>legend</code>名称的位置，这个需要和<code>Heatmap</code>的参数<code>name</code>连用来控制<code>legend</code>名称，在垂直的<code>legend</code>下可用的包括<code>&#39;topleft&#39;</code>, <code>&#39;topcenter&#39;</code>, <code>&#39;leftcenter-rot&#39;</code> and <code>&#39;lefttop-rot&#39;</code></li><li><code>legend_direction = &quot;horizontal&quot;</code>：设置legend横置</li></ul><p>参考链接：</p><ul><li><a href="https://jokergoo.github.io/blog/html/more_legends.html" target="_blank" rel="noopener">ComplexHeatmap Supports More Types of Legends</a></li><li><a href="https://jokergoo.github.io/ComplexHeatmap-reference/book/legends.html" target="_blank" rel="noopener">Heatmap and annotation legends</a></li></ul><hr><h2 id="设置row和col名称的顺序"><a href="#设置row和col名称的顺序" class="headerlink" title="设置row和col名称的顺序"></a>设置row和col名称的顺序</h2><p>在设置<code>row</code>和<code>col</code>名称的顺序时，<strong>行和列的聚类自动会去除</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># row1、row10、row11、row2...</span></span><br><span class="line">row_order = sort(rownames(diff_genes_matrix))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接指定顺序：</span></span><br><span class="line">my_order=c(<span class="string">"row1"</span>,<span class="string">"row2"</span>,<span class="string">"row10"</span>,<span class="string">"row11"</span>)</span><br><span class="line">row_order = my_order</span><br></pre></td></tr></table></figure><p></p><p>参考链接：</p><ul><li><a href="https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html#row-and_column_orders" target="_blank" rel="noopener">row-and_column_orders</a></li></ul><p>需要注意的是：<mark>如果在<strong>设置了顺序的同时也设置了<code>row_split</code></strong>，那么<strong>手动设置的<code>row_order</code>就会失效</strong>；在设置了<code>cluster_rows = FALSE</code>的情况下，默认的顺序就是<code>matrix</code>行名的顺序</mark>，参考<a href="https://github.com/jokergoo/ComplexHeatmap/issues/299" target="_blank" rel="noopener">How to avoid reordering of matrix components with Split?</a>，所以正确的做法是：</p><ul><li>先修改<code>matrix</code>的顺序，可以参考<a href="http://showteeth.tech/posts/30224.html">R系列之向量、矩阵、数组、数据框和列表</a></li><li>关闭<code>cluster_rows</code>参数，直接绘图即可<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原始的矩阵顺序</span></span><br><span class="line">rownames(diff_genes_matrix)</span><br><span class="line">        [<span class="number">1</span>] <span class="string">"BE_W_1"</span>    <span class="string">"BE_W_3"</span>    <span class="string">"BE_W_6"</span>    <span class="string">"BE_C_2"</span>    <span class="string">"BE_C_4"</span>    <span class="string">"BE_C_5"</span>    <span class="string">"Mutation1"</span> <span class="string">"Mutation2"</span> <span class="string">"Mutation3"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先修改matrix顺序</span></span><br><span class="line">diff_genes_matrix_sort=diff_genes_matrix[c(<span class="string">"BE_W_1"</span>,<span class="string">"BE_W_3"</span>,<span class="string">"BE_W_6"</span>,<span class="string">"Mutation1"</span>,<span class="string">"Mutation2"</span>,<span class="string">"Mutation3"</span>,<span class="string">"BE_C_2"</span>,<span class="string">"BE_C_4"</span>,<span class="string">"BE_C_5"</span>),]</span><br><span class="line">rownames(diff_genes_matrix_sort)</span><br><span class="line">        [<span class="number">1</span>] <span class="string">"BE_W_1"</span>    <span class="string">"BE_W_3"</span>    <span class="string">"BE_W_6"</span>    <span class="string">"Mutation1"</span> <span class="string">"Mutation2"</span> <span class="string">"Mutation3"</span> <span class="string">"BE_C_2"</span>    <span class="string">"BE_C_4"</span>    <span class="string">"BE_C_5"</span></span><br><span class="line"></span><br><span class="line">Heatmap(diff_genes_matrix_sort, show_column_names = <span class="literal">FALSE</span>, </span><br><span class="line">        show_row_dend = <span class="literal">FALSE</span>, show_column_dend = <span class="literal">F</span>, </span><br><span class="line">        col=red_green,</span><br><span class="line">        name=<span class="string">"Expression level"</span>,</span><br><span class="line">        </span><br><span class="line">        row_names_side = <span class="string">"left"</span>,</span><br><span class="line">        cluster_rows = <span class="literal">FALSE</span>,</span><br><span class="line">        heatmap_width = unit(<span class="number">24</span>, <span class="string">"cm"</span>), heatmap_height = unit(<span class="number">8</span>, <span class="string">"cm"</span>),</span><br><span class="line">        row_split = split,</span><br><span class="line">        row_title = <span class="literal">NULL</span>,</span><br><span class="line">        row_gap = unit(<span class="number">0.5</span>, <span class="string">"mm"</span>),</span><br><span class="line">        heatmap_legend_param = list(color_bar = <span class="string">"continuous"</span>, </span><br><span class="line">                                    at = quantile(diff_genes_matrix, c(<span class="number">0</span>,<span class="number">1</span>)), </span><br><span class="line">                                    labels = c(<span class="string">"Min"</span>, <span class="string">"Max"</span>),legend_height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">                                    title_position = <span class="string">"leftcenter-rot"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_order_row_and_split.png" alt="complexheatmap_order_row_and_split.png"></p><hr><h2 id="设置rowname的左右"><a href="#设置rowname的左右" class="headerlink" title="设置rowname的左右"></a>设置rowname的左右</h2><p><strong>默认情况下rowname是在右边，而聚类是在左边</strong>，如果想修改这顺序可以使用：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">row_names_side = <span class="string">"left"</span>, row_dend_side = <span class="string">"right"</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="设置cell的大小"><a href="#设置cell的大小" class="headerlink" title="设置cell的大小"></a>设置cell的大小</h2><p><code>ComplexHeatmap</code>没有直接设置cell大小的参数，但是可以通过设置整个heatmap的大小来达到目的：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Heatmap(mat, <span class="keyword">...</span>, heatmap_height = unit(<span class="number">1</span>, <span class="string">"cm"</span>)*nrow(mat))</span><br></pre></td></tr></table></figure><p></p><p><code>width</code> ， <code>heatmap_width</code> ， <code>height</code> 和 <code>heatmap_height</code> 都用于<strong>控制热图的大小</strong>。默认情况下，<strong>所有热图组件都具有固定的宽度或高度，例如 行树形图的宽度为 1cm</strong> 。<code>heatmap_width</code> 和 <code>heatmap_height</code> 控制<strong>整个热图的宽度/高度</strong>，<strong>包括所有热图组件（不包括图例）</strong>，而 <code>width</code> 和 <code>height</code> 仅控制 <strong>heamtap 主体的宽度/高度</strong>.</p><hr><h2 id="对某些行名和列名进行注释"><a href="#对某些行名和列名进行注释" class="headerlink" title="对某些行名和列名进行注释"></a>对某些行名和列名进行注释</h2><p>有时候显示全部的行名或者列名可能会比较杂乱，特别是行或者列很多的情况下，这个时候可以选择一些比较重要的进行展示：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Heatmap中添加如下</span></span><br><span class="line"><span class="comment"># link_height:控制线的长短</span></span><br><span class="line">labels = <span class="string">"Spp1"</span></span><br><span class="line">top_annotation = columnAnnotation(link = anno_mark(at = c(<span class="number">33</span>), </span><br><span class="line">                                                   labels = labels,</span><br><span class="line">                                                   link_height = unit(<span class="number">4</span>, <span class="string">"mm"</span>))</span><br><span class="line">                                  )</span><br></pre></td></tr></table></figure><p></p><p>注意：这个<strong>只能放在<code>top_annotation</code></strong>，如果是<code>bottom_annotation</code>会发现那个连接线会出现在下方，而不是个热图连接起来，其实还是比较适合<strong>在行上进行注释，会比较好看一些</strong>。</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_anno_col_row_names.png" alt="complexheatmap_anno_col_row_names.png"></p><hr><h2 id="在行或者列添加注释块"><a href="#在行或者列添加注释块" class="headerlink" title="在行或者列添加注释块"></a>在行或者列添加注释块</h2><p>在做热图中不可避免地会遇到需要<strong>将多个重复或者一类的样本进行标记的需求</strong>，这里就学习在行或者列上添加这种<strong>注释块</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先得到注释块的大小和颜色等信息</span></span><br><span class="line"><span class="comment"># 这里的a、b、c会显示成legend的名称</span></span><br><span class="line"><span class="comment"># gap：注释块与热图之间的距离</span></span><br><span class="line">df = data.frame(type = c(rep(<span class="string">"a"</span>, <span class="number">3</span>), rep(<span class="string">"b"</span>, <span class="number">3</span>), rep(<span class="string">"c"</span>, <span class="number">3</span>)))</span><br><span class="line">ha = rowAnnotation(df = df, col = list(type = c(<span class="string">"a"</span> = <span class="string">"red"</span>, <span class="string">"b"</span> = <span class="string">"blue"</span>,<span class="string">"c"</span>=<span class="string">"black"</span>)),show_legend = <span class="literal">F</span>,</span><br><span class="line">                   width = unit(<span class="number">1</span>, <span class="string">"cm"</span>),show_annotation_name = <span class="literal">F</span>, gap = unit(<span class="number">1</span>, <span class="string">"points"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Heatmap中添加如下</span></span><br><span class="line">left_annotation = ha</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整版</span></span><br><span class="line">df = data.frame(type = c(rep(<span class="string">"a"</span>, <span class="number">3</span>), rep(<span class="string">"b"</span>, <span class="number">3</span>), rep(<span class="string">"c"</span>, <span class="number">3</span>)))</span><br><span class="line">ha = rowAnnotation(df = df, col = list(type = c(<span class="string">"a"</span> = <span class="string">"red"</span>, <span class="string">"b"</span> = <span class="string">"blue"</span>,<span class="string">"c"</span>=<span class="string">"black"</span>)),show_legend = <span class="literal">F</span>,</span><br><span class="line">                   width = unit(<span class="number">1</span>, <span class="string">"cm"</span>),show_annotation_name = <span class="literal">F</span>,gap = unit(<span class="number">1</span>, <span class="string">"points"</span>))</span><br><span class="line"></span><br><span class="line">Heatmap(diff_genes_matrix, show_column_names = <span class="literal">FALSE</span>, </span><br><span class="line">        show_row_dend = <span class="literal">FALSE</span>, show_column_dend = <span class="literal">F</span>, </span><br><span class="line">        col=red_green,</span><br><span class="line">        name=<span class="string">"Expression level"</span>,</span><br><span class="line">        row_order = sort(rownames(diff_genes_matrix)),</span><br><span class="line">        row_names_side = <span class="string">"left"</span>,</span><br><span class="line">        heatmap_width = unit(<span class="number">24</span>, <span class="string">"cm"</span>), heatmap_height = unit(<span class="number">8</span>, <span class="string">"cm"</span>),</span><br><span class="line">        top_annotation = columnAnnotation(link = anno_mark(at = c(<span class="number">33</span>), </span><br><span class="line">                                                           labels = labels,</span><br><span class="line">                                                           link_height = unit(<span class="number">4</span>, <span class="string">"mm"</span>)</span><br><span class="line">                                                           )</span><br><span class="line">                                          ),</span><br><span class="line">        left_annotation = ha,</span><br><span class="line">        heatmap_legend_param = list(color_bar = <span class="string">"continuous"</span>, </span><br><span class="line">                                    at = quantile(diff_genes_matrix, c(<span class="number">0</span>,<span class="number">1</span>)), </span><br><span class="line">                                    labels = c(<span class="string">"Min"</span>, <span class="string">"Max"</span>),legend_height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">                                    title_position = <span class="string">"leftcenter-rot"</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_anno_block.png" alt="complexheatmap_anno_block.png"></p><hr><h2 id="将不同的注释块分开"><a href="#将不同的注释块分开" class="headerlink" title="将不同的注释块分开"></a>将不同的注释块分开</h2><p>在上一步得到不同的注释块了之后可以进一步地将不同的注释块之间分开：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置分开的dataframe</span></span><br><span class="line">split = data.frame(rep(c(<span class="string">"A"</span>, <span class="string">"B"</span>,<span class="string">"C"</span>), each=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Heatmap中相关设置</span></span><br><span class="line"><span class="comment">## 设置分隔</span></span><br><span class="line">row_split = split,</span><br><span class="line"><span class="comment">## 去除分隔后添加的title：A、B、C</span></span><br><span class="line">row_title = <span class="literal">NULL</span>,</span><br><span class="line"><span class="comment">## 设置分隔的间隔大小</span></span><br><span class="line">row_gap = unit(<span class="number">5</span>, <span class="string">"mm"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整设置</span></span><br><span class="line">split = data.frame(rep(c(<span class="string">"A"</span>, <span class="string">"B"</span>,<span class="string">"C"</span>), each=<span class="number">3</span>))</span><br><span class="line">Heatmap(diff_genes_matrix, show_column_names = <span class="literal">FALSE</span>, </span><br><span class="line">        show_row_dend = <span class="literal">FALSE</span>, show_column_dend = <span class="literal">F</span>, </span><br><span class="line">        col=red_green,</span><br><span class="line">        name=<span class="string">"Expression level"</span>,</span><br><span class="line">        row_order = sort(rownames(diff_genes_matrix)),</span><br><span class="line">        row_names_side = <span class="string">"left"</span>,</span><br><span class="line">        heatmap_width = unit(<span class="number">24</span>, <span class="string">"cm"</span>), heatmap_height = unit(<span class="number">8</span>, <span class="string">"cm"</span>),</span><br><span class="line">        top_annotation = columnAnnotation(link = anno_mark(at = c(<span class="number">33</span>), </span><br><span class="line">                                                           labels = labels,</span><br><span class="line">                                                           link_height = unit(<span class="number">4</span>, <span class="string">"mm"</span>)</span><br><span class="line">                                                           )</span><br><span class="line">                                          ),</span><br><span class="line">        left_annotation = ha,</span><br><span class="line">        row_split = split,</span><br><span class="line">        row_title = <span class="literal">NULL</span>,</span><br><span class="line">        row_gap = unit(<span class="number">5</span>, <span class="string">"mm"</span>),</span><br><span class="line">        heatmap_legend_param = list(color_bar = <span class="string">"continuous"</span>, </span><br><span class="line">                                    at = quantile(diff_genes_matrix, c(<span class="number">0</span>,<span class="number">1</span>)), </span><br><span class="line">                                    labels = c(<span class="string">"Min"</span>, <span class="string">"Max"</span>),legend_height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">                                    title_position = <span class="string">"leftcenter-rot"</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_anno_block_split.png" alt="complexheatmap_anno_block_split.png"></p><hr><h2 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(ComplexHeatmap)</span><br><span class="line"><span class="keyword">library</span>(circlize)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对counts做了变换，log2(normalization + 1)</span></span><br><span class="line">diff_genes_matrix=t(as.matrix(log2(diff_genes_df+<span class="number">1</span>)))</span><br><span class="line">diff_genes_matrix</span><br><span class="line">            Cdh4   Sema6b    Meox1   Col1a1     Ell2    Tcea3   Arrdc2    Casq1    Bcl2l1   Piezo1   Mov10l1</span><br><span class="line">  BE_W_1 <span class="number">5.674636</span> <span class="number">8.992203</span> <span class="number">8.271125</span> <span class="number">10.80915</span> <span class="number">9.010202</span> <span class="number">10.84969</span> <span class="number">8.550702</span> <span class="number">6.719983</span> <span class="number">10.534402</span> <span class="number">9.251238</span>  <span class="number">9.815931</span></span><br><span class="line">  BE_W_3 <span class="number">6.278332</span> <span class="number">8.937379</span> <span class="number">7.755463</span> <span class="number">10.48085</span> <span class="number">8.901625</span> <span class="number">10.94128</span> <span class="number">8.931936</span> <span class="number">6.613638</span> <span class="number">10.654491</span> <span class="number">9.340083</span> <span class="number">10.054614</span></span><br><span class="line">  BE_W_6 <span class="number">6.053069</span> <span class="number">9.046550</span> <span class="number">8.143926</span> <span class="number">10.77555</span> <span class="number">9.108047</span> <span class="number">10.90593</span> <span class="number">9.411026</span> <span class="number">6.555065</span> <span class="number">10.923830</span> <span class="number">9.369440</span> <span class="number">10.122322</span></span><br><span class="line">  BE_C_2 <span class="number">6.970798</span> <span class="number">8.712448</span> <span class="number">7.825648</span> <span class="number">10.61191</span> <span class="number">8.854695</span> <span class="number">10.90589</span> <span class="number">8.221351</span> <span class="number">6.415780</span> <span class="number">10.006843</span> <span class="number">9.411790</span>  <span class="number">9.938315</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">labels = <span class="string">"Spp1"</span></span><br><span class="line"></span><br><span class="line">red_green=colorRamp2(breaks=c(min(diff_genes_matrix), </span><br><span class="line">                       mean(diff_genes_matrix), </span><br><span class="line">                       max(diff_genes_matrix)),</span><br><span class="line">                       colors=c(<span class="string">"red"</span>, <span class="string">"black"</span>, <span class="string">"green"</span>))</span><br><span class="line"></span><br><span class="line">df = data.frame(type = c(rep(<span class="string">"a"</span>, <span class="number">3</span>), rep(<span class="string">"b"</span>, <span class="number">3</span>), rep(<span class="string">"c"</span>, <span class="number">3</span>)))</span><br><span class="line">ha = rowAnnotation(df = df, col = list(type = c(<span class="string">"a"</span> = <span class="string">"red"</span>, <span class="string">"b"</span> = <span class="string">"blue"</span>,<span class="string">"c"</span>=<span class="string">"black"</span>)),show_legend = <span class="literal">F</span>,</span><br><span class="line">                   width = unit(<span class="number">1</span>, <span class="string">"cm"</span>),show_annotation_name = <span class="literal">F</span>,gap = unit(<span class="number">1</span>, <span class="string">"points"</span>))</span><br><span class="line"></span><br><span class="line">split = data.frame(rep(c(<span class="string">"A"</span>, <span class="string">"B"</span>,<span class="string">"C"</span>), each=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">Heatmap(diff_genes_matrix, show_column_names = <span class="literal">FALSE</span>, </span><br><span class="line">        show_row_dend = <span class="literal">FALSE</span>, show_column_dend = <span class="literal">F</span>, </span><br><span class="line">        col=red_green,</span><br><span class="line">        name=<span class="string">"Expression level"</span>,</span><br><span class="line">        row_order = sort(rownames(diff_genes_matrix)),</span><br><span class="line">        row_names_side = <span class="string">"left"</span>,</span><br><span class="line">        heatmap_width = unit(<span class="number">24</span>, <span class="string">"cm"</span>), heatmap_height = unit(<span class="number">8</span>, <span class="string">"cm"</span>),</span><br><span class="line">        top_annotation = columnAnnotation(link = anno_mark(at = c(<span class="number">33</span>), </span><br><span class="line">                                                           labels = labels,</span><br><span class="line">                                                           link_height = unit(<span class="number">4</span>, <span class="string">"mm"</span>)</span><br><span class="line">                                                           )</span><br><span class="line">                                          ),</span><br><span class="line">        left_annotation = ha,</span><br><span class="line">        row_split = split,</span><br><span class="line">        row_title = <span class="literal">NULL</span>,</span><br><span class="line">        row_gap = unit(<span class="number">2</span>, <span class="string">"mm"</span>),</span><br><span class="line">        heatmap_legend_param = list(color_bar = <span class="string">"continuous"</span>, </span><br><span class="line">                                    at = quantile(diff_genes_matrix, c(<span class="number">0</span>,<span class="number">1</span>)), </span><br><span class="line">                                    labels = c(<span class="string">"Min"</span>, <span class="string">"Max"</span>),legend_height = unit(<span class="number">4</span>, <span class="string">"cm"</span>),</span><br><span class="line">                                    title_position = <span class="string">"leftcenter-rot"</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>最终版的图见上！</p><hr><h2 id="oncoPrint-适合展示突变"><a href="#oncoPrint-适合展示突变" class="headerlink" title="oncoPrint-适合展示突变"></a>oncoPrint-适合展示突变</h2><p><code>ComplexHeatmap</code>专门做了个<a href="https://jokergoo.github.io/ComplexHeatmap-reference/book/oncoprint.html#" target="_blank" rel="noopener">oncoPrint函数</a>来<strong>绘制突变相关信息</strong>，感觉和<a href="https://github.com/PoisonAlien/maftools" target="_blank" rel="noopener">maftools</a>的作用很类似，后续可以重点学习和使用一下。</p><h3 id="输入数据"><a href="#输入数据" class="headerlink" title="输入数据"></a>输入数据</h3><h4 id="使用分隔符分割的多种突变名称"><a href="#使用分隔符分割的多种突变名称" class="headerlink" title="使用分隔符分割的多种突变名称"></a>使用分隔符分割的多种突变名称</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">mat = read.table(textConnection(</span><br><span class="line">  <span class="string">"s1,s2,s3</span></span><br><span class="line"><span class="string">g1,snv;indel,snv,indel</span></span><br><span class="line"><span class="string">g2,,snv;indel,snv</span></span><br><span class="line"><span class="string">g3,snv,,indel;snv"</span>), row.names = <span class="number">1</span>, header = <span class="literal">TRUE</span>, sep = <span class="string">","</span>, stringsAsFactors = <span class="literal">FALSE</span>)</span><br><span class="line">mat = as.matrix(mat)</span><br><span class="line">mat</span><br><span class="line">                s1          s2          s3         </span><br><span class="line">        g1 <span class="string">"snv;indel"</span> <span class="string">"snv"</span>       <span class="string">"indel"</span>    </span><br><span class="line">        g2 <span class="string">""</span>          <span class="string">"snv;indel"</span> <span class="string">"snv"</span>      </span><br><span class="line">        g3 <span class="string">"snv"</span>       <span class="string">""</span>          <span class="string">"indel;snv"</span></span><br></pre></td></tr></table></figure><hr><h4 id="使用0-1表示的多个variant列表"><a href="#使用0-1表示的多个variant列表" class="headerlink" title="使用0/1表示的多个variant列表"></a>使用0/1表示的多个variant列表</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mat_list = list(snv = matrix(c(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>), nrow = <span class="number">3</span>),</span><br><span class="line">                indel = matrix(c(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), nrow = <span class="number">3</span>))</span><br><span class="line">rownames(mat_list$snv) = rownames(mat_list$indel) = c(<span class="string">"g1"</span>, <span class="string">"g2"</span>, <span class="string">"g3"</span>)</span><br><span class="line">colnames(mat_list$snv) = colnames(mat_list$indel) = c(<span class="string">"s1"</span>, <span class="string">"s2"</span>, <span class="string">"s3"</span>)</span><br><span class="line">mat_list</span><br><span class="line">        $snv</span><br><span class="line">           s1 s2 s3</span><br><span class="line">        g1  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line">        g2  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line">        g3  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        $indel</span><br><span class="line">           s1 s2 s3</span><br><span class="line">        g1  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">        g2  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line">        g3  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure><div class="note info"><p><code>oncoPrint()</code>要求<code>mat_list</code>中的<strong>所有元素都有相同的行名和列名</strong>，并且绘图也不用添加<code>get_type</code>参数。</p></div><hr><h3 id="得到突变类别"><a href="#得到突变类别" class="headerlink" title="得到突变类别"></a>得到突变类别</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例数据中一个基因可能同时存在多种突变类别，多种突变类别是使用;分割的</span></span><br><span class="line"><span class="comment"># 得到突变类别的方法</span></span><br><span class="line">get_type_fun = <span class="keyword">function</span>(x) strsplit(x, <span class="string">";"</span>)[[<span class="number">1</span>]]</span><br><span class="line">get_type_fun(mat[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">        [<span class="number">1</span>] <span class="string">"snv"</span>   <span class="string">"indel"</span></span><br></pre></td></tr></table></figure><div class="note info"><p>针对常见的一些分隔符，如<code>;</code>、<code>:</code>、<code>,</code>、<code>|</code>，<code>oncoPrint()</code>都会自动的将其分割，不用单独指定；如果自己数据中的分隔符不在常见分隔符中，需要自定义<code>get_type_fun</code>，并将其传递给<code>oncoPrint()</code>的<code>get_type</code>参数。</p></div><hr><h3 id="设置variant的颜色"><a href="#设置variant的颜色" class="headerlink" title="设置variant的颜色"></a>设置variant的颜色</h3><p>不同类型variant的颜色可以使用<code>oncoPrint()</code>的col参数进行设置，col参数是一个带名称的向量：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 带名称的向量</span></span><br><span class="line">col = c(snv = <span class="string">"red"</span>, indel = <span class="string">"blue"</span>)</span><br><span class="line">col</span><br><span class="line">        snv  indel </span><br><span class="line">        <span class="string">"red"</span> <span class="string">"blue"</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="设置variant的形状"><a href="#设置variant的形状" class="headerlink" title="设置variant的形状"></a>设置variant的形状</h3><p>一个样本的一个基因可能会存在多种突变形式，在画图的时候如果不做区别就会<strong>出现重叠</strong>的现象，<code>oncoPrint()</code>提供了<code>alter_fun</code>参数来修改不同突变的展示形状，便于区分。</p><p><code>alter_fun</code>可以是一个包含了逐层添加图形的函数列表(比如：先画snv的图层，接着画indel的图层)，这种情况下<code>alter_fun</code>中的函数应该包含四个参数：</p><ul><li><code>x</code>和<code>y</code>表示坐标位置：positions of the grids on the oncoPrint (x and y)</li><li><code>w</code>和<code>h</code>表示宽度和高度：widths and heights of the grids (w and h, which is measured in <code>npc unit</code>)</li></ul><p>同时，<code>alter_fun</code>也可以通过一个单一的函数来指定，这种情况下<code>alter_fun</code>不再是一个函数的列表，而是一个<strong>包含了五个参数的函数</strong>，增加的参数是<code>v</code>，这个参数是一个<strong>逻辑值</strong>，用于<strong>判断某个样本中的某个基因是不是包含了某个突变</strong>，其也是一个带名称的向量：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 某个样本的某个基因的v参数示例</span></span><br><span class="line"><span class="comment"># 只包括一个snv</span></span><br><span class="line">snv indel </span><br><span class="line"><span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure><p></p><p>使用<strong>函数列表</strong>以及<strong>使用单个函数</strong>的示例：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用函数列表，包含四个参数</span></span><br><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = list(</span><br><span class="line">        snv = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="literal">NA</span>)),</span><br><span class="line">        indel = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.4</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    ), col = col)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用单个函数，添加了v作为逻辑值来判断</span></span><br><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = <span class="keyword">function</span>(x, y, w, h, v) &#123;</span><br><span class="line">        <span class="keyword">if</span>(v[<span class="string">"snv"</span>]) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, <span class="comment"># v["snv"] is a logical value</span></span><br><span class="line">            gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">        <span class="keyword">if</span>(v[<span class="string">"indel"</span>]) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.4</span>, <span class="comment"># v["indel"] is a logical value</span></span><br><span class="line">            gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    &#125;, col = col)</span><br></pre></td></tr></table></figure><p></p><h4 id="关于grid的位置参数"><a href="#关于grid的位置参数" class="headerlink" title="关于grid的位置参数"></a>关于grid的位置参数</h4><p>因为绘图需要涉及到x、y、w、h四个grid绘图语法的参数，因为自身对grid语法并不是很了解，所以这里补充一下：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(grid)</span><br><span class="line">grid.show.viewport(viewport(</span><br><span class="line">  x = <span class="number">0.6</span>, y = <span class="number">0.6</span>,</span><br><span class="line">  w = unit(<span class="number">1</span>, <span class="string">"inches"</span>), h = unit(<span class="number">1</span>, <span class="string">"inches"</span>)</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_grid.png" alt="complexheatmap_oncoprint_grid.png"></p><p>从图形中可以看出，<code>(x,y)</code>其实是单个grid的中心点，其实这个主要是由参数<code>just</code>控制的，默认<code>just</code>为<code>centre</code>表明<code>(x,y)</code>位于grid的中心位置。</p><p>修改参数<code>just</code>值可以很明显看出来区别：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置(x,y)位于top，也就是上中</span></span><br><span class="line">grid.show.viewport(viewport(</span><br><span class="line">  x = <span class="number">0.6</span>, y = <span class="number">0.6</span>,</span><br><span class="line">  w = unit(<span class="number">1</span>, <span class="string">"inches"</span>), h = unit(<span class="number">1</span>, <span class="string">"inches"</span>),</span><br><span class="line">  just=<span class="string">"top"</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_grid_2.png" alt="complexheatmap_oncoprint_grid_2.png"></p><hr><h4 id="按比例绘图"><a href="#按比例绘图" class="headerlink" title="按比例绘图"></a>按比例绘图</h4><p>使用单个的函数来绘制图形可以更方便的定制化：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按比例画图</span></span><br><span class="line"><span class="comment"># 可以直接将mat替换为前面出现过的mat_list</span></span><br><span class="line">oncoPrint(mat,</span><br><span class="line">          alter_fun = <span class="keyword">function</span>(x, y, w, h, v) &#123;</span><br><span class="line">            n = sum(v)  <span class="comment"># how many alterations for current gene in current sample</span></span><br><span class="line">            h = h*<span class="number">0.9</span></span><br><span class="line">            <span class="comment"># use `names(which(v))` to correctly map between `v` and `col`</span></span><br><span class="line">            <span class="keyword">if</span>(n) grid.rect(x, y - h*<span class="number">0.5</span> + <span class="number">1</span>:n/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                            gp = gpar(fill = col[names(which(v))], col = <span class="literal">NA</span>), just = <span class="string">"top"</span>)</span><br><span class="line">          &#125;, col = col)</span><br></pre></td></tr></table></figure><p></p><p>解释一下：</p><ul><li><code>n = sum(v)</code>：某个样本在某个基因上的突变数目(不进行类别上的区分)</li><li><code>h = h*0.9</code>：设置的是每个图形显示的大小，后面的那个h应该是某个grid的完整大小，0.9倍用于分隔不同的基因。</li><li><strong>最后的if语句</strong>：假定是一个存在一个snv和一个indel的基因，此时的<code>n=2</code>，另个小grid的坐标分别是<code>(x,y)</code>、<code>(x,y+h/2)</code>，需要注意的是这里的<code>just</code>参数的值是<code>top</code>，也就是这里的坐标都是<strong>上中的坐标</strong>。</li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_pro_1.png" alt="complexheatmap_oncoprint_pro_1.png"></p><hr><h4 id="绘制三角形图案"><a href="#绘制三角形图案" class="headerlink" title="绘制三角形图案"></a>绘制三角形图案</h4><p>三角形图案的优点在于<strong>更加直观</strong>相比于成比例的块状图案，但是其<strong>表征的variant种类会更加少一些</strong>，因为一个grid分为两个三角形(更复杂的图案就比较难了)，而块状图案可以按比例分为很多小块；并且<strong>使用的话也就更加复杂一些</strong>，首先是要使用到<code>grid.polygon</code>这个函数，其主要是用于绘制多边形，用其来绘制三角形图案的时候需要提供的<code>x</code>和<code>y</code>都是<strong>三个参数的向量</strong>，所以比较复杂。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = list(</span><br><span class="line">        background = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">            grid.polygon(</span><br><span class="line">                <span class="comment"># unit.c(x - 0.5*w, x - 0.5*w, x + 0.5*w)是一组x的坐标，其中每个与后面的unit.c(y - 0.5*h, y + 0.5*h, y - 0.5*h)一一对应</span></span><br><span class="line">                unit.c(x - <span class="number">0.5</span>*w, x - <span class="number">0.5</span>*w, x + <span class="number">0.5</span>*w), </span><br><span class="line">                unit.c(y - <span class="number">0.5</span>*h, y + <span class="number">0.5</span>*h, y - <span class="number">0.5</span>*h),</span><br><span class="line">                gp = gpar(fill = <span class="string">"grey"</span>, col = <span class="string">"white"</span>))</span><br><span class="line">            grid.polygon(</span><br><span class="line">                unit.c(x + <span class="number">0.5</span>*w, x + <span class="number">0.5</span>*w, x - <span class="number">0.5</span>*w), </span><br><span class="line">                unit.c(y + <span class="number">0.5</span>*h, y - <span class="number">0.5</span>*h, y + <span class="number">0.5</span>*h),</span><br><span class="line">                gp = gpar(fill = <span class="string">"grey"</span>, col = <span class="string">"white"</span>))</span><br><span class="line">        &#125;,</span><br><span class="line">        snv = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">            grid.polygon(</span><br><span class="line">                unit.c(x - <span class="number">0.5</span>*w, x - <span class="number">0.5</span>*w, x + <span class="number">0.5</span>*w), </span><br><span class="line">                unit.c(y - <span class="number">0.5</span>*h, y + <span class="number">0.5</span>*h, y - <span class="number">0.5</span>*h),</span><br><span class="line">                gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="string">"white"</span>))</span><br><span class="line">        &#125;,</span><br><span class="line">        indel = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">            grid.polygon(</span><br><span class="line">                unit.c(x + <span class="number">0.5</span>*w, x + <span class="number">0.5</span>*w, x - <span class="number">0.5</span>*w), </span><br><span class="line">                unit.c(y + <span class="number">0.5</span>*h, y - <span class="number">0.5</span>*h, y + <span class="number">0.5</span>*h),</span><br><span class="line">                gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="string">"white"</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    ), col = col)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_tri.png" alt="complexheatmap_oncoprint_tri.png"></p><hr><h4 id="用于支持更多variant类型"><a href="#用于支持更多variant类型" class="headerlink" title="用于支持更多variant类型"></a>用于支持更多variant类型</h4><p>某个样本的某个基因出现多种突变类型是很常见的事，所以如何在单个grid中表征更多的突变类型就非常关键，<code>oncoPrint</code>针对这种情况设计了<code>test_alter_fun()</code>函数来查看设计的<code>alter_fun</code>形状。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">alter_fun = list(</span><br><span class="line">    mut1 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w, h, gp = gpar(fill = <span class="string">"red"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    mut2 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w, h, gp = gpar(fill = <span class="string">"blue"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    mut3 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w, h, gp = gpar(fill = <span class="string">"yellow"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    mut4 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w, h, gp = gpar(fill = <span class="string">"purple"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    mut5 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w, h, gp = gpar(fill = <span class="literal">NA</span>, lwd = <span class="number">2</span>)),</span><br><span class="line">    mut6 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.points(x, y, pch = <span class="number">16</span>),</span><br><span class="line">    mut7 = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.segments(x - w*<span class="number">0.5</span>, y - h*<span class="number">0.5</span>, x + w*<span class="number">0.5</span>, y + h*<span class="number">0.5</span>, gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">)</span><br><span class="line">test_alter_fun(alter_fun)</span><br></pre></td></tr></table></figure><p></p><p>虽然下面这种给出了14中不同的组合类型，但是<strong>其实存在一些问题</strong>，比如<strong>前4中mut类型之间如果存在重叠的话就会出现相互遮挡的问题</strong>，比较好的解决方法就是使用前面的按比例分配。所以个人的想法是：<mark>纯色的用来表征不同的突变类型，然后剩下的几种框、点、线用于表征其他信息，比如表达值、CNV信息。</mark></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_test_alter_1.png" alt="complexheatmap_oncoprint_test_alter_1.png"></p><hr><h3 id="设置grid背景颜色"><a href="#设置grid背景颜色" class="headerlink" title="设置grid背景颜色"></a>设置grid背景颜色</h3><p>在以函数列表形式设置<code>alter_fun</code>参数的时候，不同的图形是按顺序加上了，所以如果想给每个grid添加背景的话可以在函数列表中第一个就添加一个<code>background</code>函数用于设置grid的背景颜色。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置背景颜色为light green，并且添加了框线</span></span><br><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = list(</span><br><span class="line">        background = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w, h, </span><br><span class="line">            gp = gpar(fill = <span class="string">"#00FF0020"</span>)),</span><br><span class="line">        snv = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="literal">NA</span>)),</span><br><span class="line">        indel = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.4</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    ), col = col)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_bg_2.png" alt="complexheatmap_oncoprint_bg_2.png"></p><p>如果想去除任何的框线以及颜色背景，可以将<code>background</code>设置为<code>NULL</code>:<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">oncoPrint(mat,</span><br><span class="line">    alter_fun = list(</span><br><span class="line">        <span class="comment"># 设置背景为NULL</span></span><br><span class="line">        background = <span class="keyword">function</span>(<span class="keyword">...</span>) <span class="literal">NULL</span>,</span><br><span class="line">        snv = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"snv"</span>], col = <span class="literal">NA</span>)),</span><br><span class="line">        indel = <span class="keyword">function</span>(x, y, w, h) grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.4</span>, </span><br><span class="line">            gp = gpar(fill = col[<span class="string">"indel"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">    ), col = col)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_bg_1.png" alt="complexheatmap_oncoprint_bg_1.png"></p><hr><h3 id="按重要性绘制图层"><a href="#按重要性绘制图层" class="headerlink" title="按重要性绘制图层"></a>按重要性绘制图层</h3><p>在绘图时有些信息是主要信息，有些信息可能是次要信息，但是都是必须要展示的图形，这种情况下其实就是前面<a href="#%e7%94%a8%e4%ba%8e%e6%94%af%e6%8c%81%e6%9b%b4%e5%a4%9avariant%e7%b1%bb%e5%9e%8b">用于支持更多variant类型</a>最后我提到的用纯色表示不同的突变类型，然后剩下的几种框、点、线用于表征其他信息，比如表达值、CNV信息。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成虚拟数据</span></span><br><span class="line">set.seed(<span class="number">123</span>)</span><br><span class="line">x1 = sample(c(<span class="string">""</span>, <span class="string">"snv"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">8</span>, <span class="number">2</span>))</span><br><span class="line">x2 = sample(c(<span class="string">""</span>, <span class="string">"indel"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">8</span>, <span class="number">2</span>))</span><br><span class="line">x2[x1 == <span class="string">"snv"</span>] = <span class="string">""</span></span><br><span class="line">x3 = sample(c(<span class="string">""</span>, <span class="string">"intronic"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">x4 = sample(c(<span class="string">""</span>, <span class="string">"exonic"</span>), <span class="number">100</span>, replace = <span class="literal">TRUE</span>, prob = c(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">x3[x1 == <span class="string">""</span> &amp; x2 == <span class="string">""</span>] = <span class="string">""</span></span><br><span class="line">x4[x1 == <span class="string">""</span> &amp; x2 == <span class="string">""</span>] = <span class="string">""</span></span><br><span class="line">x4[x3 == <span class="string">"intronic"</span>] = <span class="string">""</span></span><br><span class="line">x = apply(cbind(x1, x2, x3, x4), <span class="number">1</span>, <span class="keyword">function</span>(x) &#123;</span><br><span class="line">    x = x[x != <span class="string">""</span>]</span><br><span class="line">    paste(x, collapse = <span class="string">";"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">m = matrix(x, nrow = <span class="number">10</span>, ncol = <span class="number">10</span>, dimnames = list(paste0(<span class="string">"g"</span>, <span class="number">1</span>:<span class="number">10</span>), paste0(<span class="string">"s"</span>, <span class="number">1</span>:<span class="number">10</span>)))</span><br><span class="line">m[<span class="number">1</span>:<span class="number">4</span>, <span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">           s1    s2             s3             s4            </span><br><span class="line">        g1 <span class="string">""</span>    <span class="string">"snv;intronic"</span> <span class="string">"snv;intronic"</span> <span class="string">"snv"</span>         </span><br><span class="line">        g2 <span class="string">""</span>    <span class="string">""</span>             <span class="string">""</span>             <span class="string">"snv;intronic"</span></span><br><span class="line">        g3 <span class="string">""</span>    <span class="string">""</span>             <span class="string">""</span>             <span class="string">""</span>            </span><br><span class="line">        g4 <span class="string">"snv"</span> <span class="string">"indel;exonic"</span> <span class="string">"snv"</span>          <span class="string">""</span>      </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置alter_fun</span></span><br><span class="line">alter_fun = list(</span><br><span class="line">    background = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, gp = gpar(fill = <span class="string">"#CCCCCC"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    <span class="comment"># red rectangles</span></span><br><span class="line">    snv = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, gp = gpar(fill = <span class="string">"red"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    <span class="comment"># blue rectangles</span></span><br><span class="line">    indel = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.rect(x, y, w*<span class="number">0.9</span>, h*<span class="number">0.9</span>, gp = gpar(fill = <span class="string">"blue"</span>, col = <span class="literal">NA</span>)),</span><br><span class="line">    <span class="comment"># dots</span></span><br><span class="line">    intronic = <span class="keyword">function</span>(x, y, w, h) </span><br><span class="line">        grid.points(x, y, pch = <span class="number">16</span>),</span><br><span class="line">    <span class="comment"># crossed lines</span></span><br><span class="line">    exonic = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">        grid.segments(x - w*<span class="number">0.4</span>, y - h*<span class="number">0.4</span>, x + w*<span class="number">0.4</span>, y + h*<span class="number">0.4</span>, gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">        grid.segments(x + w*<span class="number">0.4</span>, y - h*<span class="number">0.4</span>, x - w*<span class="number">0.4</span>, y + h*<span class="number">0.4</span>, gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终绘图</span></span><br><span class="line"><span class="comment"># we only define color for snv and indel, so barplot annotations only show snv and indel</span></span><br><span class="line">ht = oncoPrint(m, alter_fun = alter_fun, col = c(snv = <span class="string">"red"</span>, indel = <span class="string">"blue"</span>))</span><br><span class="line">draw(ht, heatmap_legend_list = list(</span><br><span class="line">    Legend(labels = c(<span class="string">"intronic"</span>, <span class="string">"exonic"</span>), type = <span class="string">"points"</span>, pch = c(<span class="number">16</span>, <span class="number">28</span>))</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_intron_exon_1.png" alt="complexheatmap_oncoprint_intron_exon_1.png"></p><p>在单个函数中实现上述类似的用法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">oncoPrint(mat_list,</span><br><span class="line">          alter_fun = <span class="keyword">function</span>(x, y, w, h, v) &#123;</span><br><span class="line">            n = sum(v)  <span class="comment"># how many alterations for current gene in current sample</span></span><br><span class="line">            h = h*<span class="number">0.9</span></span><br><span class="line">            <span class="comment"># use `names(which(v))` to correctly map between `v` and `col`</span></span><br><span class="line">            <span class="keyword">if</span>(n) grid.rect(x, y - h*<span class="number">0.5</span> + <span class="number">1</span>:n/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                            gp = gpar(fill = col[names(which(v))], col = <span class="literal">NA</span>), just = <span class="string">"top"</span>)</span><br><span class="line">            <span class="comment"># 判断总的variant的数目，用于得到正确的坐标</span></span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">            <span class="comment"># 判断snv类型是不是存在，如果存在indel就会在上层，如果不存在indel就会出现在下层(存在第三种突变的情况)</span></span><br><span class="line">            flag_log=<span class="number">0</span></span><br><span class="line">            <span class="comment"># 因为原始的数据中，snv出现在indel之前，所以在indel上增加各种操作会比较麻烦</span></span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> names(v))&#123;</span><br><span class="line">              <span class="keyword">if</span> (i ==<span class="string">"snv"</span> &amp; v[i]) &#123;</span><br><span class="line">                grid.rect(x, y - h*<span class="number">0.5</span> + flag/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                                              gp = gpar(fill = <span class="literal">NA</span>, lwd = <span class="number">2</span>), just = <span class="string">"top"</span>)</span><br><span class="line">                <span class="comment"># 在snv上实现画斜线还是很简单的</span></span><br><span class="line">                grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                              y - h*<span class="number">0.5</span>,</span><br><span class="line">                              x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                              y - h*<span class="number">0.5</span> + <span class="number">1</span>/n*h, </span><br><span class="line">                              gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">                flag=flag+<span class="number">1</span></span><br><span class="line">                flag_log=<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment"># 在indel上实现画斜线就很复杂</span></span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span>(flag_log)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i ==<span class="string">"indel"</span> &amp; v[i] &amp; n==<span class="number">2</span>) &#123;</span><br><span class="line">                  grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y - h*<span class="number">0.5</span> + <span class="number">1</span>/n*h,</span><br><span class="line">                                x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y + h*<span class="number">0.5</span>, </span><br><span class="line">                                gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">              &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i ==<span class="string">"indel"</span> &amp; v[i]) &#123;</span><br><span class="line">                  grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y - h*<span class="number">0.5</span> + <span class="number">1</span>/n*h,</span><br><span class="line">                                x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y + h*<span class="number">0.5</span> - <span class="number">1</span>/n*h, </span><br><span class="line">                                gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span>(flag_log==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i ==<span class="string">"indel"</span> &amp; v[i] &amp; n==<span class="number">1</span>) &#123;</span><br><span class="line">                  grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y - h*<span class="number">0.5</span>,</span><br><span class="line">                                x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y + h*<span class="number">0.5</span>, </span><br><span class="line">                                gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i ==<span class="string">"indel"</span> &amp; v[i] &amp; n&gt;<span class="number">1</span>) &#123;</span><br><span class="line">                  grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y - h*<span class="number">0.5</span>,</span><br><span class="line">                                x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                                y - h*<span class="number">0.5</span> + <span class="number">1</span>/n*h, </span><br><span class="line">                                gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, col = col)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_intron_exon_2.png" alt="complexheatmap_oncoprint_intron_exon_2.png"></p><p>在indel上仅添加框线会更加简单一些：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">oncoPrint(mat_list,</span><br><span class="line">          alter_fun = <span class="keyword">function</span>(x, y, w, h, v) &#123;</span><br><span class="line">            n = sum(v)  <span class="comment"># how many alterations for current gene in current sample</span></span><br><span class="line">            h = h*<span class="number">0.9</span></span><br><span class="line">            <span class="comment"># use `names(which(v))` to correctly map between `v` and `col`</span></span><br><span class="line">            <span class="keyword">if</span>(n) grid.rect(x, y - h*<span class="number">0.5</span> + <span class="number">1</span>:n/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                            gp = gpar(fill = col[names(which(v))], col = <span class="literal">NA</span>), just = <span class="string">"top"</span>)</span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> names(v))&#123;</span><br><span class="line">              <span class="keyword">if</span> (i ==<span class="string">"snv"</span> &amp; v[i]) &#123;</span><br><span class="line">                grid.rect(x, y - h*<span class="number">0.5</span> + flag/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                                              gp = gpar(fill = <span class="literal">NA</span>, lwd = <span class="number">2</span>), just = <span class="string">"top"</span>)</span><br><span class="line">                grid.segments(x - w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                              y - h*<span class="number">0.5</span>,</span><br><span class="line">                              x + w*<span class="number">0.9</span>*<span class="number">0.5</span>, </span><br><span class="line">                              y - h*<span class="number">0.5</span> + <span class="number">1</span>/n*h, </span><br><span class="line">                              gp = gpar(lwd = <span class="number">2</span>))</span><br><span class="line">                flag=flag+<span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (i ==<span class="string">"indel"</span> &amp; v[i])&#123;</span><br><span class="line">                grid.rect(x, y - h*<span class="number">0.5</span> + flag/n*h, w*<span class="number">0.9</span>, <span class="number">1</span>/n*h, </span><br><span class="line">                          gp = gpar(fill = <span class="literal">NA</span>, lwd = <span class="number">2</span>), just = <span class="string">"top"</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, col = col)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_intron_exon_3.png" alt="complexheatmap_oncoprint_intron_exon_3.png"></p><hr><h3 id="其他相关参数"><a href="#其他相关参数" class="headerlink" title="其他相关参数"></a>其他相关参数</h3><ul><li><strong>控制列名(通常是样本名)</strong>：默认情况是<strong>不会显示</strong>的，可以通过参数<code>show_column_names = TRUE</code>来显示</li><li><strong>控制行名(通常是基因名)</strong>：默认情况是<strong>显示</strong>的，可以通过参数<code>show_row_names</code>来控制</li><li><strong>控制百分比</strong>：默认情况是显示的，可以通过参数<code>show_pct</code>来控制</li><li><strong>控制行名和百分比的显示方位</strong>：<code>pct_side</code>、<code>row_names_side</code></li><li><strong>控制百分比的小数点位数</strong>：<code>pct_digits</code></li><li><strong>控制barplot</strong>：<code>anno_oncoprint_barplot()</code>，具体示例请看帮助文档。</li><li><code>oncoPrint</code>也是热图，所以<strong>所有热图的参数这里也能使用</strong>，比如控制<code>legend</code>的参数<code>heatmap_legend_param</code></li><li><strong>删除没有突变的行或者列</strong>：默认情况下即使某行或者某列是没有突变也会显示出来，但是可以通过设置<code>remove_empty_columns</code>和<code>remove_empty_rows</code>为<code>TRUE</code>来进行删除。<strong>删除空行或者空列的操作最好在使用<code>oncoPrint</code>函数之前进行操作</strong>，防止在将<code>oncoPrint</code>结果和其他热图进行并列显示的时候出现问题。</li><li><strong>对行或者列重新排序</strong>：和前面热图的函数相同，可以使用<code>row_order</code>和<code>column_order</code>来控制进行控制。s</li></ul><h3 id="复杂oncoprint示例"><a href="#复杂oncoprint示例" class="headerlink" title="复杂oncoprint示例"></a>复杂oncoprint示例</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入数据准备</span></span><br><span class="line">mat = read.table(system.file(<span class="string">"extdata"</span>, package = <span class="string">"ComplexHeatmap"</span>, </span><br><span class="line">                             <span class="string">"tcga_lung_adenocarcinoma_provisional_ras_raf_mek_jnk_signalling.txt"</span>), </span><br><span class="line">                 header = <span class="literal">TRUE</span>, stringsAsFactors = <span class="literal">FALSE</span>, sep = <span class="string">"\t"</span>)</span><br><span class="line">mat[is.na(mat)] = <span class="string">""</span></span><br><span class="line">rownames(mat) = mat[, <span class="number">1</span>]</span><br><span class="line">mat = mat[, -<span class="number">1</span>]</span><br><span class="line">mat=  mat[, -ncol(mat)]</span><br><span class="line">mat = t(as.matrix(mat))</span><br><span class="line">mat[<span class="number">1</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">            TCGA-<span class="number">05</span>-<span class="number">4384</span>-<span class="number">01</span> TCGA-<span class="number">05</span>-<span class="number">4390</span>-<span class="number">01</span> TCGA-<span class="number">05</span>-<span class="number">4425</span>-<span class="number">01</span></span><br><span class="line">        KRAS <span class="string">"  "</span>            <span class="string">"MUT;"</span>          <span class="string">"  "</span>           </span><br><span class="line">        HRAS <span class="string">"  "</span>            <span class="string">"  "</span>            <span class="string">"  "</span>           </span><br><span class="line">        BRAF <span class="string">"  "</span>            <span class="string">"  "</span>            <span class="string">"  "</span>   </span><br><span class="line"><span class="comment"># 设置alter_fun</span></span><br><span class="line">col = c(<span class="string">"HOMDEL"</span> = <span class="string">"blue"</span>, <span class="string">"AMP"</span> = <span class="string">"red"</span>, <span class="string">"MUT"</span> = <span class="string">"#008000"</span>)</span><br><span class="line">alter_fun = list(</span><br><span class="line">  background = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), </span><br><span class="line">              gp = gpar(fill = <span class="string">"#CCCCCC"</span>, col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># big blue</span></span><br><span class="line">  HOMDEL = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), </span><br><span class="line">              gp = gpar(fill = col[<span class="string">"HOMDEL"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># bug red</span></span><br><span class="line">  AMP = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), </span><br><span class="line">              gp = gpar(fill = col[<span class="string">"AMP"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># small green</span></span><br><span class="line">  MUT = <span class="keyword">function</span>(x, y, w, h) &#123;</span><br><span class="line">    grid.rect(x, y, w-unit(<span class="number">0.5</span>, <span class="string">"mm"</span>), h*<span class="number">0.33</span>, </span><br><span class="line">              gp = gpar(fill = col[<span class="string">"MUT"</span>], col = <span class="literal">NA</span>))</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">column_title = <span class="string">"OncoPrint for TCGA Lung Adenocarcinoma, genes in Ras Raf MEK JNK signalling"</span></span><br><span class="line">heatmap_legend_param = list(title = <span class="string">"Alternations"</span>, at = c(<span class="string">"HOMDEL"</span>, <span class="string">"AMP"</span>, <span class="string">"MUT"</span>), </span><br><span class="line">                            labels = c(<span class="string">"Deep deletion"</span>, <span class="string">"Amplification"</span>, <span class="string">"Mutation"</span>))</span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">oncoPrint(mat,</span><br><span class="line">          alter_fun = alter_fun, col = col, </span><br><span class="line">          remove_empty_columns = <span class="literal">TRUE</span>, remove_empty_rows = <span class="literal">TRUE</span>,</span><br><span class="line">          <span class="comment"># 这里添加了三个注释，一个是bar图</span></span><br><span class="line">          <span class="comment"># 一个是1到172的热图，其实172是样本的数目</span></span><br><span class="line">          top_annotation = HeatmapAnnotation(cbar = anno_oncoprint_barplot(),</span><br><span class="line">                                             foo1 = <span class="number">1</span>:<span class="number">172</span>,</span><br><span class="line">                                             bar1 = anno_points(<span class="number">1</span>:<span class="number">172</span>)),</span><br><span class="line">          left_annotation = rowAnnotation(foo2 = <span class="number">1</span>:<span class="number">26</span>),</span><br><span class="line">          <span class="comment"># 26为基因的数目</span></span><br><span class="line">          right_annotation = rowAnnotation(bar2 = anno_barplot(<span class="number">1</span>:<span class="number">26</span>)),</span><br><span class="line">          column_title = column_title, heatmap_legend_param = heatmap_legend_param)</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/complexheatmap_oncoprint_complex_1.png" alt="complexheatmap_oncoprint_complex_1.png"></p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://jokergoo.github.io/ComplexHeatmap-reference/book/index.html" target="_blank" rel="noopener">ComplexHeatmap-reference</a></li><li><a href="https://www.xiangyunhuang.com.cn/2019/08/grid/" target="_blank" rel="noopener">grid-栅格图形系统</a></li><li><a href="https://www.01hai.com/note/av133949" target="_blank" rel="noopener">R实战 第七篇：网格（grid）</a></li><li><a href="https://www.jianshu.com/nb/31400432" target="_blank" rel="noopener">ComplexHeatmap学习笔记系列</a></li><li><a href="https://www.jianshu.com/p/42adf881e587" target="_blank" rel="noopener">【r&lt;-包】ComplexHeatmap</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要学习了使用&lt;code&gt;ComplexHeatmap&lt;/code&gt;来绘制想要的热图的过程，首先以&lt;strong&gt;绘制差异表达基因的热图&lt;/strong&gt;为例学习了常规热图的绘制方法，后续又&lt;strong&gt;详细学习了使用&lt;code&gt;oncoPrint&lt;/code&gt;绘制突变谱的方法&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R系列之在函数中保存图片</title>
    <link href="http://showteeth.tech/posts/55762.html"/>
    <id>http://showteeth.tech/posts/55762.html</id>
    <published>2019-12-06T02:13:04.000Z</published>
    <updated>2020-01-08T15:26:05.289Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了<strong>在函数中</strong>保存<code>ggplot2</code>绘制的图像的方法：使用<code>ggsave</code>，因为使用常规的<code>pdf()+dev.off()</code>不能在函数中保存图片。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近想把日常工作用经常需要使用的一些代码写成函数，其中包括一些生成图片的过程，但是使用之前的<code>pdf()+dev.off()</code>的方法不能得到想要的结果，最后得到的图片只有3.6K，这显然是不对的，这篇文章记录了<strong>如果解决在函数中不出图的问题</strong>。</p><h2 id="保存各种图片"><a href="#保存各种图片" class="headerlink" title="保存各种图片"></a>保存各种图片</h2><p>正常情况下可以使用<code>pdf()</code>, <code>png()</code>, <code>jpeg()</code>, <code>tiff()</code>等加上<code>dev.off()</code>来保存图片，这种可以保存各种绘图工具绘制的图片，这也是我一直使用的工具。</p><p><strong>针对ggplot2绘制的图片</strong>，可以使用<code>ggsave</code>，看着带着gg两个字母就知道这是<code>ggplot2</code>的亲儿子，这里解决问题就是用的<code>ggsave</code>，其默认会保存最后一次展示的图片，当然也可以使用<code>plot =</code>来指定：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ggsave(filename, plot = last_plot(), device = <span class="literal">NULL</span>, path = <span class="literal">NULL</span>,</span><br><span class="line">  scale = <span class="number">1</span>, width = <span class="literal">NA</span>, height = <span class="literal">NA</span>, units = c(<span class="string">"in"</span>, <span class="string">"cm"</span>, <span class="string">"mm"</span>),</span><br><span class="line">  dpi = <span class="number">300</span>, limitsize = <span class="literal">TRUE</span>, <span class="keyword">...</span>)</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>如果图片不是使用<code>ggplot2</code>绘制的，也可以使用<a href="https://cran.r-project.org/web/packages/ggplotify/vignettes/ggplotify.html" target="_blank" rel="noopener">ggplotify</a>包中的<code>as.ggplot</code>函数将其转化为<code>ggplot</code>对象.</p></div><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://ggplot2.tidyverse.org/reference/ggsave.html" target="_blank" rel="noopener">Save a ggplot (or other grid object) with sensible defaults</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了&lt;strong&gt;在函数中&lt;/strong&gt;保存&lt;code&gt;ggplot2&lt;/code&gt;绘制的图像的方法：使用&lt;code&gt;ggsave&lt;/code&gt;，因为使用常规的&lt;code&gt;pdf()+dev.off()&lt;/code&gt;不能在函数中保存图片。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之eval和exec用法</title>
    <link href="http://showteeth.tech/posts/1474.html"/>
    <id>http://showteeth.tech/posts/1474.html</id>
    <published>2019-12-02T09:37:28.000Z</published>
    <updated>2020-01-31T04:35:22.448Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章起源于<a href="http://showteeth.tech/posts/14356.html">R系列之将字符串转化为变量</a>，主要学习了<code>Python</code>中将字符串转换为变量相关的两个函数<code>eval</code>和<code>exec</code>。<code>eval</code>可以得到字符串对应的变量的值，并且可以执行简单的计算，返回计算得到的结果，但是不能包括赋值和循环等操作；而<code>exec</code>可以执行复杂的计算，可以包括赋值和循环，但是返回值始终是<code>None</code>，不会是计算得到的结果。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这篇文章对应的是<a href="http://showteeth.tech/posts/14356.html">R系列之将字符串转化为变量</a></p><h2 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h2><h3 id="eval函数的作用"><a href="#eval函数的作用" class="headerlink" title="eval函数的作用"></a>eval函数的作用</h3><p><strong>计算</strong>指定表达式的值，这里的关键词是计算，其主要有以下几个要点：</p><ul><li>可以是<strong>常规的数值计算</strong>，如将变量进行替换然后进行计算：<code>print(eval(&quot;a+1&quot;))</code>，需要注意的是这里的计算是简单的计算，包括了<code>__builtins__</code>中的一些函数，<a href="#%e5%be%97%e5%88%b0%e5%ad%97%e7%ac%a6%e4%b8%b2%e8%a1%a8%e8%be%be%e5%bc%8f%e7%9a%84%e5%80%bc">具体列表如下</a>，所以<strong>计算的表达式中不支持复杂的代码逻辑，例如赋值操作、循环语句等等</strong>。</li><li>可以是<strong>解析字符串</strong>，这里的解析简单来说就是<strong>将字符串的引号去掉，得到对应的数据结构</strong>，如<code>eval(&quot;[[1,2], [3,4], [5,6], [7,8], [9,0]]&quot;)</code></li><li>注意和<a href="http://showteeth.tech/posts/14356.html">R中的get函数</a>的区别，<code>get</code>强调的是获取、得到值，不会通过计算；而这里的<code>eval</code>函数的作用包含上述<code>get</code>的作用，并且也会进行变量替换和计算，<strong>起到了部分<code>R</code>中<code>assign</code>的作用</strong>，但是存在局限：<strong>不能赋值</strong>以及<strong>不能执行复杂的计算</strong>，如读取文件。</li></ul><hr><h3 id="eval用法及参数"><a href="#eval用法及参数" class="headerlink" title="eval用法及参数"></a>eval用法及参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(expression[, globals[, locals]])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>expression</code>：<strong>字符串表示的表达式，该表达式会被解析并求值</strong>，该表达式中的参数的命名空间可以使用后面的<code>globals</code>和<code>locals</code>进行限定</li><li><code>globals</code>：变量作用域，<strong>全局</strong>命名空间(存放全局变量)，如果提供，则<strong>必须是一个字典对象</strong><ul><li>可以使用<code>__builtins__</code>的一些函数对<code>expression</code>进行解析，如<code>abs</code>、<code>int</code>、<code>str</code>等。</li><li><strong>If the globals dictionary is present and does not contain a value for the key <code>__builtins__</code></strong>, a reference to the dictionary of the <code>built-in module builtins</code> is inserted under that key before expression is parsed.</li></ul></li><li><code>locals</code>：变量作用域，<strong>局部</strong>命名空间(存放局部变量)，如果被提供，<strong>可以是任何映射对象</strong>。当它和<code>globals</code>中有重复的部分时，<code>locals</code>里的定义会覆盖掉<code>globals</code>中的，也就是<strong>当<code>globals</code>和<code>locals</code>中有冲突的部分时，<code>locals</code>说了算，它有决定权，以它的为准</strong>。如果<code>locals</code>没有被提供的话，则默认为<code>globals</code>。</li><li><code>shell</code>中也有<code>eval</code>命令，可以参考<a href="http://showteeth.tech/posts/13990.html">shell系列之eval、printf和组合数</a></li></ul><hr><h3 id="eval具体用法"><a href="#eval具体用法" class="headerlink" title="eval具体用法"></a>eval具体用法</h3><h4 id="得到字符串表达式的值"><a href="#得到字符串表达式的值" class="headerlink" title="得到字符串表达式的值"></a>得到字符串表达式的值</h4><p>这个功能类似于<a href="http://showteeth.tech/posts/14356.html">R系列之将字符串转化为变量</a>中的<code>get</code>函数，但是<strong>也存在区别</strong>，<mark>R中的get函数只能得到字符串对应的变量的值，并不能对字符串进行运算，但是这里的eval可以先得到字符串对应的值，然后进行运算。</mark><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br><span class="line"><span class="comment"># 这里并没有指定globals和locals参数</span></span><br><span class="line"><span class="comment"># 使用的当前作用域，也就是a=10</span></span><br><span class="line">print(eval(<span class="string">"a+1"</span>))</span><br><span class="line">  <span class="number">11</span></span><br><span class="line"><span class="comment"># 使用内建模块中的abs函数进行运算</span></span><br><span class="line">s=<span class="string">'abs(10)'</span></span><br><span class="line">print(eval(s))</span><br><span class="line"> <span class="number">10</span></span><br><span class="line"><span class="comment"># __builtins__模块包含的内容</span></span><br><span class="line">print(dir(__builtins__))</span><br><span class="line">  [<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>, <span class="string">'BlockingIOError'</span>, <span class="string">'BrokenPipeError'</span>, <span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>, <span class="string">'ChildProcessError'</span>, <span class="string">'ConnectionAbortedError'</span>, <span class="string">'ConnectionError'</span>, <span class="string">'ConnectionRefusedError'</span>, <span class="string">'ConnectionResetError'</span>, <span class="string">'DeprecationWarning'</span>, <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>, <span class="string">'FileExistsError'</span>, <span class="string">'FileNotFoundError'</span>, <span class="string">'FloatingPointError'</span>, <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>, <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'InterruptedError'</span>, <span class="string">'IsADirectoryError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>, <span class="string">'MemoryError'</span>, <span class="string">'ModuleNotFoundError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotADirectoryError'</span>, <span class="string">'NotImplemented'</span>, <span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>, <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'PermissionError'</span>, <span class="string">'ProcessLookupError'</span>, <span class="string">'RecursionError'</span>, <span class="string">'ReferenceError'</span>, <span class="string">'ResourceWarning'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>, <span class="string">'StopAsyncIteration'</span>, <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>, <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>, <span class="string">'TimeoutError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>, <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>, <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>, <span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'__IPYTHON__'</span>, <span class="string">'__build_class__'</span>, <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'abs'</span>, <span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'ascii'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'breakpoint'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>, <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>, <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'display'</span>, <span class="string">'divmod'</span>, <span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'get_ipython'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>, <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>, <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>, <span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>, <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>, <span class="string">'range'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>, <span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'vars'</span>, <span class="string">'zip'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义globals</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">g=&#123;<span class="string">'a'</span>:<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 此时的作用域是g，前面的a=10被屏蔽掉了</span></span><br><span class="line">print(eval(<span class="string">"a+1"</span>,g))</span><br><span class="line">  <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时定义globals和locals</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line">c=<span class="number">30</span></span><br><span class="line">g=&#123;<span class="string">'a'</span>:<span class="number">6</span>,<span class="string">'b'</span>:<span class="number">8</span>&#125;</span><br><span class="line">t=&#123;<span class="string">'b'</span>:<span class="number">100</span>,<span class="string">'c'</span>:<span class="number">10</span>&#125;</span><br><span class="line"><span class="comment"># globals和locals中存在冲突的b值，以locals中的为准</span></span><br><span class="line"><span class="comment"># 所以是t中的b、c和g中的a相加</span></span><br><span class="line">print(eval(<span class="string">'a+b+c'</span>,g,t))</span><br><span class="line">  <span class="number">116</span></span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>作用域的优先级：<strong><code>locals</code>&gt;<code>globals</code>&gt;<code>默认的globals</code></strong></p></div><hr><h4 id="将字符串转换为列表、字典和元组"><a href="#将字符串转换为列表、字典和元组" class="headerlink" title="将字符串转换为列表、字典和元组"></a>将字符串转换为列表、字典和元组</h4><p><strong>当<code>eval</code>解析表达式的时候发现去除引号(字符串标志；同时存在单双引号会先去除同一级的，不同同时去除)之后并不能进行进一步的计算，那么就会将去除引号之后的内容进行输出，从而可以得到列表、字典和元组等各种数据结构</strong>。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去除单层引号</span></span><br><span class="line">a=<span class="string">'"sas"'</span></span><br><span class="line">b=eval(a)</span><br><span class="line">  <span class="string">'sas'</span></span><br><span class="line">type(b)</span><br><span class="line">  str</span><br><span class="line"><span class="comment"># 将字符串转换为列表</span></span><br><span class="line">a = <span class="string">"[[1,2], [3,4], [5,6], [7,8], [9,0]]"</span></span><br><span class="line">b = eval(a)</span><br><span class="line">b</span><br><span class="line">  [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">0</span>]]</span><br><span class="line">type(b)</span><br><span class="line">  list</span><br><span class="line"><span class="comment"># 将字符串转换为字典</span></span><br><span class="line">a = <span class="string">"&#123;1: 'a', 2: 'b'&#125;"</span></span><br><span class="line">b = eval(a)</span><br><span class="line">b</span><br><span class="line">  &#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>&#125;</span><br><span class="line">type(b)</span><br><span class="line">  dict</span><br><span class="line"><span class="comment"># 将字符串转换为元组</span></span><br><span class="line">a = <span class="string">"([1,2], [3,4], [5,6], [7,8], (9,0))"</span></span><br><span class="line">b = eval(a)</span><br><span class="line">b</span><br><span class="line">  ([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], (<span class="number">9</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="exec函数"><a href="#exec函数" class="headerlink" title="exec函数"></a>exec函数</h2><h3 id="exec函数的作用"><a href="#exec函数的作用" class="headerlink" title="exec函数的作用"></a>exec函数的作用</h3><p>动态执行Python代码。<mark>也就是说<code>exec</code>可以执行复杂的Python代码，而不像<code>eval</code>函数那么样只能计算一个表达式的值。需要注意的是<code>exec</code>的<strong>返回值</strong>永远都是<code>None</code></mark></p><hr><h3 id="exec用法及参数"><a href="#exec用法及参数" class="headerlink" title="exec用法及参数"></a>exec用法及参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(object[, globals[, locals]])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>object：必选参数，表示需要被指定的Python代码。它<strong>必须是字符串或code对象</strong>。如果<strong>object是一个字符串</strong>，该字符串会<strong>先被解析为一组Python语句，然后再执行（除非发生语法错误）</strong>。如果<strong>object是一个code对象</strong>，那么它<strong>只是被简单的执行</strong>。</li><li><code>globals</code>和<code>locals</code>同上</li></ul><hr><h3 id="exec具体用法"><a href="#exec具体用法" class="headerlink" title="exec具体用法"></a>exec具体用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用的是当前的工作域</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">20</span></span><br><span class="line">exec(<span class="string">"answer=x+y"</span>)</span><br><span class="line">answer</span><br><span class="line">  <span class="number">30</span></span><br><span class="line"><span class="comment">## 得到列表</span></span><br><span class="line">a = <span class="string">"my_list=[[1,2], [3,4], [5,6], [7,8], [9,0]]"</span></span><br><span class="line">exec(a)</span><br><span class="line">my_list</span><br><span class="line">  [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定globals参数</span></span><br><span class="line">exec(<span class="string">"answer=x+y"</span>,&#123;<span class="string">"x"</span>:<span class="number">1</span>,<span class="string">"y"</span>:<span class="number">1</span>&#125;)</span><br><span class="line">answer</span><br><span class="line">  <span class="number">30</span></span><br><span class="line"><span class="comment">## 上面的输出结果还是30，和认知不符，肯定是某个地方出现了问题</span></span><br><span class="line">exec(<span class="string">"answer=x+y\nprint(answer)"</span>,&#123;<span class="string">"x"</span>:<span class="number">1</span>,<span class="string">"y"</span>:<span class="number">1</span>&#125;)</span><br><span class="line">answer</span><br><span class="line">  <span class="number">2</span></span><br><span class="line">  <span class="number">30</span></span><br><span class="line"><span class="comment">## 原因：指定globals之后，参数的工作域就不是当前工作域了，输出的结果还是直接当前工作域计算的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定globals参数的同时指定locals参数</span></span><br><span class="line">exec(<span class="string">"answer=x+y\nprint(answer)"</span>,&#123;<span class="string">"x"</span>:<span class="number">1</span>,<span class="string">"y"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"x"</span>:<span class="number">5</span>,<span class="string">"y"</span>:<span class="number">6</span>&#125;)</span><br><span class="line">  <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 汇总</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="comment">## 这里是字符串形式的代码</span></span><br><span class="line">expr = <span class="string">"""</span></span><br><span class="line"><span class="string">z = 30</span></span><br><span class="line"><span class="string">sum = x + y + z</span></span><br><span class="line"><span class="string">print(sum)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">20</span></span><br><span class="line">    exec(expr)</span><br><span class="line">    exec(expr, &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    exec(expr, &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;, &#123;<span class="string">'y'</span>: <span class="number">3</span>, <span class="string">'z'</span>: <span class="number">4</span>&#125;)</span><br><span class="line">    </span><br><span class="line">func()</span><br><span class="line">  <span class="number">60</span></span><br><span class="line">  <span class="number">33</span></span><br><span class="line">  <span class="number">34</span></span><br></pre></td></tr></table></figure><p>针对之前<a href="http://showteeth.tech/posts/14356.html">R系列之将字符串转化为变量</a>中的问题：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(data_folder):</span><br><span class="line">    filename=os.path.join(data_folder,i)</span><br><span class="line">    print(filename)</span><br><span class="line">    code_string=<span class="string">'''import pandas as pd\n&#123;var_name&#125;=pd.read_csv("&#123;filename&#125;")'''</span>.format(var_name=os.path.splitext(i)[<span class="number">0</span>],filename=filename)</span><br><span class="line">    print(code_string)</span><br><span class="line">    exec(code_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出内容，此时data_1已经写入了当前的环境变量中</span></span><br><span class="line">  /home/user/learn/r_learn/data/chr2var/data_1.txt</span><br><span class="line">  <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">  data_1=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_1.txt"</span>)</span><br><span class="line">  /home/user/learn/r_learn/data/chr2var/data_2.txt</span><br><span class="line">  <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">  data_2=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_2.txt"</span>)</span><br><span class="line">  /home/user/learn/r_learn/data/chr2var/data_3.txt</span><br><span class="line">  <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">  data_3=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_3.txt"</span>)</span><br><span class="line">  /home/user/learn/r_learn/data/chr2var/data_4.txt</span><br><span class="line">  <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">  data_4=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_4.txt"</span>)</span><br><span class="line">  /home/user/learn/r_learn/data/chr2var/data_5.txt</span><br><span class="line">  <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">  data_5=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_5.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时可以使用eval返回data_1的数值</span></span><br><span class="line">eval(<span class="string">'data_1'</span>)</span><br><span class="line">  <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="使用globals和locals函数"><a href="#使用globals和locals函数" class="headerlink" title="使用globals和locals函数"></a>使用globals和locals函数</h3><ul><li><code>globals()</code>函数<strong>以字典的形式</strong>返回的定义该函数的模块内的<strong>全局作用域下的所有标识符（变量、常量等）</strong></li><li><code>locals()</code>函数<strong>以字典的形式</strong>返回当前函数内的<strong>局域作用域</strong>下的所有标识符(会包括前面的全局变量)</li><li>如果直接在模块中调用<code>globals()</code>和<code>locals()</code>函数，它们的返回值是相同的</li><li>参考链接：<a href="https://www.cnblogs.com/yyds/p/6276746.html" target="_blank" rel="noopener">Python中的eval()、exec()及其相关函数</a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接向全局变量中添加变量，以字典的方式</span></span><br><span class="line">globals()[<span class="string">'data_6'</span>] = pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_1.txt"</span>)</span><br><span class="line">data_6</span><br><span class="line">  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接向局部变量中添加变量，以字典的方式</span></span><br><span class="line">locals()[<span class="string">'data_7'</span>] = pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_1.txt"</span>)</span><br><span class="line">data_7</span><br><span class="line">  <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 借鉴前面的字典做法，直接将其存储在字典中</span></span><br><span class="line">a=&#123;&#125;</span><br><span class="line">a[<span class="string">"data_8"</span>]=pd.read_csv(<span class="string">"/home/user/learn/r_learn/data/chr2var/data_1.txt"</span>)</span><br><span class="line">a</span><br><span class="line">  &#123;<span class="string">'data_8'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">1</span>]</span><br><span class="line">  Index: []&#125;</span><br><span class="line"><span class="comment"># 前面的问题</span></span><br><span class="line">re_dic=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(data_folder):</span><br><span class="line">    filename=os.path.join(data_folder,i)</span><br><span class="line">    print(filename)</span><br><span class="line">    re_dic[os.path.splitext(i)[<span class="number">0</span>]]=pd.read_csv(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出的结果</span></span><br><span class="line">  &#123;<span class="string">'data_1'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">1</span>]</span><br><span class="line">  Index: [], <span class="string">'data_2'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">2</span>]</span><br><span class="line">  Index: [], <span class="string">'data_3'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">3</span>]</span><br><span class="line">  Index: [], <span class="string">'data_4'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">4</span>]</span><br><span class="line">  Index: [], <span class="string">'data_5'</span>: Empty DataFrame</span><br><span class="line">  Columns: [<span class="number">5</span>]</span><br><span class="line">  Index: []&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="eval、exec以及get、assign"><a href="#eval、exec以及get、assign" class="headerlink" title="eval、exec以及get、assign"></a>eval、exec以及get、assign</h2><h3 id="eval和exec的区别"><a href="#eval和exec的区别" class="headerlink" title="eval和exec的区别"></a>eval和exec的区别</h3><ul><li>计算能力的区别：<code>eval()</code>函数只能<strong>计算单个表达式</strong>的值，而<code>exec()</code>函数可以动态<strong>运行代码段</strong></li><li>返回指定区别：<code>eval()</code>函数<strong>返回计算表达式的结果</strong>，而<code>exec()</code>函数<strong>返回值永远为None</strong></li></ul><hr><h3 id="python和R中对应的问题"><a href="#python和R中对应的问题" class="headerlink" title="python和R中对应的问题"></a>python和R中对应的问题</h3><p><code>R</code>中<code>get</code>函数和<code>assign</code>函数功能很明确，<code>get</code>就是得到字符串对应的变量的值，而<code>assign</code>就是将字符串变为变量来存储值；而在<code>Python</code>中，<code>eval</code>类似于<code>R</code>中的<code>get</code>，但是功能比<code>get</code>强大，其可以执行一些简单的计算，而<code>exec</code>则更类似于<code>assign</code>，可以执行复杂的计算。</p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.python.org/3/library/functions.html#eval" target="_blank" rel="noopener">Built-in Functions-eval</a></li><li><a href="https://docs.python.org/3/library/functions.html#exec" target="_blank" rel="noopener">Built-in Functions-exec</a></li><li><a href="https://www.cnblogs.com/yyds/p/6276746.html" target="_blank" rel="noopener">很好的文章-Python中的eval()、exec()及其相关函数</a></li><li><a href="https://www.runoob.com/python/python-func-eval.html" target="_blank" rel="noopener">Python eval() 函数</a></li><li><a href="https://blog.csdn.net/qq_29883591/article/details/53443062" target="_blank" rel="noopener">python3中eval函数用法简介</a></li><li><a href="https://juejin.im/post/5c97885b6fb9a070c11f929e" target="_blank" rel="noopener">深度辨析 Python 的 eval() 与 exec()</a></li><li><a href="https://stackoverflow.com/questions/51747277/python-equivalent-of-r-assign" target="_blank" rel="noopener">Python equivalent of R assign</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章起源于&lt;a href=&quot;http://showteeth.tech/posts/14356.html&quot;&gt;R系列之将字符串转化为变量&lt;/a&gt;，主要学习了&lt;code&gt;Python&lt;/code&gt;中将字符串转换为变量相关的两个函数&lt;code&gt;eval&lt;/code&gt;和&lt;code&gt;exec&lt;/code&gt;。&lt;code&gt;eval&lt;/code&gt;可以得到字符串对应的变量的值，并且可以执行简单的计算，返回计算得到的结果，但是不能包括赋值和循环等操作；而&lt;code&gt;exec&lt;/code&gt;可以执行复杂的计算，可以包括赋值和循环，但是返回值始终是&lt;code&gt;None&lt;/code&gt;，不会是计算得到的结果。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R系列之将字符串转化为变量</title>
    <link href="http://showteeth.tech/posts/14356.html"/>
    <id>http://showteeth.tech/posts/14356.html</id>
    <published>2019-12-02T09:36:56.000Z</published>
    <updated>2020-01-30T09:20:24.363Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了可以<strong>将字符串转换为变量的<code>assign</code>(还有类似的<code>list2env</code>)</strong>以及<strong>得到字符串对应的对象名称的函数<code>get</code></strong>，这两个函数可以用于批量文件的读取和后续的处理。</p></div><a id="more"></a><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用shell来生成5个文件，每个文件存放对应的数字</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..5&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$&#123;i&#125;</span> &gt;data_<span class="variable">$&#123;i&#125;</span>.txt;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><hr><h2 id="将字符串转换为变量-assign"><a href="#将字符串转换为变量-assign" class="headerlink" title="将字符串转换为变量-assign"></a>将字符串转换为变量-assign</h2><p>将data_1存储为读取了data_1.txt文件内容的变量，data_2存储为读取了data_2.txt文件内容的变量，以此类推.</p><h3 id="直接使用字符串达不到目的"><a href="#直接使用字符串达不到目的" class="headerlink" title="直接使用字符串达不到目的"></a>直接使用字符串达不到目的</h3><p>直接使用<code>data_1=read.table(&#39;data_1.txt&#39;)</code>会得不到想要的结果：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在进行操作之前的变量列表</span></span><br><span class="line">ls()</span><br><span class="line">  character(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 试图将data_1存储为读取了data_1.txt文件内容</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">5</span>)&#123;</span><br><span class="line">  file_name=paste0(<span class="string">"data_"</span>,i,<span class="string">".txt"</span>)</span><br><span class="line">  varchr=paste0(<span class="string">"data_"</span>,i)</span><br><span class="line">  print(varchr)</span><br><span class="line">  varchr=read.table(file_name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 操作之后的变量列表</span></span><br><span class="line"><span class="comment"># 发现并没有出现data_1、data_2、data_3、data_4、data_5这种</span></span><br><span class="line"><span class="comment"># 出现的只是varchr，表明没有达到最终目的</span></span><br><span class="line">ls()</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"file_name"</span> <span class="string">"i"</span>         <span class="string">"varchr"</span></span><br></pre></td></tr></table></figure><p></p><hr><h3 id="assign用法"><a href="#assign用法" class="headerlink" title="assign用法"></a>assign用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">Assign a value to a name <span class="keyword">in</span> an environment.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">assign(x, value, pos = -1, envir = as.environment(pos),</span><br><span class="line">       inherits = FALSE, immediate = TRUE)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>x</code>：使用<strong>字符串表示的变量名</strong>。如果给定的是<strong>长度大于1的字符向量</strong>，那么该向量的<strong>第一个元素将被使用，并出现警告</strong></li><li><code>value</code>：传递给x的值</li><li><code>envir</code>：x所在的<strong>环境</strong>，可以是<code>.GlobalEnv</code>表示全局变量.<ul><li>The global environment <code>.GlobalEnv</code>, more often known as the <strong>user’s workspace</strong>, is the <strong>first item on the search path</strong>. It can also be accessed by <code>globalenv()</code>. On the search path, each item’s enclosure is the next item.</li></ul></li></ul><hr><h3 id="assign具体使用"><a href="#assign具体使用" class="headerlink" title="assign具体使用"></a>assign具体使用</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先清空环境变量</span></span><br><span class="line">rm(list=ls())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将data_1存储为读取了data_1.txt文件内容</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">5</span>)&#123;</span><br><span class="line">  file_name=paste0(<span class="string">"data_"</span>,i,<span class="string">".txt"</span>)</span><br><span class="line">  assign(paste0(<span class="string">"data_"</span>,i),read.table(file_name))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看操作之后的环境变量，达到了目的</span></span><br><span class="line">ls()</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"data_1"</span>    <span class="string">"data_2"</span>    <span class="string">"data_3"</span>    <span class="string">"data_4"</span>    <span class="string">"data_5"</span>    <span class="string">"file_name"</span></span><br><span class="line">  [<span class="number">7</span>] <span class="string">"i"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上envir = .GlobalEnv得到的结果相同</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">5</span>)&#123;</span><br><span class="line">  file_name=paste0(<span class="string">"data_"</span>,i,<span class="string">".txt"</span>)</span><br><span class="line">  assign(paste0(<span class="string">"data_"</span>,i),read.table(file_name),envir = .GlobalEnv)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="和assign类似的list2env"><a href="#和assign类似的list2env" class="headerlink" title="和assign类似的list2env"></a>和assign类似的list2env</h3><h4 id="list2env用法"><a href="#list2env用法" class="headerlink" title="list2env用法"></a>list2env用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">From a named list x, create an environment containing all list components as objects, or “multi-assign” from x into a pre-existing environment.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">list2env(x, envir = NULL, parent = parent.frame(),</span><br><span class="line">         <span class="built_in">hash</span> = (length(x) &gt; 100), size = max(29L, length(x)))</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>x</code>：列表，需要注意的是<strong>列表中每个元素必须要有有名称，即<code>names(x)</code>不能包含空元素</strong></li><li><code>envir</code>：<code>x</code>所在的<strong>环境</strong>，同上<code>assign</code>中的说明</li></ul><h4 id="list2env具体使用"><a href="#list2env具体使用" class="headerlink" title="list2env具体使用"></a>list2env具体使用</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># names(L)不为空</span></span><br><span class="line">L &lt;- list(a = <span class="number">1</span>, b = <span class="number">2</span>:<span class="number">4</span>, p = pi, ff = gl(<span class="number">3</span>, <span class="number">4</span>, labels = LETTERS[<span class="number">1</span>:<span class="number">3</span>]))</span><br><span class="line">names(L)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"a"</span>  <span class="string">"b"</span>  <span class="string">"p"</span>  <span class="string">"ff"</span></span><br><span class="line">list2env(L, envir = .GlobalEnv)</span><br><span class="line">  &lt;environment: R_GlobalEnv&gt;</span><br><span class="line">ls()</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"a"</span>  <span class="string">"b"</span>  <span class="string">"ff"</span> <span class="string">"L"</span>  <span class="string">"p"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># names(L)含有空元素</span></span><br><span class="line">L &lt;- list( <span class="number">1</span>, b = <span class="number">2</span>:<span class="number">4</span>, p = pi, ff = gl(<span class="number">3</span>, <span class="number">4</span>, labels = LETTERS[<span class="number">1</span>:<span class="number">3</span>]))</span><br><span class="line">names(L)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">""</span>   <span class="string">"b"</span>  <span class="string">"p"</span>  <span class="string">"ff"</span></span><br><span class="line"><span class="comment"># 这一步报错</span></span><br><span class="line">list2env(L, envir = .GlobalEnv)</span><br><span class="line">  Error <span class="keyword">in</span> list2env(L, envir = .GlobalEnv) : </span><br><span class="line">    attempt to use zero-length variable name</span><br></pre></td></tr></table></figure><p>具体到<code>assign</code>中的问题：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">re_list=list()</span><br><span class="line">name_vect=c()</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">5</span>)&#123;</span><br><span class="line">  file_name=paste0(<span class="string">"data_"</span>,i,<span class="string">".txt"</span>)</span><br><span class="line">  re_list[[i]]=read.table(file_name)</span><br><span class="line">  name_vect=c(name_vect,paste0(<span class="string">"data_"</span>,i))</span><br><span class="line">&#125;</span><br><span class="line">names(re_list)=name_vect</span><br><span class="line">re_list</span><br><span class="line">  $data_1</span><br><span class="line">    V1</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  $data_2</span><br><span class="line">    V1</span><br><span class="line">  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  $data_3</span><br><span class="line">    V1</span><br><span class="line">  <span class="number">1</span>  <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  $data_4</span><br><span class="line">    V1</span><br><span class="line">  <span class="number">1</span>  <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  $data_5</span><br><span class="line">    V1</span><br><span class="line">  <span class="number">1</span>  <span class="number">5</span></span><br><span class="line">list2env(re_list, envir = .GlobalEnv)</span><br><span class="line">&lt;environment: R_GlobalEnv&gt;</span><br><span class="line"></span><br><span class="line">ls()</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"data_1"</span>    <span class="string">"data_2"</span>    <span class="string">"data_3"</span>    <span class="string">"data_4"</span>    <span class="string">"data_5"</span>    <span class="string">"file_name"</span></span><br><span class="line">  [<span class="number">7</span>] <span class="string">"i"</span>         <span class="string">"name_vect"</span> <span class="string">"re_list"</span></span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="得到字符串对应的变量的值-get"><a href="#得到字符串对应的变量的值-get" class="headerlink" title="得到字符串对应的变量的值-get"></a>得到字符串对应的变量的值-get</h2><p>前面已经通过<code>assign</code>配合循环操作<strong>将字符串转换为变量</strong>来存储文件内容，后面如果想要通过循环操作<strong>得到字符串对应的变量的值</strong>可以使用<code>get</code>.</p><h3 id="get用法"><a href="#get用法" class="headerlink" title="get用法"></a>get用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">Search by name <span class="keyword">for</span> an object (get) or zero or more objects (mget).</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">get(x, pos = -1, envir = as.environment(pos), mode = <span class="string">"any"</span>,</span><br><span class="line">    inherits = TRUE)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>x</code>：以<strong>字符串表示的object名称</strong></li><li><code>envir</code>：同前面<code>assign</code>中的用法</li></ul><hr><h3 id="get具体使用"><a href="#get具体使用" class="headerlink" title="get具体使用"></a>get具体使用</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">5</span>)&#123;</span><br><span class="line">  print(get(paste0(<span class="string">"data_"</span>,i)))</span><br><span class="line">&#125;</span><br><span class="line">    V1</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line">    V1</span><br><span class="line">  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line">    V1</span><br><span class="line">  <span class="number">1</span>  <span class="number">3</span></span><br><span class="line">    V1</span><br><span class="line">  <span class="number">1</span>  <span class="number">4</span></span><br><span class="line">    V1</span><br><span class="line">  <span class="number">1</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/21577905/changing-values-of-a-dynamically-created-variable-in-r" target="_blank" rel="noopener">使用的是list2env-changing values of a dynamically created variable in R</a></li><li><a href="https://zhuanlan.zhihu.com/p/30383865" target="_blank" rel="noopener">R学习笔记（二）变量名称和字符串的转换</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了可以&lt;strong&gt;将字符串转换为变量的&lt;code&gt;assign&lt;/code&gt;(还有类似的&lt;code&gt;list2env&lt;/code&gt;)&lt;/strong&gt;以及&lt;strong&gt;得到字符串对应的对象名称的函数&lt;code&gt;get&lt;/code&gt;&lt;/strong&gt;，这两个函数可以用于批量文件的读取和后续的处理。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R系列之运算符</title>
    <link href="http://showteeth.tech/posts/7017.html"/>
    <id>http://showteeth.tech/posts/7017.html</id>
    <published>2019-11-30T11:26:08.000Z</published>
    <updated>2019-12-01T15:51:22.594Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要总结了R语言中常用的运算符，主要包括<strong>算术运算符</strong>、<strong>关系运算符</strong>和<strong>逻辑运算符</strong>。其中逻辑运算符中的<code>&amp;</code>、<code>|</code>、<code>!</code>是对<strong>向量中每个元素的逻辑运算</strong>，而<code>&amp;&amp;</code>、<code>||</code>则是<strong>对向量中的第一个元素进行的逻辑运算</strong>。</p></div><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>R语言中主要有如下几种运算符：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li></ul><p>下面将分类对齐进行学习。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符<strong>对向量的每个元素都起作用</strong>.</p><h3 id="运算符作用"><a href="#运算符作用" class="headerlink" title="运算符作用"></a>运算符作用</h3><table><tr><th width="30%">运算符</th><th width="70%">描述</th></tr><tr><td>+</td><td>两个向量相加</td></tr><tr><td>-</td><td>两个向量相减</td></tr><tr><td>*</td><td>两个向量相乘</td></tr><tr><td>/</td><td>两个向量相除</td></tr><tr><td>%%</td><td>两个向量求余</td></tr><tr><td>％/％</td><td>两个向量相除求商</td></tr><tr><td>^</td><td>将第二向量作为第一向量的指数</td></tr></table><hr><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">v &lt;- c( <span class="number">2</span>,<span class="number">5.5</span>,<span class="number">6</span>)</span><br><span class="line">t &lt;- c(<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 向量相加：两个向量对应位置的元素相加</span></span><br><span class="line">print(v+t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">10.0</span>  <span class="number">8.5</span> <span class="number">10.0</span></span><br><span class="line"><span class="comment"># 向量相乘：两个向量对应位置的元素想乘</span></span><br><span class="line">print(v*t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">16.0</span> <span class="number">16.5</span> <span class="number">24.0</span></span><br><span class="line"><span class="comment"># 向量相除：默认显示六位小数</span></span><br><span class="line">print(v/t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0.250000</span> <span class="number">1.833333</span> <span class="number">1.500000</span></span><br><span class="line"><span class="comment"># 向量取余</span></span><br><span class="line">print(v%%t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">2.0</span> <span class="number">2.5</span> <span class="number">2.0</span></span><br><span class="line"><span class="comment"># 相除取商</span></span><br><span class="line">print(v%/%t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 指数</span></span><br><span class="line">print(v^t)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">256.000</span>  <span class="number">166.375</span> <span class="number">1296.000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向量长度不等</span></span><br><span class="line"><span class="comment"># 较短的那个会进行循环来达到和较长的一样长，同时还会有warning信息</span></span><br><span class="line">t &lt;- c(<span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line">print(v+t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">10.0</span>  <span class="number">8.5</span> <span class="number">14.0</span></span><br><span class="line">  Warning message:</span><br><span class="line">  In v + t : longer object length is not a multiple of shorter object length</span><br><span class="line">print(v*t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">16.0</span> <span class="number">16.5</span> <span class="number">48.0</span></span><br><span class="line">  Warning message:</span><br><span class="line">  In v * t : longer object length is not a multiple of shorter object length</span><br></pre></td></tr></table></figure><div class="note info"><p>注意事项：</p><ul><li><strong>向量长度不等</strong>时进行运算会<strong>将较短的向量重复</strong>直到和较长的向量相同来进行运算。</li></ul></div><hr><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符<strong>对向量的每个元素都起作用</strong>，<strong>返回的结果是bool值</strong>。</p><table><tr><th width="30%">运算符</th><th width="70%">描述</th></tr><tr><td>&gt;</td><td>检查第一向量的每个元素是否大于第二向量的相应元素。</td></tr><tr><td>&lt;</td><td>检查第一个向量的每个元素是否小于第二个向量的相应元素。</td></tr><tr><td>==</td><td>检查第一个向量的每个元素是否等于第二个向量的相应元素。</td></tr><tr><td>&lt;=</td><td>检查第一向量的每个元素是否小于或等于第二向量的相应元素。</td></tr><tr><td>&gt; =</td><td>检查第一向量的每个元素是否大于或等于第二向量的相应元素。</td></tr><tr><td>!=</td><td>检查第一个向量的每个元素是否不等于第二个向量的相应元素。</td></tr></table><hr><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符是这篇文章的重点，因为其<strong>与其他编程语言的习惯非常不同</strong>。R中的逻辑运算符包含<strong>对向量中每个元素进行的逻辑运算</strong>以及<strong>对向量的第一个元素进行的逻辑运算</strong>。</p><h3 id="运算符作用-1"><a href="#运算符作用-1" class="headerlink" title="运算符作用"></a>运算符作用</h3><table><tr><th width="10%">运算符</th><th width="90%">描述</th></tr><tr><td>&amp;</td><td>它被称为元素逻辑AND运算符。 它将第一向量的每个元素与第二向量的相应元素组合，并且如果两个元素都为TRUE，则给出输出TRUE。</td></tr><tr><td>|</td><td>它被称为元素逻辑或运算符。 它将第一向量的每个元素与第二向量的相应元素组合，并且如果元素为真，则给出输出TRUE。</td></tr><tr><td>!</td><td>它被称为逻辑非运算符。 取得向量的每个元素，并给出相反的逻辑值。</td></tr><tr><td>&amp;&amp;</td><td>称为逻辑AND运算符。 取两个向量的第一个元素，并且只有两个都为TRUE时才给出TRUE。</td></tr><tr><td>||</td><td>称为逻辑OR运算符。 取两个向量的第一个元素，如果其中一个为TRUE，则给出TRUE</td></tr></table><hr><h3 id="使用实例-1"><a href="#使用实例-1" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v &lt;- c(<span class="number">3</span>,<span class="number">1</span>,<span class="literal">TRUE</span>,<span class="number">2</span>+<span class="number">3i</span>)</span><br><span class="line">t &lt;- c(<span class="number">4</span>,<span class="number">1</span>,<span class="literal">FALSE</span>,<span class="number">2</span>+<span class="number">3i</span>)</span><br><span class="line"><span class="comment"># 对每个元素进行逻辑运算</span></span><br><span class="line">print(v&amp;t)</span><br><span class="line">  [<span class="number">1</span>]  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></span><br><span class="line"><span class="comment"># 对向量的第一个元素进行逻辑运算</span></span><br><span class="line">print(v&amp;&amp;t)</span><br><span class="line">  [<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(!v)</span><br><span class="line">  [<span class="number">1</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.w3cschool.cn/r/r_operators.html" target="_blank" rel="noopener">R语言运算符</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要总结了R语言中常用的运算符，主要包括&lt;strong&gt;算术运算符&lt;/strong&gt;、&lt;strong&gt;关系运算符&lt;/strong&gt;和&lt;strong&gt;逻辑运算符&lt;/strong&gt;。其中逻辑运算符中的&lt;code&gt;&amp;amp;&lt;/code&gt;、&lt;code&gt;|&lt;/code&gt;、&lt;code&gt;!&lt;/code&gt;是对&lt;strong&gt;向量中每个元素的逻辑运算&lt;/strong&gt;，而&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;、&lt;code&gt;||&lt;/code&gt;则是&lt;strong&gt;对向量中的第一个元素进行的逻辑运算&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之字典使用技巧</title>
    <link href="http://showteeth.tech/posts/30759.html"/>
    <id>http://showteeth.tech/posts/30759.html</id>
    <published>2019-11-29T11:33:54.000Z</published>
    <updated>2019-12-01T15:51:22.590Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章总结了Python中<strong>字典的常用操作</strong>，包括<strong>创建字典</strong>、<strong>字典遍历</strong>、<strong>键值不存在时的赋值问题</strong>、<strong>获取字典最值</strong>。</p></div><a id="more"></a><h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><h3 id="普通创建"><a href="#普通创建" class="headerlink" title="普通创建"></a>普通创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;<span class="string">'a'</span>: <span class="string">'1'</span>, <span class="string">'b'</span>: <span class="string">'2'</span>, <span class="string">'c'</span>: <span class="string">'3'</span>&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="两个列表组成字典"><a href="#两个列表组成字典" class="headerlink" title="两个列表组成字典"></a>两个列表组成字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>] </span><br><span class="line">values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line"><span class="comment"># zip</span></span><br><span class="line">dictionary = dict(zip(keys, values)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (dictionary) </span><br><span class="line"><span class="comment"># 输出: </span></span><br><span class="line"><span class="comment">#      &#123;'a': 1, 'c': 3, 'b': 2&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="值为列表"><a href="#值为列表" class="headerlink" title="值为列表"></a>值为列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单方法：调用collections中的defaultdict</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">dic_test=defaultdict(list)</span><br><span class="line">dic_test[<span class="string">'a'</span>].append(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 具体的形式：defaultdict(&lt;type 'list'&gt;, &#123;'a': [1]&#125;)</span></span><br></pre></td></tr></table></figure><hr><h2 id="字典遍历"><a href="#字典遍历" class="headerlink" title="字典遍历"></a>字典遍历</h2><h3 id="遍历键和值"><a href="#遍历键和值" class="headerlink" title="遍历键和值"></a>遍历键和值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">  <span class="keyword">print</span> (k)</span><br><span class="line">  <span class="keyword">print</span> (v)</span><br></pre></td></tr></table></figure><hr><h3 id="遍历键-消失的has-key"><a href="#遍历键-消失的has-key" class="headerlink" title="遍历键-消失的has_key"></a>遍历键-消失的has_key</h3><p><a href="https://docs.python.org/3.1/whatsnew/3.0.html#builtins" target="_blank" rel="noopener">Python3</a><strong>删除</strong>了字典的<code>has_key</code>方法，<strong>取而代之的是in</strong>:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"1"</span>:<span class="number">1</span>, <span class="string">"2"</span>:<span class="number">0</span>, <span class="string">"3"</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># 使用has_key报错</span></span><br><span class="line">print(<span class="string">"yes"</span>) <span class="keyword">if</span> d.has_key(<span class="string">"1"</span>) <span class="keyword">else</span> print(<span class="string">"no"</span>)</span><br><span class="line">  AttributeError: <span class="string">'dict'</span> object has no attribute <span class="string">'has_key'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用in</span></span><br><span class="line">print(<span class="string">"yes"</span>) <span class="keyword">if</span> <span class="string">"1"</span> <span class="keyword">in</span> d.keys() <span class="keyword">else</span> print(<span class="string">"no"</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="键值不存在时的赋值问题"><a href="#键值不存在时的赋值问题" class="headerlink" title="键值不存在时的赋值问题"></a>键值不存在时的赋值问题</h2><p>使用字典的可能会遇到<strong>判断键值是不是已经存在于字典，如果存在就将其值加1，如果不存在就加入这个键值，然后计数为1</strong>。</p><h3 id="复杂方法"><a href="#复杂方法" class="headerlink" title="复杂方法"></a>复杂方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"a"</span>:<span class="number">0</span>, <span class="string">"b"</span>:<span class="number">0</span>, <span class="string">"c"</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># 字符串也是可迭代对象，返回单个字符</span></span><br><span class="line">e=<span class="string">"abababcd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂的用法</span></span><br><span class="line"><span class="comment"># 虽然也可以解决问题，但是在我看来肯定不会是最好的</span></span><br><span class="line"><span class="comment"># 略显笨拙</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> d.keys():</span><br><span class="line">        d[i]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d[i]=<span class="number">0</span></span><br><span class="line">        d[i]+=<span class="number">1</span></span><br><span class="line"><span class="comment"># &#123;'a': 3, 'b': 3, 'c': 2, 'd': 1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="dic-get方法"><a href="#dic-get方法" class="headerlink" title="dic.get方法"></a>dic.get方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict.get(key, default=<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># key -- 字典中要查找的键。</span></span><br><span class="line"><span class="comment"># default -- 如果指定键的值不存在时，返回该默认值值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> d.keys():</span><br><span class="line">        d[i]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 一定要设置默认值为0，不然None+1会报错</span></span><br><span class="line">        d[i]=d.get(i,<span class="number">0</span>)+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>很明显，<code>dic.get</code>方法使代码变得更加优雅了。</p><h3 id="defaultdict方法"><a href="#defaultdict方法" class="headerlink" title="defaultdict方法"></a>defaultdict方法</h3><h4 id="全新的dic"><a href="#全新的dic" class="headerlink" title="全新的dic"></a>全新的dic</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="comment"># lambda: 0表示不存在的key默认为0</span></span><br><span class="line">d = defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>)</span><br><span class="line">d</span><br><span class="line">  defaultdict(&lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;()&gt;, &#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    d[i]+=<span class="number">1</span></span><br><span class="line">d</span><br><span class="line">  defaultdict(&lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;()&gt;, &#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">1</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="部分初始化的dic"><a href="#部分初始化的dic" class="headerlink" title="部分初始化的dic"></a>部分初始化的dic</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">d = &#123;<span class="string">"a"</span>:<span class="number">0</span>, <span class="string">"b"</span>:<span class="number">0</span>, <span class="string">"c"</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># 将已经存在的字典d转化为defaultdict，并且如果键值不存在，默认值为0</span></span><br><span class="line">d = defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>,d)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    d[i]+=<span class="number">1</span></span><br><span class="line">d</span><br><span class="line">  defaultdict(&lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;()&gt;, &#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 顺便将defaultdict转化为常规的dict</span></span><br><span class="line">dict(d)</span><br><span class="line">  &#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://stackoverflow.com/questions/9285086/access-dict-key-and-return-none-if-doesnt-exist/9285161" target="_blank" rel="noopener">Access dict key and return None if doesn’t exist</a></li><li><a href="https://stackoverflow.com/questions/6130768/return-none-if-dictionary-key-is-not-available" target="_blank" rel="noopener">Return None if Dictionary key is not available</a></li></ul><hr><h2 id="获取字典最值"><a href="#获取字典最值" class="headerlink" title="获取字典最值"></a>获取字典最值</h2><h3 id="利用min-dict-key-dict-get"><a href="#利用min-dict-key-dict-get" class="headerlink" title="利用min(dict, key=dict.get)"></a>利用min(dict, key=dict.get)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">0</span>, <span class="number">3</span>:<span class="number">2</span>&#125;</span><br><span class="line">min(d, key=d.get)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment">#     2</span></span><br></pre></td></tr></table></figure><hr><h3 id="利用lambda函数"><a href="#利用lambda函数" class="headerlink" title="利用lambda函数"></a>利用lambda函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到索引和值</span></span><br><span class="line">min(d.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment">#     (2, 0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只得到值</span></span><br><span class="line">min(d, key=<span class="keyword">lambda</span> x: d[x])</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment">#      2</span></span><br></pre></td></tr></table></figure><hr><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章总结了Python中&lt;strong&gt;字典的常用操作&lt;/strong&gt;，包括&lt;strong&gt;创建字典&lt;/strong&gt;、&lt;strong&gt;字典遍历&lt;/strong&gt;、&lt;strong&gt;键值不存在时的赋值问题&lt;/strong&gt;、&lt;strong&gt;获取字典最值&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/categories/Python/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Github系列之常用小技巧</title>
    <link href="http://showteeth.tech/posts/55438.html"/>
    <id>http://showteeth.tech/posts/55438.html</id>
    <published>2019-11-27T14:11:15.000Z</published>
    <updated>2019-12-01T15:51:22.586Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录在<strong>使用Github时搜集的一些小技巧</strong>，便于日后使用。</p></div><a id="more"></a><h2 id="查看jupyter文件"><a href="#查看jupyter文件" class="headerlink" title="查看jupyter文件"></a>查看jupyter文件</h2><p><code>Github</code>虽然也可以直接查看<code>jupyter</code>文件，但是<strong>加载速度很慢</strong>，这个时候可以使用<code>nbviewer</code>，具体的链接：</p><div><br><a class="btn" href="https://nbviewer.jupyter.org" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>A simple way to share Jupyter Notebooks</a><br></div><p><code>nbviewer</code>打开<code>jupyter</code>文件之后还可以点击左上角的路径选择其他的文件，如果是非<code>jupyter</code>文件会直接跳转到<code>Github</code>对应的链接上。</p><hr><h2 id="查看html文件"><a href="#查看html文件" class="headerlink" title="查看html文件"></a>查看html文件</h2><p>相比于前面<code>Github</code>查看<code>jupyter</code>文件只是加载慢的问题，<code>Github</code>对<code>html</code>文件的支持就更差了，直接显示源码，这个很不方便，这种情况下可以使用<code>htmlpreview</code>，具体链接：</p><div><br><a class="btn" href="http://htmlpreview.github.io/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>GitHub & BitBucket HTML Preview</a><br></div><hr><h2 id="直接显示所有文件"><a href="#直接显示所有文件" class="headerlink" title="直接显示所有文件"></a>直接显示所有文件</h2><p>打开一个<code>Github</code>的<code>repo</code>会按文件夹显示文件信息，如果<strong>想直接显示所有的文件，不用进入目录查找</strong>，可以使用:<strong>仓库 URL + find/分支名称</strong>，如<a href="https://github.com/showteeth/blog_reprint/find/master" target="_blank" rel="noopener">https://github.com/showteeth/blog_reprint/find/master</a></p><p>其实这个功能也可以<strong>通过快捷键来设置</strong>，在<code>Github</code>中打开一个<code>repo</code>之后，<strong>按下<code>t</code>键</strong>，就会达到和上述相同的效果。</p><hr><h2 id="查看原始文件"><a href="#查看原始文件" class="headerlink" title="查看原始文件"></a>查看原始文件</h2><p>查看原始文件的作用：</p><ul><li>看原始信息</li><li>下载文件，右键-&gt;另存为</li></ul><p>查看方法：</p><ul><li>将<code>https://github.com</code>更改<code>https://raw.githubusercontent.com</code>，并且去掉<code>blob</code></li><li>将<code>blob</code>改为<code>raw</code></li><li>在链接最后增加增加<code>?raw=true</code></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录在&lt;strong&gt;使用Github时搜集的一些小技巧&lt;/strong&gt;，便于日后使用。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="其他内容学习" scheme="http://showteeth.tech/categories/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Github" scheme="http://showteeth.tech/categories/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/Github/"/>
    
    
      <category term="小技巧" scheme="http://showteeth.tech/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>R系列之使用dplyr处理数据</title>
    <link href="http://showteeth.tech/posts/54831.html"/>
    <id>http://showteeth.tech/posts/54831.html</id>
    <published>2019-11-23T04:03:25.000Z</published>
    <updated>2020-02-13T12:24:09.009Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了使用<code>dplyr</code>处理数据，主要包括使用<code>select</code><strong>对列进行筛选</strong>，使用<code>filter</code>、<code>slice</code>、<code>sample_n</code>、<code>sample_frac</code><strong>对行进行筛选</strong>，使用<code>arrange</code><strong>对行进行排序</strong>，使用管道操作符<code>%&gt;%</code>，使用<code>mutate</code><strong>添加新列</strong>，使用<code>group_by()</code><strong>进行分组</strong>，使用<code>summarise</code><strong>进行结果汇总</strong>，使用<code>tally</code><strong>统计频数</strong>以及<strong>合并两个表</strong>的操作。</p></div><a id="more"></a><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><code>dplyr</code>可以使<strong>表格数据(<code>tabular data</code>)</strong>的处理更加方便和简单，并且其<strong>可以处理存储在外部数据库中的数据</strong>，这样做的好处是所有的数据处理步骤都是发生在外部的数据库中，<strong>只将结果返回</strong>(<strong>这解决了R中的一个常见问题：所有的操作都是在内存中进行的，数据先读取到内存中，这样的话内存的大小就会限制处理数据的多少</strong>)。</p><p>这里主要学习如下内容：</p><ul><li>使用<code>dplyr</code>中的<code>select</code>函数来<strong>选择列</strong></li><li>使用<code>dplyr</code>中的<code>filter</code>函数来<strong>筛选行</strong></li><li>管道操作符<code>%&gt;%</code></li><li>使用<code>dplyr</code>中的<code>mutate</code>函数来<strong>增加列</strong></li><li>理解<code>split-apply-combine</code>的概念</li><li>使用<code>dplyr</code>中的<code>summarize</code>、<code>group_by</code>和<code>tally</code>来将data frame拆分为group，然后对每个group应用summary statistics，最后将结果combine.</li></ul><hr><h2 id="dplyr-cheatsheet"><a href="#dplyr-cheatsheet" class="headerlink" title="dplyr-cheatsheet"></a>dplyr-cheatsheet</h2><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/dplyr-cheatsheet_1.png" alt="dplyr-cheatsheet_1.png"></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/dplyr-cheatsheet_2.png" alt="dplyr-cheatsheet_2.png"></p><p><a href="https://github.com/rstudio/cheatsheets/blob/master/data-transformation.pdf" target="_blank" rel="noopener">来源链接</a></p><hr><h2 id="示例数据"><a href="#示例数据" class="headerlink" title="示例数据"></a>示例数据</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">trafficstops &lt;- read.csv(<span class="string">"~/R/others/ms_statewide_2019_08_13.csv"</span>)</span><br><span class="line">head(trafficstops)</span><br><span class="line">    raw_row_number       date      county_name subject_age subject_race subject_sex department_id         department_name</span><br><span class="line">  <span class="number">1</span>              <span class="number">1</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">13</span>    Rankin County          <span class="number">43</span>        black        male          <span class="number">6103</span>     Flowood Police Dept</span><br><span class="line">  <span class="number">2</span>              <span class="number">2</span> <span class="number">2015</span>-<span class="number">02</span>-<span class="number">10</span>   Forrest County          <span class="number">42</span>        white      female          <span class="number">1801</span> Hattiesburg Police Dept</span><br><span class="line">  <span class="number">3</span>              <span class="number">3</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">14</span>    Rankin County          <span class="number">47</span>        black      female          <span class="number">6103</span>     Flowood Police Dept</span><br><span class="line">  <span class="number">4</span>              <span class="number">4</span> <span class="number">2015</span>-<span class="number">04</span>-<span class="number">25</span> Oktibbeha County          <span class="number">19</span>        white      female          <span class="number">5302</span>  Starkville Police Dept</span><br><span class="line">  <span class="number">5</span>              <span class="number">5</span> <span class="number">2013</span>-<span class="number">07</span>-<span class="number">16</span>    Warren County          <span class="number">29</span>        white        male          <span class="number">7501</span>    Vickburg Police Dept</span><br><span class="line">  <span class="number">6</span>              <span class="number">6</span> <span class="number">2015</span>-<span class="number">04</span>-<span class="number">30</span>   Madison County          <span class="number">48</span>        black      female          <span class="number">4504</span>   Ridgeland Police Dept</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><hr><h2 id="选择部分行或列"><a href="#选择部分行或列" class="headerlink" title="选择部分行或列"></a>选择部分行或列</h2><h3 id="筛选列-select"><a href="#筛选列-select" class="headerlink" title="筛选列-select"></a>筛选列-select</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用select(trafficstops,date,county_name)可能会报错:</span></span><br><span class="line"><span class="comment"># unable to find an inherited method for function ‘select’ for signature ‘"data.frame"’</span></span><br><span class="line"><span class="comment"># 从trafficstops中选取date、county_name列</span></span><br><span class="line">dplyr::select(trafficstops,date,county_name)</span><br><span class="line">              date            county_name</span><br><span class="line">  <span class="number">1</span>      <span class="number">2013</span>-<span class="number">11</span>-<span class="number">13</span>          Rankin County</span><br><span class="line">  <span class="number">2</span>      <span class="number">2015</span>-<span class="number">02</span>-<span class="number">10</span>         Forrest County</span><br><span class="line">  <span class="number">3</span>      <span class="number">2013</span>-<span class="number">11</span>-<span class="number">14</span>          Rankin County</span><br><span class="line">  <span class="number">4</span>      <span class="number">2015</span>-<span class="number">04</span>-<span class="number">25</span>       Oktibbeha County</span><br><span class="line">  <span class="number">5</span>      <span class="number">2013</span>-<span class="number">07</span>-<span class="number">16</span>          Warren County</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p>更高级的用法是<strong>按照列名共同的规律</strong>进行筛选：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛选所有以subject开头的列</span></span><br><span class="line">dplyr::select(trafficstops,starts_with(<span class="string">"subject"</span>))</span><br><span class="line">        subject_age           subject_race subject_sex</span><br><span class="line">  <span class="number">1</span>               <span class="number">43</span>                  black        male</span><br><span class="line">  <span class="number">2</span>               <span class="number">42</span>                  white      female</span><br><span class="line">  <span class="number">3</span>               <span class="number">47</span>                  black      female</span><br><span class="line">  <span class="number">4</span>               <span class="number">19</span>                  white      female</span><br><span class="line">  <span class="number">5</span>               <span class="number">29</span>                  white        male</span><br><span class="line">  <span class="number">6</span>               <span class="number">48</span>                  black      female</span><br><span class="line">  ........</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有starts_with，那肯定也有ends_with()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选所有列名包含speed的列</span></span><br><span class="line">dplyr::select(trafficstops,contains(<span class="string">"speed"</span>))</span><br><span class="line">        speed posted_speed</span><br><span class="line">  <span class="number">1</span>         <span class="literal">NA</span>           <span class="literal">NA</span></span><br><span class="line">  <span class="number">2</span>         <span class="literal">NA</span>           <span class="literal">NA</span></span><br><span class="line">  <span class="number">3</span>         <span class="literal">NA</span>           <span class="literal">NA</span></span><br><span class="line">  <span class="number">4</span>         <span class="literal">NA</span>           <span class="literal">NA</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>如果想要<strong>删除某些列</strong>可以使用：<code>dplyr::select(trafficstops,-c(date,county_name))</code>，即在<strong>列名前加上负号</strong>。</p></div><hr><h3 id="筛选行"><a href="#筛选行" class="headerlink" title="筛选行"></a>筛选行</h3><h4 id="通过filter来筛选"><a href="#通过filter来筛选" class="headerlink" title="通过filter来筛选"></a>通过filter来筛选</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛选county_name=="Rankin County"的行</span></span><br><span class="line">dplyr::filter(trafficstops,county_name==<span class="string">"Rankin County"</span>)</span><br><span class="line">        raw_row_number       date   county_name subject_age           subject_race subject_sex department_id</span><br><span class="line">  <span class="number">1</span>                  <span class="number">1</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">13</span> Rankin County          <span class="number">43</span>                  black        male          <span class="number">6103</span></span><br><span class="line">  <span class="number">2</span>                  <span class="number">3</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">14</span> Rankin County          <span class="number">47</span>                  black      female          <span class="number">6103</span></span><br><span class="line">  <span class="number">3</span>                  <span class="number">7</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">18</span> Rankin County          <span class="number">28</span>                  white      female          <span class="number">6103</span></span><br><span class="line">  <span class="number">4</span>                 <span class="number">16</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">19</span> Rankin County          <span class="number">22</span>                  white        male          <span class="number">6103</span></span><br><span class="line">  <span class="number">5</span>                 <span class="number">67</span> <span class="number">2013</span>-<span class="number">08</span>-<span class="number">10</span> Rankin County          <span class="number">19</span>                  white        male          <span class="number">6103</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><hr><h4 id="通过slice来切片"><a href="#通过slice来切片" class="headerlink" title="通过slice来切片"></a>通过slice来切片</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dplyr::slice(trafficstops, <span class="number">1</span>:<span class="number">3</span>)</span><br><span class="line">    raw_row_number       date    county_name subject_age subject_race subject_sex department_id         department_name</span><br><span class="line">  <span class="number">1</span>              <span class="number">1</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">13</span>  Rankin County          <span class="number">43</span>        black        male          <span class="number">6103</span>     Flowood Police Dept</span><br><span class="line">  <span class="number">2</span>              <span class="number">2</span> <span class="number">2015</span>-<span class="number">02</span>-<span class="number">10</span> Forrest County          <span class="number">42</span>        white      female          <span class="number">1801</span> Hattiesburg Police Dept</span><br><span class="line">  <span class="number">3</span>              <span class="number">3</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">14</span>  Rankin County          <span class="number">47</span>        black      female          <span class="number">6103</span>     Flowood Police Dept</span><br></pre></td></tr></table></figure><hr><h4 id="随机筛选-sample-n、sample-frac"><a href="#随机筛选-sample-n、sample-frac" class="headerlink" title="随机筛选-sample_n、sample_frac"></a>随机筛选-sample_n、sample_frac</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机筛选5行</span></span><br><span class="line">sample_n(trafficstops, <span class="number">5</span>)</span><br><span class="line">    raw_row_number       date     county_name subject_age subject_race subject_sex department_id</span><br><span class="line">  <span class="number">1</span>         <span class="number">507813</span> <span class="number">2014</span>-<span class="number">11</span>-<span class="number">21</span>      Lee County          <span class="number">40</span>        white      female          <span class="number">4107</span></span><br><span class="line">  <span class="number">2</span>         <span class="number">285751</span> <span class="number">2014</span>-<span class="number">04</span>-<span class="number">24</span>  Madison County          <span class="number">45</span>        white      female          <span class="number">4504</span></span><br><span class="line">  <span class="number">3</span>         <span class="number">572405</span> <span class="number">2015</span>-<span class="number">08</span>-<span class="number">11</span>    Smith County          <span class="number">35</span>        white      female          <span class="number">6504</span></span><br><span class="line">  <span class="number">4</span>         <span class="number">147691</span> <span class="number">2013</span>-<span class="number">02</span>-<span class="number">12</span> Harrison County          <span class="number">35</span>        black        male          <span class="number">9024</span></span><br><span class="line">  <span class="number">5</span>         <span class="number">335079</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">25</span>  Winston County          <span class="number">23</span>        black      female          <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机筛选1%的行</span></span><br><span class="line">dplyr::sample_frac(trafficstops, <span class="number">.01</span>)</span><br><span class="line">      raw_row_number       date            county_name subject_age           subject_race subject_sex department_id</span><br><span class="line">  <span class="number">1</span>            <span class="number">190223</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">26</span>           Adams County          <span class="number">32</span>                  black        male           <span class="number">102</span></span><br><span class="line">  <span class="number">2</span>            <span class="number">432004</span> <span class="number">2015</span>-<span class="number">01</span>-<span class="number">06</span>           Lamar County          <span class="number">20</span>                  white      female          <span class="number">3702</span></span><br><span class="line">  <span class="number">3</span>            <span class="number">110352</span> <span class="number">2013</span>-<span class="number">08</span>-<span class="number">27</span>         Coahoma County          <span class="number">64</span>                  black        male          <span class="number">9014</span></span><br><span class="line">  <span class="number">4</span>            <span class="number">628220</span> <span class="number">2015</span>-<span class="number">09</span>-<span class="number">02</span>             Lee County          <span class="number">59</span>                  white        male          <span class="number">9041</span></span><br><span class="line">  <span class="number">5</span>            <span class="number">287465</span> <span class="number">2014</span>-<span class="number">06</span>-<span class="number">06</span>         Grenada County          <span class="number">32</span>                  white      female          <span class="number">9022</span></span><br><span class="line">  <span class="number">6</span>            <span class="number">614870</span> <span class="number">2015</span>-<span class="number">07</span>-<span class="number">05</span>          Kemper County          <span class="number">33</span>                  white      female          <span class="number">9035</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><hr><h2 id="对行进行排序-arrange"><a href="#对行进行排序-arrange" class="headerlink" title="对行进行排序-arrange"></a>对行进行排序-arrange</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对county_name进行排序，在county_name按照subject_age排序，默认都是升序</span></span><br><span class="line">dplyr::arrange(trafficstops, county_name, subject_age)</span><br><span class="line">        raw_row_number       date            county_name subject_age           subject_race subject_sex department_id</span><br><span class="line">  <span class="number">1</span>               <span class="number">39379</span> <span class="number">2013</span>-<span class="number">02</span>-<span class="number">22</span>           Adams County          <span class="number">16</span>                  black        male           <span class="number">102</span></span><br><span class="line">  <span class="number">2</span>               <span class="number">43831</span> <span class="number">2013</span>-<span class="number">02</span>-<span class="number">08</span>           Adams County          <span class="number">16</span>                  white      female           <span class="number">102</span></span><br><span class="line">  <span class="number">3</span>               <span class="number">87848</span> <span class="number">2013</span>-<span class="number">05</span>-<span class="number">11</span>           Adams County          <span class="number">16</span>                  black      female           <span class="number">102</span></span><br><span class="line">  <span class="number">4</span>              <span class="number">135195</span> <span class="number">2013</span>-<span class="number">09</span>-<span class="number">07</span>           Adams County          <span class="number">16</span>                  white        male           <span class="number">102</span></span><br><span class="line">  <span class="number">5</span>              <span class="number">169096</span> <span class="number">2013</span>-<span class="number">10</span>-<span class="number">10</span>           Adams County          <span class="number">16</span>                  white        male           <span class="number">102</span></span><br><span class="line">  <span class="number">6</span>              <span class="number">190584</span> <span class="number">2013</span>-<span class="number">12</span>-<span class="number">07</span>           Adams County          <span class="number">16</span>                  white      female          <span class="number">9001</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒序排列：desc</span></span><br><span class="line">dplyr::arrange(trafficstops, desc(county_name), subject_age)</span><br><span class="line">        raw_row_number       date            county_name subject_age           subject_race subject_sex department_id</span><br><span class="line">  <span class="number">1</span>               <span class="number">23620</span> <span class="number">2013</span>-<span class="number">03</span>-<span class="number">12</span>           Yazoo County          <span class="number">16</span>                  white        male          <span class="number">8204</span></span><br><span class="line">  <span class="number">2</span>              <span class="number">118669</span> <span class="number">2013</span>-<span class="number">08</span>-<span class="number">24</span>           Yazoo County          <span class="number">16</span>                  white        male          <span class="number">8204</span></span><br><span class="line">  <span class="number">3</span>              <span class="number">206927</span> <span class="number">2013</span>-<span class="number">09</span>-<span class="number">04</span>           Yazoo County          <span class="number">16</span>                  white      female          <span class="number">9082</span></span><br><span class="line">  <span class="number">4</span>              <span class="number">206982</span> <span class="number">2013</span>-<span class="number">10</span>-<span class="number">18</span>           Yazoo County          <span class="number">16</span>                  white        male            <span class="number">82</span></span><br><span class="line">  <span class="number">5</span>              <span class="number">406351</span> <span class="number">2013</span>-<span class="number">03</span>-<span class="number">14</span>           Yazoo County          <span class="number">16</span>                  white        male            <span class="number">82</span></span><br><span class="line">  <span class="number">6</span>              <span class="number">420793</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">23</span>           Yazoo County          <span class="number">16</span>                  black      female          <span class="number">8204</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><hr><h2 id="管道操作-gt"><a href="#管道操作-gt" class="headerlink" title="管道操作-%&gt;%"></a>管道操作-%&gt;%</h2><p>管道在Linux命令使用比较多，就是将上一步的输出作为下一步的输入，使用的管道符为<code>|</code>，在R中也有类似的操作符：<code>%&gt;%</code>，起到的作用也是相同的：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先对行进行过滤，然后在过滤的结果中选择subject_age、subject_sex列，最后按照subject_age排序</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::filter(county_name == <span class="string">"Tunica County"</span>) %&gt;% </span><br><span class="line">  dplyr::select(subject_age, subject_sex) %&gt;% </span><br><span class="line">  dplyr::arrange(subject_age)</span><br><span class="line">      subject_age subject_sex</span><br><span class="line">  <span class="number">1</span>            <span class="number">17</span>      female</span><br><span class="line">  <span class="number">2</span>            <span class="number">17</span>      female</span><br><span class="line">  <span class="number">3</span>            <span class="number">17</span>        male</span><br><span class="line">  <span class="number">4</span>            <span class="number">18</span>        male</span><br><span class="line">  <span class="number">5</span>            <span class="number">18</span>      female</span><br><span class="line">  <span class="number">6</span>            <span class="number">18</span>      female</span><br><span class="line">  <span class="number">7</span>            <span class="number">18</span>        male</span><br><span class="line">  <span class="number">8</span>            <span class="number">18</span>        male</span><br><span class="line">  <span class="number">9</span>            <span class="number">18</span>        male</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不使用管道，也可以使用命令的嵌套来实现</span></span><br><span class="line">dplyr::arrange(</span><br><span class="line">  dplyr::select(</span><br><span class="line">    dplyr::filter(trafficstops,county_name == <span class="string">"Tunica County"</span>),</span><br><span class="line">    subject_age, subject_sex),</span><br><span class="line">    subject_age)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="添加新列-mutate"><a href="#添加新列-mutate" class="headerlink" title="添加新列-mutate"></a>添加新列-mutate</h2><h3 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h3><p>基于已经存在的列的信息来添加新列，需要注意的是<strong>不是直接修改原始的表格</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将date的前四个字符保存到新列subdate中</span></span><br><span class="line">trafficstops %&gt;% dplyr::mutate(subdate=substring(date,<span class="number">1</span>,<span class="number">4</span>)) %&gt;% dplyr::select(date,subdate)</span><br><span class="line">              date subdate</span><br><span class="line">  <span class="number">1</span>      <span class="number">2013</span>-<span class="number">11</span>-<span class="number">13</span>    <span class="number">2013</span></span><br><span class="line">  <span class="number">2</span>      <span class="number">2015</span>-<span class="number">02</span>-<span class="number">10</span>    <span class="number">2015</span></span><br><span class="line">  <span class="number">3</span>      <span class="number">2013</span>-<span class="number">11</span>-<span class="number">14</span>    <span class="number">2013</span></span><br><span class="line">  <span class="number">4</span>      <span class="number">2015</span>-<span class="number">04</span>-<span class="number">25</span>    <span class="number">2015</span></span><br><span class="line">  <span class="number">5</span>      <span class="number">2013</span>-<span class="number">07</span>-<span class="number">16</span>    <span class="number">2013</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="嵌套判断语句"><a href="#嵌套判断语句" class="headerlink" title="嵌套判断语句"></a>嵌套判断语句</h3><p>如果想<strong>先判断某一列的值</strong>是不是<strong>符合某个条件</strong>然后<strong>再确定具体添加列中添加什么值</strong>，可以使用如下方法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">head(FS_vcf_freq_df)</span><br><span class="line">                  Sample_name  ST frac</span><br><span class="line">  <span class="number">1</span> FSDQC1_wang_293T_depth_100 A.T    <span class="number">0</span></span><br><span class="line">  <span class="number">2</span> FSDQC2_wang_293T_depth_100 A.T    <span class="number">0</span></span><br><span class="line">  <span class="number">3</span> FSDQO1_wang_293T_depth_100 A.T    <span class="number">0</span></span><br><span class="line">  <span class="number">4</span> FSDQO2_wang_293T_depth_100 A.T    <span class="number">0</span></span><br><span class="line">  <span class="number">5</span> FSQQC1_wang_293T_depth_100 A.T    <span class="number">0</span></span><br><span class="line">  <span class="number">6</span> FSQQC2_wang_293T_depth_100 A.T    <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Sample_name以FS开头，则在最后添加一列为FS，如果不是则为SA</span></span><br><span class="line"><span class="comment"># 需要注意的是ifelse可以嵌套</span></span><br><span class="line">FS_vcf_freq_df %&gt;% mutate(Cell_line=ifelse(grepl(<span class="string">"^FS"</span>,Sample_name), <span class="string">"FS"</span>,<span class="string">"SA"</span> )) </span><br><span class="line">  <span class="keyword">...</span></span><br><span class="line">  <span class="number">11</span>  FSTQO1_wang_293T_depth_100 A.T <span class="number">16.359405145</span>        FS</span><br><span class="line">  <span class="number">12</span>  FSTQO2_wang_293T_depth_100 A.T <span class="number">19.785594833</span>        FS</span><br><span class="line">  <span class="number">13</span>  SADQC1_wang_293T_depth_100 A.T  <span class="number">0.009034881</span>        SA</span><br><span class="line">  <span class="number">14</span>  SADQC2_wang_293T_depth_100 A.T  <span class="number">0.006937902</span>        SA</span><br><span class="line">  <span class="keyword">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用dplyr中新的方法：case_when</span></span><br><span class="line"><span class="comment"># 注意最后的TRUE的用法，换成FALSE则出错，表示剩下所有的都改成SA</span></span><br><span class="line">FS_vcf_freq_df %&gt;% mutate(Cell_line=case_when(grepl(<span class="string">"^FS"</span>,Sample_name) ~ <span class="string">"FS"</span>, <span class="literal">TRUE</span> ~ <span class="string">"SA"</span> ))</span><br><span class="line">  <span class="keyword">...</span></span><br><span class="line">  <span class="number">11</span>  FSTQO1_wang_293T_depth_100 A.T <span class="number">16.359405145</span>        FS</span><br><span class="line">  <span class="number">12</span>  FSTQO2_wang_293T_depth_100 A.T <span class="number">19.785594833</span>        FS</span><br><span class="line">  <span class="number">13</span>  SADQC1_wang_293T_depth_100 A.T  <span class="number">0.009034881</span>        SA</span><br><span class="line">  <span class="number">14</span>  SADQC2_wang_293T_depth_100 A.T  <span class="number">0.006937902</span>        SA</span><br><span class="line">  <span class="keyword">...</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="split-apply-combine"><a href="#split-apply-combine" class="headerlink" title="split-apply-combine"></a>split-apply-combine</h2><p><strong>split-apply-combine paradigm</strong>：</p><ul><li>将数据分组-<code>group_by()</code></li><li>以每个组为单位进行分析</li><li>将所有的结果汇总-<code>summarise()</code></li></ul><p>其示例图如下：<br><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/split-apply-combine-paradigm.png" alt="split-apply-combine-paradigm.png"></p><hr><h3 id="数据分组-group-by"><a href="#数据分组-group-by" class="headerlink" title="数据分组-group_by()"></a>数据分组-group_by()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算每个subject_race的平均年龄</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::group_by(subject_race) %&gt;% </span><br><span class="line">    dplyr::summarise(mean_age=mean(subject_age,na.rm=<span class="literal">TRUE</span>))</span><br><span class="line">  <span class="comment"># A tibble: 5 x 2</span></span><br><span class="line">    subject_race           mean_age</span><br><span class="line">    &lt;fct&gt;                     &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> asian/pacific islander     <span class="number">36.0</span></span><br><span class="line">  <span class="number">2</span> black                      <span class="number">32.7</span></span><br><span class="line">  <span class="number">3</span> other                      <span class="number">32.4</span></span><br><span class="line">  <span class="number">4</span> white                      <span class="number">34.9</span></span><br><span class="line">  <span class="number">5</span> <span class="literal">NA</span>                         <span class="number">32.0</span></span><br><span class="line">  Warning message:</span><br><span class="line">  Factor `subject_race` contains implicit <span class="literal">NA</span>, consider using `forcats::fct_explicit_na`</span><br></pre></td></tr></table></figure><p>上面因为<code>subject_race</code>列中包含了<code>NA</code>，所以会有warning，如果想去掉这个warning，可以进行filter：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先去掉subject_race中包含的NA</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::filter(!is.na(subject_race)) %&gt;% </span><br><span class="line">    dplyr::group_by(subject_race) %&gt;% </span><br><span class="line">      dplyr::summarise(mean_age=mean(subject_age,na.rm=<span class="literal">TRUE</span>))</span><br><span class="line"><span class="comment"># A tibble: 4 x 2</span></span><br><span class="line">  subject_race           mean_age</span><br><span class="line">  &lt;fct&gt;                     &lt;dbl&gt;</span><br><span class="line"><span class="number">1</span> asian/pacific islander     <span class="number">36.0</span></span><br><span class="line"><span class="number">2</span> black                      <span class="number">32.7</span></span><br><span class="line"><span class="number">3</span> other                      <span class="number">32.4</span></span><br><span class="line"><span class="number">4</span> white                      <span class="number">34.9</span></span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>这里处理后的<strong>数据格式已经发生了变化</strong>，和之前的<code>dataframe</code>有了一些细微的差别，这种新的数据格式被称为<code>tbl_df</code>，也被称为<code>tibble</code>，<code>tibble</code>和<code>dataframe</code>是非常相似的，差别主要有以下两点：</p><ul><li><strong>字符列不会被转化为factor</strong></li><li><strong>在列名下显示数据类型</strong>，如<code>dbl：double</code></li><li><strong>不会完整地显示所有的数据</strong>，只会输出前几行以及适合屏幕宽度的列数，<strong>如果想输出所有的列和行</strong>，可以使用<code>print(my_tibble, n=desire_num, width=Inf)</code></li></ul></div><p>前面只对一个<code>variable</code>进行了分组，然后执行了一个操作，这里<strong>可以对两个或者更多个<code>variable</code>进行分组</strong>，并且<strong>执行多个操作</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::filter(!is.na(subject_race)) %&gt;% </span><br><span class="line">    dplyr::group_by(county_name,subject_race) %&gt;% </span><br><span class="line">      dplyr::summarise(mean_age=mean(subject_age,na.rm=<span class="literal">TRUE</span>),min_age=min(subject_age,na.rm=<span class="literal">TRUE</span>))</span><br><span class="line">  <span class="comment"># A tibble: 308 x 4</span></span><br><span class="line">  <span class="comment"># Groups:   county_name [83]</span></span><br><span class="line">    county_name   subject_race           mean_age min_age</span><br><span class="line">    &lt;fct&gt;         &lt;fct&gt;                     &lt;dbl&gt;   &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> Adams County  asian/pacific islander     <span class="number">55</span>        <span class="number">55</span></span><br><span class="line">  <span class="number">2</span> Adams County  black                      <span class="number">34.3</span>      <span class="number">16</span></span><br><span class="line">  <span class="number">3</span> Adams County  other                      <span class="number">38.4</span>      <span class="number">19</span></span><br><span class="line">  <span class="number">4</span> Adams County  white                      <span class="number">37.2</span>      <span class="number">16</span></span><br><span class="line">  <span class="number">5</span> Alcorn County asian/pacific islander     <span class="number">64</span>        <span class="number">57</span></span><br><span class="line">  <span class="number">6</span> Alcorn County black                      <span class="number">32.8</span>      <span class="number">16</span></span><br><span class="line">  <span class="number">7</span> Alcorn County other                      <span class="number">29.6</span>      <span class="number">16</span></span><br><span class="line">  <span class="number">8</span> Alcorn County white                      <span class="number">32.7</span>      <span class="number">15</span></span><br><span class="line">  <span class="number">9</span> Amite County  black                      <span class="number">36.4</span>      <span class="number">16</span></span><br><span class="line">  <span class="number">10</span> Amite County  other                      <span class="number">34.6</span>      <span class="number">19</span></span><br><span class="line">  <span class="comment"># … with 298 more rows</span></span><br><span class="line">  Warning message:</span><br><span class="line">  Factor `county_name` contains implicit <span class="literal">NA</span>, consider using `forcats::fct_explicit_na`</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="结果汇总"><a href="#结果汇总" class="headerlink" title="结果汇总"></a>结果汇总</h3><h4 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h4><p>前面的示例数据大部分都是分类变量，不利于展示<code>summarise</code>的其他用法，这里重新生成一组数据用于分析：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set.seed(<span class="number">1119</span>)</span><br><span class="line">data &lt;- data.frame(ID=rep(LETTERS,each=<span class="number">3</span>),</span><br><span class="line">                   sample1=sample(seq(<span class="number">10</span>,<span class="number">1000</span>),<span class="number">78</span>),</span><br><span class="line">                   sample2=sample(seq(<span class="number">10</span>,<span class="number">100</span>),<span class="number">78</span>),</span><br><span class="line">                   sample3=sample(seq(<span class="number">20</span>,<span class="number">500</span>),<span class="number">78</span>))</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>使用<code>n()</code>来<strong>统计频次</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># freq是得到的新列的名称</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise(freq=n())</span><br><span class="line">  <span class="comment"># A tibble: 26 x 2</span></span><br><span class="line">    ID    freq</span><br><span class="line">    &lt;fct&gt; &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> A         <span class="number">3</span></span><br><span class="line">  <span class="number">2</span> B         <span class="number">3</span></span><br><span class="line">  <span class="number">3</span> C         <span class="number">3</span></span><br><span class="line">  <span class="number">4</span> D         <span class="number">3</span></span><br><span class="line">  <span class="number">5</span> E         <span class="number">3</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>         <span class="number">3</span></span><br><span class="line">  <span class="number">7</span> G         <span class="number">3</span></span><br><span class="line">  <span class="number">8</span> H         <span class="number">3</span></span><br><span class="line">  <span class="number">9</span> I         <span class="number">3</span></span><br><span class="line">  <span class="number">10</span> J         <span class="number">3</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br></pre></td></tr></table></figure><p></p><p>同时<strong>执行多个统计函数</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise(max = max(sample1),min = min(sample1),mean = mean(sample1))</span><br><span class="line">  <span class="comment"># A tibble: 26 x 4</span></span><br><span class="line">    ID      max   min  mean</span><br><span class="line">    &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> A       <span class="number">627</span>   <span class="number">541</span>  <span class="number">592.</span></span><br><span class="line">  <span class="number">2</span> B       <span class="number">729</span>    <span class="number">11</span>  <span class="number">259.</span></span><br><span class="line">  <span class="number">3</span> C       <span class="number">713</span>    <span class="number">80</span>  <span class="number">381.</span></span><br><span class="line">  <span class="number">4</span> D       <span class="number">819</span>   <span class="number">506</span>  <span class="number">675.</span></span><br><span class="line">  <span class="number">5</span> E       <span class="number">370</span>    <span class="number">65</span>  <span class="number">231.</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>       <span class="number">318</span>   <span class="number">145</span>  <span class="number">223.</span></span><br><span class="line">  <span class="number">7</span> G       <span class="number">953</span>   <span class="number">302</span>  <span class="number">627</span> </span><br><span class="line">  <span class="number">8</span> H       <span class="number">688</span>   <span class="number">129</span>  <span class="number">332</span> </span><br><span class="line">  <span class="number">9</span> I       <span class="number">288</span>   <span class="number">165</span>  <span class="number">212.</span></span><br><span class="line">  <span class="number">10</span> J       <span class="number">311</span>   <span class="number">119</span>  <span class="number">190.</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br></pre></td></tr></table></figure><p></p><hr><h4 id="选择需要summarise的列-summarise-at"><a href="#选择需要summarise的列-summarise-at" class="headerlink" title="选择需要summarise的列-summarise_at"></a>选择需要summarise的列-summarise_at</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对sample1列进行summarise</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_at(<span class="string">"sample1"</span>,max)</span><br><span class="line">  <span class="comment"># A tibble: 26 x 2</span></span><br><span class="line">    ID    sample1</span><br><span class="line">    &lt;fct&gt;   &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> A         <span class="number">627</span></span><br><span class="line">  <span class="number">2</span> B         <span class="number">729</span></span><br><span class="line">  <span class="number">3</span> C         <span class="number">713</span></span><br><span class="line">  <span class="number">4</span> D         <span class="number">819</span></span><br><span class="line">  <span class="number">5</span> E         <span class="number">370</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>         <span class="number">318</span></span><br><span class="line">  <span class="number">7</span> G         <span class="number">953</span></span><br><span class="line">  <span class="number">8</span> H         <span class="number">688</span></span><br><span class="line">  <span class="number">9</span> I         <span class="number">288</span></span><br><span class="line">  <span class="number">10</span> J         <span class="number">311</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于如下用法</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise(sample1=max(sample1))</span><br></pre></td></tr></table></figure><p>同时作用于多个列：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对sample1、sample2进行summarise</span></span><br><span class="line"><span class="comment"># 执行的统计是相同的：max</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_at(c(<span class="string">"sample1"</span>,<span class="string">"sample2"</span>),max)</span><br><span class="line">  <span class="comment"># A tibble: 26 x 3</span></span><br><span class="line">    ID    sample1 sample2</span><br><span class="line">    &lt;fct&gt;   &lt;int&gt;   &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> A         <span class="number">627</span>      <span class="number">85</span></span><br><span class="line">  <span class="number">2</span> B         <span class="number">729</span>      <span class="number">59</span></span><br><span class="line">  <span class="number">3</span> C         <span class="number">713</span>      <span class="number">92</span></span><br><span class="line">  <span class="number">4</span> D         <span class="number">819</span>      <span class="number">75</span></span><br><span class="line">  <span class="number">5</span> E         <span class="number">370</span>      <span class="number">77</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>         <span class="number">318</span>      <span class="number">72</span></span><br><span class="line">  <span class="number">7</span> G         <span class="number">953</span>      <span class="number">96</span></span><br><span class="line">  <span class="number">8</span> H         <span class="number">688</span>      <span class="number">89</span></span><br><span class="line">  <span class="number">9</span> I         <span class="number">288</span>      <span class="number">49</span></span><br><span class="line">  <span class="number">10</span> J         <span class="number">311</span>      <span class="number">90</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise(sample1=max(sample1),</span><br><span class="line">                   sample2=max(sample2))</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="对所有的列进行summarise-summarise-all"><a href="#对所有的列进行summarise-summarise-all" class="headerlink" title="对所有的列进行summarise-summarise_all"></a>对所有的列进行summarise-summarise_all</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时对三列进行summarise</span></span><br><span class="line"><span class="comment"># 执行的统计是相同的：max</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_all(max)</span><br><span class="line">  <span class="comment"># A tibble: 26 x 4</span></span><br><span class="line">    ID    sample1 sample2 sample3</span><br><span class="line">    &lt;fct&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> A         <span class="number">627</span>      <span class="number">85</span>     <span class="number">400</span></span><br><span class="line">  <span class="number">2</span> B         <span class="number">729</span>      <span class="number">59</span>     <span class="number">265</span></span><br><span class="line">  <span class="number">3</span> C         <span class="number">713</span>      <span class="number">92</span>     <span class="number">461</span></span><br><span class="line">  <span class="number">4</span> D         <span class="number">819</span>      <span class="number">75</span>     <span class="number">472</span></span><br><span class="line">  <span class="number">5</span> E         <span class="number">370</span>      <span class="number">77</span>     <span class="number">425</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>         <span class="number">318</span>      <span class="number">72</span>     <span class="number">450</span></span><br><span class="line">  <span class="number">7</span> G         <span class="number">953</span>      <span class="number">96</span>     <span class="number">329</span></span><br><span class="line">  <span class="number">8</span> H         <span class="number">688</span>      <span class="number">89</span>     <span class="number">451</span></span><br><span class="line">  <span class="number">9</span> I         <span class="number">288</span>      <span class="number">49</span>     <span class="number">249</span></span><br><span class="line">  <span class="number">10</span> J         <span class="number">311</span>      <span class="number">90</span>     <span class="number">495</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise(sample1=max(sample1),</span><br><span class="line">                   sample2=max(sample2),</span><br><span class="line">                   sample3=max(sample3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也等同于</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_at(c(<span class="string">"sample1"</span>,<span class="string">"sample2"</span>,<span class="string">"sample3"</span>),max)</span><br></pre></td></tr></table></figure><p>同时<strong>施加多个统计函数</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># max、min、mean是后缀名</span></span><br><span class="line"><span class="comment"># 这里必须要使用list，前面的summarise同时施加多个统计函数就不用</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_all(list(max = max,min = min,mean = mean))</span><br><span class="line">  <span class="comment"># A tibble: 26 x 10</span></span><br><span class="line">    ID    sample1_max sample2_max sample3_max sample1_min sample2_min sample3_min sample1_mean sample2_mean sample3_mean</span><br><span class="line">    &lt;fct&gt;       &lt;int&gt;       &lt;int&gt;       &lt;int&gt;       &lt;int&gt;       &lt;int&gt;       &lt;int&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> A             <span class="number">627</span>          <span class="number">85</span>         <span class="number">400</span>         <span class="number">541</span>          <span class="number">41</span>         <span class="number">241</span>         <span class="number">592.</span>         <span class="number">68.3</span>         <span class="number">335.</span></span><br><span class="line">  <span class="number">2</span> B             <span class="number">729</span>          <span class="number">59</span>         <span class="number">265</span>          <span class="number">11</span>          <span class="number">13</span>          <span class="number">31</span>         <span class="number">259.</span>         <span class="number">43.3</span>         <span class="number">124.</span></span><br><span class="line">  <span class="number">3</span> C             <span class="number">713</span>          <span class="number">92</span>         <span class="number">461</span>          <span class="number">80</span>          <span class="number">48</span>         <span class="number">151</span>         <span class="number">381.</span>         <span class="number">75.7</span>         <span class="number">274.</span></span><br><span class="line">  <span class="number">4</span> D             <span class="number">819</span>          <span class="number">75</span>         <span class="number">472</span>         <span class="number">506</span>          <span class="number">32</span>          <span class="number">74</span>         <span class="number">675.</span>         <span class="number">56.3</span>         <span class="number">216.</span></span><br><span class="line">  <span class="number">5</span> E             <span class="number">370</span>          <span class="number">77</span>         <span class="number">425</span>          <span class="number">65</span>          <span class="number">38</span>         <span class="number">169</span>         <span class="number">231.</span>         <span class="number">61</span>           <span class="number">321.</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>             <span class="number">318</span>          <span class="number">72</span>         <span class="number">450</span>         <span class="number">145</span>          <span class="number">25</span>         <span class="number">341</span>         <span class="number">223.</span>         <span class="number">44.7</span>         <span class="number">396.</span></span><br><span class="line">  <span class="number">7</span> G             <span class="number">953</span>          <span class="number">96</span>         <span class="number">329</span>         <span class="number">302</span>          <span class="number">54</span>         <span class="number">193</span>         <span class="number">627</span>          <span class="number">79.3</span>         <span class="number">280.</span></span><br><span class="line">  <span class="number">8</span> H             <span class="number">688</span>          <span class="number">89</span>         <span class="number">451</span>         <span class="number">129</span>          <span class="number">15</span>         <span class="number">393</span>         <span class="number">332</span>          <span class="number">41.3</span>         <span class="number">427.</span></span><br><span class="line">  <span class="number">9</span> I             <span class="number">288</span>          <span class="number">49</span>         <span class="number">249</span>         <span class="number">165</span>          <span class="number">30</span>         <span class="number">102</span>         <span class="number">212.</span>         <span class="number">41.3</span>         <span class="number">194.</span></span><br><span class="line">  <span class="number">10</span> J             <span class="number">311</span>          <span class="number">90</span>         <span class="number">495</span>         <span class="number">119</span>          <span class="number">27</span>         <span class="number">155</span>         <span class="number">190.</span>         <span class="number">56.3</span>         <span class="number">380</span> </span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br></pre></td></tr></table></figure><p></p><hr><h4 id="对满足条件的列进行summarise-summarise-if"><a href="#对满足条件的列进行summarise-summarise-if" class="headerlink" title="对满足条件的列进行summarise-summarise_if"></a>对满足条件的列进行summarise-summarise_if</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">data &lt;- data.frame(ID=rep(LETTERS,each=<span class="number">3</span>),</span><br><span class="line">                   sample1=sample(seq(<span class="number">10</span>,<span class="number">1000</span>),<span class="number">78</span>),</span><br><span class="line">                   sample2=sample(seq(<span class="number">10</span>,<span class="number">100</span>),<span class="number">78</span>),</span><br><span class="line">                   sample3=sample(letters,<span class="number">78</span>,replace = <span class="literal">T</span>))</span><br><span class="line">data</span><br><span class="line">    ID sample1 sample2 sample3</span><br><span class="line">  <span class="number">1</span>   A     <span class="number">451</span>      <span class="number">48</span>       a</span><br><span class="line">  <span class="number">2</span>   A     <span class="number">803</span>      <span class="number">33</span>       l</span><br><span class="line">  <span class="number">3</span>   A     <span class="number">635</span>      <span class="number">69</span>       y</span><br><span class="line">  <span class="number">4</span>   B     <span class="number">994</span>      <span class="number">89</span>       h</span><br><span class="line">  <span class="number">5</span>   B     <span class="number">386</span>      <span class="number">13</span>       e</span><br><span class="line">  <span class="number">6</span>   B     <span class="number">339</span>      <span class="number">28</span>       p</span><br><span class="line">  <span class="number">7</span>   C     <span class="number">518</span>      <span class="number">77</span>       n</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接对所有的列进行求最大值</span></span><br><span class="line"><span class="comment"># 报错，因为存在字符</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_all(max)</span><br><span class="line">  Error <span class="keyword">in</span> Summary.factor(c(<span class="number">1L</span>, <span class="number">12L</span>, <span class="number">25L</span>), na.rm = <span class="literal">FALSE</span>) : </span><br><span class="line">  ‘max’ not meaningful <span class="keyword">for</span> factors</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先判断需要进行summarise的列，然后进行summarise</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_if(is.numeric,max)</span><br><span class="line">  <span class="comment"># A tibble: 26 x 3</span></span><br><span class="line">    ID    sample1 sample2</span><br><span class="line">    &lt;fct&gt;   &lt;int&gt;   &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> A         <span class="number">803</span>      <span class="number">69</span></span><br><span class="line">  <span class="number">2</span> B         <span class="number">994</span>      <span class="number">89</span></span><br><span class="line">  <span class="number">3</span> C         <span class="number">748</span>      <span class="number">94</span></span><br><span class="line">  <span class="number">4</span> D         <span class="number">890</span>      <span class="number">82</span></span><br><span class="line">  <span class="number">5</span> E         <span class="number">888</span>      <span class="number">72</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>         <span class="number">953</span>      <span class="number">19</span></span><br><span class="line">  <span class="number">7</span> G         <span class="number">883</span>      <span class="number">75</span></span><br><span class="line">  <span class="number">8</span> H         <span class="number">762</span>      <span class="number">79</span></span><br><span class="line">  <span class="number">9</span> I         <span class="number">906</span>      <span class="number">34</span></span><br><span class="line">  <span class="number">10</span> J         <span class="number">929</span>      <span class="number">85</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br></pre></td></tr></table></figure><hr><h3 id="频数统计-tally"><a href="#频数统计-tally" class="headerlink" title="频数统计-tally"></a>频数统计-tally</h3><p>前面已经使用了<code>dplyr::summarise(freq=n())</code>进行频数统计，这里也可以使用单独的函数来替换进行频数统计：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用tally(sort=TRUE)替换dplyr::summarise(freq=n())</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::group_by(department_id) %&gt;%</span><br><span class="line">  tally(sort=<span class="literal">TRUE</span>)</span><br><span class="line">  <span class="comment"># A tibble: 455 x 2</span></span><br><span class="line">    department_id     n</span><br><span class="line">            &lt;int&gt; &lt;int&gt;</span><br><span class="line">  <span class="number">1</span>          <span class="number">2504</span> <span class="number">33438</span></span><br><span class="line">  <span class="number">2</span>          <span class="number">1801</span> <span class="number">27620</span></span><br><span class="line">  <span class="number">3</span>          <span class="number">4504</span> <span class="number">17479</span></span><br><span class="line">  <span class="number">4</span>          <span class="number">1704</span> <span class="number">14776</span></span><br><span class="line">  <span class="number">5</span>          <span class="number">6104</span> <span class="number">14711</span></span><br><span class="line">  <span class="number">6</span>          <span class="number">2401</span> <span class="number">14145</span></span><br><span class="line">  <span class="number">7</span>          <span class="number">1703</span> <span class="number">13984</span></span><br><span class="line">  <span class="number">8</span>          <span class="number">5302</span> <span class="number">13620</span></span><br><span class="line">  <span class="number">9</span>          <span class="number">4107</span> <span class="number">13586</span></span><br><span class="line">  <span class="number">10</span>          <span class="number">1702</span> <span class="number">13046</span></span><br><span class="line">  <span class="comment"># … with 445 more rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::group_by(department_id) %&gt;%</span><br><span class="line">  dplyr::summarise(n=n())</span><br><span class="line">  <span class="comment"># A tibble: 455 x 2</span></span><br><span class="line">    department_id     n</span><br><span class="line">            &lt;int&gt; &lt;int&gt;</span><br><span class="line">  <span class="number">1</span>             <span class="number">1</span>   <span class="number">174</span></span><br><span class="line">  <span class="number">2</span>             <span class="number">2</span>   <span class="number">591</span></span><br><span class="line">  <span class="number">3</span>             <span class="number">3</span>   <span class="number">464</span></span><br><span class="line">  <span class="number">4</span>             <span class="number">4</span>   <span class="number">551</span></span><br><span class="line">  <span class="number">5</span>             <span class="number">5</span>    <span class="number">89</span></span><br><span class="line">  <span class="number">6</span>             <span class="number">6</span>   <span class="number">819</span></span><br><span class="line">  <span class="number">7</span>             <span class="number">7</span>   <span class="number">200</span></span><br><span class="line">  <span class="number">8</span>             <span class="number">8</span>   <span class="number">617</span></span><br><span class="line">  <span class="number">9</span>             <span class="number">9</span>   <span class="number">479</span></span><br><span class="line">  <span class="number">10</span>            <span class="number">10</span>   <span class="number">494</span></span><br><span class="line">  <span class="comment"># … with 445 more rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以等同于</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::count(department_id)</span><br><span class="line">  <span class="comment"># A tibble: 455 x 2</span></span><br><span class="line">    department_id     n</span><br><span class="line">            &lt;int&gt; &lt;int&gt;</span><br><span class="line">  <span class="number">1</span>             <span class="number">1</span>   <span class="number">174</span></span><br><span class="line">  <span class="number">2</span>             <span class="number">2</span>   <span class="number">591</span></span><br><span class="line">  <span class="number">3</span>             <span class="number">3</span>   <span class="number">464</span></span><br><span class="line">  <span class="number">4</span>             <span class="number">4</span>   <span class="number">551</span></span><br><span class="line">  <span class="number">5</span>             <span class="number">5</span>    <span class="number">89</span></span><br><span class="line">  <span class="number">6</span>             <span class="number">6</span>   <span class="number">819</span></span><br><span class="line">  <span class="number">7</span>             <span class="number">7</span>   <span class="number">200</span></span><br><span class="line">  <span class="number">8</span>             <span class="number">8</span>   <span class="number">617</span></span><br><span class="line">  <span class="number">9</span>             <span class="number">9</span>   <span class="number">479</span></span><br><span class="line">  <span class="number">10</span>            <span class="number">10</span>   <span class="number">494</span></span><br><span class="line">  <span class="comment"># … with 445 more rows</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="合并两个表"><a href="#合并两个表" class="headerlink" title="合并两个表"></a>合并两个表</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trafficstops %&gt;% </span><br><span class="line">  group_by(county_name) %&gt;% </span><br><span class="line">  summarise(n_stops = n()) %&gt;% </span><br><span class="line">  left_join(MS_bw_pop, by = c(<span class="string">"county_name"</span> = <span class="string">"County"</span>)) %&gt;% </span><br><span class="line">  head()</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cengel.github.io/R-data-wrangling/dplyr.html#what-is-dplyr" target="_blank" rel="noopener">Chapter 1 Data Manipulation using dplyr</a></li><li><a href="https://www.cnblogs.com/shangfr/p/6110614.html" target="_blank" rel="noopener">R语言数据处理包dplyr、tidyr笔记</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了使用&lt;code&gt;dplyr&lt;/code&gt;处理数据，主要包括使用&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;对列进行筛选&lt;/strong&gt;，使用&lt;code&gt;filter&lt;/code&gt;、&lt;code&gt;slice&lt;/code&gt;、&lt;code&gt;sample_n&lt;/code&gt;、&lt;code&gt;sample_frac&lt;/code&gt;&lt;strong&gt;对行进行筛选&lt;/strong&gt;，使用&lt;code&gt;arrange&lt;/code&gt;&lt;strong&gt;对行进行排序&lt;/strong&gt;，使用管道操作符&lt;code&gt;%&amp;gt;%&lt;/code&gt;，使用&lt;code&gt;mutate&lt;/code&gt;&lt;strong&gt;添加新列&lt;/strong&gt;，使用&lt;code&gt;group_by()&lt;/code&gt;&lt;strong&gt;进行分组&lt;/strong&gt;，使用&lt;code&gt;summarise&lt;/code&gt;&lt;strong&gt;进行结果汇总&lt;/strong&gt;，使用&lt;code&gt;tally&lt;/code&gt;&lt;strong&gt;统计频数&lt;/strong&gt;以及&lt;strong&gt;合并两个表&lt;/strong&gt;的操作。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R系列之常用函数集合</title>
    <link href="http://showteeth.tech/posts/64361.html"/>
    <id>http://showteeth.tech/posts/64361.html</id>
    <published>2019-11-22T13:23:53.000Z</published>
    <updated>2020-02-13T12:35:44.557Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章用于积累<code>R</code>中使用的小函数的用法和实例，便于后续查询和使用。</p></div><a id="more"></a><h2 id="导入和安装包"><a href="#导入和安装包" class="headerlink" title="导入和安装包"></a>导入和安装包</h2><h3 id="检测并安装包"><a href="#检测并安装包" class="headerlink" title="检测并安装包"></a>检测并安装包</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要安装的包的名称</span></span><br><span class="line">package_list &lt;- c(<span class="string">"pkg_name_1"</span>,<span class="string">"pkg_name_2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(p <span class="keyword">in</span> package_list)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!suppressWarnings(suppressMessages(<span class="keyword">require</span>(p, character.only = <span class="literal">TRUE</span>, quietly = <span class="literal">TRUE</span>, warn.conflicts = <span class="literal">FALSE</span>))))&#123;</span><br><span class="line">    install_package</span><br><span class="line">    suppressWarnings(suppressMessages(<span class="keyword">library</span>(p, character.only = <span class="literal">TRUE</span>, quietly = <span class="literal">TRUE</span>, warn.conflicts = <span class="literal">FALSE</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="导入包时不出现信息"><a href="#导入包时不出现信息" class="headerlink" title="导入包时不出现信息"></a>导入包时不出现信息</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">suppressMessages(<span class="keyword">library</span>(<span class="string">"pkg_name"</span>, character.only = <span class="literal">TRUE</span>, quietly = <span class="literal">TRUE</span>, warn.conflicts = <span class="literal">FALSE</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="输出内容-print-、cat"><a href="#输出内容-print-、cat" class="headerlink" title="输出内容-print()、cat()"></a>输出内容-print()、cat()</h2><h3 id="输出单个内容"><a href="#输出单个内容" class="headerlink" title="输出单个内容"></a>输出单个内容</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(a)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h3 id="多个内容合并输出"><a href="#多个内容合并输出" class="headerlink" title="多个内容合并输出"></a>多个内容合并输出</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">b=c(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">cat(a,b)</span><br><span class="line">  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">cat(a,b,sep=<span class="string">"mmm"</span>)</span><br><span class="line">  1mmm2mmm3mmm4mmm5mmm6</span><br></pre></td></tr></table></figure><hr><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><h3 id="读写rds和RData文件"><a href="#读写rds和RData文件" class="headerlink" title="读写rds和RData文件"></a>读写rds和RData文件</h3><p><code>rds</code>和<code>RData</code>的区别：</p><ul><li><code>rds</code>：只<strong>处理一个 R 对象</strong>，它们<strong>比多对象存储方法(<code>RData</code>)更灵活</strong>，因为还原对象的对象名称不必与存储对象时的对象名称相同</li><li><code>RData</code>：保存多个对象</li></ul><h4 id="读写rds文件"><a href="#读写rds文件" class="headerlink" title="读写rds文件"></a>读写rds文件</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存单个对象</span></span><br><span class="line">saveRDS(object = iris, file = <span class="string">"my_data_frame.rds"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取单个对象，并将结果赋值到新的变量中</span></span><br><span class="line">iris_new &lt;- readRDS(file = <span class="string">"my_data_frame.rds"</span>)</span><br></pre></td></tr></table></figure><hr><h4 id="读写RData文件"><a href="#读写RData文件" class="headerlink" title="读写RData文件"></a>读写RData文件</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存当前工作环境中所有的对象，直接指定保存的文件名即可</span></span><br><span class="line">save.image(<span class="string">"tmp.rds.RData"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存指定的多个对象</span></span><br><span class="line">save(iris, cars, file = <span class="string">"myIrisAndCarsData.Rdata"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">load(<span class="string">"tmp.rds.RData"</span>)</span><br><span class="line">load(<span class="string">"myIrisAndCarsData.Rdata"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="读写csv文件"><a href="#读写csv文件" class="headerlink" title="读写csv文件"></a>读写csv文件</h3><h4 id="写csv文件"><a href="#写csv文件" class="headerlink" title="写csv文件"></a>写csv文件</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写成csv文件，保留了header和rownames</span></span><br><span class="line"><span class="comment"># 并且不存在错位的情况</span></span><br><span class="line">write.csv(as.data.frame(diff_genes_matrix), </span><br><span class="line">            file = <span class="string">"Mutation_BE_W_diff.csv"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="读写excel文件"><a href="#读写excel文件" class="headerlink" title="读写excel文件"></a>读写excel文件</h3><p>读写excel文件可以使用的包很多，最好用的也是使用最多的是<code>xlsx</code>包，但是这个包再安装的时候需要依赖java，有时候安装比较困难，为了简化安装的步骤，这里使用<code>openxlsx</code>.</p><h4 id="读取excel文件"><a href="#读取excel文件" class="headerlink" title="读取excel文件"></a>读取excel文件</h4><p>函数帮助文档：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(openxlsx)</span><br><span class="line">read.xlsx(xlsxFile, sheet = <span class="number">1</span>, startRow = <span class="number">1</span>, colNames = <span class="literal">TRUE</span>,</span><br><span class="line">  rowNames = <span class="literal">FALSE</span>, detectDates = <span class="literal">FALSE</span>, skipEmptyRows = <span class="literal">TRUE</span>,</span><br><span class="line">  skipEmptyCols = <span class="literal">TRUE</span>, rows = <span class="literal">NULL</span>, cols = <span class="literal">NULL</span>, check.names = <span class="literal">FALSE</span>,</span><br><span class="line">  namedRegion = <span class="literal">NULL</span>, na.strings = <span class="string">"NA"</span>, fillMergedCells = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="写入excel文件"><a href="#写入excel文件" class="headerlink" title="写入excel文件"></a>写入excel文件</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(openxlsx)</span><br><span class="line"><span class="comment"># 写入多个表单，那就传入带名称的list</span></span><br><span class="line"><span class="comment"># 最后得到的文件</span></span><br><span class="line">write.xlsx(list(raw_counts=as.data.frame(raw_counts),</span><br><span class="line">                raw_tpm=as.data.frame(raw_tpm),</span><br><span class="line">                log_tpm=as.data.frame(log_tpm)),</span><br><span class="line">            row.names=<span class="literal">TRUE</span>,</span><br><span class="line">           <span class="string">"wt_sham.xlsx"</span>)</span><br><span class="line">          </span><br><span class="line"><span class="comment"># 不同的表单可以使用不同的参数</span></span><br><span class="line"><span class="comment">## 得到带名称的list</span></span><br><span class="line">l &lt;- list(<span class="string">"IRIS"</span> = iris, <span class="string">"MTCATS"</span> = mtcars, matrix(runif(<span class="number">1000</span>), ncol = <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 第一个sheet的开始列是1，第二个是2，第三个是3</span></span><br><span class="line"><span class="comment"># 其他在</span></span><br><span class="line">write.xlsx(l, <span class="string">"writeList.xlsx"</span>, startCol = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), startRow = <span class="number">2</span>,</span><br><span class="line">           asTable = c(<span class="literal">TRUE</span>, <span class="literal">TRUE</span>, <span class="literal">FALSE</span>), withFilter = c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">FALSE</span>))</span><br></pre></td></tr></table></figure><p><strong>常用参数</strong>：</p><ul><li><code>startCol</code>：从<strong>第几列</strong>开始写</li><li><code>startRow</code>：从<strong>第几行</strong>开始写</li><li><code>col.names</code>：<strong>逻辑值</strong>，判断<strong>是不是保留列名</strong></li><li><code>row.names</code>：<strong>逻辑值</strong>，判断<strong>是不是保留行名</strong></li></ul><hr><h2 id="排序-sort、str-sort"><a href="#排序-sort、str-sort" class="headerlink" title="排序-sort、str_sort"></a>排序-sort、str_sort</h2><p>对纯数字和字符串进行排序是很简单的操作，这里就不做介绍了，难点在于<strong>对数字和字符串的混合类型进行排序</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- c(<span class="string">"100a10"</span>, <span class="string">"100a5"</span>, <span class="string">"2b"</span>, <span class="string">"2a"</span>)</span><br><span class="line"><span class="comment"># 普通排序，1的ASCII码小于2，所以100在前，2在后</span></span><br><span class="line">sort(x)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"100a10"</span> <span class="string">"100a5"</span>  <span class="string">"2a"</span>     <span class="string">"2b"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的排序</span></span><br><span class="line"><span class="keyword">library</span>(stringr)</span><br><span class="line"><span class="comment"># 这里就是我们想要的对字符和数字的混合类型进行排序的结果</span></span><br><span class="line">str_sort(x, numeric = <span class="literal">TRUE</span>)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"2a"</span>     <span class="string">"2b"</span>     <span class="string">"100a5"</span>  <span class="string">"100a10"</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="合并多个数据框-cbind-、rbind-、merge"><a href="#合并多个数据框-cbind-、rbind-、merge" class="headerlink" title="合并多个数据框-cbind()、rbind()、merge()"></a>合并多个数据框-cbind()、rbind()、merge()</h2><h3 id="纵向合并-rbind"><a href="#纵向合并-rbind" class="headerlink" title="纵向合并-rbind()"></a>纵向合并-rbind()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">city &lt;- c(<span class="string">"Tampa"</span>,<span class="string">"Seattle"</span>,<span class="string">"Hartford"</span>,<span class="string">"Denver"</span>)</span><br><span class="line">state &lt;- c(<span class="string">"FL"</span>,<span class="string">"WA"</span>,<span class="string">"CT"</span>,<span class="string">"CO"</span>)</span><br><span class="line">zipcode &lt;- c(<span class="number">33602</span>,<span class="number">98104</span>,<span class="number">06161</span>,<span class="number">80294</span>)</span><br><span class="line">addresses &lt;- cbind(city,state,zipcode)</span><br><span class="line">      city       state zipcode</span><br><span class="line">  [<span class="number">1</span>,] <span class="string">"Tampa"</span>    <span class="string">"FL"</span>  <span class="string">"33602"</span></span><br><span class="line">  [<span class="number">2</span>,] <span class="string">"Seattle"</span>  <span class="string">"WA"</span>  <span class="string">"98104"</span></span><br><span class="line">  [<span class="number">3</span>,] <span class="string">"Hartford"</span> <span class="string">"CT"</span>  <span class="string">"6161"</span> </span><br><span class="line">  [<span class="number">4</span>,] <span class="string">"Denver"</span>   <span class="string">"CO"</span>  <span class="string">"80294"</span></span><br><span class="line"></span><br><span class="line">new.address &lt;- data.frame(</span><br><span class="line">   city = c(<span class="string">"Lowry"</span>,<span class="string">"Charlotte"</span>),</span><br><span class="line">   state = c(<span class="string">"CO"</span>,<span class="string">"FL"</span>),</span><br><span class="line">   zipcode = c(<span class="string">"80230"</span>,<span class="string">"33949"</span>),</span><br><span class="line">   stringsAsFactors = <span class="literal">FALSE</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 纵向合并</span></span><br><span class="line"><span class="comment"># 增加row的数目</span></span><br><span class="line">rbind(addresses,new.address)</span><br><span class="line">        city state zipcode</span><br><span class="line">  <span class="number">1</span>     Tampa    FL   <span class="number">33602</span></span><br><span class="line">  <span class="number">2</span>   Seattle    WA   <span class="number">98104</span></span><br><span class="line">  <span class="number">3</span>  Hartford    CT    <span class="number">6161</span></span><br><span class="line">  <span class="number">4</span>    Denver    CO   <span class="number">80294</span></span><br><span class="line">  <span class="number">5</span>     Lowry    CO   <span class="number">80230</span></span><br><span class="line">  <span class="number">6</span> Charlotte    FL   <span class="number">33949</span></span><br></pre></td></tr></table></figure><hr><h3 id="横向合并-cbind"><a href="#横向合并-cbind" class="headerlink" title="横向合并-cbind()"></a>横向合并-cbind()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅仅是将数目横向拼在了一起</span></span><br><span class="line"><span class="comment"># 不管数据内部的结构和关系</span></span><br><span class="line">cbind(addresses,new.address)</span><br><span class="line">        city state zipcode      city state zipcode</span><br><span class="line">  <span class="number">1</span>    Tampa    FL   <span class="number">33602</span>     Lowry    CO   <span class="number">80230</span></span><br><span class="line">  <span class="number">2</span>  Seattle    WA   <span class="number">98104</span> Charlotte    FL   <span class="number">33949</span></span><br><span class="line">  <span class="number">3</span> Hartford    CT    <span class="number">6161</span>     Lowry    CO   <span class="number">80230</span></span><br><span class="line">  <span class="number">4</span>   Denver    CO   <span class="number">80294</span> Charlotte    FL   <span class="number">33949</span></span><br></pre></td></tr></table></figure><hr><h3 id="连接数据-merge"><a href="#连接数据-merge" class="headerlink" title="连接数据-merge()"></a>连接数据-merge()</h3><h4 id="普通连接"><a href="#普通连接" class="headerlink" title="普通连接"></a>普通连接</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全、左、右连接：all、all.x、all.y</span></span><br><span class="line"><span class="comment"># 相同的columns后缀：suffixes = c(".x",".y")</span></span><br><span class="line"><span class="keyword">library</span>(MASS)</span><br><span class="line">merged.Pima &lt;- merge(x = Pima.te, y = Pima.tr,</span><br><span class="line">   by.x = c(<span class="string">"bp"</span>, <span class="string">"bmi"</span>),</span><br><span class="line">   by.y = c(<span class="string">"bp"</span>, <span class="string">"bmi"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">merged.Pima</span><br><span class="line">    bp  bmi npreg.x glu.x skin.x ped.x age.x type.x npreg.y glu.y skin.y ped.y age.y type.y</span><br><span class="line">  <span class="number">1</span>  <span class="number">60</span> <span class="number">33.8</span>       <span class="number">1</span>   <span class="number">117</span>     <span class="number">23</span> <span class="number">0.466</span>    <span class="number">27</span>     No       <span class="number">2</span>   <span class="number">125</span>     <span class="number">20</span> <span class="number">0.088</span>    <span class="number">31</span>     No</span><br><span class="line">  <span class="number">2</span>  <span class="number">64</span> <span class="number">29.7</span>       <span class="number">2</span>    <span class="number">75</span>     <span class="number">24</span> <span class="number">0.370</span>    <span class="number">33</span>     No       <span class="number">2</span>   <span class="number">100</span>     <span class="number">23</span> <span class="number">0.368</span>    <span class="number">21</span>     No</span><br><span class="line">  <span class="number">3</span>  <span class="number">64</span> <span class="number">31.2</span>       <span class="number">5</span>   <span class="number">189</span>     <span class="number">33</span> <span class="number">0.583</span>    <span class="number">29</span>    Yes       <span class="number">3</span>   <span class="number">158</span>     <span class="number">13</span> <span class="number">0.295</span>    <span class="number">24</span>     No</span><br><span class="line">  <span class="number">4</span>  <span class="number">64</span> <span class="number">33.2</span>       <span class="number">4</span>   <span class="number">117</span>     <span class="number">27</span> <span class="number">0.230</span>    <span class="number">24</span>     No       <span class="number">1</span>    <span class="number">96</span>     <span class="number">27</span> <span class="number">0.289</span>    <span class="number">21</span>     No</span><br><span class="line">  <span class="number">5</span>  <span class="number">66</span> <span class="number">38.1</span>       <span class="number">3</span>   <span class="number">115</span>     <span class="number">39</span> <span class="number">0.150</span>    <span class="number">28</span>     No       <span class="number">1</span>   <span class="number">114</span>     <span class="number">36</span> <span class="number">0.289</span>    <span class="number">21</span>     No</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><hr><h4 id="带有rownames或者colnames的连接"><a href="#带有rownames或者colnames的连接" class="headerlink" title="带有rownames或者colnames的连接"></a>带有rownames或者colnames的连接</h4><p><code>merge</code>函数的帮助文档如下：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">merge(x, y, by = intersect(names(x), names(y)),</span><br><span class="line">      by.x = by, by.y = by, all = <span class="literal">FALSE</span>, all.x = all, all.y = all,</span><br><span class="line">      sort = <span class="literal">TRUE</span>, suffixes = c(<span class="string">".x"</span>,<span class="string">".y"</span>), no.dups = <span class="literal">TRUE</span>,</span><br><span class="line">      incomparables = <span class="literal">NULL</span>, <span class="keyword">...</span>)</span><br></pre></td></tr></table></figure><p></p><p>常规地，如果想要按列名合并两个dataframe只需要使用<code>by.x = by, by.y = by</code>即可，但如果想要按照行名进行<code>merge</code>的话就需要使用<code>by=0</code>或者<code>by=&quot;row.names&quot;</code>(<strong>注意中间一定要有点</strong>)：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">merge(interested_split_dds_cw_df,interested_split_dds_mc_df,by=<span class="string">"row.names"</span>)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">merge(interested_split_dds_cw_df,interested_split_dds_mc_df,by=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个数据框的行名和第二个数据框的symbol列进行合并</span></span><br><span class="line"><span class="comment"># 保留第一个数据框的内容</span></span><br><span class="line">merge(npas4l_inte_positive_mut_sham_raw_counts,zebra_gene_length,</span><br><span class="line">      by.x=<span class="string">"row.names"</span>,by.y=<span class="string">"symbol"</span>,</span><br><span class="line">      all.x=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="字符串提取-substring"><a href="#字符串提取-substring" class="headerlink" title="字符串提取-substring()"></a>字符串提取-substring()</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result &lt;- substring(<span class="string">"Extract"</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">print(result)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"act"</span></span><br></pre></td></tr></table></figure><hr><h2 id="得到列表元素的组合-cross"><a href="#得到列表元素的组合-cross" class="headerlink" title="得到列表元素的组合-cross"></a>得到列表元素的组合-cross</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><code>cross2()</code> returns the product set of the elements of <code>.x</code> and <code>.y</code>. <code>cross3()</code> takes an additional <code>.z</code> argument. <code>cross()</code> takes a list <code>.l</code> and returns the cartesian product of all its elements <strong>in a list</strong>, with <strong>one combination by element</strong>. <code>cross_df()</code> is like <code>cross()</code> but <strong>returns a data frame</strong>, with <strong>one combination by row</strong>.</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">head(diamonds)</span><br><span class="line">  <span class="comment"># A tibble: 6 x 10</span></span><br><span class="line">    carat cut       color clarity depth table price     x     y     z</span><br><span class="line">    &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> <span class="number">0.23</span>  Ideal     E     SI2      <span class="number">61.5</span>    <span class="number">55</span>   <span class="number">326</span>  <span class="number">3.95</span>  <span class="number">3.98</span>  <span class="number">2.43</span></span><br><span class="line">  <span class="number">2</span> <span class="number">0.21</span>  Premium   E     SI1      <span class="number">59.8</span>    <span class="number">61</span>   <span class="number">326</span>  <span class="number">3.89</span>  <span class="number">3.84</span>  <span class="number">2.31</span></span><br><span class="line">  <span class="number">3</span> <span class="number">0.23</span>  Good      E     VS1      <span class="number">56.9</span>    <span class="number">65</span>   <span class="number">327</span>  <span class="number">4.05</span>  <span class="number">4.07</span>  <span class="number">2.31</span></span><br><span class="line">  <span class="number">4</span> <span class="number">0.290</span> Premium   I     VS2      <span class="number">62.4</span>    <span class="number">58</span>   <span class="number">334</span>  <span class="number">4.2</span>   <span class="number">4.23</span>  <span class="number">2.63</span></span><br><span class="line">  <span class="number">5</span> <span class="number">0.31</span>  Good      J     SI2      <span class="number">63.3</span>    <span class="number">58</span>   <span class="number">335</span>  <span class="number">4.34</span>  <span class="number">4.35</span>  <span class="number">2.75</span></span><br><span class="line">  <span class="number">6</span> <span class="number">0.24</span>  Very Good J     VVS2     <span class="number">62.8</span>    <span class="number">57</span>   <span class="number">336</span>  <span class="number">3.94</span>  <span class="number">3.96</span>  <span class="number">2.48</span></span><br><span class="line"></span><br><span class="line">unique(diamonds$clarity)</span><br><span class="line">  [<span class="number">1</span>] SI2  SI1  VS1  VS2  VVS2 VVS1 I1   IF  </span><br><span class="line">  Levels: I1 &lt; SI2 &lt; SI1 &lt; VS2 &lt; VS1 &lt; VVS2 &lt; VVS1 &lt; IF</span><br><span class="line">unique(diamonds$cut)</span><br><span class="line">  [<span class="number">1</span>] Ideal     Premium   Good      Very Good Fair     </span><br><span class="line">  Levels: Fair &lt; Good &lt; Very Good &lt; Premium &lt; Ideal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上述两个因子进行组合，5x8=40行</span></span><br><span class="line"><span class="comment"># 并且需要注意cross_df需要list中的每一个元素都是带名字的</span></span><br><span class="line">cross_df(list(clarity = unique(diamonds$clarity), cut = unique(diamonds$cut)))</span><br><span class="line">  <span class="comment"># A tibble: 40 x 2</span></span><br><span class="line">    clarity cut    </span><br><span class="line">    &lt;fct&gt;   &lt;fct&gt;  </span><br><span class="line">  <span class="number">1</span> SI2     Ideal  </span><br><span class="line">  <span class="number">2</span> SI1     Ideal  </span><br><span class="line">  <span class="number">3</span> VS1     Ideal  </span><br><span class="line">  <span class="number">4</span> VS2     Ideal  </span><br><span class="line">  <span class="number">5</span> VVS2    Ideal  </span><br><span class="line">  <span class="number">6</span> VVS1    Ideal  </span><br><span class="line">  <span class="number">7</span> I1      Ideal  </span><br><span class="line">  <span class="number">8</span> IF      Ideal  </span><br><span class="line"><span class="comment"># 不带名字报错</span></span><br><span class="line">cross_df(list(clarity = unique(diamonds$clarity),  unique(diamonds$cut)))</span><br><span class="line">  Error: Column <span class="number">2</span> must be named.</span><br><span class="line">  Use .name_repair to specify repair.</span><br><span class="line">  Call `rlang::last_error()` to see a backtrace</span><br></pre></td></tr></table></figure><h2 id="给定序列的组合-combn"><a href="#给定序列的组合-combn" class="headerlink" title="给定序列的组合-combn"></a>给定序列的组合-combn</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote><p><strong>Generate all combinations of the elements of <code>x</code> taken <code>m</code> at a time</strong>. If <code>x</code> is a positive integer, returns all combinations of the elements of <code>seq(x)</code> taken <code>m</code> at a time. If argument <code>FUN</code> is not NULL, applies a function given by the argument to each point. If <code>simplify</code> is <code>FALSE</code>, returns a <code>list</code>; <code>otherwise returns an array</code>, typically a <code>matrix</code>. … are passed unchanged to the FUN function, if specified.</p></blockquote><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相当于从1、2、3从任选两个组合</span></span><br><span class="line"><span class="comment"># 总有三个情况</span></span><br><span class="line">combn(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">3</span>    <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 26个字母中随机选两个，一共会得到2x325数据</span></span><br><span class="line"><span class="comment"># 然后按列将matrix进行合并，使用paste0合并，合并的连接符为""</span></span><br><span class="line">apply(combn(letters, <span class="number">2</span>), <span class="number">2</span>, paste0, collapse = <span class="string">""</span>)</span><br><span class="line">    [<span class="number">1</span>] <span class="string">"ab"</span> <span class="string">"ac"</span> <span class="string">"ad"</span> <span class="string">"ae"</span> <span class="string">"af"</span> <span class="string">"ag"</span> <span class="string">"ah"</span> <span class="string">"ai"</span> <span class="string">"aj"</span> <span class="string">"ak"</span> <span class="string">"al"</span> <span class="string">"am"</span> <span class="string">"an"</span> <span class="string">"ao"</span> <span class="string">"ap"</span> <span class="string">"aq"</span> <span class="string">"ar"</span> <span class="string">"as"</span> <span class="string">"at"</span> <span class="string">"au"</span> <span class="string">"av"</span> <span class="string">"aw"</span> <span class="string">"ax"</span></span><br><span class="line">  [<span class="number">24</span>] <span class="string">"ay"</span> <span class="string">"az"</span> <span class="string">"bc"</span> <span class="string">"bd"</span> <span class="string">"be"</span> <span class="string">"bf"</span> <span class="string">"bg"</span> <span class="string">"bh"</span> <span class="string">"bi"</span> <span class="string">"bj"</span> <span class="string">"bk"</span> <span class="string">"bl"</span> <span class="string">"bm"</span> <span class="string">"bn"</span> <span class="string">"bo"</span> <span class="string">"bp"</span> <span class="string">"bq"</span> <span class="string">"br"</span> <span class="string">"bs"</span> <span class="string">"bt"</span> <span class="string">"bu"</span> <span class="string">"bv"</span> <span class="string">"bw"</span></span><br><span class="line">  .....</span><br></pre></td></tr></table></figure><h2 id="去重-duplicated、unique、distinct"><a href="#去重-duplicated、unique、distinct" class="headerlink" title="去重-duplicated、unique、distinct"></a>去重-duplicated、unique、distinct</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dat=data.frame(id=c(<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>),id2=c(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>),somevalue=c(<span class="string">"x"</span>,<span class="string">"y"</span>,<span class="string">"z"</span>))</span><br><span class="line">  id id2 somevalue</span><br><span class="line">  <span class="number">1</span>   <span class="number">1</span>         x</span><br><span class="line">  <span class="number">1</span>   <span class="number">1</span>         y</span><br><span class="line">  <span class="number">3</span>   <span class="number">4</span>         z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 期望得到的结果</span></span><br><span class="line"><span class="comment"># 也就是说按照id和id2列来进行去重</span></span><br><span class="line">id id2 somevalue</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>         x</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>         z</span><br></pre></td></tr></table></figure><hr><h3 id="duplicated实现"><a href="#duplicated实现" class="headerlink" title="duplicated实现"></a>duplicated实现</h3><p><code>duplicated</code>本身不支持按照指定列的去重，但是因为<strong>其返回值是判断是不是重复的逻辑值(如果是重复的那么第二次出现的重复项返回TRUE，非重复就是FALSE)</strong>，所以可以先取出想要去重的列，然后在取出的列上进行去重，最后利用返回的逻辑值来进行<code>slice</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dat &lt;- data.frame(id=c(<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>),id2=c(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>),somevalue=c(<span class="string">"x"</span>,<span class="string">"y"</span>,<span class="string">"z"</span>))</span><br><span class="line">dat</span><br><span class="line">    id id2 somevalue</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span>   <span class="number">1</span>         x</span><br><span class="line">  <span class="number">2</span>  <span class="number">1</span>   <span class="number">1</span>         y</span><br><span class="line">  <span class="number">3</span>  <span class="number">3</span>   <span class="number">4</span>         z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取想要去重的列</span></span><br><span class="line">dat[,c(<span class="string">'id'</span>,<span class="string">'id2'</span>)]</span><br><span class="line">    id id2</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span>   <span class="number">1</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">1</span>   <span class="number">1</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">3</span>   <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重操作</span></span><br><span class="line">duplicated(dat[,c(<span class="string">'id'</span>,<span class="string">'id2'</span>)])</span><br><span class="line">  [<span class="number">1</span>] <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终取值</span></span><br><span class="line">dat[!duplicated(dat[,c(<span class="string">'id'</span>,<span class="string">'id2'</span>)]),]</span><br><span class="line">    id id2 somevalue</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span>   <span class="number">1</span>         x</span><br><span class="line">  <span class="number">3</span>  <span class="number">3</span>   <span class="number">4</span>         z</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="unique实现"><a href="#unique实现" class="headerlink" title="unique实现"></a>unique实现</h3><p><code>unique</code>的功能和前面的<code>duplicated</code>相同，区别是 <strong><code>unique</code>返回去重之后的向量或者数据框</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dat &lt;- data.frame(id=c(<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>),id2=c(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>),somevalue=c(<span class="string">"x"</span>,<span class="string">"y"</span>,<span class="string">"z"</span>))</span><br><span class="line">dat</span><br><span class="line">    id id2 somevalue</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span>   <span class="number">1</span>         x</span><br><span class="line">  <span class="number">2</span>  <span class="number">1</span>   <span class="number">1</span>         y</span><br><span class="line">  <span class="number">3</span>  <span class="number">3</span>   <span class="number">4</span>         z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对指定的列去重</span></span><br><span class="line">unique(dat[,c(<span class="string">'id'</span>,<span class="string">'id2'</span>)])</span><br><span class="line">    id id2</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span>   <span class="number">1</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">3</span>   <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取保留下来的行名，然后对原始数据进行slice</span></span><br><span class="line">dat[rownames(unique(dat[,c(<span class="string">'id'</span>,<span class="string">'id2'</span>)])),]</span><br><span class="line">    id id2 somevalue</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span>   <span class="number">1</span>         x</span><br><span class="line">  <span class="number">3</span>  <span class="number">3</span>   <span class="number">4</span>         z</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="distinct实现"><a href="#distinct实现" class="headerlink" title="distinct实现"></a>distinct实现</h3><p><code>distinct</code>是<code>dplyr</code>包中的一个函数，<strong>相比对前面两种间接实现方法(先去除指定列去重，然后进行slice)，<code>distinct</code>方法更加简单，直接指定列</strong>即可：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(dplyr)  </span><br><span class="line"><span class="comment"># 对id、id2两列去重                                      </span></span><br><span class="line">dat %&gt;% distinct(id, id2, .keep_all = <span class="literal">TRUE</span>)</span><br><span class="line">    id id2 somevalue</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span>   <span class="number">1</span>         x</span><br><span class="line">  <span class="number">2</span>  <span class="number">3</span>   <span class="number">4</span>         z</span><br><span class="line"></span><br><span class="line"><span class="comment"># .keep_all是保留所有列</span></span><br><span class="line"><span class="comment"># 如果不指定就是针对需要去重的列</span></span><br><span class="line">dat %&gt;% distinct(id, id2)</span><br><span class="line">    id id2</span><br><span class="line">  <span class="number">1</span>  <span class="number">1</span>   <span class="number">1</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">3</span>   <span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="去重NA-dropna"><a href="#去重NA-dropna" class="headerlink" title="去重NA-dropna"></a>去重NA-dropna</h2><p>如果数据中存在缺失值，如某一行存在缺失值，想要对数据进行去除缺失值的操作，如删除任何带有缺失值的行或者删除某些列包括缺失值的行，可以使用<code>dropna</code>函数：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># raw data</span></span><br><span class="line">             gene hsap mmul mmus rnor cfam</span><br><span class="line"><span class="number">1</span> ENSG00000208234    <span class="number">0</span>   <span class="literal">NA</span>   <span class="literal">NA</span>   <span class="literal">NA</span>   <span class="literal">NA</span></span><br><span class="line"><span class="number">2</span> ENSG00000199674    <span class="number">0</span>   <span class="number">2</span>    <span class="number">2</span>    <span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span> ENSG00000221622    <span class="number">0</span>   <span class="literal">NA</span>   <span class="literal">NA</span>   <span class="literal">NA</span>   <span class="literal">NA</span></span><br><span class="line"><span class="number">4</span> ENSG00000207604    <span class="number">0</span>   <span class="literal">NA</span>   <span class="literal">NA</span>   <span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">5</span> ENSG00000207431    <span class="number">0</span>   <span class="literal">NA</span>   <span class="literal">NA</span>   <span class="literal">NA</span>   <span class="literal">NA</span></span><br><span class="line"><span class="number">6</span> ENSG00000221312    <span class="number">0</span>   <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span>(tidyr)</span><br><span class="line"><span class="comment"># 删除任何包含缺失值的行</span></span><br><span class="line">df %&gt;% drop_na()</span><br><span class="line">              gene hsap mmul mmus rnor cfam</span><br><span class="line">  <span class="number">2</span> ENSG00000199674    <span class="number">0</span>    <span class="number">2</span>    <span class="number">2</span>    <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  <span class="number">6</span> ENSG00000221312    <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">2</span></span><br><span class="line"><span class="comment"># 删除指定列存在缺失值的行</span></span><br><span class="line">df %&gt;% drop_na(rnor, cfam)</span><br><span class="line">              gene hsap mmul mmus rnor cfam</span><br><span class="line">  <span class="number">2</span> ENSG00000199674    <span class="number">0</span>    <span class="number">2</span>    <span class="number">2</span>    <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">  <span class="number">4</span> ENSG00000207604    <span class="number">0</span>   <span class="literal">NA</span>   <span class="literal">NA</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">  <span class="number">6</span> ENSG00000221312    <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章用于积累&lt;code&gt;R&lt;/code&gt;中使用的小函数的用法和实例，便于后续查询和使用。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列-常用图形以及绘制方法收集</title>
    <link href="http://showteeth.tech/posts/6682.html"/>
    <id>http://showteeth.tech/posts/6682.html</id>
    <published>2019-11-22T03:04:53.000Z</published>
    <updated>2019-12-14T02:27:19.148Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章搜集了遇到的一些<strong>好看且实用图形</strong>的绘制方法，以备不时之需。</p></div><a id="more"></a><h2 id="各种图形绘制"><a href="#各种图形绘制" class="headerlink" title="各种图形绘制"></a>各种图形绘制</h2><ul><li><a href="http://www.sthda.com/english/wiki/ggplot2-essentials" target="_blank" rel="noopener">ggplot2 - Essentials</a></li></ul><h2 id="error-bar-line-or-bar-plot"><a href="#error-bar-line-or-bar-plot" class="headerlink" title="error bar-line or bar plot"></a>error bar-line or bar plot</h2><ul><li><a href="http://www.sthda.com/english/wiki/ggplot2-error-bars-quick-start-guide-r-software-and-data-visualization" target="_blank" rel="noopener">参考链接</a></li></ul><h2 id="boxplot点连线"><a href="#boxplot点连线" class="headerlink" title="boxplot点连线"></a>boxplot点连线</h2><ul><li><a href="https://www.jianshu.com/p/39ebf2bc0e55" target="_blank" rel="noopener">参考链接</a></li></ul><h2 id="使用cowplot拼接图形"><a href="#使用cowplot拼接图形" class="headerlink" title="使用cowplot拼接图形"></a>使用cowplot拼接图形</h2><ul><li><a href="https://wilkelab.org/cowplot/articles/plot_grid.html" target="_blank" rel="noopener">Arranging plots in a grid</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章搜集了遇到的一些&lt;strong&gt;好看且实用图形&lt;/strong&gt;的绘制方法，以备不时之需。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列-绘制百分比柱状图以及优化</title>
    <link href="http://showteeth.tech/posts/18071.html"/>
    <id>http://showteeth.tech/posts/18071.html</id>
    <published>2019-11-20T14:47:21.000Z</published>
    <updated>2019-12-11T16:03:52.258Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要是关于<strong>对R中的柱状图进行优化的过程</strong>，包括<strong>堆叠或并列柱状图</strong>、<strong>纵坐标表示百分比</strong>、<strong>添加同一组分在不同分组之间的连线来显示变化</strong>、<strong>对异常值的处理</strong>等。</p></div><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>堆叠柱状图</li><li>纵坐标表示百分比</li><li>添加同一组分在不同分组之间的连线来显示变化</li></ul><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="普通柱状图"><a href="#普通柱状图" class="headerlink" title="普通柱状图"></a>普通柱状图</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cluster_with_cellnum_plot</span><br><span class="line">    cell_num          ident cluster</span><br><span class="line">  <span class="number">1</span>      <span class="number">4317</span>   zebra_mut_3h       <span class="number">0</span></span><br><span class="line">  <span class="number">2</span>      <span class="number">1314</span> zebra_mut_sham       <span class="number">0</span></span><br><span class="line">  <span class="number">3</span>       <span class="number">297</span>    zebra_wt_3h       <span class="number">0</span></span><br><span class="line">  <span class="number">4</span>       <span class="number">720</span>  zebra_wt_sham       <span class="number">0</span></span><br><span class="line">  <span class="number">5</span>      <span class="number">5129</span>   zebra_mut_3h       <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示的是绝对数值</span></span><br><span class="line">ggplot(cluster_with_cellnum_plot, aes(fill=cluster, y=cell_num, x=ident)) + </span><br><span class="line">  geom_bar(stat=<span class="string">"identity"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="百分比柱状图"><a href="#百分比柱状图" class="headerlink" title="百分比柱状图"></a>百分比柱状图</h3><p>两种方法：</p><ul><li>先计算百分比，然后直接画图</li><li>直接传递原始数字，ggplot2转化为百分比</li></ul><h4 id="计算百分比"><a href="#计算百分比" class="headerlink" title="计算百分比"></a>计算百分比</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cluster_with_cellnum_plot %&gt;% </span><br><span class="line">  <span class="comment"># 数据按ident进行分组</span></span><br><span class="line">  dplyr::group_by (ident) %&gt;% </span><br><span class="line">  <span class="comment"># mutate() adds new variables and preserves existing ones</span></span><br><span class="line">  <span class="comment"># mutate在添加新变量的同时保留原始的变量信息</span></span><br><span class="line">  <span class="comment"># 新增的变量名称为frac</span></span><br><span class="line">  dplyr::mutate(frac=round(cell_num/sum(cell_num),<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">  <span class="comment"># A tibble: 44 x 4</span></span><br><span class="line">  <span class="comment"># Groups:   ident [4]</span></span><br><span class="line">    cell_num ident          cluster   frac</span><br><span class="line">        &lt;int&gt; &lt;chr&gt;            &lt;int&gt;  &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span>     <span class="number">4317</span> zebra_mut_3h         <span class="number">0</span> <span class="number">0.385</span> </span><br><span class="line">  <span class="number">2</span>     <span class="number">1314</span> zebra_mut_sham       <span class="number">0</span> <span class="number">0.105</span> </span><br><span class="line">  <span class="number">3</span>      <span class="number">297</span> zebra_wt_3h          <span class="number">0</span> <span class="number">0.0412</span></span><br><span class="line">  <span class="number">4</span>      <span class="number">720</span> zebra_wt_sham        <span class="number">0</span> <span class="number">0.190</span> </span><br><span class="line">  <span class="number">5</span>     <span class="number">5129</span> zebra_mut_3h         <span class="number">1</span> <span class="number">0.457</span> </span><br><span class="line">  <span class="number">6</span>     <span class="number">1425</span> zebra_mut_sham       <span class="number">1</span> <span class="number">0.114</span> </span><br><span class="line">  <span class="number">7</span>       <span class="number">28</span> zebra_wt_3h          <span class="number">1</span> <span class="number">0.0039</span></span><br><span class="line">  <span class="number">8</span>       <span class="number">35</span> zebra_wt_sham        <span class="number">1</span> <span class="number">0.0092</span></span><br><span class="line">  <span class="number">9</span>      <span class="number">614</span> zebra_mut_3h         <span class="number">2</span> <span class="number">0.0547</span></span><br><span class="line">  <span class="number">10</span>     <span class="number">2385</span> zebra_mut_sham       <span class="number">2</span> <span class="number">0.191</span> </span><br><span class="line">  <span class="comment"># … with 34 more rows</span></span><br></pre></td></tr></table></figure><hr><h4 id="直接使用ggplot2转化"><a href="#直接使用ggplot2转化" class="headerlink" title="直接使用ggplot2转化"></a>直接使用ggplot2转化</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ggplot(cluster_with_cellnum_plot, aes(fill=cluster, y=cell_num, x=ident)) + </span><br><span class="line">  <span class="comment"># 添加了position="fill"</span></span><br><span class="line">  geom_bar(position=<span class="string">"fill"</span>, stat=<span class="string">"identity"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="添加百分比"><a href="#添加百分比" class="headerlink" title="添加百分比"></a>添加百分比</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ggplot(cluster_with_cellnum_plot, aes(fill=cluster, y=cell_num, x=ident)) + </span><br><span class="line">  geom_bar(position=<span class="string">"fill"</span>, stat=<span class="string">"identity"</span>) + </span><br><span class="line">  <span class="comment"># 将纵坐标转化为百分比的形式</span></span><br><span class="line">  scale_y_continuous(labels = <span class="keyword">function</span>(x) paste0(x*<span class="number">100</span>, <span class="string">"%"</span>))</span><br></pre></td></tr></table></figure><hr><h3 id="添加分组连线"><a href="#添加分组连线" class="headerlink" title="添加分组连线"></a>添加分组连线</h3><h4 id="原始的数值"><a href="#原始的数值" class="headerlink" title="原始的数值"></a>原始的数值</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到数据框</span></span><br><span class="line">df=data.frame(</span><br><span class="line">  Phylum=c(<span class="string">"Ruminococcaceae"</span>,<span class="string">"Bacteroidaceae"</span>,<span class="string">"Eubacteriaceae"</span>,<span class="string">"Lachnospiraceae"</span>,<span class="string">"Porphyromonadaceae"</span>),</span><br><span class="line">  GroupA=c(<span class="number">37.7397</span>,<span class="number">31.34317</span>,<span class="number">222.08827</span>,<span class="number">5.08956</span>,<span class="number">3.7393</span>),</span><br><span class="line">  GroupB=c(<span class="number">113.2191</span>,<span class="number">94.02951</span>,<span class="number">66.26481</span>,<span class="number">15.26868</span>,<span class="number">11.2179</span>),</span><br><span class="line">  GroupC=c(<span class="number">123.2191</span>,<span class="number">94.02951</span>,<span class="number">46.26481</span>,<span class="number">35.26868</span>,<span class="number">1.2179</span>)</span><br><span class="line">)</span><br><span class="line">df</span><br><span class="line">                Phylum    GroupA    GroupB    GroupC</span><br><span class="line">  <span class="number">1</span>    Ruminococcaceae  <span class="number">37.73970</span> <span class="number">113.21910</span> <span class="number">123.21910</span></span><br><span class="line">  <span class="number">2</span>     Bacteroidaceae  <span class="number">31.34317</span>  <span class="number">94.02951</span>  <span class="number">94.02951</span></span><br><span class="line">  <span class="number">3</span>     Eubacteriaceae <span class="number">222.08827</span>  <span class="number">66.26481</span>  <span class="number">46.26481</span></span><br><span class="line">  <span class="number">4</span>    Lachnospiraceae   <span class="number">5.08956</span>  <span class="number">15.26868</span>  <span class="number">35.26868</span></span><br><span class="line">  <span class="number">5</span> Porphyromonadaceae   <span class="number">3.73930</span>  <span class="number">11.21790</span>   <span class="number">1.21790</span></span><br><span class="line"></span><br><span class="line">melt(df)</span><br><span class="line">melt(df)</span><br><span class="line">  Using Phylum as id variables</span><br><span class="line">                Phylum variable     value</span><br><span class="line">  <span class="number">1</span>     Ruminococcaceae   GroupA  <span class="number">37.73970</span></span><br><span class="line">  <span class="number">2</span>      Bacteroidaceae   GroupA  <span class="number">31.34317</span></span><br><span class="line">  <span class="number">3</span>      Eubacteriaceae   GroupA <span class="number">222.08827</span></span><br><span class="line">  <span class="number">4</span>     Lachnospiraceae   GroupA   <span class="number">5.08956</span></span><br><span class="line">  <span class="number">5</span>  Porphyromonadaceae   GroupA   <span class="number">3.73930</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># GroupA、GroupB之间的连线情况</span></span><br><span class="line">data=df %&gt;% </span><br><span class="line">  arrange(by=desc(Phylum)) %&gt;% </span><br><span class="line">  mutate(GroupA=cumsum(GroupA)) %&gt;% </span><br><span class="line">  mutate(GroupB=cumsum(GroupB))</span><br><span class="line">data</span><br><span class="line">                Phylum    GroupA   GroupB    GroupC</span><br><span class="line">  <span class="number">1</span>    Ruminococcaceae  <span class="number">37.73970</span> <span class="number">113.2191</span> <span class="number">123.21910</span></span><br><span class="line">  <span class="number">2</span> Porphyromonadaceae  <span class="number">41.47900</span> <span class="number">124.4370</span>   <span class="number">1.21790</span></span><br><span class="line">  <span class="number">3</span>    Lachnospiraceae  <span class="number">46.56856</span> <span class="number">139.7057</span>  <span class="number">35.26868</span></span><br><span class="line">  <span class="number">4</span>     Eubacteriaceae <span class="number">268.65683</span> <span class="number">205.9705</span>  <span class="number">46.26481</span></span><br><span class="line">  <span class="number">5</span>     Bacteroidaceae <span class="number">300.00000</span> <span class="number">300.0000</span>  <span class="number">94.02951</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># melt将dataframe转化为更适合ggplot2绘图的数据格式</span></span><br><span class="line">ggplot(melt(df), aes(x=variable, y=value, fill=Phylum)) +</span><br><span class="line">  geom_bar(stat = <span class="string">"identity"</span>, width=<span class="number">0.5</span>, col=<span class="string">'black'</span>)  + theme_classic()+</span><br><span class="line">  <span class="comment"># 这里的添加连线的部分，关键点：排序、cumsum</span></span><br><span class="line">  <span class="comment"># 第一个是处理A-&gt;B</span></span><br><span class="line">  <span class="comment"># x=1.25：连线开始的地方，是列名</span></span><br><span class="line">  <span class="comment"># xend=1.75：连线结束的地方，是列名</span></span><br><span class="line">  <span class="comment"># 上面两个需要和geom_bar的width=0.5参数结合起来</span></span><br><span class="line">  geom_segment(data=df %&gt;% </span><br><span class="line">                 arrange(by=desc(Phylum)) %&gt;% </span><br><span class="line">                 mutate(GroupA=cumsum(GroupA)) %&gt;% </span><br><span class="line">                 mutate(GroupB=cumsum(GroupB)), </span><br><span class="line">               aes(x=<span class="number">1.25</span>, xend=<span class="number">1.75</span>, y=GroupA, yend=GroupB))+</span><br><span class="line">  <span class="comment"># 第二个是处理B-&gt;C</span></span><br><span class="line">  geom_segment(data=df %&gt;% </span><br><span class="line">                 arrange(by=desc(Phylum)) %&gt;% </span><br><span class="line">                 mutate(GroupB=cumsum(GroupB)) %&gt;% </span><br><span class="line">                 mutate(GroupC=cumsum(GroupC)), </span><br><span class="line">               aes(x=<span class="number">2.25</span>, xend=<span class="number">2.75</span>, y=GroupB, yend=GroupC))</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/R_bar_plot_optimize.png" alt="R_bar_plot_optimize.png"></p><h4 id="转化为百分比"><a href="#转化为百分比" class="headerlink" title="转化为百分比"></a>转化为百分比</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算得到百分比</span></span><br><span class="line"><span class="comment"># 不要round，不然加和可能不是0</span></span><br><span class="line">df= melt(df) %&gt;%  group_by(variable) %&gt;% </span><br><span class="line">  mutate(percent=value/sum(value)) %&gt;%  group_by(variable) %&gt;%  mutate(total=sum(percent))</span><br><span class="line">df</span><br><span class="line">  <span class="comment"># A tibble: 15 x 5</span></span><br><span class="line">  <span class="comment"># Groups:   variable [3]</span></span><br><span class="line">    Phylum             variable  value percent total</span><br><span class="line">    &lt;fct&gt;              &lt;fct&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> Ruminococcaceae    GroupA    <span class="number">37.7</span>  <span class="number">0.126</span>       <span class="number">1</span></span><br><span class="line">  <span class="number">2</span> Bacteroidaceae     GroupA    <span class="number">31.3</span>  <span class="number">0.104</span>       <span class="number">1</span></span><br><span class="line">  <span class="number">3</span> Eubacteriaceae     GroupA   <span class="number">222.</span>   <span class="number">0.740</span>       <span class="number">1</span></span><br><span class="line">  <span class="number">4</span> Lachnospiraceae    GroupA     <span class="number">5.09</span> <span class="number">0.0170</span>      <span class="number">1</span></span><br><span class="line">  <span class="number">5</span> Porphyromonadaceae GroupA     <span class="number">3.74</span> <span class="number">0.0125</span>      <span class="number">1</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原原始的dataframe结构</span></span><br><span class="line"><span class="comment"># 并且使用percent作为填充值</span></span><br><span class="line"><span class="comment"># 默认使用的是value列</span></span><br><span class="line">dcast(df,Phylum~variable,value.var=<span class="string">"percent"</span>)</span><br><span class="line">  dcast(df,Phylum~variable,value.var=<span class="string">"percent"</span>)</span><br><span class="line">                Phylum     GroupA    GroupB      GroupC</span><br><span class="line">  <span class="number">1</span>     Bacteroidaceae <span class="number">0.10447723</span> <span class="number">0.3134317</span> <span class="number">0.313431700</span></span><br><span class="line">  <span class="number">2</span>     Eubacteriaceae <span class="number">0.74029423</span> <span class="number">0.2208827</span> <span class="number">0.154216033</span></span><br><span class="line">  <span class="number">3</span>    Lachnospiraceae <span class="number">0.01696520</span> <span class="number">0.0508956</span> <span class="number">0.117562267</span></span><br><span class="line">  <span class="number">4</span> Porphyromonadaceae <span class="number">0.01246433</span> <span class="number">0.0373930</span> <span class="number">0.004059667</span></span><br><span class="line">  <span class="number">5</span>    Ruminococcaceae <span class="number">0.12579900</span> <span class="number">0.3773970</span> <span class="number">0.410730333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GroupA、GroupB之间的连线情况</span></span><br><span class="line">data=dcast(df,Phylum~variable,value.var=<span class="string">"percent"</span>) %&gt;% </span><br><span class="line">  arrange(by=desc(Phylum)) %&gt;% </span><br><span class="line">  mutate(GroupA=cumsum(GroupA)) %&gt;% </span><br><span class="line">  mutate(GroupB=cumsum(GroupB))</span><br><span class="line">data</span><br><span class="line">                Phylum    GroupA    GroupB      GroupC</span><br><span class="line">  <span class="number">1</span>    Ruminococcaceae <span class="number">0.1257990</span> <span class="number">0.3773970</span> <span class="number">0.410730333</span></span><br><span class="line">  <span class="number">2</span> Porphyromonadaceae <span class="number">0.1382633</span> <span class="number">0.4147900</span> <span class="number">0.004059667</span></span><br><span class="line">  <span class="number">3</span>    Lachnospiraceae <span class="number">0.1552285</span> <span class="number">0.4656856</span> <span class="number">0.117562267</span></span><br><span class="line">  <span class="number">4</span>     Eubacteriaceae <span class="number">0.8955228</span> <span class="number">0.6865683</span> <span class="number">0.154216033</span></span><br><span class="line">  <span class="number">5</span>     Bacteroidaceae <span class="number">1.0000000</span> <span class="number">1.0000000</span> <span class="number">0.313431700</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">ggplot(df, aes(x=variable, y=percent, fill=Phylum)) +</span><br><span class="line">  geom_bar(stat = <span class="string">"identity"</span>, width=<span class="number">0.5</span>, col=<span class="string">'black'</span>)  + theme_classic()+</span><br><span class="line">  geom_segment(data=dcast(df,Phylum~variable,value.var=<span class="string">"percent"</span>) %&gt;% </span><br><span class="line">                 arrange(by=desc(Phylum)) %&gt;% </span><br><span class="line">                 mutate(GroupA=cumsum(GroupA)) %&gt;% </span><br><span class="line">                 mutate(GroupB=cumsum(GroupB)), </span><br><span class="line">               aes(x=<span class="number">1.25</span>, xend=<span class="number">1.75</span>, y=GroupA, yend=GroupB))+</span><br><span class="line">  geom_segment(data=dcast(df,Phylum~variable,value.var=<span class="string">"percent"</span>) %&gt;% </span><br><span class="line">                 arrange(by=desc(Phylum)) %&gt;% </span><br><span class="line">                 mutate(GroupB=cumsum(GroupB)) %&gt;% </span><br><span class="line">                 mutate(GroupC=cumsum(GroupC)), </span><br><span class="line">               aes(x=<span class="number">2.25</span>, xend=<span class="number">2.75</span>, y=GroupB, yend=GroupC))</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/R_bar_plot_optimize_2.png" alt="R_bar_plot_optimize_2.png"></p><h4 id="多个分组快速绘制"><a href="#多个分组快速绘制" class="headerlink" title="多个分组快速绘制"></a>多个分组快速绘制</h4><p>前面在学习的时候都是<strong>两个两个来绘制的连线</strong>，这种对于<strong>分组较少</strong>的情况还比较适用，但<strong>分组一旦变多</strong>就不是很好用了。基于此，简单的做法是重新构建一个数据框，然后将<code>cumsum</code>的结果以及对应的连线坐标都保存，最终直接利用这个数据框就可以得到最后的结果。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(</span><br><span class="line">  Phylum=c(<span class="string">"Ruminococcaceae"</span>,<span class="string">"Bacteroidaceae"</span>,<span class="string">"Eubacteriaceae"</span>,<span class="string">"Lachnospiraceae"</span>,<span class="string">"Porphyromonadaceae"</span>),</span><br><span class="line">  GroupA=c(<span class="number">37.7397</span>,<span class="number">31.34317</span>,<span class="number">222.08827</span>,<span class="number">5.08956</span>,<span class="number">3.7393</span>),</span><br><span class="line">  GroupB=c(<span class="number">113.2191</span>,<span class="number">94.02951</span>,<span class="number">66.26481</span>,<span class="number">15.26868</span>,<span class="number">11.2179</span>),</span><br><span class="line">  GroupC=c(<span class="number">123.2191</span>,<span class="number">94.02951</span>,<span class="number">46.26481</span>,<span class="number">35.26868</span>,<span class="number">1.2179</span>),</span><br><span class="line">  GroupD=c(<span class="number">37.7397</span>,<span class="number">31.34317</span>,<span class="number">222.08827</span>,<span class="number">5.08956</span>,<span class="number">3.7393</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df</span><br><span class="line">                Phylum    GroupA    GroupB    GroupC    GroupD</span><br><span class="line">  <span class="number">1</span>    Ruminococcaceae  <span class="number">37.73970</span> <span class="number">113.21910</span> <span class="number">123.21910</span>  <span class="number">37.73970</span></span><br><span class="line">  <span class="number">2</span>     Bacteroidaceae  <span class="number">31.34317</span>  <span class="number">94.02951</span>  <span class="number">94.02951</span>  <span class="number">31.34317</span></span><br><span class="line">  <span class="number">3</span>     Eubacteriaceae <span class="number">222.08827</span>  <span class="number">66.26481</span>  <span class="number">46.26481</span> <span class="number">222.08827</span></span><br><span class="line">  <span class="number">4</span>    Lachnospiraceae   <span class="number">5.08956</span>  <span class="number">15.26868</span>  <span class="number">35.26868</span>   <span class="number">5.08956</span></span><br><span class="line">  <span class="number">5</span> Porphyromonadaceae   <span class="number">3.73930</span>  <span class="number">11.21790</span>   <span class="number">1.21790</span>   <span class="number">3.73930</span></span><br><span class="line"></span><br><span class="line">df.long &lt;- df %&gt;% gather(group, abundance, -Phylum)</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"><span class="comment"># df.long = melt(df,id.vars = "Phylum")</span></span><br><span class="line">                Phylum variable     value</span><br><span class="line">  <span class="number">1</span>     Ruminococcaceae   GroupA  <span class="number">37.73970</span></span><br><span class="line">  <span class="number">2</span>      Bacteroidaceae   GroupA  <span class="number">31.34317</span></span><br><span class="line">  <span class="number">3</span>      Eubacteriaceae   GroupA <span class="number">222.08827</span></span><br><span class="line">  <span class="number">4</span>     Lachnospiraceae   GroupA   <span class="number">5.08956</span></span><br><span class="line">  <span class="number">5</span>  Porphyromonadaceae   GroupA   <span class="number">3.73930</span></span><br><span class="line">  <span class="number">6</span>     Ruminococcaceae   GroupB <span class="number">113.21910</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组求和</span></span><br><span class="line">link_dat &lt;- df %&gt;%</span><br><span class="line">  arrange(by=desc(Phylum)) %&gt;%</span><br><span class="line">  mutate_if(is.numeric, cumsum)</span><br><span class="line"></span><br><span class="line">link_dat</span><br><span class="line">                Phylum    GroupA   GroupB   GroupC    GroupD</span><br><span class="line">  <span class="number">1</span>    Ruminococcaceae  <span class="number">37.73970</span> <span class="number">113.2191</span> <span class="number">123.2191</span>  <span class="number">37.73970</span></span><br><span class="line">  <span class="number">2</span> Porphyromonadaceae  <span class="number">41.47900</span> <span class="number">124.4370</span> <span class="number">124.4370</span>  <span class="number">41.47900</span></span><br><span class="line">  <span class="number">3</span>    Lachnospiraceae  <span class="number">46.56856</span> <span class="number">139.7057</span> <span class="number">159.7057</span>  <span class="number">46.56856</span></span><br><span class="line">  <span class="number">4</span>     Eubacteriaceae <span class="number">268.65683</span> <span class="number">205.9705</span> <span class="number">205.9705</span> <span class="number">268.65683</span></span><br><span class="line">  <span class="number">5</span>     Bacteroidaceae <span class="number">300.00000</span> <span class="number">300.0000</span> <span class="number">300.0000</span> <span class="number">300.00000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置柱状图柱子的宽度</span></span><br><span class="line">bar.width &lt;- <span class="number">0.7</span></span><br><span class="line"><span class="comment"># 将除GroupA、GroupD之外的所有列重复2遍</span></span><br><span class="line">link_dat &lt;- link_dat[, c(<span class="number">1</span>,<span class="number">2</span>,rep(<span class="number">3</span>:(ncol(link_dat)-<span class="number">1</span>),each=<span class="number">2</span>), ncol(link_dat))]</span><br><span class="line">link_dat</span><br><span class="line">                Phylum    GroupA   GroupB GroupB.1   GroupC GroupC.1    GroupD</span><br><span class="line">  <span class="number">1</span>    Ruminococcaceae  <span class="number">37.73970</span> <span class="number">113.2191</span> <span class="number">113.2191</span> <span class="number">123.2191</span> <span class="number">123.2191</span>  <span class="number">37.73970</span></span><br><span class="line">  <span class="number">2</span> Porphyromonadaceae  <span class="number">41.47900</span> <span class="number">124.4370</span> <span class="number">124.4370</span> <span class="number">124.4370</span> <span class="number">124.4370</span>  <span class="number">41.47900</span></span><br><span class="line">  <span class="number">3</span>    Lachnospiraceae  <span class="number">46.56856</span> <span class="number">139.7057</span> <span class="number">139.7057</span> <span class="number">159.7057</span> <span class="number">159.7057</span>  <span class="number">46.56856</span></span><br><span class="line">  <span class="number">4</span>     Eubacteriaceae <span class="number">268.65683</span> <span class="number">205.9705</span> <span class="number">205.9705</span> <span class="number">205.9705</span> <span class="number">205.9705</span> <span class="number">268.65683</span></span><br><span class="line">  <span class="number">5</span>     Bacteroidaceae <span class="number">300.00000</span> <span class="number">300.0000</span> <span class="number">300.0000</span> <span class="number">300.0000</span> <span class="number">300.0000</span> <span class="number">300.00000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># matrix在不指定ncol和nrow的时候会返回一列数据，按列连接</span></span><br><span class="line"><span class="comment"># 指定了nrow的话就是将默认的一列数据转化为指定的行的数据</span></span><br><span class="line">link_dat &lt;- data.frame(y=t(matrix(t(link_dat[,-<span class="number">1</span>]), nrow=<span class="number">2</span>)))</span><br><span class="line">link_dat</span><br><span class="line">          y.1       y.2</span><br><span class="line">  <span class="number">1</span>   <span class="number">37.73970</span> <span class="number">113.21910</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">113.21910</span> <span class="number">123.21910</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">123.21910</span>  <span class="number">37.73970</span></span><br><span class="line">  <span class="number">4</span>   <span class="number">41.47900</span> <span class="number">124.43700</span></span><br><span class="line">  <span class="number">5</span>  <span class="number">124.43700</span> <span class="number">124.43700</span></span><br><span class="line">  <span class="number">6</span>  <span class="number">124.43700</span>  <span class="number">41.47900</span></span><br><span class="line">  <span class="number">7</span>   <span class="number">46.56856</span> <span class="number">139.70568</span></span><br><span class="line">  <span class="number">8</span>  <span class="number">139.70568</span> <span class="number">159.70568</span></span><br><span class="line">  <span class="number">9</span>  <span class="number">159.70568</span>  <span class="number">46.56856</span></span><br><span class="line">  <span class="number">10</span> <span class="number">268.65683</span> <span class="number">205.97049</span></span><br><span class="line">  <span class="number">11</span> <span class="number">205.97049</span> <span class="number">205.97049</span></span><br><span class="line">  <span class="number">12</span> <span class="number">205.97049</span> <span class="number">268.65683</span></span><br><span class="line">  <span class="number">13</span> <span class="number">300.00000</span> <span class="number">300.00000</span></span><br><span class="line">  <span class="number">14</span> <span class="number">300.00000</span> <span class="number">300.00000</span></span><br><span class="line">  <span class="number">15</span> <span class="number">300.00000</span> <span class="number">300.00000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加线的连接点</span></span><br><span class="line"><span class="comment"># 结合前面的width</span></span><br><span class="line">link_dat$x.1 &lt;- <span class="number">1</span>:(ncol(df)-<span class="number">2</span>)+bar.width/<span class="number">2</span></span><br><span class="line">link_dat$x.2 &lt;- <span class="number">1</span>:(ncol(df)-<span class="number">2</span>)+(<span class="number">1</span>-bar.width/<span class="number">2</span>)</span><br><span class="line">link_dat</span><br><span class="line">          y.1       y.2  x.1  x.2</span><br><span class="line">  <span class="number">1</span>   <span class="number">37.73970</span> <span class="number">113.21910</span> <span class="number">1.35</span> <span class="number">1.65</span></span><br><span class="line">  <span class="number">2</span>  <span class="number">113.21910</span> <span class="number">123.21910</span> <span class="number">2.35</span> <span class="number">2.65</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">123.21910</span>  <span class="number">37.73970</span> <span class="number">3.35</span> <span class="number">3.65</span></span><br><span class="line">  <span class="number">4</span>   <span class="number">41.47900</span> <span class="number">124.43700</span> <span class="number">1.35</span> <span class="number">1.65</span></span><br><span class="line">  <span class="number">5</span>  <span class="number">124.43700</span> <span class="number">124.43700</span> <span class="number">2.35</span> <span class="number">2.65</span></span><br><span class="line">  <span class="number">6</span>  <span class="number">124.43700</span>  <span class="number">41.47900</span> <span class="number">3.35</span> <span class="number">3.65</span></span><br><span class="line">  <span class="number">7</span>   <span class="number">46.56856</span> <span class="number">139.70568</span> <span class="number">1.35</span> <span class="number">1.65</span></span><br><span class="line">  <span class="number">8</span>  <span class="number">139.70568</span> <span class="number">159.70568</span> <span class="number">2.35</span> <span class="number">2.65</span></span><br><span class="line">  <span class="number">9</span>  <span class="number">159.70568</span>  <span class="number">46.56856</span> <span class="number">3.35</span> <span class="number">3.65</span></span><br><span class="line">  <span class="number">10</span> <span class="number">268.65683</span> <span class="number">205.97049</span> <span class="number">1.35</span> <span class="number">1.65</span></span><br><span class="line">  <span class="number">11</span> <span class="number">205.97049</span> <span class="number">205.97049</span> <span class="number">2.35</span> <span class="number">2.65</span></span><br><span class="line">  <span class="number">12</span> <span class="number">205.97049</span> <span class="number">268.65683</span> <span class="number">3.35</span> <span class="number">3.65</span></span><br><span class="line">  <span class="number">13</span> <span class="number">300.00000</span> <span class="number">300.00000</span> <span class="number">1.35</span> <span class="number">1.65</span></span><br><span class="line">  <span class="number">14</span> <span class="number">300.00000</span> <span class="number">300.00000</span> <span class="number">2.35</span> <span class="number">2.65</span></span><br><span class="line">  <span class="number">15</span> <span class="number">300.00000</span> <span class="number">300.00000</span> <span class="number">3.35</span> <span class="number">3.65</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 出图</span></span><br><span class="line">ggplot(df.long, aes(x=group, y=abundance, fill=Phylum)) +</span><br><span class="line">  geom_bar(stat = <span class="string">"identity"</span>, width=bar.width, col=<span class="string">'black'</span>)  +</span><br><span class="line">  <span class="comment"># 这里直接指定x、xend、y、yend</span></span><br><span class="line">  geom_segment(data=link_dat,</span><br><span class="line">               aes(x=x.1, xend=x.2, y=y.1, yend=y.2), inherit.aes = <span class="literal">F</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/R_bar_plot_optimize_3.png" alt="R_bar_plot_optimize_3.png"></p><hr><h2 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h2><h3 id="并列或者堆叠柱状图"><a href="#并列或者堆叠柱状图" class="headerlink" title="并列或者堆叠柱状图"></a>并列或者堆叠柱状图</h3><p><strong>默认柱状图是堆叠柱状图</strong>，如果想画出并列柱状图可以使用如下方法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fill：控制颜色和堆叠效果</span></span><br><span class="line"><span class="comment"># position ="dodge"：并列柱状图，默认是堆叠</span></span><br><span class="line">ggplot(final_stat, aes(x=ST, y=frac,fill=Sample_name)) + </span><br><span class="line">  geom_bar( stat=<span class="string">"identity"</span>,position =<span class="string">"dodge"</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="存在异常值"><a href="#存在异常值" class="headerlink" title="存在异常值"></a>存在异常值</h3><p>如果柱状图的<strong>某些结果异常高</strong>，那么就会导致其他结果的<strong>可视化效果变差(增大了scale，压缩了其他bar)</strong>，为了解决这种情况就可以设<strong>置坐标轴的显示范围</strong>，或者进行<strong>坐标轴截断</strong>。</p><h4 id="控制坐标轴范围"><a href="#控制坐标轴范围" class="headerlink" title="控制坐标轴范围"></a>控制坐标轴范围</h4><p><strong>错误的做法</strong>，使用<code>scale_y_continuous</code>、<code>ylim</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用scale_y_continuous(limits=c(0,0.03))会出问题</span></span><br><span class="line"><span class="comment"># 会直接将超过设置范围的bar去掉</span></span><br><span class="line">ggplot(final_stat, aes(x=ST, y=frac,fill=Sample_name)) + </span><br><span class="line">  geom_bar( stat=<span class="string">"identity"</span>,position =<span class="string">"dodge"</span>) +</span><br><span class="line">  scale_y_continuous(limits=c(<span class="number">0</span>,<span class="number">0.03</span>))</span><br><span class="line">  </span><br><span class="line">  Warning message:</span><br><span class="line">  Removed <span class="number">22</span> rows containing missing values (geom_bar).</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和scale_y_continuous(limits=c(0,0.03))相同，直接使用ylim(0,0.03)也是一样的效果</span></span><br><span class="line">ggplot(final_stat, aes(x=ST, y=frac,fill=Sample_name)) + </span><br><span class="line">  geom_bar( stat=<span class="string">"identity"</span>,position =<span class="string">"dodge"</span>) +</span><br><span class="line">  ylim(<span class="number">0</span>,<span class="number">0.03</span>)</span><br></pre></td></tr></table></figure><p></p><p><strong>正确的做法</strong>，使用<code>coord_cartesian</code>和<code>coord_flip</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果想让bar是垂直显示的，那就使用coord_cartesian</span></span><br><span class="line">ggplot(final_stat, aes(x=ST, y=frac,fill=Sample_name)) + </span><br><span class="line">  geom_bar( stat=<span class="string">"identity"</span>,position =<span class="string">"dodge"</span>) +</span><br><span class="line">  coord_cartesian(ylim=c(<span class="number">0</span>,<span class="number">0.03</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想让bar水平显示，那就使用coord_flip</span></span><br><span class="line">ggplot(final_stat, aes(x=ST, y=frac,fill=Sample_name)) + </span><br><span class="line">  geom_bar( stat=<span class="string">"identity"</span>,position =<span class="string">"dodge"</span>) +</span><br><span class="line">  coord_flip(ylim=c(<span class="number">0</span>,<span class="number">0.03</span>))</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="坐标轴截断"><a href="#坐标轴截断" class="headerlink" title="坐标轴截断"></a>坐标轴截断</h4><p><strong>ggplot2本身没有坐标轴截断的功能</strong>，所以一些文献中通过软件实现的截断图用ggplot2难以实现，<strong>标准的方案是使用分面达到类似的效果</strong>。<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">set.seed(<span class="number">2019</span>-<span class="number">01</span>-<span class="number">19</span>)</span><br><span class="line">d &lt;- data.frame(</span><br><span class="line">  x = <span class="number">1</span>:<span class="number">20</span>, </span><br><span class="line">  y = c(rnorm(<span class="number">5</span>) + <span class="number">4</span>, rnorm(<span class="number">5</span>) + <span class="number">20</span>, rnorm(<span class="number">5</span>) + <span class="number">5</span>, rnorm(<span class="number">5</span>) + <span class="number">22</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">d</span><br><span class="line">      x         y</span><br><span class="line">  <span class="number">1</span>   <span class="number">1</span>  <span class="number">4.732672</span></span><br><span class="line">  <span class="number">2</span>   <span class="number">2</span>  <span class="number">3.962170</span></span><br><span class="line">  <span class="number">3</span>   <span class="number">3</span>  <span class="number">5.203009</span></span><br><span class="line">  <span class="number">4</span>   <span class="number">4</span>  <span class="number">5.469802</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始图形</span></span><br><span class="line">ggplot(d, aes(x, y)) + geom_col()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制分面</span></span><br><span class="line"><span class="keyword">library</span>(dplyr)</span><br><span class="line"><span class="comment"># 设置分面位置</span></span><br><span class="line">breaks = c(<span class="number">7</span>, <span class="number">17</span>)</span><br><span class="line">d$.type &lt;- <span class="literal">NA</span></span><br><span class="line">d$.type[d$y &lt; breaks[<span class="number">1</span>]] = <span class="string">"small"</span></span><br><span class="line">d$.type[d$y &gt; breaks[<span class="number">2</span>]] = <span class="string">"big"</span></span><br><span class="line">d</span><br><span class="line">      x         y .type</span><br><span class="line">  <span class="number">1</span>   <span class="number">1</span>  <span class="number">4.732672</span> small</span><br><span class="line">  <span class="number">2</span>   <span class="number">2</span>  <span class="number">3.962170</span> small</span><br><span class="line">  <span class="number">3</span>   <span class="number">3</span>  <span class="number">5.203009</span> small</span><br><span class="line">  <span class="number">4</span>   <span class="number">4</span>  <span class="number">5.469802</span> small</span><br><span class="line">  <span class="number">5</span>   <span class="number">5</span>  <span class="number">4.133690</span> small</span><br><span class="line">  <span class="number">6</span>   <span class="number">6</span> <span class="number">20.519827</span>   big</span><br><span class="line">  ......</span><br><span class="line"><span class="comment"># 将大于break的值设置为break，并且将这些信息和原有的数据concat</span></span><br><span class="line">d &lt;- filter(d, .type == <span class="string">'big'</span>) %&gt;% </span><br><span class="line">  mutate(.type = <span class="string">"small"</span>, y = breaks[<span class="number">1</span>]) %&gt;% </span><br><span class="line">  bind_rows(d)</span><br><span class="line">d</span><br><span class="line">      x         y .type</span><br><span class="line">  <span class="number">1</span>   <span class="number">6</span>  <span class="number">7.000000</span> small</span><br><span class="line">  <span class="number">2</span>   <span class="number">7</span>  <span class="number">7.000000</span> small</span><br><span class="line">  <span class="number">3</span>   <span class="number">8</span>  <span class="number">7.000000</span> small</span><br><span class="line">  <span class="number">4</span>   <span class="number">9</span>  <span class="number">7.000000</span> small</span><br><span class="line">  <span class="number">5</span>  <span class="number">10</span>  <span class="number">7.000000</span> small</span><br><span class="line">  <span class="number">6</span>  <span class="number">16</span>  <span class="number">7.000000</span> small</span><br><span class="line">  <span class="number">7</span>  <span class="number">17</span>  <span class="number">7.000000</span> small</span><br><span class="line">  <span class="number">8</span>  <span class="number">18</span>  <span class="number">7.000000</span> small</span><br><span class="line">  <span class="number">9</span>  <span class="number">19</span>  <span class="number">7.000000</span> small</span><br><span class="line">  <span class="number">10</span> <span class="number">20</span>  <span class="number">7.000000</span> small</span><br><span class="line">  <span class="number">11</span>  <span class="number">1</span>  <span class="number">4.732672</span> small</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mymin = <span class="keyword">function</span>(y) ifelse(y &lt;= breaks[<span class="number">1</span>], <span class="number">0</span>, breaks[<span class="number">2</span>])               </span><br><span class="line">p &lt;- ggplot(d, aes(x, y)) + </span><br><span class="line">  geom_rect(aes(xmin = x - <span class="number">.4</span>, xmax = x + <span class="number">.4</span>, ymin = mymin(y), ymax = y)) +</span><br><span class="line">  facet_grid(.type ~ ., scales = <span class="string">"free"</span>) + </span><br><span class="line">  theme(strip.text=element_blank())</span><br><span class="line">p</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.r-graph-gallery.com/218-basic-barplots-with-ggplot2.html" target="_blank" rel="noopener">Basic barplot with ggplot2</a></li><li><a href="https://stackoverflow.com/questions/32505298/explain-ggplot2-warning-removed-k-rows-containing-missing-values" target="_blank" rel="noopener">Explain ggplot2 warning: “Removed k rows containing missing values”</a></li><li><a href="https://mp.weixin.qq.com/s/rHH1-6-qdsDe_OdXCZ8Ajw" target="_blank" rel="noopener">堆叠柱状图各成分连线画法：突出展示组间物种丰度变化</a></li><li><a href="https://www.jianshu.com/p/0e4fa8849479" target="_blank" rel="noopener">【r&lt;-方案|转载】ggplot坐标轴截断</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要是关于&lt;strong&gt;对R中的柱状图进行优化的过程&lt;/strong&gt;，包括&lt;strong&gt;堆叠或并列柱状图&lt;/strong&gt;、&lt;strong&gt;纵坐标表示百分比&lt;/strong&gt;、&lt;strong&gt;添加同一组分在不同分组之间的连线来显示变化&lt;/strong&gt;、&lt;strong&gt;对异常值的处理&lt;/strong&gt;等。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
</feed>
