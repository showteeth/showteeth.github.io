<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>showteeth&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://showteeth.tech/"/>
  <updated>2019-11-30T12:05:46.733Z</updated>
  <id>http://showteeth.tech/</id>
  
  <author>
    <name>showteeth</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>R系列之运算符</title>
    <link href="http://showteeth.tech/posts/7017.html"/>
    <id>http://showteeth.tech/posts/7017.html</id>
    <published>2019-11-30T11:26:08.000Z</published>
    <updated>2019-11-30T12:05:46.733Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要总结了R语言中常用的运算符，主要包括<strong>算术运算符</strong>、<strong>关系运算符</strong>和<strong>逻辑运算符</strong>。其中逻辑运算符中的<code>&amp;</code>、<code>|</code>、<code>!</code>是对<strong>向量中每个元素的逻辑运算</strong>，而<code>&amp;&amp;</code>、<code>||</code>则是<strong>对向量中的第一个元素进行的逻辑运算</strong>。</p></div><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>R语言中主要有如下几种运算符：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li></ul><p>下面将分类对齐进行学习。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符<strong>对向量的每个元素都起作用</strong>.</p><h3 id="运算符作用"><a href="#运算符作用" class="headerlink" title="运算符作用"></a>运算符作用</h3><table><tr><th width="30%">运算符</th><th width="70%">描述</th></tr><tr><td>+</td><td>两个向量相加</td></tr><tr><td>-</td><td>两个向量相减</td></tr><tr><td>*</td><td>两个向量相乘</td></tr><tr><td>/</td><td>两个向量相除</td></tr><tr><td>%%</td><td>两个向量求余</td></tr><tr><td>％/％</td><td>两个向量相除求商</td></tr><tr><td>^</td><td>将第二向量作为第一向量的指数</td></tr></table><hr><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">v &lt;- c( <span class="number">2</span>,<span class="number">5.5</span>,<span class="number">6</span>)</span><br><span class="line">t &lt;- c(<span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 向量相加：两个向量对应位置的元素相加</span></span><br><span class="line">print(v+t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">10.0</span>  <span class="number">8.5</span> <span class="number">10.0</span></span><br><span class="line"><span class="comment"># 向量相乘：两个向量对应位置的元素想乘</span></span><br><span class="line">print(v*t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">16.0</span> <span class="number">16.5</span> <span class="number">24.0</span></span><br><span class="line"><span class="comment"># 向量相除：默认显示六位小数</span></span><br><span class="line">print(v/t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0.250000</span> <span class="number">1.833333</span> <span class="number">1.500000</span></span><br><span class="line"><span class="comment"># 向量取余</span></span><br><span class="line">print(v%%t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">2.0</span> <span class="number">2.5</span> <span class="number">2.0</span></span><br><span class="line"><span class="comment"># 相除取商</span></span><br><span class="line">print(v%/%t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 指数</span></span><br><span class="line">print(v^t)</span><br><span class="line">  [<span class="number">1</span>]  <span class="number">256.000</span>  <span class="number">166.375</span> <span class="number">1296.000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向量长度不等</span></span><br><span class="line"><span class="comment"># 较短的那个会进行循环来达到和较长的一样长，同时还会有warning信息</span></span><br><span class="line">t &lt;- c(<span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line">print(v+t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">10.0</span>  <span class="number">8.5</span> <span class="number">14.0</span></span><br><span class="line">  Warning message:</span><br><span class="line">  In v + t : longer object length is not a multiple of shorter object length</span><br><span class="line">print(v*t)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">16.0</span> <span class="number">16.5</span> <span class="number">48.0</span></span><br><span class="line">  Warning message:</span><br><span class="line">  In v * t : longer object length is not a multiple of shorter object length</span><br></pre></td></tr></table></figure><div class="note info"><p>注意事项：</p><ul><li><strong>向量长度不等</strong>时进行运算会<strong>将较短的向量重复</strong>直到和较长的向量相同来进行运算。</li></ul></div><hr><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符<strong>对向量的每个元素都起作用</strong>，<strong>返回的结果是bool值</strong>。</p><table><tr><th width="30%">运算符</th><th width="70%">描述</th></tr><tr><td>&gt;</td><td>检查第一向量的每个元素是否大于第二向量的相应元素。</td></tr><tr><td>&lt;</td><td>检查第一个向量的每个元素是否小于第二个向量的相应元素。</td></tr><tr><td>==</td><td>检查第一个向量的每个元素是否等于第二个向量的相应元素。</td></tr><tr><td>&lt;=</td><td>检查第一向量的每个元素是否小于或等于第二向量的相应元素。</td></tr><tr><td>&gt; =</td><td>检查第一向量的每个元素是否大于或等于第二向量的相应元素。</td></tr><tr><td>!=</td><td>检查第一个向量的每个元素是否不等于第二个向量的相应元素。</td></tr></table><hr><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符是这篇文章的重点，因为其<strong>与其他编程语言的习惯非常不同</strong>。R中的逻辑运算符包含<strong>对向量中每个元素进行的逻辑运算</strong>以及<strong>对向量的第一个元素进行的逻辑运算</strong>。</p><h3 id="运算符作用-1"><a href="#运算符作用-1" class="headerlink" title="运算符作用"></a>运算符作用</h3><table><tr><th width="10%">运算符</th><th width="90%">描述</th></tr><tr><td>&amp;</td><td>它被称为元素逻辑AND运算符。 它将第一向量的每个元素与第二向量的相应元素组合，并且如果两个元素都为TRUE，则给出输出TRUE。</td></tr><tr><td>|</td><td>它被称为元素逻辑或运算符。 它将第一向量的每个元素与第二向量的相应元素组合，并且如果元素为真，则给出输出TRUE。</td></tr><tr><td>!</td><td>它被称为逻辑非运算符。 取得向量的每个元素，并给出相反的逻辑值。</td></tr><tr><td>&amp;&amp;</td><td>称为逻辑AND运算符。 取两个向量的第一个元素，并且只有两个都为TRUE时才给出TRUE。</td></tr><tr><td>||</td><td>称为逻辑OR运算符。 取两个向量的第一个元素，如果其中一个为TRUE，则给出TRUE</td></tr></table><hr><h3 id="使用实例-1"><a href="#使用实例-1" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v &lt;- c(<span class="number">3</span>,<span class="number">1</span>,<span class="literal">TRUE</span>,<span class="number">2</span>+<span class="number">3i</span>)</span><br><span class="line">t &lt;- c(<span class="number">4</span>,<span class="number">1</span>,<span class="literal">FALSE</span>,<span class="number">2</span>+<span class="number">3i</span>)</span><br><span class="line"><span class="comment"># 对每个元素进行逻辑运算</span></span><br><span class="line">print(v&amp;t)</span><br><span class="line">  [<span class="number">1</span>]  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></span><br><span class="line"><span class="comment"># 对向量的第一个元素进行逻辑运算</span></span><br><span class="line">print(v&amp;&amp;t)</span><br><span class="line">  [<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(!v)</span><br><span class="line">  [<span class="number">1</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.w3cschool.cn/r/r_operators.html" target="_blank" rel="noopener">R语言运算符</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要总结了R语言中常用的运算符，主要包括&lt;strong&gt;算术运算符&lt;/strong&gt;、&lt;strong&gt;关系运算符&lt;/strong&gt;和&lt;strong&gt;逻辑运算符&lt;/strong&gt;。其中逻辑运算符中的&lt;code&gt;&amp;amp;&lt;/code&gt;、&lt;code&gt;|&lt;/code&gt;、&lt;code&gt;!&lt;/code&gt;是对&lt;strong&gt;向量中每个元素的逻辑运算&lt;/strong&gt;，而&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;、&lt;code&gt;||&lt;/code&gt;则是&lt;strong&gt;对向量中的第一个元素进行的逻辑运算&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之字典使用技巧</title>
    <link href="http://showteeth.tech/posts/30759.html"/>
    <id>http://showteeth.tech/posts/30759.html</id>
    <published>2019-11-29T11:33:54.000Z</published>
    <updated>2019-12-01T14:18:17.793Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章总结了Python中<strong>字典的常用操作</strong>，包括<strong>创建字典</strong>、<strong>字典遍历</strong>、<strong>键值不存在时的赋值问题</strong>、<strong>获取字典最值</strong>。</p></div><a id="more"></a><h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><h3 id="普通创建"><a href="#普通创建" class="headerlink" title="普通创建"></a>普通创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;<span class="string">'a'</span>: <span class="string">'1'</span>, <span class="string">'b'</span>: <span class="string">'2'</span>, <span class="string">'c'</span>: <span class="string">'3'</span>&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="两个列表组成字典"><a href="#两个列表组成字典" class="headerlink" title="两个列表组成字典"></a>两个列表组成字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>] </span><br><span class="line">values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line"><span class="comment"># zip</span></span><br><span class="line">dictionary = dict(zip(keys, values)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (dictionary) </span><br><span class="line"><span class="comment"># 输出: </span></span><br><span class="line"><span class="comment">#      &#123;'a': 1, 'c': 3, 'b': 2&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="值为列表"><a href="#值为列表" class="headerlink" title="值为列表"></a>值为列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单方法：调用collections中的defaultdict</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">dic_test=defaultdict(list)</span><br><span class="line">dic_test[<span class="string">'a'</span>].append(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 具体的形式：defaultdict(&lt;type 'list'&gt;, &#123;'a': [1]&#125;)</span></span><br></pre></td></tr></table></figure><hr><h2 id="字典遍历"><a href="#字典遍历" class="headerlink" title="字典遍历"></a>字典遍历</h2><h3 id="遍历键和值"><a href="#遍历键和值" class="headerlink" title="遍历键和值"></a>遍历键和值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">  <span class="keyword">print</span> (k)</span><br><span class="line">  <span class="keyword">print</span> (v)</span><br></pre></td></tr></table></figure><hr><h3 id="遍历键-消失的has-key"><a href="#遍历键-消失的has-key" class="headerlink" title="遍历键-消失的has_key"></a>遍历键-消失的has_key</h3><p><a href="https://docs.python.org/3.1/whatsnew/3.0.html#builtins" target="_blank" rel="noopener">Python3</a><strong>删除</strong>了字典的<code>has_key</code>方法，<strong>取而代之的是in</strong>:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"1"</span>:<span class="number">1</span>, <span class="string">"2"</span>:<span class="number">0</span>, <span class="string">"3"</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># 使用has_key报错</span></span><br><span class="line">print(<span class="string">"yes"</span>) <span class="keyword">if</span> d.has_key(<span class="string">"1"</span>) <span class="keyword">else</span> print(<span class="string">"no"</span>)</span><br><span class="line">  AttributeError: <span class="string">'dict'</span> object has no attribute <span class="string">'has_key'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用in</span></span><br><span class="line">print(<span class="string">"yes"</span>) <span class="keyword">if</span> <span class="string">"1"</span> <span class="keyword">in</span> d.keys() <span class="keyword">else</span> print(<span class="string">"no"</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="键值不存在时的赋值问题"><a href="#键值不存在时的赋值问题" class="headerlink" title="键值不存在时的赋值问题"></a>键值不存在时的赋值问题</h2><p>使用字典的可能会遇到<strong>判断键值是不是已经存在于字典，如果存在就将其值加1，如果不存在就加入这个键值，然后计数为1</strong>。</p><h3 id="复杂方法"><a href="#复杂方法" class="headerlink" title="复杂方法"></a>复杂方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"a"</span>:<span class="number">0</span>, <span class="string">"b"</span>:<span class="number">0</span>, <span class="string">"c"</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># 字符串也是可迭代对象，返回单个字符</span></span><br><span class="line">e=<span class="string">"abababcd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂的用法</span></span><br><span class="line"><span class="comment"># 虽然也可以解决问题，但是在我看来肯定不会是最好的</span></span><br><span class="line"><span class="comment"># 略显笨拙</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> d.keys():</span><br><span class="line">        d[i]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d[i]=<span class="number">0</span></span><br><span class="line">        d[i]+=<span class="number">1</span></span><br><span class="line"><span class="comment"># &#123;'a': 3, 'b': 3, 'c': 2, 'd': 1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="dic-get方法"><a href="#dic-get方法" class="headerlink" title="dic.get方法"></a>dic.get方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict.get(key, default=<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># key -- 字典中要查找的键。</span></span><br><span class="line"><span class="comment"># default -- 如果指定键的值不存在时，返回该默认值值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> d.keys():</span><br><span class="line">        d[i]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 一定要设置默认值为0，不然None+1会报错</span></span><br><span class="line">        d[i]=d.get(i,<span class="number">0</span>)+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>很明显，<code>dic.get</code>方法使代码变得更加优雅了。</p><h3 id="defaultdict方法"><a href="#defaultdict方法" class="headerlink" title="defaultdict方法"></a>defaultdict方法</h3><h4 id="全新的dic"><a href="#全新的dic" class="headerlink" title="全新的dic"></a>全新的dic</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="comment"># lambda: 0表示不存在的key默认为0</span></span><br><span class="line">d = defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>)</span><br><span class="line">d</span><br><span class="line">  defaultdict(&lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;()&gt;, &#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    d[i]+=<span class="number">1</span></span><br><span class="line">d</span><br><span class="line">  defaultdict(&lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;()&gt;, &#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">1</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="部分初始化的dic"><a href="#部分初始化的dic" class="headerlink" title="部分初始化的dic"></a>部分初始化的dic</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">d = &#123;<span class="string">"a"</span>:<span class="number">0</span>, <span class="string">"b"</span>:<span class="number">0</span>, <span class="string">"c"</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># 将已经存在的字典d转化为defaultdict，并且如果键值不存在，默认值为0</span></span><br><span class="line">d = defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>,d)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    d[i]+=<span class="number">1</span></span><br><span class="line">d</span><br><span class="line">  defaultdict(&lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;()&gt;, &#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 顺便将defaultdict转化为常规的dict</span></span><br><span class="line">dict(d)</span><br><span class="line">  &#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://stackoverflow.com/questions/9285086/access-dict-key-and-return-none-if-doesnt-exist/9285161" target="_blank" rel="noopener">Access dict key and return None if doesn’t exist</a></li><li><a href="https://stackoverflow.com/questions/6130768/return-none-if-dictionary-key-is-not-available" target="_blank" rel="noopener">Return None if Dictionary key is not available</a></li></ul><hr><h2 id="获取字典最值"><a href="#获取字典最值" class="headerlink" title="获取字典最值"></a>获取字典最值</h2><h3 id="利用min-dict-key-dict-get"><a href="#利用min-dict-key-dict-get" class="headerlink" title="利用min(dict, key=dict.get)"></a>利用min(dict, key=dict.get)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">0</span>, <span class="number">3</span>:<span class="number">2</span>&#125;</span><br><span class="line">min(d, key=d.get)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment">#     2</span></span><br></pre></td></tr></table></figure><hr><h3 id="利用lambda函数"><a href="#利用lambda函数" class="headerlink" title="利用lambda函数"></a>利用lambda函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到索引和值</span></span><br><span class="line">min(d.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment">#     (2, 0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只得到值</span></span><br><span class="line">min(d, key=<span class="keyword">lambda</span> x: d[x])</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment">#      2</span></span><br></pre></td></tr></table></figure><hr><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章总结了Python中&lt;strong&gt;字典的常用操作&lt;/strong&gt;，包括&lt;strong&gt;创建字典&lt;/strong&gt;、&lt;strong&gt;字典遍历&lt;/strong&gt;、&lt;strong&gt;键值不存在时的赋值问题&lt;/strong&gt;、&lt;strong&gt;获取字典最值&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/categories/Python/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
    
      <category term="其他技巧整理" scheme="http://showteeth.tech/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Github系列之常用小技巧</title>
    <link href="http://showteeth.tech/posts/55438.html"/>
    <id>http://showteeth.tech/posts/55438.html</id>
    <published>2019-11-27T14:11:15.000Z</published>
    <updated>2019-11-29T13:15:49.743Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录在<strong>使用Github时搜集的一些小技巧</strong>，便于日后使用。</p></div><a id="more"></a><h2 id="查看jupyter文件"><a href="#查看jupyter文件" class="headerlink" title="查看jupyter文件"></a>查看jupyter文件</h2><p><code>Github</code>虽然也可以直接查看<code>jupyter</code>文件，但是<strong>加载速度很慢</strong>，这个时候可以使用<code>nbviewer</code>，具体的链接：</p><div><br><a class="btn" href="https://nbviewer.jupyter.org" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>A simple way to share Jupyter Notebooks</a><br></div><p><code>nbviewer</code>打开<code>jupyter</code>文件之后还可以点击左上角的路径选择其他的文件，如果是非<code>jupyter</code>文件会直接跳转到<code>Github</code>对应的链接上。</p><hr><h2 id="查看html文件"><a href="#查看html文件" class="headerlink" title="查看html文件"></a>查看html文件</h2><p>相比于前面<code>Github</code>查看<code>jupyter</code>文件只是加载慢的问题，<code>Github</code>对<code>html</code>文件的支持就更差了，直接显示源码，这个很不方便，这种情况下可以使用<code>htmlpreview</code>，具体链接：</p><div><br><a class="btn" href="http://htmlpreview.github.io/" target="_blank" rel="noopener"><i class="fa fa-telegram fa-lg fa-fw"></i>GitHub & BitBucket HTML Preview</a><br></div><hr><h2 id="直接显示所有文件"><a href="#直接显示所有文件" class="headerlink" title="直接显示所有文件"></a>直接显示所有文件</h2><p>打开一个<code>Github</code>的<code>repo</code>会按文件夹显示文件信息，如果<strong>想直接显示所有的文件，不用进入目录查找</strong>，可以使用:<strong>仓库 URL + find/分支名称</strong>，如<a href="https://github.com/showteeth/blog_reprint/find/master" target="_blank" rel="noopener">https://github.com/showteeth/blog_reprint/find/master</a></p><p>其实这个功能也可以<strong>通过快捷键来设置</strong>，在<code>Github</code>中打开一个<code>repo</code>之后，<strong>按下<code>t</code>键</strong>，就会达到和上述相同的效果。</p><hr><h2 id="查看原始文件"><a href="#查看原始文件" class="headerlink" title="查看原始文件"></a>查看原始文件</h2><p>查看原始文件的作用：</p><ul><li>看原始信息</li><li>下载文件，右键-&gt;另存为</li></ul><p>查看方法：</p><ul><li>将<code>https://github.com</code>更改<code>https://raw.githubusercontent.com</code>，并且去掉<code>blob</code></li><li>将<code>blob</code>改为<code>raw</code></li><li>在链接最后增加增加<code>?raw=true</code></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录在&lt;strong&gt;使用Github时搜集的一些小技巧&lt;/strong&gt;，便于日后使用。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="其他内容学习" scheme="http://showteeth.tech/categories/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Github" scheme="http://showteeth.tech/categories/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/Github/"/>
    
    
      <category term="小技巧" scheme="http://showteeth.tech/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>R系列之使用dplyr处理数据</title>
    <link href="http://showteeth.tech/posts/54831.html"/>
    <id>http://showteeth.tech/posts/54831.html</id>
    <published>2019-11-23T04:03:25.000Z</published>
    <updated>2019-11-23T16:08:10.667Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了使用<code>dplyr</code>处理数据，主要包括使用<code>select</code><strong>对列进行筛选</strong>，使用<code>filter</code>、<code>slice</code>、<code>sample_n</code>、<code>sample_frac</code><strong>对行进行筛选</strong>，使用<code>arrange</code><strong>对行进行排序</strong>，使用管道操作符<code>%&gt;%</code>，使用<code>mutate</code><strong>添加新列</strong>，使用<code>group_by()</code><strong>进行分组</strong>，使用<code>summarise</code><strong>进行结果汇总</strong>，使用<code>tally</code><strong>统计频数</strong>以及<strong>合并两个表</strong>的操作。</p></div><a id="more"></a><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><code>dplyr</code>可以使<strong>表格数据(<code>tabular data</code>)</strong>的处理更加方便和简单，并且其<strong>可以处理存储在外部数据库中的数据</strong>，这样做的好处是所有的数据处理步骤都是发生在外部的数据库中，<strong>只将结果返回</strong>(<strong>这解决了R中的一个常见问题：所有的操作都是在内存中进行的，数据先读取到内存中，这样的话内存的大小就会限制处理数据的多少</strong>)。</p><p>这里主要学习如下内容：</p><ul><li>使用<code>dplyr</code>中的<code>select</code>函数来<strong>选择列</strong></li><li>使用<code>dplyr</code>中的<code>filter</code>函数来<strong>筛选行</strong></li><li>管道操作符<code>%&gt;%</code></li><li>使用<code>dplyr</code>中的<code>mutate</code>函数来<strong>增加列</strong></li><li>理解<code>split-apply-combine</code>的概念</li><li>使用<code>dplyr</code>中的<code>summarize</code>、<code>group_by</code>和<code>tally</code>来将data frame拆分为group，然后对每个group应用summary statistics，最后将结果combine.</li></ul><hr><h2 id="dplyr-cheatsheet"><a href="#dplyr-cheatsheet" class="headerlink" title="dplyr-cheatsheet"></a>dplyr-cheatsheet</h2><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/dplyr-cheatsheet_1.png" alt="dplyr-cheatsheet_1.png"></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/dplyr-cheatsheet_2.png" alt="dplyr-cheatsheet_2.png"></p><p><a href="https://github.com/rstudio/cheatsheets/blob/master/data-transformation.pdf" target="_blank" rel="noopener">来源链接</a></p><hr><h2 id="示例数据"><a href="#示例数据" class="headerlink" title="示例数据"></a>示例数据</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">trafficstops &lt;- read.csv(<span class="string">"~/R/others/ms_statewide_2019_08_13.csv"</span>)</span><br><span class="line">head(trafficstops)</span><br><span class="line">    raw_row_number       date      county_name subject_age subject_race subject_sex department_id         department_name</span><br><span class="line">  <span class="number">1</span>              <span class="number">1</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">13</span>    Rankin County          <span class="number">43</span>        black        male          <span class="number">6103</span>     Flowood Police Dept</span><br><span class="line">  <span class="number">2</span>              <span class="number">2</span> <span class="number">2015</span>-<span class="number">02</span>-<span class="number">10</span>   Forrest County          <span class="number">42</span>        white      female          <span class="number">1801</span> Hattiesburg Police Dept</span><br><span class="line">  <span class="number">3</span>              <span class="number">3</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">14</span>    Rankin County          <span class="number">47</span>        black      female          <span class="number">6103</span>     Flowood Police Dept</span><br><span class="line">  <span class="number">4</span>              <span class="number">4</span> <span class="number">2015</span>-<span class="number">04</span>-<span class="number">25</span> Oktibbeha County          <span class="number">19</span>        white      female          <span class="number">5302</span>  Starkville Police Dept</span><br><span class="line">  <span class="number">5</span>              <span class="number">5</span> <span class="number">2013</span>-<span class="number">07</span>-<span class="number">16</span>    Warren County          <span class="number">29</span>        white        male          <span class="number">7501</span>    Vickburg Police Dept</span><br><span class="line">  <span class="number">6</span>              <span class="number">6</span> <span class="number">2015</span>-<span class="number">04</span>-<span class="number">30</span>   Madison County          <span class="number">48</span>        black      female          <span class="number">4504</span>   Ridgeland Police Dept</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><hr><h2 id="选择部分行或列"><a href="#选择部分行或列" class="headerlink" title="选择部分行或列"></a>选择部分行或列</h2><h3 id="筛选列-select"><a href="#筛选列-select" class="headerlink" title="筛选列-select"></a>筛选列-select</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用select(trafficstops,date,county_name)可能会报错:</span></span><br><span class="line"><span class="comment"># unable to find an inherited method for function ‘select’ for signature ‘"data.frame"’</span></span><br><span class="line"><span class="comment"># 从trafficstops中选取date、county_name列</span></span><br><span class="line">dplyr::select(trafficstops,date,county_name)</span><br><span class="line">              date            county_name</span><br><span class="line">  <span class="number">1</span>      <span class="number">2013</span>-<span class="number">11</span>-<span class="number">13</span>          Rankin County</span><br><span class="line">  <span class="number">2</span>      <span class="number">2015</span>-<span class="number">02</span>-<span class="number">10</span>         Forrest County</span><br><span class="line">  <span class="number">3</span>      <span class="number">2013</span>-<span class="number">11</span>-<span class="number">14</span>          Rankin County</span><br><span class="line">  <span class="number">4</span>      <span class="number">2015</span>-<span class="number">04</span>-<span class="number">25</span>       Oktibbeha County</span><br><span class="line">  <span class="number">5</span>      <span class="number">2013</span>-<span class="number">07</span>-<span class="number">16</span>          Warren County</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p>更高级的用法是<strong>按照列名共同的规律</strong>进行筛选：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛选所有以subject开头的列</span></span><br><span class="line">dplyr::select(trafficstops,starts_with(<span class="string">"subject"</span>))</span><br><span class="line">        subject_age           subject_race subject_sex</span><br><span class="line">  <span class="number">1</span>               <span class="number">43</span>                  black        male</span><br><span class="line">  <span class="number">2</span>               <span class="number">42</span>                  white      female</span><br><span class="line">  <span class="number">3</span>               <span class="number">47</span>                  black      female</span><br><span class="line">  <span class="number">4</span>               <span class="number">19</span>                  white      female</span><br><span class="line">  <span class="number">5</span>               <span class="number">29</span>                  white        male</span><br><span class="line">  <span class="number">6</span>               <span class="number">48</span>                  black      female</span><br><span class="line">  ........</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有starts_with，那肯定也有ends_with()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选所有列名包含speed的列</span></span><br><span class="line">dplyr::select(trafficstops,contains(<span class="string">"speed"</span>))</span><br><span class="line">        speed posted_speed</span><br><span class="line">  <span class="number">1</span>         <span class="literal">NA</span>           <span class="literal">NA</span></span><br><span class="line">  <span class="number">2</span>         <span class="literal">NA</span>           <span class="literal">NA</span></span><br><span class="line">  <span class="number">3</span>         <span class="literal">NA</span>           <span class="literal">NA</span></span><br><span class="line">  <span class="number">4</span>         <span class="literal">NA</span>           <span class="literal">NA</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="筛选行"><a href="#筛选行" class="headerlink" title="筛选行"></a>筛选行</h3><h4 id="通过filter来筛选"><a href="#通过filter来筛选" class="headerlink" title="通过filter来筛选"></a>通过filter来筛选</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛选county_name=="Rankin County"的行</span></span><br><span class="line">dplyr::filter(trafficstops,county_name==<span class="string">"Rankin County"</span>)</span><br><span class="line">        raw_row_number       date   county_name subject_age           subject_race subject_sex department_id</span><br><span class="line">  <span class="number">1</span>                  <span class="number">1</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">13</span> Rankin County          <span class="number">43</span>                  black        male          <span class="number">6103</span></span><br><span class="line">  <span class="number">2</span>                  <span class="number">3</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">14</span> Rankin County          <span class="number">47</span>                  black      female          <span class="number">6103</span></span><br><span class="line">  <span class="number">3</span>                  <span class="number">7</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">18</span> Rankin County          <span class="number">28</span>                  white      female          <span class="number">6103</span></span><br><span class="line">  <span class="number">4</span>                 <span class="number">16</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">19</span> Rankin County          <span class="number">22</span>                  white        male          <span class="number">6103</span></span><br><span class="line">  <span class="number">5</span>                 <span class="number">67</span> <span class="number">2013</span>-<span class="number">08</span>-<span class="number">10</span> Rankin County          <span class="number">19</span>                  white        male          <span class="number">6103</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><hr><h4 id="通过slice来切片"><a href="#通过slice来切片" class="headerlink" title="通过slice来切片"></a>通过slice来切片</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dplyr::slice(trafficstops, <span class="number">1</span>:<span class="number">3</span>)</span><br><span class="line">    raw_row_number       date    county_name subject_age subject_race subject_sex department_id         department_name</span><br><span class="line">  <span class="number">1</span>              <span class="number">1</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">13</span>  Rankin County          <span class="number">43</span>        black        male          <span class="number">6103</span>     Flowood Police Dept</span><br><span class="line">  <span class="number">2</span>              <span class="number">2</span> <span class="number">2015</span>-<span class="number">02</span>-<span class="number">10</span> Forrest County          <span class="number">42</span>        white      female          <span class="number">1801</span> Hattiesburg Police Dept</span><br><span class="line">  <span class="number">3</span>              <span class="number">3</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">14</span>  Rankin County          <span class="number">47</span>        black      female          <span class="number">6103</span>     Flowood Police Dept</span><br></pre></td></tr></table></figure><hr><h4 id="随机筛选-sample-n、sample-frac"><a href="#随机筛选-sample-n、sample-frac" class="headerlink" title="随机筛选-sample_n、sample_frac"></a>随机筛选-sample_n、sample_frac</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机筛选5行</span></span><br><span class="line">sample_n(trafficstops, <span class="number">5</span>)</span><br><span class="line">    raw_row_number       date     county_name subject_age subject_race subject_sex department_id</span><br><span class="line">  <span class="number">1</span>         <span class="number">507813</span> <span class="number">2014</span>-<span class="number">11</span>-<span class="number">21</span>      Lee County          <span class="number">40</span>        white      female          <span class="number">4107</span></span><br><span class="line">  <span class="number">2</span>         <span class="number">285751</span> <span class="number">2014</span>-<span class="number">04</span>-<span class="number">24</span>  Madison County          <span class="number">45</span>        white      female          <span class="number">4504</span></span><br><span class="line">  <span class="number">3</span>         <span class="number">572405</span> <span class="number">2015</span>-<span class="number">08</span>-<span class="number">11</span>    Smith County          <span class="number">35</span>        white      female          <span class="number">6504</span></span><br><span class="line">  <span class="number">4</span>         <span class="number">147691</span> <span class="number">2013</span>-<span class="number">02</span>-<span class="number">12</span> Harrison County          <span class="number">35</span>        black        male          <span class="number">9024</span></span><br><span class="line">  <span class="number">5</span>         <span class="number">335079</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">25</span>  Winston County          <span class="number">23</span>        black      female          <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机筛选1%的行</span></span><br><span class="line">dplyr::sample_frac(trafficstops, <span class="number">.01</span>)</span><br><span class="line">      raw_row_number       date            county_name subject_age           subject_race subject_sex department_id</span><br><span class="line">  <span class="number">1</span>            <span class="number">190223</span> <span class="number">2013</span>-<span class="number">11</span>-<span class="number">26</span>           Adams County          <span class="number">32</span>                  black        male           <span class="number">102</span></span><br><span class="line">  <span class="number">2</span>            <span class="number">432004</span> <span class="number">2015</span>-<span class="number">01</span>-<span class="number">06</span>           Lamar County          <span class="number">20</span>                  white      female          <span class="number">3702</span></span><br><span class="line">  <span class="number">3</span>            <span class="number">110352</span> <span class="number">2013</span>-<span class="number">08</span>-<span class="number">27</span>         Coahoma County          <span class="number">64</span>                  black        male          <span class="number">9014</span></span><br><span class="line">  <span class="number">4</span>            <span class="number">628220</span> <span class="number">2015</span>-<span class="number">09</span>-<span class="number">02</span>             Lee County          <span class="number">59</span>                  white        male          <span class="number">9041</span></span><br><span class="line">  <span class="number">5</span>            <span class="number">287465</span> <span class="number">2014</span>-<span class="number">06</span>-<span class="number">06</span>         Grenada County          <span class="number">32</span>                  white      female          <span class="number">9022</span></span><br><span class="line">  <span class="number">6</span>            <span class="number">614870</span> <span class="number">2015</span>-<span class="number">07</span>-<span class="number">05</span>          Kemper County          <span class="number">33</span>                  white      female          <span class="number">9035</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><hr><h2 id="对行进行排序-arrange"><a href="#对行进行排序-arrange" class="headerlink" title="对行进行排序-arrange"></a>对行进行排序-arrange</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对county_name进行排序，在county_name按照subject_age排序，默认都是升序</span></span><br><span class="line">dplyr::arrange(trafficstops, county_name, subject_age)</span><br><span class="line">        raw_row_number       date            county_name subject_age           subject_race subject_sex department_id</span><br><span class="line">  <span class="number">1</span>               <span class="number">39379</span> <span class="number">2013</span>-<span class="number">02</span>-<span class="number">22</span>           Adams County          <span class="number">16</span>                  black        male           <span class="number">102</span></span><br><span class="line">  <span class="number">2</span>               <span class="number">43831</span> <span class="number">2013</span>-<span class="number">02</span>-<span class="number">08</span>           Adams County          <span class="number">16</span>                  white      female           <span class="number">102</span></span><br><span class="line">  <span class="number">3</span>               <span class="number">87848</span> <span class="number">2013</span>-<span class="number">05</span>-<span class="number">11</span>           Adams County          <span class="number">16</span>                  black      female           <span class="number">102</span></span><br><span class="line">  <span class="number">4</span>              <span class="number">135195</span> <span class="number">2013</span>-<span class="number">09</span>-<span class="number">07</span>           Adams County          <span class="number">16</span>                  white        male           <span class="number">102</span></span><br><span class="line">  <span class="number">5</span>              <span class="number">169096</span> <span class="number">2013</span>-<span class="number">10</span>-<span class="number">10</span>           Adams County          <span class="number">16</span>                  white        male           <span class="number">102</span></span><br><span class="line">  <span class="number">6</span>              <span class="number">190584</span> <span class="number">2013</span>-<span class="number">12</span>-<span class="number">07</span>           Adams County          <span class="number">16</span>                  white      female          <span class="number">9001</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒序排列：desc</span></span><br><span class="line">dplyr::arrange(trafficstops, desc(county_name), subject_age)</span><br><span class="line">        raw_row_number       date            county_name subject_age           subject_race subject_sex department_id</span><br><span class="line">  <span class="number">1</span>               <span class="number">23620</span> <span class="number">2013</span>-<span class="number">03</span>-<span class="number">12</span>           Yazoo County          <span class="number">16</span>                  white        male          <span class="number">8204</span></span><br><span class="line">  <span class="number">2</span>              <span class="number">118669</span> <span class="number">2013</span>-<span class="number">08</span>-<span class="number">24</span>           Yazoo County          <span class="number">16</span>                  white        male          <span class="number">8204</span></span><br><span class="line">  <span class="number">3</span>              <span class="number">206927</span> <span class="number">2013</span>-<span class="number">09</span>-<span class="number">04</span>           Yazoo County          <span class="number">16</span>                  white      female          <span class="number">9082</span></span><br><span class="line">  <span class="number">4</span>              <span class="number">206982</span> <span class="number">2013</span>-<span class="number">10</span>-<span class="number">18</span>           Yazoo County          <span class="number">16</span>                  white        male            <span class="number">82</span></span><br><span class="line">  <span class="number">5</span>              <span class="number">406351</span> <span class="number">2013</span>-<span class="number">03</span>-<span class="number">14</span>           Yazoo County          <span class="number">16</span>                  white        male            <span class="number">82</span></span><br><span class="line">  <span class="number">6</span>              <span class="number">420793</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">23</span>           Yazoo County          <span class="number">16</span>                  black      female          <span class="number">8204</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><hr><h2 id="管道操作-gt"><a href="#管道操作-gt" class="headerlink" title="管道操作-%&gt;%"></a>管道操作-%&gt;%</h2><p>管道在Linux命令使用比较多，就是将上一步的输出作为下一步的输入，使用的管道符为<code>|</code>，在R中也有类似的操作符：<code>%&gt;%</code>，起到的作用也是相同的：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先对行进行过滤，然后在过滤的结果中选择subject_age、subject_sex列，最后按照subject_age排序</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::filter(county_name == <span class="string">"Tunica County"</span>) %&gt;% </span><br><span class="line">  dplyr::select(subject_age, subject_sex) %&gt;% </span><br><span class="line">  dplyr::arrange(subject_age)</span><br><span class="line">      subject_age subject_sex</span><br><span class="line">  <span class="number">1</span>            <span class="number">17</span>      female</span><br><span class="line">  <span class="number">2</span>            <span class="number">17</span>      female</span><br><span class="line">  <span class="number">3</span>            <span class="number">17</span>        male</span><br><span class="line">  <span class="number">4</span>            <span class="number">18</span>        male</span><br><span class="line">  <span class="number">5</span>            <span class="number">18</span>      female</span><br><span class="line">  <span class="number">6</span>            <span class="number">18</span>      female</span><br><span class="line">  <span class="number">7</span>            <span class="number">18</span>        male</span><br><span class="line">  <span class="number">8</span>            <span class="number">18</span>        male</span><br><span class="line">  <span class="number">9</span>            <span class="number">18</span>        male</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不使用管道，也可以使用命令的嵌套来实现</span></span><br><span class="line">dplyr::arrange(</span><br><span class="line">  dplyr::select(</span><br><span class="line">    dplyr::filter(trafficstops,county_name == <span class="string">"Tunica County"</span>),</span><br><span class="line">    subject_age, subject_sex),</span><br><span class="line">    subject_age)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="添加新列-mutate"><a href="#添加新列-mutate" class="headerlink" title="添加新列-mutate"></a>添加新列-mutate</h2><p>基于已经存在的列的信息来添加新列，需要注意的是<strong>不是直接修改原始的表格</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将date的前四个字符保存到新列subdate中</span></span><br><span class="line">trafficstops %&gt;% dplyr::mutate(subdate=substring(date,<span class="number">1</span>,<span class="number">4</span>)) %&gt;% dplyr::select(date,subdate)</span><br><span class="line">              date subdate</span><br><span class="line">  <span class="number">1</span>      <span class="number">2013</span>-<span class="number">11</span>-<span class="number">13</span>    <span class="number">2013</span></span><br><span class="line">  <span class="number">2</span>      <span class="number">2015</span>-<span class="number">02</span>-<span class="number">10</span>    <span class="number">2015</span></span><br><span class="line">  <span class="number">3</span>      <span class="number">2013</span>-<span class="number">11</span>-<span class="number">14</span>    <span class="number">2013</span></span><br><span class="line">  <span class="number">4</span>      <span class="number">2015</span>-<span class="number">04</span>-<span class="number">25</span>    <span class="number">2015</span></span><br><span class="line">  <span class="number">5</span>      <span class="number">2013</span>-<span class="number">07</span>-<span class="number">16</span>    <span class="number">2013</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="split-apply-combine"><a href="#split-apply-combine" class="headerlink" title="split-apply-combine"></a>split-apply-combine</h2><p><strong>split-apply-combine paradigm</strong>：</p><ul><li>将数据分组-<code>group_by()</code></li><li>以每个组为单位进行分析</li><li>将所有的结果汇总-<code>summarise()</code></li></ul><p>其示例图如下：<br><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/split-apply-combine-paradigm.png" alt="split-apply-combine-paradigm.png"></p><hr><h3 id="数据分组-group-by"><a href="#数据分组-group-by" class="headerlink" title="数据分组-group_by()"></a>数据分组-group_by()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算每个subject_race的平均年龄</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::group_by(subject_race) %&gt;% </span><br><span class="line">    dplyr::summarise(mean_age=mean(subject_age,na.rm=<span class="literal">TRUE</span>))</span><br><span class="line">  <span class="comment"># A tibble: 5 x 2</span></span><br><span class="line">    subject_race           mean_age</span><br><span class="line">    &lt;fct&gt;                     &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> asian/pacific islander     <span class="number">36.0</span></span><br><span class="line">  <span class="number">2</span> black                      <span class="number">32.7</span></span><br><span class="line">  <span class="number">3</span> other                      <span class="number">32.4</span></span><br><span class="line">  <span class="number">4</span> white                      <span class="number">34.9</span></span><br><span class="line">  <span class="number">5</span> <span class="literal">NA</span>                         <span class="number">32.0</span></span><br><span class="line">  Warning message:</span><br><span class="line">  Factor `subject_race` contains implicit <span class="literal">NA</span>, consider using `forcats::fct_explicit_na`</span><br></pre></td></tr></table></figure><p>上面因为<code>subject_race</code>列中包含了<code>NA</code>，所以会有warning，如果想去掉这个warning，可以进行filter：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先去掉subject_race中包含的NA</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::filter(!is.na(subject_race)) %&gt;% </span><br><span class="line">    dplyr::group_by(subject_race) %&gt;% </span><br><span class="line">      dplyr::summarise(mean_age=mean(subject_age,na.rm=<span class="literal">TRUE</span>))</span><br><span class="line"><span class="comment"># A tibble: 4 x 2</span></span><br><span class="line">  subject_race           mean_age</span><br><span class="line">  &lt;fct&gt;                     &lt;dbl&gt;</span><br><span class="line"><span class="number">1</span> asian/pacific islander     <span class="number">36.0</span></span><br><span class="line"><span class="number">2</span> black                      <span class="number">32.7</span></span><br><span class="line"><span class="number">3</span> other                      <span class="number">32.4</span></span><br><span class="line"><span class="number">4</span> white                      <span class="number">34.9</span></span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>这里处理后的<strong>数据格式已经发生了变化</strong>，和之前的<code>dataframe</code>有了一些细微的差别，这种新的数据格式被称为<code>tbl_df</code>，也被称为<code>tibble</code>，<code>tibble</code>和<code>dataframe</code>是非常相似的，差别主要有以下两点：</p><ul><li><strong>字符列不会被转化为factor</strong></li><li><strong>在列名下显示数据类型</strong>，如<code>dbl：double</code></li><li><strong>不会完整地显示所有的数据</strong>，只会输出前几行以及适合屏幕宽度的列数，<strong>如果想输出所有的列和行</strong>，可以使用<code>print(my_tibble, n=desire_num, width=Inf)</code></li></ul></div><p>前面只对一个<code>variable</code>进行了分组，然后执行了一个操作，这里<strong>可以对两个或者更多个<code>variable</code>进行分组</strong>，并且<strong>执行多个操作</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::filter(!is.na(subject_race)) %&gt;% </span><br><span class="line">    dplyr::group_by(county_name,subject_race) %&gt;% </span><br><span class="line">      dplyr::summarise(mean_age=mean(subject_age,na.rm=<span class="literal">TRUE</span>),min_age=min(subject_age,na.rm=<span class="literal">TRUE</span>))</span><br><span class="line">  <span class="comment"># A tibble: 308 x 4</span></span><br><span class="line">  <span class="comment"># Groups:   county_name [83]</span></span><br><span class="line">    county_name   subject_race           mean_age min_age</span><br><span class="line">    &lt;fct&gt;         &lt;fct&gt;                     &lt;dbl&gt;   &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> Adams County  asian/pacific islander     <span class="number">55</span>        <span class="number">55</span></span><br><span class="line">  <span class="number">2</span> Adams County  black                      <span class="number">34.3</span>      <span class="number">16</span></span><br><span class="line">  <span class="number">3</span> Adams County  other                      <span class="number">38.4</span>      <span class="number">19</span></span><br><span class="line">  <span class="number">4</span> Adams County  white                      <span class="number">37.2</span>      <span class="number">16</span></span><br><span class="line">  <span class="number">5</span> Alcorn County asian/pacific islander     <span class="number">64</span>        <span class="number">57</span></span><br><span class="line">  <span class="number">6</span> Alcorn County black                      <span class="number">32.8</span>      <span class="number">16</span></span><br><span class="line">  <span class="number">7</span> Alcorn County other                      <span class="number">29.6</span>      <span class="number">16</span></span><br><span class="line">  <span class="number">8</span> Alcorn County white                      <span class="number">32.7</span>      <span class="number">15</span></span><br><span class="line">  <span class="number">9</span> Amite County  black                      <span class="number">36.4</span>      <span class="number">16</span></span><br><span class="line">  <span class="number">10</span> Amite County  other                      <span class="number">34.6</span>      <span class="number">19</span></span><br><span class="line">  <span class="comment"># … with 298 more rows</span></span><br><span class="line">  Warning message:</span><br><span class="line">  Factor `county_name` contains implicit <span class="literal">NA</span>, consider using `forcats::fct_explicit_na`</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="结果汇总"><a href="#结果汇总" class="headerlink" title="结果汇总"></a>结果汇总</h3><h4 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h4><p>前面的示例数据大部分都是分类变量，不利于展示<code>summarise</code>的其他用法，这里重新生成一组数据用于分析：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set.seed(<span class="number">1119</span>)</span><br><span class="line">data &lt;- data.frame(ID=rep(LETTERS,each=<span class="number">3</span>),</span><br><span class="line">                   sample1=sample(seq(<span class="number">10</span>,<span class="number">1000</span>),<span class="number">78</span>),</span><br><span class="line">                   sample2=sample(seq(<span class="number">10</span>,<span class="number">100</span>),<span class="number">78</span>),</span><br><span class="line">                   sample3=sample(seq(<span class="number">20</span>,<span class="number">500</span>),<span class="number">78</span>))</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>使用<code>n()</code>来<strong>统计频次</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># freq是得到的新列的名称</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise(freq=n())</span><br><span class="line">  <span class="comment"># A tibble: 26 x 2</span></span><br><span class="line">    ID    freq</span><br><span class="line">    &lt;fct&gt; &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> A         <span class="number">3</span></span><br><span class="line">  <span class="number">2</span> B         <span class="number">3</span></span><br><span class="line">  <span class="number">3</span> C         <span class="number">3</span></span><br><span class="line">  <span class="number">4</span> D         <span class="number">3</span></span><br><span class="line">  <span class="number">5</span> E         <span class="number">3</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>         <span class="number">3</span></span><br><span class="line">  <span class="number">7</span> G         <span class="number">3</span></span><br><span class="line">  <span class="number">8</span> H         <span class="number">3</span></span><br><span class="line">  <span class="number">9</span> I         <span class="number">3</span></span><br><span class="line">  <span class="number">10</span> J         <span class="number">3</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br></pre></td></tr></table></figure><p></p><p>同时<strong>执行多个统计函数</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise(max = max(sample1),min = min(sample1),mean = mean(sample1))</span><br><span class="line">  <span class="comment"># A tibble: 26 x 4</span></span><br><span class="line">    ID      max   min  mean</span><br><span class="line">    &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> A       <span class="number">627</span>   <span class="number">541</span>  <span class="number">592.</span></span><br><span class="line">  <span class="number">2</span> B       <span class="number">729</span>    <span class="number">11</span>  <span class="number">259.</span></span><br><span class="line">  <span class="number">3</span> C       <span class="number">713</span>    <span class="number">80</span>  <span class="number">381.</span></span><br><span class="line">  <span class="number">4</span> D       <span class="number">819</span>   <span class="number">506</span>  <span class="number">675.</span></span><br><span class="line">  <span class="number">5</span> E       <span class="number">370</span>    <span class="number">65</span>  <span class="number">231.</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>       <span class="number">318</span>   <span class="number">145</span>  <span class="number">223.</span></span><br><span class="line">  <span class="number">7</span> G       <span class="number">953</span>   <span class="number">302</span>  <span class="number">627</span> </span><br><span class="line">  <span class="number">8</span> H       <span class="number">688</span>   <span class="number">129</span>  <span class="number">332</span> </span><br><span class="line">  <span class="number">9</span> I       <span class="number">288</span>   <span class="number">165</span>  <span class="number">212.</span></span><br><span class="line">  <span class="number">10</span> J       <span class="number">311</span>   <span class="number">119</span>  <span class="number">190.</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br></pre></td></tr></table></figure><p></p><hr><h4 id="选择需要summarise的列-summarise-at"><a href="#选择需要summarise的列-summarise-at" class="headerlink" title="选择需要summarise的列-summarise_at"></a>选择需要summarise的列-summarise_at</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对sample1列进行summarise</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_at(<span class="string">"sample1"</span>,max)</span><br><span class="line">  <span class="comment"># A tibble: 26 x 2</span></span><br><span class="line">    ID    sample1</span><br><span class="line">    &lt;fct&gt;   &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> A         <span class="number">627</span></span><br><span class="line">  <span class="number">2</span> B         <span class="number">729</span></span><br><span class="line">  <span class="number">3</span> C         <span class="number">713</span></span><br><span class="line">  <span class="number">4</span> D         <span class="number">819</span></span><br><span class="line">  <span class="number">5</span> E         <span class="number">370</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>         <span class="number">318</span></span><br><span class="line">  <span class="number">7</span> G         <span class="number">953</span></span><br><span class="line">  <span class="number">8</span> H         <span class="number">688</span></span><br><span class="line">  <span class="number">9</span> I         <span class="number">288</span></span><br><span class="line">  <span class="number">10</span> J         <span class="number">311</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于如下用法</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise(sample1=max(sample1))</span><br></pre></td></tr></table></figure><p>同时作用于多个列：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对sample1、sample2进行summarise</span></span><br><span class="line"><span class="comment"># 执行的统计是相同的：max</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_at(c(<span class="string">"sample1"</span>,<span class="string">"sample2"</span>),max)</span><br><span class="line">  <span class="comment"># A tibble: 26 x 3</span></span><br><span class="line">    ID    sample1 sample2</span><br><span class="line">    &lt;fct&gt;   &lt;int&gt;   &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> A         <span class="number">627</span>      <span class="number">85</span></span><br><span class="line">  <span class="number">2</span> B         <span class="number">729</span>      <span class="number">59</span></span><br><span class="line">  <span class="number">3</span> C         <span class="number">713</span>      <span class="number">92</span></span><br><span class="line">  <span class="number">4</span> D         <span class="number">819</span>      <span class="number">75</span></span><br><span class="line">  <span class="number">5</span> E         <span class="number">370</span>      <span class="number">77</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>         <span class="number">318</span>      <span class="number">72</span></span><br><span class="line">  <span class="number">7</span> G         <span class="number">953</span>      <span class="number">96</span></span><br><span class="line">  <span class="number">8</span> H         <span class="number">688</span>      <span class="number">89</span></span><br><span class="line">  <span class="number">9</span> I         <span class="number">288</span>      <span class="number">49</span></span><br><span class="line">  <span class="number">10</span> J         <span class="number">311</span>      <span class="number">90</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise(sample1=max(sample1),</span><br><span class="line">                   sample2=max(sample2))</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="对所有的列进行summarise-summarise-all"><a href="#对所有的列进行summarise-summarise-all" class="headerlink" title="对所有的列进行summarise-summarise_all"></a>对所有的列进行summarise-summarise_all</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时对三列进行summarise</span></span><br><span class="line"><span class="comment"># 执行的统计是相同的：max</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_all(max)</span><br><span class="line">  <span class="comment"># A tibble: 26 x 4</span></span><br><span class="line">    ID    sample1 sample2 sample3</span><br><span class="line">    &lt;fct&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> A         <span class="number">627</span>      <span class="number">85</span>     <span class="number">400</span></span><br><span class="line">  <span class="number">2</span> B         <span class="number">729</span>      <span class="number">59</span>     <span class="number">265</span></span><br><span class="line">  <span class="number">3</span> C         <span class="number">713</span>      <span class="number">92</span>     <span class="number">461</span></span><br><span class="line">  <span class="number">4</span> D         <span class="number">819</span>      <span class="number">75</span>     <span class="number">472</span></span><br><span class="line">  <span class="number">5</span> E         <span class="number">370</span>      <span class="number">77</span>     <span class="number">425</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>         <span class="number">318</span>      <span class="number">72</span>     <span class="number">450</span></span><br><span class="line">  <span class="number">7</span> G         <span class="number">953</span>      <span class="number">96</span>     <span class="number">329</span></span><br><span class="line">  <span class="number">8</span> H         <span class="number">688</span>      <span class="number">89</span>     <span class="number">451</span></span><br><span class="line">  <span class="number">9</span> I         <span class="number">288</span>      <span class="number">49</span>     <span class="number">249</span></span><br><span class="line">  <span class="number">10</span> J         <span class="number">311</span>      <span class="number">90</span>     <span class="number">495</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise(sample1=max(sample1),</span><br><span class="line">                   sample2=max(sample2),</span><br><span class="line">                   sample3=max(sample3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也等同于</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_at(c(<span class="string">"sample1"</span>,<span class="string">"sample2"</span>,<span class="string">"sample3"</span>),max)</span><br></pre></td></tr></table></figure><p>同时<strong>施加多个统计函数</strong>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># max、min、mean是后缀名</span></span><br><span class="line"><span class="comment"># 这里必须要使用list，前面的summarise同时施加多个统计函数就不用</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_all(list(max = max,min = min,mean = mean))</span><br><span class="line">  <span class="comment"># A tibble: 26 x 10</span></span><br><span class="line">    ID    sample1_max sample2_max sample3_max sample1_min sample2_min sample3_min sample1_mean sample2_mean sample3_mean</span><br><span class="line">    &lt;fct&gt;       &lt;int&gt;       &lt;int&gt;       &lt;int&gt;       &lt;int&gt;       &lt;int&gt;       &lt;int&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> A             <span class="number">627</span>          <span class="number">85</span>         <span class="number">400</span>         <span class="number">541</span>          <span class="number">41</span>         <span class="number">241</span>         <span class="number">592.</span>         <span class="number">68.3</span>         <span class="number">335.</span></span><br><span class="line">  <span class="number">2</span> B             <span class="number">729</span>          <span class="number">59</span>         <span class="number">265</span>          <span class="number">11</span>          <span class="number">13</span>          <span class="number">31</span>         <span class="number">259.</span>         <span class="number">43.3</span>         <span class="number">124.</span></span><br><span class="line">  <span class="number">3</span> C             <span class="number">713</span>          <span class="number">92</span>         <span class="number">461</span>          <span class="number">80</span>          <span class="number">48</span>         <span class="number">151</span>         <span class="number">381.</span>         <span class="number">75.7</span>         <span class="number">274.</span></span><br><span class="line">  <span class="number">4</span> D             <span class="number">819</span>          <span class="number">75</span>         <span class="number">472</span>         <span class="number">506</span>          <span class="number">32</span>          <span class="number">74</span>         <span class="number">675.</span>         <span class="number">56.3</span>         <span class="number">216.</span></span><br><span class="line">  <span class="number">5</span> E             <span class="number">370</span>          <span class="number">77</span>         <span class="number">425</span>          <span class="number">65</span>          <span class="number">38</span>         <span class="number">169</span>         <span class="number">231.</span>         <span class="number">61</span>           <span class="number">321.</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>             <span class="number">318</span>          <span class="number">72</span>         <span class="number">450</span>         <span class="number">145</span>          <span class="number">25</span>         <span class="number">341</span>         <span class="number">223.</span>         <span class="number">44.7</span>         <span class="number">396.</span></span><br><span class="line">  <span class="number">7</span> G             <span class="number">953</span>          <span class="number">96</span>         <span class="number">329</span>         <span class="number">302</span>          <span class="number">54</span>         <span class="number">193</span>         <span class="number">627</span>          <span class="number">79.3</span>         <span class="number">280.</span></span><br><span class="line">  <span class="number">8</span> H             <span class="number">688</span>          <span class="number">89</span>         <span class="number">451</span>         <span class="number">129</span>          <span class="number">15</span>         <span class="number">393</span>         <span class="number">332</span>          <span class="number">41.3</span>         <span class="number">427.</span></span><br><span class="line">  <span class="number">9</span> I             <span class="number">288</span>          <span class="number">49</span>         <span class="number">249</span>         <span class="number">165</span>          <span class="number">30</span>         <span class="number">102</span>         <span class="number">212.</span>         <span class="number">41.3</span>         <span class="number">194.</span></span><br><span class="line">  <span class="number">10</span> J             <span class="number">311</span>          <span class="number">90</span>         <span class="number">495</span>         <span class="number">119</span>          <span class="number">27</span>         <span class="number">155</span>         <span class="number">190.</span>         <span class="number">56.3</span>         <span class="number">380</span> </span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br></pre></td></tr></table></figure><p></p><hr><h4 id="对满足条件的列进行summarise-summarise-if"><a href="#对满足条件的列进行summarise-summarise-if" class="headerlink" title="对满足条件的列进行summarise-summarise_if"></a>对满足条件的列进行summarise-summarise_if</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">data &lt;- data.frame(ID=rep(LETTERS,each=<span class="number">3</span>),</span><br><span class="line">                   sample1=sample(seq(<span class="number">10</span>,<span class="number">1000</span>),<span class="number">78</span>),</span><br><span class="line">                   sample2=sample(seq(<span class="number">10</span>,<span class="number">100</span>),<span class="number">78</span>),</span><br><span class="line">                   sample3=sample(letters,<span class="number">78</span>,replace = <span class="literal">T</span>))</span><br><span class="line">data</span><br><span class="line">    ID sample1 sample2 sample3</span><br><span class="line">  <span class="number">1</span>   A     <span class="number">451</span>      <span class="number">48</span>       a</span><br><span class="line">  <span class="number">2</span>   A     <span class="number">803</span>      <span class="number">33</span>       l</span><br><span class="line">  <span class="number">3</span>   A     <span class="number">635</span>      <span class="number">69</span>       y</span><br><span class="line">  <span class="number">4</span>   B     <span class="number">994</span>      <span class="number">89</span>       h</span><br><span class="line">  <span class="number">5</span>   B     <span class="number">386</span>      <span class="number">13</span>       e</span><br><span class="line">  <span class="number">6</span>   B     <span class="number">339</span>      <span class="number">28</span>       p</span><br><span class="line">  <span class="number">7</span>   C     <span class="number">518</span>      <span class="number">77</span>       n</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接对所有的列进行求最大值</span></span><br><span class="line"><span class="comment"># 报错，因为存在字符</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_all(max)</span><br><span class="line">  Error <span class="keyword">in</span> Summary.factor(c(<span class="number">1L</span>, <span class="number">12L</span>, <span class="number">25L</span>), na.rm = <span class="literal">FALSE</span>) : </span><br><span class="line">  ‘max’ not meaningful <span class="keyword">for</span> factors</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先判断需要进行summarise的列，然后进行summarise</span></span><br><span class="line">data %&gt;%</span><br><span class="line">  dplyr::group_by(ID) %&gt;% </span><br><span class="line">  dplyr::summarise_if(is.numeric,max)</span><br><span class="line">  <span class="comment"># A tibble: 26 x 3</span></span><br><span class="line">    ID    sample1 sample2</span><br><span class="line">    &lt;fct&gt;   &lt;int&gt;   &lt;int&gt;</span><br><span class="line">  <span class="number">1</span> A         <span class="number">803</span>      <span class="number">69</span></span><br><span class="line">  <span class="number">2</span> B         <span class="number">994</span>      <span class="number">89</span></span><br><span class="line">  <span class="number">3</span> C         <span class="number">748</span>      <span class="number">94</span></span><br><span class="line">  <span class="number">4</span> D         <span class="number">890</span>      <span class="number">82</span></span><br><span class="line">  <span class="number">5</span> E         <span class="number">888</span>      <span class="number">72</span></span><br><span class="line">  <span class="number">6</span> <span class="literal">F</span>         <span class="number">953</span>      <span class="number">19</span></span><br><span class="line">  <span class="number">7</span> G         <span class="number">883</span>      <span class="number">75</span></span><br><span class="line">  <span class="number">8</span> H         <span class="number">762</span>      <span class="number">79</span></span><br><span class="line">  <span class="number">9</span> I         <span class="number">906</span>      <span class="number">34</span></span><br><span class="line">  <span class="number">10</span> J         <span class="number">929</span>      <span class="number">85</span></span><br><span class="line">  <span class="comment"># … with 16 more rows</span></span><br></pre></td></tr></table></figure><hr><h3 id="频数统计-tally"><a href="#频数统计-tally" class="headerlink" title="频数统计-tally"></a>频数统计-tally</h3><p>前面已经使用了<code>dplyr::summarise(freq=n())</code>进行频数统计，这里也可以使用单独的函数来替换进行频数统计：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用tally(sort=TRUE)替换dplyr::summarise(freq=n())</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::group_by(department_id) %&gt;%</span><br><span class="line">  tally(sort=<span class="literal">TRUE</span>)</span><br><span class="line">  <span class="comment"># A tibble: 455 x 2</span></span><br><span class="line">    department_id     n</span><br><span class="line">            &lt;int&gt; &lt;int&gt;</span><br><span class="line">  <span class="number">1</span>          <span class="number">2504</span> <span class="number">33438</span></span><br><span class="line">  <span class="number">2</span>          <span class="number">1801</span> <span class="number">27620</span></span><br><span class="line">  <span class="number">3</span>          <span class="number">4504</span> <span class="number">17479</span></span><br><span class="line">  <span class="number">4</span>          <span class="number">1704</span> <span class="number">14776</span></span><br><span class="line">  <span class="number">5</span>          <span class="number">6104</span> <span class="number">14711</span></span><br><span class="line">  <span class="number">6</span>          <span class="number">2401</span> <span class="number">14145</span></span><br><span class="line">  <span class="number">7</span>          <span class="number">1703</span> <span class="number">13984</span></span><br><span class="line">  <span class="number">8</span>          <span class="number">5302</span> <span class="number">13620</span></span><br><span class="line">  <span class="number">9</span>          <span class="number">4107</span> <span class="number">13586</span></span><br><span class="line">  <span class="number">10</span>          <span class="number">1702</span> <span class="number">13046</span></span><br><span class="line">  <span class="comment"># … with 445 more rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::group_by(department_id) %&gt;%</span><br><span class="line">  dplyr::summarise(n=n())</span><br><span class="line">  <span class="comment"># A tibble: 455 x 2</span></span><br><span class="line">    department_id     n</span><br><span class="line">            &lt;int&gt; &lt;int&gt;</span><br><span class="line">  <span class="number">1</span>             <span class="number">1</span>   <span class="number">174</span></span><br><span class="line">  <span class="number">2</span>             <span class="number">2</span>   <span class="number">591</span></span><br><span class="line">  <span class="number">3</span>             <span class="number">3</span>   <span class="number">464</span></span><br><span class="line">  <span class="number">4</span>             <span class="number">4</span>   <span class="number">551</span></span><br><span class="line">  <span class="number">5</span>             <span class="number">5</span>    <span class="number">89</span></span><br><span class="line">  <span class="number">6</span>             <span class="number">6</span>   <span class="number">819</span></span><br><span class="line">  <span class="number">7</span>             <span class="number">7</span>   <span class="number">200</span></span><br><span class="line">  <span class="number">8</span>             <span class="number">8</span>   <span class="number">617</span></span><br><span class="line">  <span class="number">9</span>             <span class="number">9</span>   <span class="number">479</span></span><br><span class="line">  <span class="number">10</span>            <span class="number">10</span>   <span class="number">494</span></span><br><span class="line">  <span class="comment"># … with 445 more rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以等同于</span></span><br><span class="line">trafficstops %&gt;% </span><br><span class="line">  dplyr::count(department_id)</span><br><span class="line">  <span class="comment"># A tibble: 455 x 2</span></span><br><span class="line">    department_id     n</span><br><span class="line">            &lt;int&gt; &lt;int&gt;</span><br><span class="line">  <span class="number">1</span>             <span class="number">1</span>   <span class="number">174</span></span><br><span class="line">  <span class="number">2</span>             <span class="number">2</span>   <span class="number">591</span></span><br><span class="line">  <span class="number">3</span>             <span class="number">3</span>   <span class="number">464</span></span><br><span class="line">  <span class="number">4</span>             <span class="number">4</span>   <span class="number">551</span></span><br><span class="line">  <span class="number">5</span>             <span class="number">5</span>    <span class="number">89</span></span><br><span class="line">  <span class="number">6</span>             <span class="number">6</span>   <span class="number">819</span></span><br><span class="line">  <span class="number">7</span>             <span class="number">7</span>   <span class="number">200</span></span><br><span class="line">  <span class="number">8</span>             <span class="number">8</span>   <span class="number">617</span></span><br><span class="line">  <span class="number">9</span>             <span class="number">9</span>   <span class="number">479</span></span><br><span class="line">  <span class="number">10</span>            <span class="number">10</span>   <span class="number">494</span></span><br><span class="line">  <span class="comment"># … with 445 more rows</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="合并两个表"><a href="#合并两个表" class="headerlink" title="合并两个表"></a>合并两个表</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trafficstops %&gt;% </span><br><span class="line">  group_by(county_name) %&gt;% </span><br><span class="line">  summarise(n_stops = n()) %&gt;% </span><br><span class="line">  left_join(MS_bw_pop, by = c(<span class="string">"county_name"</span> = <span class="string">"County"</span>)) %&gt;% </span><br><span class="line">  head()</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cengel.github.io/R-data-wrangling/dplyr.html#what-is-dplyr" target="_blank" rel="noopener">Chapter 1 Data Manipulation using dplyr</a></li><li><a href="https://www.cnblogs.com/shangfr/p/6110614.html" target="_blank" rel="noopener">R语言数据处理包dplyr、tidyr笔记</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了使用&lt;code&gt;dplyr&lt;/code&gt;处理数据，主要包括使用&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;对列进行筛选&lt;/strong&gt;，使用&lt;code&gt;filter&lt;/code&gt;、&lt;code&gt;slice&lt;/code&gt;、&lt;code&gt;sample_n&lt;/code&gt;、&lt;code&gt;sample_frac&lt;/code&gt;&lt;strong&gt;对行进行筛选&lt;/strong&gt;，使用&lt;code&gt;arrange&lt;/code&gt;&lt;strong&gt;对行进行排序&lt;/strong&gt;，使用管道操作符&lt;code&gt;%&amp;gt;%&lt;/code&gt;，使用&lt;code&gt;mutate&lt;/code&gt;&lt;strong&gt;添加新列&lt;/strong&gt;，使用&lt;code&gt;group_by()&lt;/code&gt;&lt;strong&gt;进行分组&lt;/strong&gt;，使用&lt;code&gt;summarise&lt;/code&gt;&lt;strong&gt;进行结果汇总&lt;/strong&gt;，使用&lt;code&gt;tally&lt;/code&gt;&lt;strong&gt;统计频数&lt;/strong&gt;以及&lt;strong&gt;合并两个表&lt;/strong&gt;的操作。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R系列之常用函数集合</title>
    <link href="http://showteeth.tech/posts/64361.html"/>
    <id>http://showteeth.tech/posts/64361.html</id>
    <published>2019-11-22T13:23:53.000Z</published>
    <updated>2019-11-30T13:55:44.954Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章用于积累R中使用的小函数的用法和实例，便于后续查询和使用。</p></div><a id="more"></a><h2 id="输出内容-print-、cat"><a href="#输出内容-print-、cat" class="headerlink" title="输出内容-print()、cat()"></a>输出内容-print()、cat()</h2><h3 id="输出单个内容"><a href="#输出单个内容" class="headerlink" title="输出单个内容"></a>输出单个内容</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(a)</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h3 id="多个内容合并输出"><a href="#多个内容合并输出" class="headerlink" title="多个内容合并输出"></a>多个内容合并输出</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">b=c(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">cat(a,b)</span><br><span class="line">  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">cat(a,b,sep=<span class="string">"mmm"</span>)</span><br><span class="line">  1mmm2mmm3mmm4mmm5mmm6</span><br></pre></td></tr></table></figure><hr><h2 id="合并多个数据框-cbind-、rbind-、merge"><a href="#合并多个数据框-cbind-、rbind-、merge" class="headerlink" title="合并多个数据框-cbind()、rbind()、merge()"></a>合并多个数据框-cbind()、rbind()、merge()</h2><h3 id="纵向合并-rbind"><a href="#纵向合并-rbind" class="headerlink" title="纵向合并-rbind()"></a>纵向合并-rbind()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">city &lt;- c(<span class="string">"Tampa"</span>,<span class="string">"Seattle"</span>,<span class="string">"Hartford"</span>,<span class="string">"Denver"</span>)</span><br><span class="line">state &lt;- c(<span class="string">"FL"</span>,<span class="string">"WA"</span>,<span class="string">"CT"</span>,<span class="string">"CO"</span>)</span><br><span class="line">zipcode &lt;- c(<span class="number">33602</span>,<span class="number">98104</span>,<span class="number">06161</span>,<span class="number">80294</span>)</span><br><span class="line">addresses &lt;- cbind(city,state,zipcode)</span><br><span class="line">      city       state zipcode</span><br><span class="line">  [<span class="number">1</span>,] <span class="string">"Tampa"</span>    <span class="string">"FL"</span>  <span class="string">"33602"</span></span><br><span class="line">  [<span class="number">2</span>,] <span class="string">"Seattle"</span>  <span class="string">"WA"</span>  <span class="string">"98104"</span></span><br><span class="line">  [<span class="number">3</span>,] <span class="string">"Hartford"</span> <span class="string">"CT"</span>  <span class="string">"6161"</span> </span><br><span class="line">  [<span class="number">4</span>,] <span class="string">"Denver"</span>   <span class="string">"CO"</span>  <span class="string">"80294"</span></span><br><span class="line"></span><br><span class="line">new.address &lt;- data.frame(</span><br><span class="line">   city = c(<span class="string">"Lowry"</span>,<span class="string">"Charlotte"</span>),</span><br><span class="line">   state = c(<span class="string">"CO"</span>,<span class="string">"FL"</span>),</span><br><span class="line">   zipcode = c(<span class="string">"80230"</span>,<span class="string">"33949"</span>),</span><br><span class="line">   stringsAsFactors = <span class="literal">FALSE</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 纵向合并</span></span><br><span class="line"><span class="comment"># 增加row的数目</span></span><br><span class="line">rbind(addresses,new.address)</span><br><span class="line">        city state zipcode</span><br><span class="line">  <span class="number">1</span>     Tampa    FL   <span class="number">33602</span></span><br><span class="line">  <span class="number">2</span>   Seattle    WA   <span class="number">98104</span></span><br><span class="line">  <span class="number">3</span>  Hartford    CT    <span class="number">6161</span></span><br><span class="line">  <span class="number">4</span>    Denver    CO   <span class="number">80294</span></span><br><span class="line">  <span class="number">5</span>     Lowry    CO   <span class="number">80230</span></span><br><span class="line">  <span class="number">6</span> Charlotte    FL   <span class="number">33949</span></span><br></pre></td></tr></table></figure><hr><h3 id="横向合并-cbind"><a href="#横向合并-cbind" class="headerlink" title="横向合并-cbind()"></a>横向合并-cbind()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅仅是将数目横向拼在了一起</span></span><br><span class="line"><span class="comment"># 不管数据内部的结构和关系</span></span><br><span class="line">cbind(addresses,new.address)</span><br><span class="line">        city state zipcode      city state zipcode</span><br><span class="line">  <span class="number">1</span>    Tampa    FL   <span class="number">33602</span>     Lowry    CO   <span class="number">80230</span></span><br><span class="line">  <span class="number">2</span>  Seattle    WA   <span class="number">98104</span> Charlotte    FL   <span class="number">33949</span></span><br><span class="line">  <span class="number">3</span> Hartford    CT    <span class="number">6161</span>     Lowry    CO   <span class="number">80230</span></span><br><span class="line">  <span class="number">4</span>   Denver    CO   <span class="number">80294</span> Charlotte    FL   <span class="number">33949</span></span><br></pre></td></tr></table></figure><hr><h3 id="连接数据-merge"><a href="#连接数据-merge" class="headerlink" title="连接数据-merge()"></a>连接数据-merge()</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全、左、右连接：all、all.x、all.y</span></span><br><span class="line"><span class="comment"># 相同的columns后缀：suffixes = c(".x",".y")</span></span><br><span class="line"><span class="keyword">library</span>(MASS)</span><br><span class="line">merged.Pima &lt;- merge(x = Pima.te, y = Pima.tr,</span><br><span class="line">   by.x = c(<span class="string">"bp"</span>, <span class="string">"bmi"</span>),</span><br><span class="line">   by.y = c(<span class="string">"bp"</span>, <span class="string">"bmi"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">merged.Pima</span><br><span class="line">    bp  bmi npreg.x glu.x skin.x ped.x age.x type.x npreg.y glu.y skin.y ped.y age.y type.y</span><br><span class="line">  <span class="number">1</span>  <span class="number">60</span> <span class="number">33.8</span>       <span class="number">1</span>   <span class="number">117</span>     <span class="number">23</span> <span class="number">0.466</span>    <span class="number">27</span>     No       <span class="number">2</span>   <span class="number">125</span>     <span class="number">20</span> <span class="number">0.088</span>    <span class="number">31</span>     No</span><br><span class="line">  <span class="number">2</span>  <span class="number">64</span> <span class="number">29.7</span>       <span class="number">2</span>    <span class="number">75</span>     <span class="number">24</span> <span class="number">0.370</span>    <span class="number">33</span>     No       <span class="number">2</span>   <span class="number">100</span>     <span class="number">23</span> <span class="number">0.368</span>    <span class="number">21</span>     No</span><br><span class="line">  <span class="number">3</span>  <span class="number">64</span> <span class="number">31.2</span>       <span class="number">5</span>   <span class="number">189</span>     <span class="number">33</span> <span class="number">0.583</span>    <span class="number">29</span>    Yes       <span class="number">3</span>   <span class="number">158</span>     <span class="number">13</span> <span class="number">0.295</span>    <span class="number">24</span>     No</span><br><span class="line">  <span class="number">4</span>  <span class="number">64</span> <span class="number">33.2</span>       <span class="number">4</span>   <span class="number">117</span>     <span class="number">27</span> <span class="number">0.230</span>    <span class="number">24</span>     No       <span class="number">1</span>    <span class="number">96</span>     <span class="number">27</span> <span class="number">0.289</span>    <span class="number">21</span>     No</span><br><span class="line">  <span class="number">5</span>  <span class="number">66</span> <span class="number">38.1</span>       <span class="number">3</span>   <span class="number">115</span>     <span class="number">39</span> <span class="number">0.150</span>    <span class="number">28</span>     No       <span class="number">1</span>   <span class="number">114</span>     <span class="number">36</span> <span class="number">0.289</span>    <span class="number">21</span>     No</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><hr><h2 id="字符串提取-substring"><a href="#字符串提取-substring" class="headerlink" title="字符串提取-substring()"></a>字符串提取-substring()</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result &lt;- substring(<span class="string">"Extract"</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">print(result)</span><br><span class="line">  [<span class="number">1</span>] <span class="string">"act"</span></span><br></pre></td></tr></table></figure><hr><h2 id="得到列表元素的组合-cross"><a href="#得到列表元素的组合-cross" class="headerlink" title="得到列表元素的组合-cross"></a>得到列表元素的组合-cross</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><code>cross2()</code> returns the product set of the elements of <code>.x</code> and <code>.y</code>. <code>cross3()</code> takes an additional <code>.z</code> argument. <code>cross()</code> takes a list <code>.l</code> and returns the cartesian product of all its elements <strong>in a list</strong>, with <strong>one combination by element</strong>. <code>cross_df()</code> is like <code>cross()</code> but <strong>returns a data frame</strong>, with <strong>one combination by row</strong>.</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">head(diamonds)</span><br><span class="line">  <span class="comment"># A tibble: 6 x 10</span></span><br><span class="line">    carat cut       color clarity depth table price     x     y     z</span><br><span class="line">    &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> <span class="number">0.23</span>  Ideal     E     SI2      <span class="number">61.5</span>    <span class="number">55</span>   <span class="number">326</span>  <span class="number">3.95</span>  <span class="number">3.98</span>  <span class="number">2.43</span></span><br><span class="line">  <span class="number">2</span> <span class="number">0.21</span>  Premium   E     SI1      <span class="number">59.8</span>    <span class="number">61</span>   <span class="number">326</span>  <span class="number">3.89</span>  <span class="number">3.84</span>  <span class="number">2.31</span></span><br><span class="line">  <span class="number">3</span> <span class="number">0.23</span>  Good      E     VS1      <span class="number">56.9</span>    <span class="number">65</span>   <span class="number">327</span>  <span class="number">4.05</span>  <span class="number">4.07</span>  <span class="number">2.31</span></span><br><span class="line">  <span class="number">4</span> <span class="number">0.290</span> Premium   I     VS2      <span class="number">62.4</span>    <span class="number">58</span>   <span class="number">334</span>  <span class="number">4.2</span>   <span class="number">4.23</span>  <span class="number">2.63</span></span><br><span class="line">  <span class="number">5</span> <span class="number">0.31</span>  Good      J     SI2      <span class="number">63.3</span>    <span class="number">58</span>   <span class="number">335</span>  <span class="number">4.34</span>  <span class="number">4.35</span>  <span class="number">2.75</span></span><br><span class="line">  <span class="number">6</span> <span class="number">0.24</span>  Very Good J     VVS2     <span class="number">62.8</span>    <span class="number">57</span>   <span class="number">336</span>  <span class="number">3.94</span>  <span class="number">3.96</span>  <span class="number">2.48</span></span><br><span class="line"></span><br><span class="line">unique(diamonds$clarity)</span><br><span class="line">  [<span class="number">1</span>] SI2  SI1  VS1  VS2  VVS2 VVS1 I1   IF  </span><br><span class="line">  Levels: I1 &lt; SI2 &lt; SI1 &lt; VS2 &lt; VS1 &lt; VVS2 &lt; VVS1 &lt; IF</span><br><span class="line">unique(diamonds$cut)</span><br><span class="line">  [<span class="number">1</span>] Ideal     Premium   Good      Very Good Fair     </span><br><span class="line">  Levels: Fair &lt; Good &lt; Very Good &lt; Premium &lt; Ideal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上述两个因子进行组合，5x8=40行</span></span><br><span class="line"><span class="comment"># 并且需要注意cross_df需要list中的每一个元素都是带名字的</span></span><br><span class="line">cross_df(list(clarity = unique(diamonds$clarity), cut = unique(diamonds$cut)))</span><br><span class="line">  <span class="comment"># A tibble: 40 x 2</span></span><br><span class="line">    clarity cut    </span><br><span class="line">    &lt;fct&gt;   &lt;fct&gt;  </span><br><span class="line">  <span class="number">1</span> SI2     Ideal  </span><br><span class="line">  <span class="number">2</span> SI1     Ideal  </span><br><span class="line">  <span class="number">3</span> VS1     Ideal  </span><br><span class="line">  <span class="number">4</span> VS2     Ideal  </span><br><span class="line">  <span class="number">5</span> VVS2    Ideal  </span><br><span class="line">  <span class="number">6</span> VVS1    Ideal  </span><br><span class="line">  <span class="number">7</span> I1      Ideal  </span><br><span class="line">  <span class="number">8</span> IF      Ideal  </span><br><span class="line"><span class="comment"># 不带名字报错</span></span><br><span class="line">cross_df(list(clarity = unique(diamonds$clarity),  unique(diamonds$cut)))</span><br><span class="line">  Error: Column <span class="number">2</span> must be named.</span><br><span class="line">  Use .name_repair to specify repair.</span><br><span class="line">  Call `rlang::last_error()` to see a backtrace</span><br></pre></td></tr></table></figure><h2 id="给定序列的组合-combn"><a href="#给定序列的组合-combn" class="headerlink" title="给定序列的组合-combn"></a>给定序列的组合-combn</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote><p><strong>Generate all combinations of the elements of <code>x</code> taken <code>m</code> at a time</strong>. If <code>x</code> is a positive integer, returns all combinations of the elements of <code>seq(x)</code> taken <code>m</code> at a time. If argument <code>FUN</code> is not NULL, applies a function given by the argument to each point. If <code>simplify</code> is <code>FALSE</code>, returns a <code>list</code>; <code>otherwise returns an array</code>, typically a <code>matrix</code>. … are passed unchanged to the FUN function, if specified.</p></blockquote><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相当于从1、2、3从任选两个组合</span></span><br><span class="line"><span class="comment"># 总有三个情况</span></span><br><span class="line">combn(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">3</span>    <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 26个字母中随机选两个，一共会得到2x325数据</span></span><br><span class="line"><span class="comment"># 然后按列将matrix进行合并，使用paste0合并，合并的连接符为""</span></span><br><span class="line">apply(combn(letters, <span class="number">2</span>), <span class="number">2</span>, paste0, collapse = <span class="string">""</span>)</span><br><span class="line">    [<span class="number">1</span>] <span class="string">"ab"</span> <span class="string">"ac"</span> <span class="string">"ad"</span> <span class="string">"ae"</span> <span class="string">"af"</span> <span class="string">"ag"</span> <span class="string">"ah"</span> <span class="string">"ai"</span> <span class="string">"aj"</span> <span class="string">"ak"</span> <span class="string">"al"</span> <span class="string">"am"</span> <span class="string">"an"</span> <span class="string">"ao"</span> <span class="string">"ap"</span> <span class="string">"aq"</span> <span class="string">"ar"</span> <span class="string">"as"</span> <span class="string">"at"</span> <span class="string">"au"</span> <span class="string">"av"</span> <span class="string">"aw"</span> <span class="string">"ax"</span></span><br><span class="line">  [<span class="number">24</span>] <span class="string">"ay"</span> <span class="string">"az"</span> <span class="string">"bc"</span> <span class="string">"bd"</span> <span class="string">"be"</span> <span class="string">"bf"</span> <span class="string">"bg"</span> <span class="string">"bh"</span> <span class="string">"bi"</span> <span class="string">"bj"</span> <span class="string">"bk"</span> <span class="string">"bl"</span> <span class="string">"bm"</span> <span class="string">"bn"</span> <span class="string">"bo"</span> <span class="string">"bp"</span> <span class="string">"bq"</span> <span class="string">"br"</span> <span class="string">"bs"</span> <span class="string">"bt"</span> <span class="string">"bu"</span> <span class="string">"bv"</span> <span class="string">"bw"</span></span><br><span class="line">  .....</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章用于积累R中使用的小函数的用法和实例，便于后续查询和使用。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列-常用图形以及绘制方法收集</title>
    <link href="http://showteeth.tech/posts/6682.html"/>
    <id>http://showteeth.tech/posts/6682.html</id>
    <published>2019-11-22T03:04:53.000Z</published>
    <updated>2019-11-23T16:08:10.634Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章搜集了遇到的一些<strong>好看且实用图形</strong>的绘制方法，以备不时之需。</p></div><a id="more"></a><h2 id="各种图形绘制"><a href="#各种图形绘制" class="headerlink" title="各种图形绘制"></a>各种图形绘制</h2><ul><li><a href="http://www.sthda.com/english/wiki/ggplot2-essentials" target="_blank" rel="noopener">ggplot2 - Essentials</a></li></ul><h2 id="error-bar-line-or-bar-plot"><a href="#error-bar-line-or-bar-plot" class="headerlink" title="error bar-line or bar plot"></a>error bar-line or bar plot</h2><ul><li><a href="http://www.sthda.com/english/wiki/ggplot2-error-bars-quick-start-guide-r-software-and-data-visualization" target="_blank" rel="noopener">参考链接</a></li></ul><h2 id="boxplot点连线"><a href="#boxplot点连线" class="headerlink" title="boxplot点连线"></a>boxplot点连线</h2><ul><li><a href="https://www.jianshu.com/p/39ebf2bc0e55" target="_blank" rel="noopener">参考链接</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章搜集了遇到的一些&lt;strong&gt;好看且实用图形&lt;/strong&gt;的绘制方法，以备不时之需。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列-绘制百分比柱状图以及优化</title>
    <link href="http://showteeth.tech/posts/18071.html"/>
    <id>http://showteeth.tech/posts/18071.html</id>
    <published>2019-11-20T14:47:21.000Z</published>
    <updated>2019-12-01T15:48:05.845Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要是关于<strong>对R中的柱状图进行优化的过程</strong>，包括<strong>堆叠或并列柱状图</strong>、<strong>纵坐标表示百分比</strong>、<strong>添加同一组分在不同分组之间的连线来显示变化</strong>、<strong>控制坐标轴范围</strong>等。</p></div><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>堆叠柱状图</li><li>纵坐标表示百分比</li><li>添加同一组分在不同分组之间的连线来显示变化</li></ul><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="普通柱状图"><a href="#普通柱状图" class="headerlink" title="普通柱状图"></a>普通柱状图</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cluster_with_cellnum_plot</span><br><span class="line">    cell_num          ident cluster</span><br><span class="line">  <span class="number">1</span>      <span class="number">4317</span>   zebra_mut_3h       <span class="number">0</span></span><br><span class="line">  <span class="number">2</span>      <span class="number">1314</span> zebra_mut_sham       <span class="number">0</span></span><br><span class="line">  <span class="number">3</span>       <span class="number">297</span>    zebra_wt_3h       <span class="number">0</span></span><br><span class="line">  <span class="number">4</span>       <span class="number">720</span>  zebra_wt_sham       <span class="number">0</span></span><br><span class="line">  <span class="number">5</span>      <span class="number">5129</span>   zebra_mut_3h       <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示的是绝对数值</span></span><br><span class="line">ggplot(cluster_with_cellnum_plot, aes(fill=cluster, y=cell_num, x=ident)) + </span><br><span class="line">  geom_bar(stat=<span class="string">"identity"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="百分比柱状图"><a href="#百分比柱状图" class="headerlink" title="百分比柱状图"></a>百分比柱状图</h3><p>两种方法：</p><ul><li>先计算百分比，然后直接画图</li><li>直接传递原始数字，ggplot2转化为百分比</li></ul><h4 id="计算百分比"><a href="#计算百分比" class="headerlink" title="计算百分比"></a>计算百分比</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cluster_with_cellnum_plot %&gt;% </span><br><span class="line">  <span class="comment"># 数据按ident进行分组</span></span><br><span class="line">  dplyr::group_by (ident) %&gt;% </span><br><span class="line">  <span class="comment"># mutate() adds new variables and preserves existing ones</span></span><br><span class="line">  <span class="comment"># mutate在添加新变量的同时保留原始的变量信息</span></span><br><span class="line">  <span class="comment"># 新增的变量名称为frac</span></span><br><span class="line">  dplyr::mutate(frac=round(cell_num/sum(cell_num),<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">  <span class="comment"># A tibble: 44 x 4</span></span><br><span class="line">  <span class="comment"># Groups:   ident [4]</span></span><br><span class="line">    cell_num ident          cluster   frac</span><br><span class="line">        &lt;int&gt; &lt;chr&gt;            &lt;int&gt;  &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span>     <span class="number">4317</span> zebra_mut_3h         <span class="number">0</span> <span class="number">0.385</span> </span><br><span class="line">  <span class="number">2</span>     <span class="number">1314</span> zebra_mut_sham       <span class="number">0</span> <span class="number">0.105</span> </span><br><span class="line">  <span class="number">3</span>      <span class="number">297</span> zebra_wt_3h          <span class="number">0</span> <span class="number">0.0412</span></span><br><span class="line">  <span class="number">4</span>      <span class="number">720</span> zebra_wt_sham        <span class="number">0</span> <span class="number">0.190</span> </span><br><span class="line">  <span class="number">5</span>     <span class="number">5129</span> zebra_mut_3h         <span class="number">1</span> <span class="number">0.457</span> </span><br><span class="line">  <span class="number">6</span>     <span class="number">1425</span> zebra_mut_sham       <span class="number">1</span> <span class="number">0.114</span> </span><br><span class="line">  <span class="number">7</span>       <span class="number">28</span> zebra_wt_3h          <span class="number">1</span> <span class="number">0.0039</span></span><br><span class="line">  <span class="number">8</span>       <span class="number">35</span> zebra_wt_sham        <span class="number">1</span> <span class="number">0.0092</span></span><br><span class="line">  <span class="number">9</span>      <span class="number">614</span> zebra_mut_3h         <span class="number">2</span> <span class="number">0.0547</span></span><br><span class="line">  <span class="number">10</span>     <span class="number">2385</span> zebra_mut_sham       <span class="number">2</span> <span class="number">0.191</span> </span><br><span class="line">  <span class="comment"># … with 34 more rows</span></span><br></pre></td></tr></table></figure><hr><h4 id="直接使用ggplot2转化"><a href="#直接使用ggplot2转化" class="headerlink" title="直接使用ggplot2转化"></a>直接使用ggplot2转化</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ggplot(cluster_with_cellnum_plot, aes(fill=cluster, y=cell_num, x=ident)) + </span><br><span class="line">  <span class="comment"># 添加了position="fill"</span></span><br><span class="line">  geom_bar(position=<span class="string">"fill"</span>, stat=<span class="string">"identity"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="添加百分比"><a href="#添加百分比" class="headerlink" title="添加百分比"></a>添加百分比</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ggplot(cluster_with_cellnum_plot, aes(fill=cluster, y=cell_num, x=ident)) + </span><br><span class="line">  geom_bar(position=<span class="string">"fill"</span>, stat=<span class="string">"identity"</span>) + </span><br><span class="line">  <span class="comment"># 将纵坐标转化为百分比的形式</span></span><br><span class="line">  scale_y_continuous(labels = <span class="keyword">function</span>(x) paste0(x*<span class="number">100</span>, <span class="string">"%"</span>))</span><br></pre></td></tr></table></figure><hr><h3 id="添加分组连线"><a href="#添加分组连线" class="headerlink" title="添加分组连线"></a>添加分组连线</h3><h4 id="原始的数值"><a href="#原始的数值" class="headerlink" title="原始的数值"></a>原始的数值</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到数据框</span></span><br><span class="line">df=data.frame(</span><br><span class="line">  Phylum=c(<span class="string">"Ruminococcaceae"</span>,<span class="string">"Bacteroidaceae"</span>,<span class="string">"Eubacteriaceae"</span>,<span class="string">"Lachnospiraceae"</span>,<span class="string">"Porphyromonadaceae"</span>),</span><br><span class="line">  GroupA=c(<span class="number">37.7397</span>,<span class="number">31.34317</span>,<span class="number">222.08827</span>,<span class="number">5.08956</span>,<span class="number">3.7393</span>),</span><br><span class="line">  GroupB=c(<span class="number">113.2191</span>,<span class="number">94.02951</span>,<span class="number">66.26481</span>,<span class="number">15.26868</span>,<span class="number">11.2179</span>),</span><br><span class="line">  GroupC=c(<span class="number">123.2191</span>,<span class="number">94.02951</span>,<span class="number">46.26481</span>,<span class="number">35.26868</span>,<span class="number">1.2179</span>)</span><br><span class="line">)</span><br><span class="line">df</span><br><span class="line">                Phylum    GroupA    GroupB    GroupC</span><br><span class="line">  <span class="number">1</span>    Ruminococcaceae  <span class="number">37.73970</span> <span class="number">113.21910</span> <span class="number">123.21910</span></span><br><span class="line">  <span class="number">2</span>     Bacteroidaceae  <span class="number">31.34317</span>  <span class="number">94.02951</span>  <span class="number">94.02951</span></span><br><span class="line">  <span class="number">3</span>     Eubacteriaceae <span class="number">222.08827</span>  <span class="number">66.26481</span>  <span class="number">46.26481</span></span><br><span class="line">  <span class="number">4</span>    Lachnospiraceae   <span class="number">5.08956</span>  <span class="number">15.26868</span>  <span class="number">35.26868</span></span><br><span class="line">  <span class="number">5</span> Porphyromonadaceae   <span class="number">3.73930</span>  <span class="number">11.21790</span>   <span class="number">1.21790</span></span><br><span class="line"></span><br><span class="line">melt(df)</span><br><span class="line">melt(df)</span><br><span class="line">  Using Phylum as id variables</span><br><span class="line">                Phylum variable     value</span><br><span class="line">  <span class="number">1</span>     Ruminococcaceae   GroupA  <span class="number">37.73970</span></span><br><span class="line">  <span class="number">2</span>      Bacteroidaceae   GroupA  <span class="number">31.34317</span></span><br><span class="line">  <span class="number">3</span>      Eubacteriaceae   GroupA <span class="number">222.08827</span></span><br><span class="line">  <span class="number">4</span>     Lachnospiraceae   GroupA   <span class="number">5.08956</span></span><br><span class="line">  <span class="number">5</span>  Porphyromonadaceae   GroupA   <span class="number">3.73930</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># melt将dataframe转化为更适合ggplot2绘图的数据格式</span></span><br><span class="line">ggplot(melt(df), aes(x=variable, y=value, fill=Phylum)) +</span><br><span class="line">  geom_bar(stat = <span class="string">"identity"</span>, width=<span class="number">0.5</span>, col=<span class="string">'black'</span>)  + theme_classic()+</span><br><span class="line">  <span class="comment"># 这里的添加连线的部分，关键点：排序、cumsum</span></span><br><span class="line">  <span class="comment"># 第一个是处理A-&gt;B</span></span><br><span class="line">  <span class="comment"># x=1.25：连线开始的地方</span></span><br><span class="line">  <span class="comment"># xend=1.75：连线结束的地方</span></span><br><span class="line">  <span class="comment"># 上面两个需要和geom_bar的width=0.5参数结合起来</span></span><br><span class="line">  geom_segment(data=df %&gt;% </span><br><span class="line">                 arrange(by=desc(Phylum)) %&gt;% </span><br><span class="line">                 mutate(GroupA=cumsum(GroupA)) %&gt;% </span><br><span class="line">                 mutate(GroupB=cumsum(GroupB)), </span><br><span class="line">               aes(x=<span class="number">1.25</span>, xend=<span class="number">1.75</span>, y=GroupA, yend=GroupB))+</span><br><span class="line">  <span class="comment"># 第二个是处理B-&gt;C</span></span><br><span class="line">  geom_segment(data=df %&gt;% </span><br><span class="line">                 arrange(by=desc(Phylum)) %&gt;% </span><br><span class="line">                 mutate(GroupB=cumsum(GroupB)) %&gt;% </span><br><span class="line">                 mutate(GroupC=cumsum(GroupC)), </span><br><span class="line">               aes(x=<span class="number">2.25</span>, xend=<span class="number">2.75</span>, y=GroupB, yend=GroupC))</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/R_bar_plot_optimize.png" alt="R_bar_plot_optimize.png"></p><h4 id="转化为百分比"><a href="#转化为百分比" class="headerlink" title="转化为百分比"></a>转化为百分比</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算得到百分比</span></span><br><span class="line"><span class="comment"># 不要round，不然加和可能不是0</span></span><br><span class="line">df= melt(df) %&gt;%  group_by(variable) %&gt;% </span><br><span class="line">  mutate(percent=value/sum(value)) %&gt;%  group_by(variable) %&gt;%  mutate(total=sum(percent))</span><br><span class="line">df</span><br><span class="line">  <span class="comment"># A tibble: 15 x 5</span></span><br><span class="line">  <span class="comment"># Groups:   variable [3]</span></span><br><span class="line">    Phylum             variable  value percent total</span><br><span class="line">    &lt;fct&gt;              &lt;fct&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> Ruminococcaceae    GroupA    <span class="number">37.7</span>  <span class="number">0.126</span>       <span class="number">1</span></span><br><span class="line">  <span class="number">2</span> Bacteroidaceae     GroupA    <span class="number">31.3</span>  <span class="number">0.104</span>       <span class="number">1</span></span><br><span class="line">  <span class="number">3</span> Eubacteriaceae     GroupA   <span class="number">222.</span>   <span class="number">0.740</span>       <span class="number">1</span></span><br><span class="line">  <span class="number">4</span> Lachnospiraceae    GroupA     <span class="number">5.09</span> <span class="number">0.0170</span>      <span class="number">1</span></span><br><span class="line">  <span class="number">5</span> Porphyromonadaceae GroupA     <span class="number">3.74</span> <span class="number">0.0125</span>      <span class="number">1</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原原始的dataframe结构</span></span><br><span class="line"><span class="comment"># 并且使用percent作为填充值</span></span><br><span class="line"><span class="comment"># 默认使用的是value列</span></span><br><span class="line">dcast(df,Phylum~variable,value.var=<span class="string">"percent"</span>)</span><br><span class="line">  dcast(df,Phylum~variable,value.var=<span class="string">"percent"</span>)</span><br><span class="line">                Phylum     GroupA    GroupB      GroupC</span><br><span class="line">  <span class="number">1</span>     Bacteroidaceae <span class="number">0.10447723</span> <span class="number">0.3134317</span> <span class="number">0.313431700</span></span><br><span class="line">  <span class="number">2</span>     Eubacteriaceae <span class="number">0.74029423</span> <span class="number">0.2208827</span> <span class="number">0.154216033</span></span><br><span class="line">  <span class="number">3</span>    Lachnospiraceae <span class="number">0.01696520</span> <span class="number">0.0508956</span> <span class="number">0.117562267</span></span><br><span class="line">  <span class="number">4</span> Porphyromonadaceae <span class="number">0.01246433</span> <span class="number">0.0373930</span> <span class="number">0.004059667</span></span><br><span class="line">  <span class="number">5</span>    Ruminococcaceae <span class="number">0.12579900</span> <span class="number">0.3773970</span> <span class="number">0.410730333</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ggplot(df, aes(x=variable, y=percent, fill=Phylum)) +</span><br><span class="line">  geom_bar(stat = <span class="string">"identity"</span>, width=<span class="number">0.5</span>, col=<span class="string">'black'</span>)  + theme_classic()+</span><br><span class="line">  geom_segment(data=dcast(df,Phylum~variable,value.var=<span class="string">"percent"</span>) %&gt;% </span><br><span class="line">                 arrange(by=desc(Phylum)) %&gt;% </span><br><span class="line">                 mutate(GroupA=cumsum(GroupA)) %&gt;% </span><br><span class="line">                 mutate(GroupB=cumsum(GroupB)), </span><br><span class="line">               aes(x=<span class="number">1.25</span>, xend=<span class="number">1.75</span>, y=GroupA, yend=GroupB))+</span><br><span class="line">  geom_segment(data=dcast(df,Phylum~variable,value.var=<span class="string">"percent"</span>) %&gt;% </span><br><span class="line">                 arrange(by=desc(Phylum)) %&gt;% </span><br><span class="line">                 mutate(GroupB=cumsum(GroupB)) %&gt;% </span><br><span class="line">                 mutate(GroupC=cumsum(GroupC)), </span><br><span class="line">               aes(x=<span class="number">2.25</span>, xend=<span class="number">2.75</span>, y=GroupB, yend=GroupC))</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/R_bar_plot_optimize_2.png" alt="R_bar_plot_optimize_2.png"></p><hr><h2 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h2><h3 id="并列或者堆叠柱状图"><a href="#并列或者堆叠柱状图" class="headerlink" title="并列或者堆叠柱状图"></a>并列或者堆叠柱状图</h3><p>默认柱状图是堆叠柱状图，如果想画出并列柱状图可以使用如下方法：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fill：控制颜色和堆叠效果</span></span><br><span class="line"><span class="comment"># position ="dodge"：并列柱状图，默认是堆叠</span></span><br><span class="line">ggplot(final_stat, aes(x=ST, y=frac,fill=Sample_name)) + </span><br><span class="line">  geom_bar( stat=<span class="string">"identity"</span>,position =<span class="string">"dodge"</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="控制坐标轴范围"><a href="#控制坐标轴范围" class="headerlink" title="控制坐标轴范围"></a>控制坐标轴范围</h3><p>如果柱状图的某些结果异常高，那么就会导致其他结果的可视化效果变差(增大了scale，压缩了其他bar)，为了解决这种情况就可以设置坐标轴的显示范围。</p><p><strong>错误的做法</strong>，使用<code>scale_y_continuous</code>、<code>ylim</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用scale_y_continuous(limits=c(0,0.03))会出问题</span></span><br><span class="line"><span class="comment"># 会直接将超过设置范围的bar去掉</span></span><br><span class="line">ggplot(final_stat, aes(x=ST, y=frac,fill=Sample_name)) + </span><br><span class="line">  geom_bar( stat=<span class="string">"identity"</span>,position =<span class="string">"dodge"</span>) +</span><br><span class="line">  scale_y_continuous(limits=c(<span class="number">0</span>,<span class="number">0.03</span>))</span><br><span class="line">  </span><br><span class="line">  Warning message:</span><br><span class="line">  Removed <span class="number">22</span> rows containing missing values (geom_bar).</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和scale_y_continuous(limits=c(0,0.03))相同，直接使用ylim(0,0.03)也是一样的效果</span></span><br><span class="line">ggplot(final_stat, aes(x=ST, y=frac,fill=Sample_name)) + </span><br><span class="line">  geom_bar( stat=<span class="string">"identity"</span>,position =<span class="string">"dodge"</span>) +</span><br><span class="line">  ylim(<span class="number">0</span>,<span class="number">0.03</span>)</span><br></pre></td></tr></table></figure><p></p><p><strong>正确的做法</strong>，使用<code>coord_cartesian</code>和<code>coord_flip</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果想让bar是垂直显示的，那就使用coord_cartesian</span></span><br><span class="line">ggplot(final_stat, aes(x=ST, y=frac,fill=Sample_name)) + </span><br><span class="line">  geom_bar( stat=<span class="string">"identity"</span>,position =<span class="string">"dodge"</span>) +</span><br><span class="line">  coord_cartesian(ylim=c(<span class="number">0</span>,<span class="number">0.03</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想让bar水平显示，那就使用coord_flip</span></span><br><span class="line">ggplot(final_stat, aes(x=ST, y=frac,fill=Sample_name)) + </span><br><span class="line">  geom_bar( stat=<span class="string">"identity"</span>,position =<span class="string">"dodge"</span>) +</span><br><span class="line">  coord_flip(ylim=c(<span class="number">0</span>,<span class="number">0.03</span>))</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.r-graph-gallery.com/218-basic-barplots-with-ggplot2.html" target="_blank" rel="noopener">Basic barplot with ggplot2</a></li><li><a href="https://stackoverflow.com/questions/32505298/explain-ggplot2-warning-removed-k-rows-containing-missing-values" target="_blank" rel="noopener">Explain ggplot2 warning: “Removed k rows containing missing values”</a></li><li><a href="https://mp.weixin.qq.com/s/rHH1-6-qdsDe_OdXCZ8Ajw" target="_blank" rel="noopener">堆叠柱状图各成分连线画法：突出展示组间物种丰度变化</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要是关于&lt;strong&gt;对R中的柱状图进行优化的过程&lt;/strong&gt;，包括&lt;strong&gt;堆叠或并列柱状图&lt;/strong&gt;、&lt;strong&gt;纵坐标表示百分比&lt;/strong&gt;、&lt;strong&gt;添加同一组分在不同分组之间的连线来显示变化&lt;/strong&gt;、&lt;strong&gt;控制坐标轴范围&lt;/strong&gt;等。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R系列之Error in eval(expr = expr) : object &#39;i&#39; not found</title>
    <link href="http://showteeth.tech/posts/36785.html"/>
    <id>http://showteeth.tech/posts/36785.html</id>
    <published>2019-11-20T13:12:39.000Z</published>
    <updated>2019-11-23T16:08:10.618Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章主要记录了在<strong>函数</strong>中使用<strong>循环变量</strong>作为<strong>公式一部分</strong>而出现的错误：<code>Error in eval(expr = expr) : object &#39;&#39;i&#39;&#39; not found&#39;</code>，并给出了解决办法。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为很早之前学习的R语言，加上使用R的频率不是很高，所以R的很多知识都已经忘记了。最近在使用R写函数的时候报错：<code>Error in eval(expr = expr) : object &#39;i&#39; not found</code>。</p><hr><h2 id="具体问题"><a href="#具体问题" class="headerlink" title="具体问题"></a>具体问题</h2><p>写了如下函数：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">get_cluster_cell_num=<span class="keyword">function</span>(seurat_obj)&#123;</span><br><span class="line">  all_clusters=unique(seurat_obj@meta.data$seurat_clusters)</span><br><span class="line">  all_identity=unique(seurat_obj@meta.data$orig.ident)</span><br><span class="line">  final_num=list()</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> all_identity)&#123;</span><br><span class="line">    clu_iden_num=c()</span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> all_clusters)&#123;</span><br><span class="line">      clu_iden=subset(seurat_obj, subset = orig.ident == i &amp;</span><br><span class="line">                        seurat_clusters == j)</span><br><span class="line">      clu_iden_num=c(clu_iden_num, dim(clu_iden)[<span class="number">2</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    final_num[[i]]=clu_iden_num</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (final_num)</span><br></pre></td></tr></table></figure><p></p><p>运行时报错：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error <span class="keyword">in</span> eval(expr = expr) : object <span class="string">'i'</span> not found</span><br></pre></td></tr></table></figure><p></p><p>经过一系列的排查，最终发现是<code>clu_iden=subset(seurat_obj, subset = orig.ident == i &amp; seurat_clusters == j)</code>命令中的<code>orig.ident == i</code>出错。</p><p>平常在函数中使用变量的时候并不会出现这种错误(所以就觉得很诡异)，在网上看了相关信息，主要是说在公式中出现变量使用时，其搜索区域是全局变量，而不是函数所在的局部变量(不会在函数的scope中进行搜索)。</p><hr><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>知道问题所在之后就非常简单了，直接将变量声明为全局变量(R中的变量一般都是全局变量，只有在函数内部出现的变量才是局部变量)即可，在函数内部声明全局变量的方法主要有两种：</p><ul><li>使用<code>&lt;&lt;-</code>替换原本的<code>&lt;-</code></li><li>使用<code>assign</code>：<code>Assign a value to a name in an environment</code>，例如<code>assign(&quot;get_cluster_cell_num_i&quot;,i, envir = .GlobalEnv)</code>就是将<code>i</code>的值传递给全局变量(<code>.GlobalEnv</code>)中的<code>get_cluster_cell_num_i</code>。</li></ul><p>这里主要使用的是<code>assign</code>的方式：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">get_cluster_cell_num=<span class="keyword">function</span>(seurat_obj)&#123;</span><br><span class="line">  all_clusters=unique(seurat_obj@meta.data$seurat_clusters)</span><br><span class="line">  all_identity=unique(seurat_obj@meta.data$orig.ident)</span><br><span class="line">  final_num=list()</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> all_identity)&#123;</span><br><span class="line">    assign(<span class="string">"get_cluster_cell_num_i"</span>,i, envir = .GlobalEnv)</span><br><span class="line">    clu_iden_num=c()</span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> all_clusters)&#123;</span><br><span class="line">      assign(<span class="string">"get_cluster_cell_num_j"</span>,j,  envir = .GlobalEnv)</span><br><span class="line">      clu_iden=subset(seurat_obj, subset = orig.ident == get_cluster_cell_num_i &amp;</span><br><span class="line">                        seurat_clusters == get_cluster_cell_num_j)</span><br><span class="line">      clu_iden_num=c(clu_iden_num, dim(clu_iden)[<span class="number">2</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    final_num[[i]]=clu_iden_num</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (final_num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/32474238/error-running-a-function-error-in-evalexpr-envir-enclos-object-not-found" target="_blank" rel="noopener">Error running a function: Error in eval(expr, envir, enclos) : object not found</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章主要记录了在&lt;strong&gt;函数&lt;/strong&gt;中使用&lt;strong&gt;循环变量&lt;/strong&gt;作为&lt;strong&gt;公式一部分&lt;/strong&gt;而出现的错误：&lt;code&gt;Error in eval(expr = expr) : object &amp;#39;&amp;#39;i&amp;#39;&amp;#39; not found&amp;#39;&lt;/code&gt;，并给出了解决办法。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="常见错误" scheme="http://showteeth.tech/categories/R/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    
    
      <category term="常见错误" scheme="http://showteeth.tech/tags/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>Linux系列之产生随机数和随机选取值</title>
    <link href="http://showteeth.tech/posts/10464.html"/>
    <id>http://showteeth.tech/posts/10464.html</id>
    <published>2019-11-13T07:46:10.000Z</published>
    <updated>2019-11-14T16:11:56.491Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章依据实际问题：<strong>从数组中随机选取元素</strong>，主要学习了三种获取方法：<code>$RANDOM</code>内建函数、<code>seq + sort</code>、<code>shuf</code>。其中<code>$RANDOM</code>内建函数<strong>可控性更强(指定范围的同时要求实现整除)</strong>，而如果<strong>只想得到指定范围内的随机数使用三个命令都差不多</strong>，可能<code>shuf</code>命令还更简单一些。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在使用<code>SGE</code>任务管理系统时想要实现从指定的几个<code>node</code>中选取任意一个进行任务的提交。</p><hr><h2 id="RANDOM-产生随机整数"><a href="#RANDOM-产生随机整数" class="headerlink" title="$RANDOM-产生随机整数"></a>$RANDOM-产生随机整数</h2><p><code>$RANDOM</code>是<code>Bash</code>的一个返回伪随机<strong>整数</strong>(范围为<code>0 - 32767</code>)的<strong>内部函数(而不是一个常量或变量)</strong>，它不应该用于产生加密的密钥。注意这的随机数被称为的<strong>伪随机数</strong>是因为真正的随机事件(在它存在的范围内)，只发生在特定的几个未知的自然界现象中，比如放射性衰变，<strong>计算机只能产生模拟的随机事件</strong>。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每次使用都会输出不同的数值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span></span><br><span class="line">  30602</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span></span><br><span class="line">  10817</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不能使用RANDOM作为变量名</span></span><br><span class="line">RANDOM=10</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span></span><br><span class="line">  4230</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span></span><br><span class="line">  19819</span><br><span class="line"><span class="comment"># 但是这种可以作为seed进行设置</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">RANDOM=10</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;RANDOM&#125;</span></span><br><span class="line">  4230</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>注意：</p><ul><li><strong>不能使用<code>RANDOM</code>作为变量名，不然调用该变量的时候不会得到预期的值(如上示例)</strong></li><li><strong>虽然不能用作变量，但是可以作为生成伪随机数的seed(相同的seed会得到相同的伪随机数输出)</strong></li></ul></div><hr><h3 id="生成指定范围的随机整数"><a href="#生成指定范围的随机整数" class="headerlink" title="生成指定范围的随机整数"></a>生成指定范围的随机整数</h3><ul><li><p>产生<code>0-9</code>范围<code>[0-10)</code>内的<strong>随机整数</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用$(( ))计算</span></span><br><span class="line"><span class="built_in">echo</span> $(( <span class="variable">$RANDOM</span> % 10 ))</span><br><span class="line"><span class="comment"># 也可以使用如下方式</span></span><br><span class="line">expr <span class="variable">$RANDOM</span> % 10 + 1</span><br><span class="line">  0</span><br></pre></td></tr></table></figure></li><li><p>产生<code>1-10</code>范围<code>[1-10]</code>内的<strong>随机整数</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(( <span class="variable">$RANDOM</span> % 10 + 1 ))</span><br><span class="line">  1</span><br></pre></td></tr></table></figure></li><li><p>产生<code>start-end</code>范围<code>[start-end]</code>内的<strong>随机整数</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(( <span class="variable">$RANDOM</span> % (<span class="variable">$end</span> - <span class="variable">$beg</span>) + <span class="variable">$beg</span> ))</span><br></pre></td></tr></table></figure></li><li><p>产生在 <strong>6 - 30 之间的随机数</strong>，并且随机数还<strong>同时要满足被3整除</strong>，更加<strong>完善和复杂</strong>的程序可以看<a href="http://shouce.jb51.net/shell/randomvar.html" target="_blank" rel="noopener">这篇文章</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $(( <span class="variable">$RANDOM</span> % 27/3*3+6 ))</span><br><span class="line"><span class="comment"># 总结的规律，注意这个只适用于min、max是divisibleBy的倍数</span></span><br><span class="line"><span class="comment"># 比如3、30这种，不能是2这种</span></span><br><span class="line">$(( ( <span class="variable">$RANDOM</span> %(max-min+divisibleBy) )/divisibleBy*divisibleBy+min ))</span><br></pre></td></tr></table></figure></li></ul><div class="note info"><p>注意：</p><ul><li><code>%</code>实际上是一个<strong>取模的操作</strong>、<code>$(( ))</code>则是和<code>declare</code>一样是进行<strong>整数运算</strong>的<a href="http://showteeth.tech/posts/55603.html">特殊符号</a></li></ul></div><hr><h2 id="从数组中随机获取元素"><a href="#从数组中随机获取元素" class="headerlink" title="从数组中随机获取元素"></a>从数组中随机获取元素</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">array[0]=<span class="string">"file1.sdf"</span></span><br><span class="line">array[1]=<span class="string">"file2.sdf"</span></span><br><span class="line">array[2]=<span class="string">"file3.sdf"</span></span><br><span class="line">array[3]=<span class="string">"file4.sdf"</span></span><br><span class="line"><span class="comment"># 从上述四个中随机选择一个</span></span><br><span class="line">size=<span class="variable">$&#123;#array[@]&#125;</span></span><br><span class="line">index=$(( <span class="variable">$RANDOM</span> % <span class="variable">$size</span> ))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[$index]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组下标不连续会得不到想要的值</span></span><br><span class="line">array[0]=<span class="string">"file1.sdf"</span></span><br><span class="line">array[1]=<span class="string">"file2.sdf"</span></span><br><span class="line">array[2]=<span class="string">"file3.sdf"</span></span><br><span class="line">array[4]=<span class="string">"file4.sdf"</span></span><br><span class="line">size=<span class="variable">$&#123;#array[@]&#125;</span>;<span class="built_in">echo</span> <span class="variable">$&#123;size&#125;</span></span><br><span class="line">  <span class="comment"># size的大小是数组中元素的个数，不是按照下标大小</span></span><br><span class="line">  4</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">index=$(( <span class="variable">$RANDOM</span> % <span class="variable">$size</span> )); <span class="built_in">echo</span> <span class="variable">$&#123;array[$index]&#125;</span></span><br><span class="line">  <span class="comment"># 可能得到空值的情况，因为随机数取到了3的时候，array中没有对应的值</span></span><br><span class="line">  <span class="comment"># 而不会得到array[4]的值</span></span><br></pre></td></tr></table></figure><div class="note info"><p>在使用上述命令对数组进行随机选取元素时需要注意：<strong>数组下标必须是连续的，如果不连续虽然不会报错，但是取不到想要的值。</strong></p></div><hr><h2 id="seq-sort得到指定范围的随机整数"><a href="#seq-sort得到指定范围的随机整数" class="headerlink" title="seq + sort得到指定范围的随机整数"></a>seq + sort得到指定范围的随机整数</h2><p>使用<code>seq+sort</code>命令的组合形式：<code>sort</code>命令有一个 <code>-R</code> 选项，可以根据随机 <code>hash</code> 排序，那么我们就可以用 <code>seq</code> 命令先生成一个整数序列，然后用 <code>sort</code> 的 <code>-R</code> 选项处理取其中一行即可。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seq 1 5 | sort -R | head -n1</span><br><span class="line">  4</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="shuf得到指定范围的随机整数"><a href="#shuf得到指定范围的随机整数" class="headerlink" title="shuf得到指定范围的随机整数"></a>shuf得到指定范围的随机整数</h2><p>之前学习的<code>shuf</code>命令是<a href="http://showteeth.tech/posts/50731.html">shuf-随机打乱文件</a>，主要强调了其打乱文件的作用，其实其还有参数可以得到随机数：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -i：在特定范围内生成随机数</span></span><br><span class="line"><span class="comment"># -n：最大输出行数</span></span><br><span class="line">shuf -i 1-5 -n1</span><br><span class="line">  1</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.tldp.org/LDP/abs/html/randomvar.html" target="_blank" rel="noopener">9.3. $RANDOM: generate random integer</a></li><li><a href="http://www.zmonster.me/2015/07/10/random-in-bash.html" target="_blank" rel="noopener">Shell 中的随机数生成方法</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章依据实际问题：&lt;strong&gt;从数组中随机选取元素&lt;/strong&gt;，主要学习了三种获取方法：&lt;code&gt;$RANDOM&lt;/code&gt;内建函数、&lt;code&gt;seq + sort&lt;/code&gt;、&lt;code&gt;shuf&lt;/code&gt;。其中&lt;code&gt;$RANDOM&lt;/code&gt;内建函数&lt;strong&gt;可控性更强(指定范围的同时要求实现整除)&lt;/strong&gt;，而如果&lt;strong&gt;只想得到指定范围内的随机数使用三个命令都差不多&lt;/strong&gt;，可能&lt;code&gt;shuf&lt;/code&gt;命令还更简单一些。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux系列之按文件类型统计空间占用</title>
    <link href="http://showteeth.tech/posts/21373.html"/>
    <id>http://showteeth.tech/posts/21373.html</id>
    <published>2019-11-09T13:45:04.000Z</published>
    <updated>2019-11-11T07:10:06.856Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章针对实际问题-<strong>按照文件类型统计空间占用</strong>进行了实例学习，主要复习巩固了<strong>通配符和正则表达式的区别</strong>、<strong>awk数组和流程控制</strong>的使用，<strong>结合find的帮助文档学习了<code>-printf</code>参数以及<code>-exec</code>参数</strong>的使用。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近想检查备份集群数据的备份情况，是不是都是只备份了某一种格式的文件，以及每种格式的文件占的空间大小，这种情况下单纯地使用du命令就不能解决问题，所以这里结合<a href="https://unix.stackexchange.com/questions/308846/how-to-find-total-filesize-grouped-by-extension" target="_blank" rel="noopener">How to find total filesize grouped by extension</a>中的高赞答案来学习一下。</p><hr><h2 id="命令和最终效果"><a href="#命令和最终效果" class="headerlink" title="命令和最终效果"></a>命令和最终效果</h2><p>命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">'?*.*'</span> -<span class="built_in">type</span> f -<span class="built_in">printf</span> <span class="string">'%b.%f\0'</span> |</span><br><span class="line">  awk -F . -v RS=<span class="string">'\0'</span> <span class="string">'</span></span><br><span class="line"><span class="string">    &#123;s[$NF] += $1; n[$NF]++&#125;</span></span><br><span class="line"><span class="string">    END &#123;for (e in s) printf "%15d %4d %s\n", s[e]*512, n[e], e&#125;'</span> |</span><br><span class="line">  sort -n</span><br></pre></td></tr></table></figure><p></p><p>最终结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">      4096    1 cron</span><br><span class="line">      4096    1 cron2</span><br><span class="line">      4096    1 h</span><br><span class="line">      4096    1 json</span><br><span class="line">      4096    1 md5</span><br><span class="line">      4096    1 r</span><br><span class="line">      4096    1 tsv</span><br><span class="line">      8192    2 bai</span><br><span class="line">      8192    2 yml</span><br><span class="line">     12288    3 yaml</span><br><span class="line">     16384    3 cpp</span><br><span class="line">     28672    1 jpeg</span><br><span class="line">     32768    1 R</span><br><span class="line">    122880   12 py</span><br><span class="line">    122880   13 snakemake</span><br><span class="line">    155648   18 md</span><br><span class="line">    155648   31 sh</span><br><span class="line">   1544192    2 ipynb</span><br><span class="line">   7966720   41 txt</span><br><span class="line">  11456512   65 png</span><br><span class="line">  11685888    1 zip</span><br><span class="line">  36081664    1 out</span><br><span class="line"> 136515584    2 <span class="built_in">log</span></span><br><span class="line"> 542244864    2 <span class="built_in">test</span></span><br><span class="line">1084489728    4 filepart</span><br><span class="line">1941045248    5 bam</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h2><h3 id="通配符和正则表达式"><a href="#通配符和正则表达式" class="headerlink" title="通配符和正则表达式"></a>通配符和正则表达式</h3><p>首先需要注意的就是<strong>通配符和正则表达式的区别和使用</strong>，具体可以参考<a href="http://showteeth.tech/posts/37480.html">Linux通配符和正则表达式及其区别</a>。在这里<strong>使用的是<code>find</code>命令，对应的使用的就是通配符，而不是正则表达式</strong>，所以<code>-name &#39;?*.*&#39;</code>是正确的，<code>?</code>表示任意一个字符、<code>*</code>表示任意多个字符，而不是正则表达式中针对的是前一个字符的数目。</p><hr><h3 id="find的参数-printf"><a href="#find的参数-printf" class="headerlink" title="find的参数-printf"></a>find的参数-printf</h3><p>注意这里写的是<strong>find的参数-printf，而不是printf在find中的应用，两者有着本质的区别</strong>，前者说明这里的-printf是具有单独的用法的，而后者则说明是linux中格式化输出的语法使用。这也就涉及到其中<code>%s</code>、<code>%f</code>的用法不同了，在<a href="http://showteeth.tech/posts/47162.html">printf用法中</a>，<code>%f</code>表示浮点格式输出、<code>%b</code>表示开启转义模式(转义字符会被转义).</p><p>而在参数<code>-printf</code>用法中：</p><ul><li><code>%b</code>表示The amount of disk space used for this file in <strong>512-byte blocks</strong>. Since disk space is allocated in multiples of the filesystem block size, this is <strong>usually greater than %s/512, but it can also be smaller if the file is a sparse file.</strong></li><li><code>%f</code>表示仅输出文件名称。<strong>File’s name with any leading directories removed (only the last element).</strong></li></ul><p><mark>果然还是命令的帮助文档是最全面的！！！</mark></p><hr><h3 id="find命令的输出"><a href="#find命令的输出" class="headerlink" title="find命令的输出"></a>find命令的输出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">'?*.*'</span> -<span class="built_in">type</span> f -<span class="built_in">printf</span> <span class="string">'%b.%f\0'</span></span><br><span class="line">  8.test1.txt8.test2.txt8.test3.txt8.test4.txt8.test5.txt16.test.txt16.merged.txt8.server.log8.test1.txt8.test2.txt8.test.txt8.shuf.txt8.test1.txt8.test2.txt8.test.sh8.test_t.sh8.test_s.sh8.n.sh8.u_1.sh8.u_2.sh8.u_3.sh8.test.txt8.u_4.sh8.i.sh8.test_2.sh8.a.sh8.d.sh8.e.sh8.test.txt8.test.txt529536.B2_FKDL190733335-1a-N702-N702_AHYYWCCCXY_L3_1.fq.gz.filepart8.test2.txt8.test.sh70472.nohup.out266624.test.log529536.B2_FKDL190733335-1a-N702-N702_AHYYWCCCXY_L3_1.fq.gz.filepart</span><br></pre></td></tr></table></figure><hr><h3 id="输出文件大小、文件数目、文件后缀"><a href="#输出文件大小、文件数目、文件后缀" class="headerlink" title="输出文件大小、文件数目、文件后缀"></a>输出文件大小、文件数目、文件后缀</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用awk的数组</span></span><br><span class="line"><span class="comment"># 将512-byte block转化为了4096-byte block的大小</span></span><br><span class="line"><span class="comment"># 控制了输出的位数15、4</span></span><br><span class="line">find . -name <span class="string">'?*.*'</span> -<span class="built_in">type</span> f -<span class="built_in">printf</span> <span class="string">'%b.%f\0'</span> |</span><br><span class="line">  awk -F . -v RS=<span class="string">'\0'</span> <span class="string">'</span></span><br><span class="line"><span class="string">    &#123;s[$NF] += $1; n[$NF]++&#125;</span></span><br><span class="line"><span class="string">    END &#123;for (e in s) printf "%15d %4d %s\n", s[e]*512, n[e], e&#125;'</span> |</span><br><span class="line">  sort -n</span><br></pre></td></tr></table></figure><hr><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>需要改进的地方是不能转化为<code>K</code>、<code>M</code>、<code>G</code>、<code>T</code>这种形式，这里尝试改进一下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">'?*.*'</span> -<span class="built_in">type</span> f -<span class="built_in">printf</span> <span class="string">'%b.%f\0'</span> |</span><br><span class="line">  awk -F . -v RS=<span class="string">'\0'</span> <span class="string">'</span></span><br><span class="line"><span class="string">    &#123;s[$NF] += $1; n[$NF]++&#125;</span></span><br><span class="line"><span class="string">    END &#123;</span></span><br><span class="line"><span class="string">      for (e in s)</span></span><br><span class="line"><span class="string">        if(int(s[e]*512/1024/1024/1024/1024) &gt; 0)&#123;printf "%8.2fT %6d %s\n", s[e]*512/1024/1024/1024/1024, n[e], e&#125;</span></span><br><span class="line"><span class="string">        else if(int(s[e]*512/1024/1024/1024) &gt; 0)&#123;printf "%8.2fG %6d %s\n", s[e]*512/1024/1024/1024, n[e], e&#125;</span></span><br><span class="line"><span class="string">        else if(int(s[e]*512/1024/1024) &gt; 0)&#123;printf "%8.2fM %6d %s\n", s[e]*512/1024/1024, n[e], e&#125;</span></span><br><span class="line"><span class="string">        else if(int(s[e]*512/1024) &gt; 0)&#123;printf "%8.2fK %6d %s\n", s[e]*512/1024, n[e], e&#125;</span></span><br><span class="line"><span class="string">        else &#123;printf "%8fB %6d %s\n", s[e]*512, n[e], e&#125;</span></span><br><span class="line"><span class="string">        &#125;'</span> |</span><br><span class="line">  sort -hr</span><br></pre></td></tr></table></figure><p></p><p>效果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  1.81G      5 bam</span><br><span class="line">  1.01G      4 filepart</span><br><span class="line">517.12M      2 <span class="built_in">test</span></span><br><span class="line">130.19M      2 <span class="built_in">log</span></span><br><span class="line"> 34.41M      1 out</span><br><span class="line"> 11.14M      1 zip</span><br><span class="line"> 10.93M     65 png</span><br><span class="line">  7.60M     41 txt</span><br><span class="line">  1.47M      2 ipynb</span><br><span class="line">152.00K     31 sh</span><br><span class="line">152.00K     18 md</span><br><span class="line">120.00K     13 snakemake</span><br><span class="line">120.00K     12 py</span><br><span class="line"> 32.00K      1 R</span><br><span class="line"> 28.00K      1 jpeg</span><br><span class="line"> 16.00K      3 cpp</span><br><span class="line"> 12.00K      3 yaml</span><br><span class="line">  8.00K      2 yml</span><br><span class="line">  8.00K      2 bai</span><br><span class="line">  4.00K      1 tsv</span><br><span class="line">  4.00K      1 r</span><br><span class="line">  4.00K      1 md5</span><br><span class="line">  4.00K      1 json</span><br><span class="line">  4.00K      1 h</span><br><span class="line">  4.00K      1 cron2</span><br><span class="line">  4.00K      1 cron</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="只统计某个后缀文件大小"><a href="#只统计某个后缀文件大小" class="headerlink" title="只统计某个后缀文件大小"></a>只统计某个后缀文件大小</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -name使用了通配符指定</span></span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">'*.bam'</span> -<span class="built_in">exec</span> du -ch &#123;&#125; +</span><br><span class="line">  717M./linux_learn/scp/LJ_mt_677_1_paired.bam</span><br><span class="line">  717M./linux_learn/pv/LJ_mt_677_1_paired.bam</span><br><span class="line">  210M./python_learn/pysam/chrM_no_gap.bam</span><br><span class="line">  209M./python_learn/pysam/chrM_no_gap_mapped.bam</span><br><span class="line">  8.0K./python_learn/pysam/with_gap.bam</span><br><span class="line">  1.9Gtotal</span><br></pre></td></tr></table></figure><p>需要注意的是这里的<code>-exec</code>参数的<code>+</code>，之前只知道<code>\;</code>，看了帮助文档才知道原来配合<code>-exec</code>参数使用的有<strong>两种模式</strong>：</p><ul><li><code>-exec command ;</code>：Execute command; true if 0 status is returned. <strong>All following arguments to find are taken to be arguments to the command until an argument consisting of ‘;’is encountered</strong>. The string ‘{}’ is replaced by the current file name being processed everywhere it occurs in the arguments to the command, not just in arguments where it is alone, as in some versions of find. <strong>Both of these constructions might need to be escaped (with a ‘\’) or quoted to protect them from expansion by the shell</strong>. The specified command is run once for each matched file. The command is executed in the starting directory. There are unavoidable security problems surrounding use of the -exec action; you should use the -execdir option instead.</li><li><code>-exec command {} +</code>：This variant of the -exec action runs the specified command on the selected files, <strong>but the command line is built by appending each selected file name at the end</strong>; <strong>the total number of invocations of the command will be much less than the number of matched files</strong>. The command line is built in much the same way that <code>xargs</code> builds its command lines. <strong>Only one instance of ‘{}’ is allowed within the command</strong>. The command is executed in the starting directory.</li><li><code>-execdir command ;</code>、<code>-execdir command {} +</code>：Like -exec, but <strong>the specified command is run from the subdirectory containing the matched file, which is not normally the directory in which you started find</strong>. This a much more secure method for invoking commands, as it avoids race conditions during resolution of the paths to the matched files. As with the -exec action, the ‘+’ form of -execdir will build a command line to process more than one matched file, but any given invocation of command will only list files that exist in the same subdirectory. If you use this option, you must ensure that your $PATH environment variable does not reference ‘.’; otherwise, an attacker can run any commands they like by leaving an appropriately-named file in a directory in which you will run -execdir. The same applies to having entries in $PATH which are empty or which are not absolute directory names.</li></ul><div class="note info"><p><code>-exec</code>后面的<code>command</code>可以是脚本：<code>find ./ -name &quot;*fastq&quot; -type d -exec bash rename_with_folder.sh {} \;</code></p></div><p><strong>使用上面的统计指定后缀文件大小的实例来巩固一下上面的内容</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追加模式，也就是先把所有的文件找到，然后调用du命令一次</span></span><br><span class="line"><span class="comment"># 所以只会出现一个total</span></span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">'*.bam'</span> -<span class="built_in">exec</span> du -ch &#123;&#125; +</span><br><span class="line">  717M./linux_learn/scp/LJ_mt_677_1_paired.bam</span><br><span class="line">  717M./linux_learn/pv/LJ_mt_677_1_paired.bam</span><br><span class="line">  210M./python_learn/pysam/chrM_no_gap.bam</span><br><span class="line">  209M./python_learn/pysam/chrM_no_gap_mapped.bam</span><br><span class="line">  8.0K./python_learn/pysam/with_gap.bam</span><br><span class="line">  1.9Gtotal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常规模式</span></span><br><span class="line"><span class="comment"># 每次找到一个后缀为bam的文件就统计其大小</span></span><br><span class="line"><span class="comment"># 所以每个文件对应于一个大小，同时并没有显示总大小</span></span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">'*.bam'</span> -<span class="built_in">exec</span> du -ch &#123;&#125; \;</span><br><span class="line">  717M./linux_learn/scp/LJ_mt_677_1_paired.bam</span><br><span class="line">  717Mtotal</span><br><span class="line">  717M./linux_learn/pv/LJ_mt_677_1_paired.bam</span><br><span class="line">  717Mtotal</span><br><span class="line">  210M./python_learn/pysam/chrM_no_gap.bam</span><br><span class="line">  210Mtotal</span><br><span class="line">  209M./python_learn/pysam/chrM_no_gap_mapped.bam</span><br><span class="line">  209Mtotal</span><br><span class="line">  8.0K./python_learn/pysam/with_gap.bam</span><br><span class="line">  8.0Ktotal</span><br></pre></td></tr></table></figure><p></p><p>为什么需要使用<code>\;</code>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 防止被解释为shell脚本的标点符号</span></span><br><span class="line"><span class="comment"># 不仅;需要加上\或者单引号来进行保护，&#123;&#125;也可以加上单引号</span></span><br><span class="line"><span class="comment"># Runs 'file' on every file in or below the current directory.  </span></span><br><span class="line"><span class="comment"># Notice that the braces are enclosed in single quote </span></span><br><span class="line"><span class="comment"># marks to protect them from interpretation as shell script punctuation.  </span></span><br><span class="line"><span class="comment"># The semicolon is similarly protected by the use of a backslash, </span></span><br><span class="line"><span class="comment"># though single quotes could have been used in that case also.</span></span><br><span class="line">find . -<span class="built_in">type</span> f -<span class="built_in">exec</span> file <span class="string">'&#123;&#125;'</span> \;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://unix.stackexchange.com/questions/308846/how-to-find-total-filesize-grouped-by-extension" target="_blank" rel="noopener">How to find total filesize grouped by extension</a></li><li><a href="https://stackoverflow.com/questions/34971106/print-total-of-du-for-one-filetype-directory-is-not-flat" target="_blank" rel="noopener">print total of ‘du’ for one filetype, directory is not flat</a></li><li><a href="https://unix.stackexchange.com/questions/41550/find-the-total-size-of-certain-files-within-a-directory-branch" target="_blank" rel="noopener">Find the total size of certain files within a directory branch</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章针对实际问题-&lt;strong&gt;按照文件类型统计空间占用&lt;/strong&gt;进行了实例学习，主要复习巩固了&lt;strong&gt;通配符和正则表达式的区别&lt;/strong&gt;、&lt;strong&gt;awk数组和流程控制&lt;/strong&gt;的使用，&lt;strong&gt;结合find的帮助文档学习了&lt;code&gt;-printf&lt;/code&gt;参数以及&lt;code&gt;-exec&lt;/code&gt;参数&lt;/strong&gt;的使用。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux系列之没有root权限安装gcc</title>
    <link href="http://showteeth.tech/posts/53937.html"/>
    <id>http://showteeth.tech/posts/53937.html</id>
    <published>2019-11-06T03:00:52.000Z</published>
    <updated>2019-11-06T12:09:20.628Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了在<strong>没有<code>root</code>权限</strong>条件下<strong>安装(升级)<code>gcc</code></strong>的步骤。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在安装一个软件的过程中出现了如下错误：</p><blockquote><p>cc1plus: error: unrecognized command line option “-std=c++11”</p></blockquote><p>仔细一查原来是集群的<code>gcc</code>版本太低，安装这个软件需要<code>4.7.X</code>版本：</p><blockquote><p>gcc (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4)<br>Copyright (C) 2010 Free Software Foundation, Inc.<br>This is free software; see the source for copying conditions. There is NO<br>warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p></blockquote><p>但自己没有<code>root</code>权限，所以不能直接使用<code>yum</code>这种命令来升级<code>gcc</code>，这里记录一下没有<code>root</code>权限如何解决这个问题。</p><hr><h2 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h2><h3 id="下载gcc"><a href="#下载gcc" class="headerlink" title="下载gcc"></a>下载gcc</h3><p>可以从<a href="https://gcc.gnu.org/releases.html" target="_blank" rel="noopener">这个链接</a>查看<code>gcc</code>版本混合更新时间(才发现原来已经更新到<code>9.2</code>版本了)，具体的<a href="https://ftp.gnu.org/gnu/gcc/" target="_blank" rel="noopener">下载链接</a>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载对应的gcc版本</span></span><br><span class="line">wget https://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf gcc-9.2.0.tar.gz</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><p>安装<code>gcc</code>需要先安装一些依赖的库：<code>GMP</code>、<code>MPFR</code> 和 <code>MPC</code>。安装这些依赖库可以按照常规地<a href="https://blog.csdn.net/qq_36573282/article/details/79762028" target="_blank" rel="noopener">下载源码安装</a>，但是三个包之间存在相互依赖，所以安装也有相应的顺序，而且不同的gcc版本还有不同的依赖库的版本，比较麻烦；<code>gcc</code>给出了下载这些依赖库的<a href="https://gcc.gnu.org/wiki/InstallingGCC" target="_blank" rel="noopener">简便命令</a>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="comment"># 必须要在gcc解压目录下运行，不能进入下一级目录</span></span><br><span class="line">./contrib/download_prerequisites</span><br><span class="line">  <span class="comment"># 下载在当前目录下</span></span><br><span class="line">  2019-11-06 13:43:20 URL: ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 [2383840] -&gt; <span class="string">"./gmp-6.1.0.tar.bz2"</span> [1]</span><br><span class="line">  2019-11-06 13:44:01 URL: ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 [1279284] -&gt; <span class="string">"./mpfr-3.1.4.tar.bz2"</span> [1]</span><br><span class="line">  2019-11-06 13:44:28 URL: ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz [669925] -&gt; <span class="string">"./mpc-1.0.3.tar.gz"</span> [1]</span><br><span class="line">  2019-11-06 13:46:29 URL: ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.18.tar.bz2 [1658291] -&gt; <span class="string">"./isl-0.18.tar.bz2"</span> [2]</span><br><span class="line">  gmp-6.1.0.tar.bz2: OK</span><br><span class="line">  mpfr-3.1.4.tar.bz2: OK</span><br><span class="line">  mpc-1.0.3.tar.gz: OK</span><br><span class="line">  isl-0.18.tar.bz2: OK</span><br><span class="line">  All prerequisites downloaded successfully.</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="安装gcc-1"><a href="#安装gcc-1" class="headerlink" title="安装gcc"></a>安装gcc</h3><h4 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gcc-9.2.0/configure --prefix=`<span class="built_in">pwd</span>` --<span class="built_in">enable</span>-languages=c,c++,fortran,go</span><br></pre></td></tr></table></figure><p>出错：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误一：</span></span><br><span class="line">checking build system <span class="built_in">type</span>... config.guess: cannot create a temporary directory <span class="keyword">in</span> /800T/wangjb/tmp</span><br><span class="line">configure: error: cannot guess build <span class="built_in">type</span>; you must specify one</span><br><span class="line"><span class="comment">## 解决办法：在/800T/wangjb下创建tmp文件夹，当然也可以添加build选项(没有尝试过)</span></span><br><span class="line"><span class="comment">## 可能的原因是：在.bashrc文件中添加了export TEMP=/800T/wangjb/tmp、export TMPDIR=/800T/wangjb/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误二：</span></span><br><span class="line">configure: error: I suspect your system does not have 32-bit development libraries (libc and headers). If you have them, rerun configure with --<span class="built_in">enable</span>-multilib. If you <span class="keyword">do</span> not have them, and want to build a 64-bit-only compiler, rerun configure with --<span class="built_in">disable</span>-multilib.</span><br><span class="line"><span class="comment">## 解决办法：添加参数--disable-multilib</span></span><br></pre></td></tr></table></figure><p></p><hr><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译，开启4个线程</span></span><br><span class="line">make -j4</span><br><span class="line">  <span class="comment"># 可能出现如下warning</span></span><br><span class="line">  <span class="comment">## make[2]: warning:  Clock skew detected.  Your build may be incomplete.</span></span><br><span class="line">  <span class="comment">## make[2]: Leaving directory `/BioII/wangjb/usr/gcc/gotools'</span></span><br><span class="line">  <span class="comment">## make[1]: warning:  Clock skew detected.  Your build may be incomplete.</span></span><br><span class="line">  <span class="comment">## make[1]: Leaving directory `/BioII/wangjb/usr/gcc'</span></span><br><span class="line">  <span class="comment">## make: warning:  Clock skew detected.  Your build may be incomplete.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><hr><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>一定要确保安装路径在<code>$LD_LIBRARY_PATH</code>和<code>$PATH</code>之前，这样安装的程序才能<strong>取代之前系统默认的程序</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gcc 9.2.0</span></span><br><span class="line"><span class="built_in">export</span> PATH=/BioII/wangjb/usr/gcc/bin:/BioII/wangjb/usr/gcc/lib64:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/BioII/wangjb/usr/gcc/lib/:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="重现安装软件"><a href="#重现安装软件" class="headerlink" title="重现安装软件"></a>重现安装软件</h2><p>在安装完成<code>gcc</code>以及将其写入环境变量之后，再次安装软件即可成功安装。</p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://gcc.gnu.org/wiki/InstallingGCC" target="_blank" rel="noopener">Installing GCC</a></li><li><a href="https://gcc.gnu.org/install/configure.html" target="_blank" rel="noopener">Installing GCC: Configuration</a></li><li><a href="http://www.xieqiang.site/2017/07/31/install-gcc-5.4-without-root/" target="_blank" rel="noopener">Linux下非root用户安装GCC 5.4</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了在&lt;strong&gt;没有&lt;code&gt;root&lt;/code&gt;权限&lt;/strong&gt;条件下&lt;strong&gt;安装(升级)&lt;code&gt;gcc&lt;/code&gt;&lt;/strong&gt;的步骤。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="工具" scheme="http://showteeth.tech/categories/Linux/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://showteeth.tech/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Linux系列之head命令</title>
    <link href="http://showteeth.tech/posts/35269.html"/>
    <id>http://showteeth.tech/posts/35269.html</id>
    <published>2019-10-30T15:00:42.000Z</published>
    <updated>2019-10-31T08:38:13.471Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章学习了<code>Linux</code>中常用的命令<code>head</code>，主要学习了其<strong>输出文件的前多少字节</strong>的用法；同时也了解了文件大小单位中<code>K</code>和<code>KB</code>的区别，加<code>B</code>的如<code>KB</code>是以<code>1000</code>换算的，而不加<code>B</code>的如<code>K</code>是以<code>1024</code>换算的。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>head</code>命令是日常学习和工作中很常用的一个命令，但有时候越常使用的命令越容易忽视其一些非常重要的功能，比如今天想要学习的<strong>使用<code>head</code>来获取文件的前9M信息</strong>。</p><hr><h2 id="用法和参数"><a href="#用法和参数" class="headerlink" title="用法和参数"></a>用法和参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li><code>-c, --bytes=[-][K|M|G]</code>: <strong>输出文件的前多少字节</strong>，如果前面增加了<code>-</code>表示从文档的最后获取信息。print the first K bytes of each file; with the leading ‘-‘, print all but the last K bytes of each file</li><li><code>-n, --lines=[-]K</code>: <strong>输出文件的前多少行</strong>，如果前面增加了<code>-</code>表示从文档的最后获取信息。print the first K lines instead of the first 10; with the leading ‘-‘, print all but the last K lines of each file</li><li><code>-v, --verbose</code>: <strong>输出文件名</strong>。always print headers giving file names</li><li><code>-q, --quiet, --silent</code>: <strong>不打印文件名</strong>。never print headers giving file names</li></ul><p><strong>关于单位</strong>：</p><blockquote><p>K may have a multiplier suffix: <code>b 512</code>, <code>kB 1000</code>, <code>K 1024</code>, <code>MB 1000*1000</code>, <code>M 1024*1024</code>, <code>GB 1000*1000*1000</code>, <code>G 1024*1024*1024</code>, and so on for <code>T</code>, <code>P</code>, <code>E</code>, <code>Z</code>, <code>Y</code>.</p></blockquote><hr><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常规用法</span></span><br><span class="line">head -n 5 shuf.txt </span><br><span class="line">  line1</span><br><span class="line">  line2</span><br><span class="line">  line3</span><br><span class="line">  line4</span><br><span class="line">  line5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件名称</span></span><br><span class="line">head -v -n 5 shuf.txt </span><br><span class="line">  ==&gt; shuf.txt &lt;==</span><br><span class="line">  line1</span><br><span class="line">  line2</span><br><span class="line">  line3</span><br><span class="line">  line4</span><br><span class="line">  line5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定大小的文件</span></span><br><span class="line">head -c 10M user.storage &gt; user_10M.storage</span><br><span class="line">  -rw-rw-r-- 1 root root  10M Oct 31 16:33 user_10M.storage</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://linux.die.net/man/1/head" target="_blank" rel="noopener">head(1) - Linux man page</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章学习了&lt;code&gt;Linux&lt;/code&gt;中常用的命令&lt;code&gt;head&lt;/code&gt;，主要学习了其&lt;strong&gt;输出文件的前多少字节&lt;/strong&gt;的用法；同时也了解了文件大小单位中&lt;code&gt;K&lt;/code&gt;和&lt;code&gt;KB&lt;/code&gt;的区别，加&lt;code&gt;B&lt;/code&gt;的如&lt;code&gt;KB&lt;/code&gt;是以&lt;code&gt;1000&lt;/code&gt;换算的，而不加&lt;code&gt;B&lt;/code&gt;的如&lt;code&gt;K&lt;/code&gt;是以&lt;code&gt;1024&lt;/code&gt;换算的。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用基本命令" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="常用基本命令" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>shell-字典</title>
    <link href="http://showteeth.tech/posts/17760.html"/>
    <id>http://showteeth.tech/posts/17760.html</id>
    <published>2019-10-30T13:05:11.000Z</published>
    <updated>2019-10-30T15:08:25.002Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章对<code>Shell</code>中的<strong>字典(关联数组)</strong>进行了学习，主要包括<strong>字典的创建</strong>和<strong>字典的常用操作</strong>，其实<strong>字典的常用操作和数组基本相同</strong>，但<strong>字典可以使用字符串(key)作为索引来直接获取value</strong>，提高了效率。</p></div><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天在写脚本的时候忽然发现<code>shell</code>可以支持<strong>字典(hash)</strong>操作了，不过好像只有<code>bash 4.X</code>的版本可以使用，还好自己平常使用的集群的<code>bash</code>都是<code>4.X</code>的，这里记录一下使用过程。</p><p>实际上这里所谓的字典其实是数组的一种，叫做<strong>关联数组(associative array)</strong>，我之所以将其称为字典(后续我都会称其为字典)是因为<strong>其和字典的用法基本一致</strong>，都是键值对的形式。</p><blockquote><p>Bash provides <code>one-dimensional</code> indexed and <code>associative array</code> variables.<br>Associative arrays are created using <code>declare -A</code> name.</p></blockquote><p>关于数组的使用可以回顾<a href="http://showteeth.tech/posts/46714.html">这个文章</a>。</p><hr><h2 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明一个名为color的字典</span></span><br><span class="line"><span class="comment"># 必须用-A才能创建关联数组(字典)，-a创建的是一般的数组</span></span><br><span class="line"><span class="built_in">declare</span> -A color</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值操作</span></span><br><span class="line"><span class="comment">## 赋值方式一：</span></span><br><span class="line">color[<span class="string">"red"</span>]=<span class="string">"#ff0000"</span></span><br><span class="line">color[<span class="string">"green"</span>]=<span class="string">"#00ff00"</span></span><br><span class="line">color[<span class="string">"blue"</span>]=<span class="string">"#0000ff"</span></span><br><span class="line"><span class="comment">## 赋值方式二：</span></span><br><span class="line"><span class="comment">### 注意这里不需要在每个键值对后面添加,分割</span></span><br><span class="line">color=(</span><br><span class="line">  [<span class="string">"red"</span>]=<span class="string">"#ff0000"</span></span><br><span class="line">  [<span class="string">"green"</span>]=<span class="string">"#00ff00"</span></span><br><span class="line">  [<span class="string">"blue"</span>]=<span class="string">"#0000ff"</span></span><br><span class="line">  )</span><br><span class="line"><span class="comment">## 赋值方式三(声明的同时赋值)：</span></span><br><span class="line"><span class="built_in">declare</span> -A color=([<span class="string">"red"</span>]=<span class="string">"#ff0000"</span> [<span class="string">"green"</span>]=<span class="string">"#00ff00"</span> [<span class="string">"blue"</span>]=<span class="string">"#0000ff"</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="字典常见操作"><a href="#字典常见操作" class="headerlink" title="字典常见操作"></a>字典常见操作</h2><p>使用字典的初衷就是其访问值更加方便，可以直接<strong>通过键值去取对应的value</strong>，而<strong>不需要像传统数组一样去使用索引</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;color["blue"]&#125;</span></span><br><span class="line">  <span class="comment">#0000ff</span></span><br></pre></td></tr></table></figure><p></p><p><mark>如果键值key在字典中不存在，那么获取的返回值就是空值。</mark></p><p>只需要<strong>将这些的key值理解为传统数组中的索引</strong>，那么数组的使用就会方便许多：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数组所有元素，这个和传统数组基本相同</span></span><br><span class="line"><span class="comment"># 也可以使用 echo $&#123;color[@]&#125;</span></span><br><span class="line"><span class="comment"># 关于@和*之间的区别也是一样的</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;color[*]&#125;</span></span><br><span class="line">  <span class="comment">#ff0000 #0000ff #00ff00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到数组所有的key值---对应于常规数组中的下标值</span></span><br><span class="line"><span class="comment"># 也可以使用 echo $&#123;!color[@]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!color[*]&#125;</span>  </span><br><span class="line">  red blue green</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典长度</span></span><br><span class="line"><span class="comment"># 也可以使用 echo $&#123;#color[*]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#color[@]&#125;</span></span><br><span class="line">  3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取value值的长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#color["red"]&#125;</span></span><br><span class="line">  7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">color[<span class="string">"white"</span>]=<span class="string">"#ffffff"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!color[*]&#125;</span></span><br><span class="line">  red blue white green</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时添加多个元素</span></span><br><span class="line"><span class="comment"># dic+=( ["key2"]=val2 ["key3"]=val3 )</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!color[@]&#125;</span></span><br><span class="line">  red blue white green</span><br><span class="line">color+=([<span class="string">"black"</span>]=<span class="string">"#000000"</span></span><br><span class="line">        [<span class="string">"purple"</span>]=<span class="string">"#7F00FF"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!color[@]&#125;</span></span><br><span class="line">  red blue white black green purple</span><br></pre></td></tr></table></figure><p></p><hr><p><br></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://linux.die.net/man/1/bash" target="_blank" rel="noopener">bash(1) - Linux man page</a></li><li><a href="https://stackoverflow.com/questions/14370133/is-there-a-way-to-create-key-value-pairs-in-bash-script/23697848" target="_blank" rel="noopener">Is there a way to create key-value pairs in Bash script?</a></li><li><a href="https://stackoverflow.com/questions/1494178/how-to-define-hash-tables-in-bash" target="_blank" rel="noopener">How to define hash tables in Bash?</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章对&lt;code&gt;Shell&lt;/code&gt;中的&lt;strong&gt;字典(关联数组)&lt;/strong&gt;进行了学习，主要包括&lt;strong&gt;字典的创建&lt;/strong&gt;和&lt;strong&gt;字典的常用操作&lt;/strong&gt;，其实&lt;strong&gt;字典的常用操作和数组基本相同&lt;/strong&gt;，但&lt;strong&gt;字典可以使用字符串(key)作为索引来直接获取value&lt;/strong&gt;，提高了效率。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="shell编程" scheme="http://showteeth.tech/categories/Linux/shell%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="shell编程" scheme="http://showteeth.tech/tags/shell%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux系列之定时执行任务发送邮件</title>
    <link href="http://showteeth.tech/posts/6366.html"/>
    <id>http://showteeth.tech/posts/6366.html</id>
    <published>2019-10-29T09:16:58.000Z</published>
    <updated>2019-10-31T09:27:06.862Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这是一篇实战的文章，主要目的是<strong>定期统计集群存储使用情况并通过邮箱告知用户</strong>。其中涉及到的技术点主要有：<strong>定时任务的设置</strong>、<strong>集群邮件的发送</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实验室使用了学校的一个公共集群，上面的存储空间有限，一旦存储到达90%左右就不能继续运行任务，所以需要定期检查集群存储的使用情况，但是人工每次check很容易忘记，所以就想能不能使用定期检测的方式。总结来说，我的需求有两个：</p><ul><li>定期检测集群存储—<strong>定期执行任务</strong></li><li>给所有用户发邮件提醒各自账户的使用情况—<strong>发送邮件</strong></li></ul><hr><p><br></p><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><h3 id="crontab简介"><a href="#crontab简介" class="headerlink" title="crontab简介"></a>crontab简介</h3><p><code>cron</code>是<code>Unix</code>、<code>Solaris</code>、<code>Linux</code>等系统下的可以<strong>自动在后台执行定时任务的工具</strong>，比如在某一天9点提醒你开会，某一天6点去给女票买礼物等等，这是由<strong>cron守护进程定期执行</strong>的。如果启用了 <code>cron</code>(一般默认启用), <code>cron</code> 守护进程会在系统启动后自动启动，并按时执行任务。 <code>cron</code>也能手动启用、关闭、重启等。</p><p><code>crontab(cron table)</code>是<code>cron</code>的<strong>任务库</strong>文件，它存储了<code>cron</code>要执行的计划任务项目。不同系统下该文件的位置可能不同，<code>centos</code>下是在<code>/var/spool/cron/</code>目录下，但是需要<code>root</code>权限才能访问。</p><p><code>crontab</code>也是一个<strong>命令</strong>，其用来<strong>创建、删除、查看当前用户（或者指定用户）的crontab文件</strong>。</p><hr><h3 id="crontab命令"><a href="#crontab命令" class="headerlink" title="crontab命令"></a>crontab命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line"> crontab [options] file</span><br><span class="line"> crontab [options]</span><br><span class="line"> crontab -n [hostname]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -u &lt;user&gt;  define user</span><br><span class="line"> -e         edit user<span class="string">'s crontab</span></span><br><span class="line"><span class="string"> -l         list user'</span>s crontab</span><br><span class="line"> -r         delete user<span class="string">'s crontab</span></span><br><span class="line"><span class="string"> -i         prompt before deleting</span></span><br><span class="line"><span class="string"> -n &lt;host&gt;  set host in cluster to run users'</span> crontabs</span><br><span class="line"> -c         get host <span class="keyword">in</span> cluster to run users<span class="string">' crontabs</span></span><br><span class="line"><span class="string"> -s         selinux context</span></span><br><span class="line"><span class="string"> -x &lt;mask&gt;  enable debugging</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Default operation is replace, per 1003.2</span></span><br></pre></td></tr></table></figure><p>常用参数说明：</p><ul><li><code>file</code>：<code>file</code>是命令文件的名字,表示<strong>将<code>file</code>做为<code>crontab</code>的任务列表文件并载入<code>crontab</code></strong>。如果在命令行中没有指定这个文件，<code>crontab</code>命令将接受标准输入（键盘）上键入的命令，并将它们载入<code>crontab</code>。</li><li><code>-u</code>: 指定 <code>crontab</code> 的用户名, 此选项<strong>只能 <code>root</code>使用</strong></li><li><code>-e</code>: 编辑 <code>crontab</code> 文件，如果没有，会新建一个</li><li><code>-l</code>: 打印出 <code>crontab</code> 文件内容，列出计划任务</li><li><code>-r</code>: 移除 <code>crontab</code> 文件</li><li><code>-c</code>: 获取用户在集群上的 <code>crontabs</code></li></ul><hr><h3 id="crontab文件格式和定时规则"><a href="#crontab文件格式和定时规则" class="headerlink" title="crontab文件格式和定时规则"></a>crontab文件格式和定时规则</h3><p><code>crontab</code> 文件的格式可以查看<code>/etc/crontab</code>文件(也可以直接在其中添加命令作为系统的routine)：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用的shell</span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line"><span class="comment"># 命令的查找路径，也就是环境变量</span></span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"><span class="comment"># 如果出现错误，或者有数据输出，数据作为邮件发给这个帐号</span></span><br><span class="line">MAILTO=root</span><br><span class="line"><span class="comment"># 使用者运行的路径,这里默认是根目录</span></span><br><span class="line">HOME=/</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name command to be executed</span></span><br></pre></td></tr></table></figure><p></p><p>可以发现其主要有<strong>六个字段</strong>，具体来说就是：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个字段之间使用空格分隔</span></span><br><span class="line">&#123;minute&#125; &#123;hour&#125; &#123;day-of-month&#125; &#123;month&#125; &#123;day-of-week&#125; &#123;full-path-to-shell-script&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中每个字段的具体说明：</p><ul><li><code>minute</code>：区间为<code>0–59</code>；</li><li><code>hour</code>：区间为<code>0–23</code>；</li><li><code>day-of-month</code>：区间为<code>0–31</code>；</li><li><code>month</code>：区间为<code>1–12</code>；1是1月，12是12月；</li><li><code>day-of-week</code>：区间为<code>0–6</code>，<strong>周日是0</strong>，这个不会影响到前面的<code>day-of-month</code>、<code>month</code></li></ul><p>除了数字还有以下<strong>几个特殊的符号</strong>需要特殊说明：</p><ul><li><code>*</code>：代表<strong>所有的取值范围内的数字，也就是任意数字</strong>；</li><li><code>/</code>：代表<strong>每</strong>的意思，<strong>”*/5″表示每5个单位</strong>；</li><li><code>-</code>：代表<strong>从某个数字到某个数字</strong>，<code>0 10-20 * * * command</code> 表示在每天 <code>10:00</code> 到 <code>20:00</code> 执行任务</li><li><code>,</code>：分开<strong>几个离散的数字</strong>，<code>0 3,6 * * * command</code> 表示在每天 <code>3:00</code>、<code>6:00</code> 执行任务</li></ul><hr><h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><h4 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h4><ul><li>第一步：进入<code>crontab</code>编辑模式：输入命令<code>crontab -e</code>，默认就是<code>vim</code>的编辑环境</li><li>第二步：编写定期规则，可以是<code>58 * * * * echo &quot;Good morning.&quot; &gt;/home/log.log</code>表示<strong>每小时的58分</strong>输出一次<code>Good morning.</code>到文件<code>/home/log.log</code>中</li><li>第三步：退出<code>vim</code>编辑环境，会显示<code>crontab: installing new crontab</code>，这时会在<code>/var/spool/cron</code>中生成对应用户名的文件，用于保存这个定时规则。需要注意的是<strong>每次重新执行<code>crontab -e</code>打开的都是同一个文件，不同的定时任务可以叠加处理</strong>。</li></ul><hr><h4 id="自定义文件"><a href="#自定义文件" class="headerlink" title="自定义文件"></a>自定义文件</h4><p>除了上述直接在编辑模式中编辑之外，还可以自定义文件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑文件</span></span><br><span class="line">vim test.cron</span><br><span class="line">  58 * * * * <span class="built_in">echo</span> <span class="string">"Good morning."</span> &gt;/home/log2.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加定时任务</span></span><br><span class="line"><span class="comment">## crontab 刚刚新建的任务名</span></span><br><span class="line">crontab test.cron </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看定时任务是否成功或者检测/var/spool/cron下是否生成对应cron脚本</span></span><br><span class="line">crontab -l</span><br><span class="line">  58 * * * * <span class="built_in">echo</span> <span class="string">"Good morning."</span> &gt;/home/log2.log</span><br></pre></td></tr></table></figure><p></p><p><mark>需要注意的是：这里如果先后编辑两个文件，然后执行<code>crontab 文件名</code>，那么就会进行覆盖，也就是说最后执行的是最后一次编辑的内容。</mark></p><hr><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>有时我们创建了一个<code>crontab</code>，但是这个任务却<strong>无法自动执行</strong>，而<strong>手动执行这个任务却没有问题</strong>，这种情况<strong>一般是由于在<code>crontab</code>文件中没有配置环境变量引起的</strong>。</p><p>在<code>crontab</code>文件中定义多个调度任务时，需要特别注环境变量的设置，<strong>因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量</strong>，而<strong>系统自动执行任务调度时，是不会加载任何环境变量的</strong>，因此，就需要在<code>crontab</code>文件中<strong>指定任务运行所需的所有环境变量</strong>，这样，系统执行任务调度时就没有问题了。</p><p>不要假定<code>cron</code>知道所需要的特殊环境，它其实并不知道。所以你要保证在<code>shell</code>脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。</p><hr><h4 id="关闭邮件通知"><a href="#关闭邮件通知" class="headerlink" title="关闭邮件通知"></a>关闭邮件通知</h4><p><code>cron</code>默认会在执行一个<code>cronjob</code>后发送一封邮件的，如果执行任务勤了，会产生大量的邮件，为了避免这种情况，可以将输出重定向到一个日志文件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &gt;/home/log2.log</span></span><br><span class="line">58 * * * * <span class="built_in">echo</span> <span class="string">"Good morning."</span> &gt;/home/log2.log</span><br></pre></td></tr></table></figure><p></p><hr><h4 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每1分钟执行一次myCommand</span></span><br><span class="line">* * * * * myCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每天早上6点执行一次myCommand</span></span><br><span class="line">0 6 * * * myCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每两个小时执行一次myCommand</span></span><br><span class="line">0 */2 * * * myCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔两天的上午8点到11点的第3和第15分钟执行一次myCommand</span></span><br><span class="line">3,15 8-11 */2 * * myCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每周一上午8点到11点的第3和第15分钟执行一次myCommand</span></span><br><span class="line">3,15 8-11 * * 1 myCommand</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定使用的shell</span></span><br><span class="line">0 1 30 * * /bin/sh command.sh</span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.jellythink.com/archives/155" target="_blank" rel="noopener">Linux定时执行任务Crontab</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html" target="_blank" rel="noopener">crontab 定时任务</a></li><li><a href="https://amito.me/2018/Using-Crontab-in-Linux/" target="_blank" rel="noopener">在 Linux 中使用 Cron 执行定时任务</a></li></ul><hr><p><br></p><h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><h3 id="安装mailx"><a href="#安装mailx" class="headerlink" title="安装mailx"></a>安装mailx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要root权限</span></span><br><span class="line">yum install mailx</span><br></pre></td></tr></table></figure><p>安装完成测试命令却<strong>出现如下错误</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mail</span><br><span class="line">  /var/spool/mail/username: Permission denied</span><br></pre></td></tr></table></figure><p></p><p>这种情况可能就是因为当前用户<code>username</code>并没有在mail这个group中：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前用户所属组的信息</span></span><br><span class="line">groups</span><br><span class="line">  username vboxusers</span><br></pre></td></tr></table></figure><p></p><p>可以发现当前用户<code>username</code>并没有在mail这个group中，那么就直接添加即可，具体的命令可以查看<a href="http://showteeth.tech/posts/61241.html">这个链接</a>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要root权限</span></span><br><span class="line">usermod -a -G mail username</span><br></pre></td></tr></table></figure><p></p><p><strong>再次测试</strong>即可：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mail -h</span><br><span class="line">  mail: option requires an argument -- h</span><br><span class="line">  Usage: mail -eiIUdEFntBDNHRVv~ -T FILE -u USER -h hops -r address -s SUBJECT -a FILE -q FILE -f FILE -A ACCOUNT -b USERS -c USERS -S OPTION users</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="发件"><a href="#发件" class="headerlink" title="发件"></a>发件</h3><p>安装完成之后就可以进行发件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -v：显示执行过程</span></span><br><span class="line"><span class="comment"># -s：指定邮件的主题</span></span><br><span class="line">mail -v -s <span class="string">"test"</span> <span class="built_in">test</span>@163.com</span><br><span class="line">  <span class="comment"># 随意输入一段信息作为信件内容</span></span><br><span class="line">  <span class="comment"># 然后 ctrl + D 才会让新建发送出去</span></span><br><span class="line">  <span class="comment"># 新建发送的日志</span></span><br><span class="line">  Mail Delivery Status Report will be mailed to &lt;wangjb&gt;.</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>注意：</p><ul><li>上述命令<strong>敲入命令行之后并没有执行发件操作</strong>，而是<strong>等待输入信件内容</strong>，随意输入一段信息作为信件内容，然后 <code>ctrl + D</code> 才会让新建发送出去。</li><li>默认的发件信息是<a href="mailto:`username@loginview03.localdomain" target="_blank" rel="noopener">`username@loginview03.localdomain</a>`，其组成为：<strong>用户名@发送邮件的节点名称.localdomain</strong></li><li>发件完成之后输入<code>mail</code>命令会出现<code>You have mail in /var/spool/mail/username</code>，这个是发件的日志文件</li></ul></div><hr><h3 id="配置发件信息"><a href="#配置发件信息" class="headerlink" title="配置发件信息"></a>配置发件信息</h3><p>如果<strong>不想使用默认的邮箱作为发件信箱(可能会会很多邮箱当成是垃圾邮件)</strong>，可以对发件信息进行设置，配置文件为<code>/etc/mail.rc</code>。</p><h4 id="单个发件邮箱"><a href="#单个发件邮箱" class="headerlink" title="单个发件邮箱"></a>单个发件邮箱</h4><p><strong>配置单个邮箱时</strong>具体修改信息如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mail.rc</span><br><span class="line">  <span class="comment"># 在文件的最后添加如下命令</span></span><br><span class="line">  <span class="built_in">set</span> from=123456@qq.com</span><br><span class="line">  <span class="built_in">set</span> smtp=smtp.qq.com  </span><br><span class="line">  <span class="built_in">set</span> smtp-auth-user=123456</span><br><span class="line">  <span class="built_in">set</span> smtp-auth-password=授权码</span><br><span class="line">  <span class="built_in">set</span> smtp-auth=login</span><br></pre></td></tr></table></figure><p></p><p>发件时和前面<a href="#%e5%8f%91%e4%bb%b6">发件步骤</a>命令相同。</p><p>如果是使用<code>qq</code>邮箱，那么密码就是授权码(登录第三方客户端时，密码框请输入“授权码”进行验证)，获取方式如下：</p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/linux_mail_qq.png" alt="linux_mail_qq.png"></p><hr><h4 id="配置多个发件邮箱"><a href="#配置多个发件邮箱" class="headerlink" title="配置多个发件邮箱"></a>配置多个发件邮箱</h4><p>如果想要配置<strong>多个发件邮箱</strong>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">account qq &#123;</span><br><span class="line"><span class="built_in">set</span> from=123456@qq.com <span class="comment"># 对方收到邮件时显示的发件人</span></span><br><span class="line"><span class="built_in">set</span> smtp=smtp.qq.com <span class="comment"># 指定第三方发邮件的smtp服务器地址</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=123456 <span class="comment"># 第三方发邮件的用户名</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=授权码 <span class="comment"># 用户名对应的密码,有些邮箱填的是授权码</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth=login  <span class="comment"># SMTP的认证方式，默认是login，也可以改成CRAM-MD5或PLAIN方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account gmail &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这个时候发件操作就和前面的<a href="#%e5%8f%91%e4%bb%b6">发件步骤</a>命令有所差异：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -A：发件邮箱名称，前面定义的那个</span></span><br><span class="line">mail -v -s “主题” -A qq 收件人</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="邮件内容"><a href="#邮件内容" class="headerlink" title="邮件内容"></a>邮件内容</h3><p>邮件内容添加方式有三种：</p><ul><li><strong>命令行方式输入</strong>，这个在前面<a href="#%e5%8f%91%e4%bb%b6">发件步骤</a>已经用过了</li><li><strong>管道方式发送</strong>：<code>echo &quot;hey,how are you &quot; | mail -v -s &quot;test&quot; test@163.com</code></li><li><strong>借助重定向符进行输入</strong>：<code>mail -v -s &quot;test&quot; test@163.com &lt; test.txt</code></li></ul><hr><h3 id="添加附件"><a href="#添加附件" class="headerlink" title="添加附件"></a>添加附件</h3><p>添加附件使用<code>-a</code>参数：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加附件</span></span><br><span class="line">mail -v -s “主题” -a 附件 收件人 </span><br><span class="line"><span class="comment"># 也可同时将文件内容作为正文</span></span><br><span class="line">mail -v -s “主题” -a 附件 收件人  &lt; test.txt</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p><strong>注意收件人的address在命令行的最后</strong>，不然可能会报错：<code>smtp-server: 501 Bad address syntax</code></p></div><hr><h3 id="正文和附件大小限制"><a href="#正文和附件大小限制" class="headerlink" title="正文和附件大小限制"></a>正文和附件大小限制</h3><p>Linux对发送的邮件以及附件大小存在限制，可以使用如下命令查看系统的限制：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看正文大小限制</span></span><br><span class="line">postconf -d | grep message_size</span><br><span class="line">  <span class="comment"># 默认情况下都是10M的大小</span></span><br><span class="line">  message_size_limit = 10240000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看附件大小限制</span></span><br><span class="line">postconf -d | grep mailbox_size</span><br><span class="line">  <span class="comment"># 默认的大小是50M</span></span><br><span class="line">  mailbox_size_limit = 51200000</span><br></pre></td></tr></table></figure><p></p><p>因为大部分情况下使用的都是公有集群，所以这里就不写出修改默认设置的方法了。</p><hr><h3 id="发件端口"><a href="#发件端口" class="headerlink" title="发件端口"></a>发件端口</h3><p><code>mail</code>命令发送邮件默认使用<code>25</code>端口，也可以使用<code>587</code>、<code>465(ssl)</code>、<code>587</code>端口，<code>465</code>端口就是<strong>加密端口</strong>。平常一些服务器运营商会禁止使用<code>25</code>端口，使得用上面的配置则发送不去出，因此可以使用<code>587</code>端口。</p><p>设置使用<code>465</code>端口来发送邮件的<code>/etc/mail.rc</code>配置：<code>set smtp=smtps://smtp.qq.com:465</code></p><p>设置使用<code>587</code>端口来发送邮件的<code>/etc/mail.rc</code>配置：<code>set smtp=smtp.qq.com:587</code></p><hr><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>如果出现如果错误：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error <span class="keyword">in</span> certificate: Peer’s certificate issuer is not recognized.</span><br></pre></td></tr></table></figure><p></p><p>解决办法：<a href="https://www.wenjinyu.me/zh/mail-send-mail-through-the-command-line-in-linux/" target="_blank" rel="noopener">mail: 在linux上通过命令行发送邮件</a></p><hr><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://linux.die.net/man/1/mail" target="_blank" rel="noopener">mail(1) - Linux man page</a></li><li><a href="https://www.wenjinyu.me/zh/mail-send-mail-through-the-command-line-in-linux/" target="_blank" rel="noopener">mail: 在linux上通过命令行发送邮件</a></li><li><a href="https://cgspace.date/2017/08/30/linux/2017-08-30-linux-sendEmail/" target="_blank" rel="noopener">使用shell发送qq邮件</a></li><li><a href="https://www.linuxquestions.org/questions/linux-server-73/email-attachment-size-limit-734249/" target="_blank" rel="noopener">Email Attachment size limit</a></li></ul><hr><p><br></p><h2 id="设置定时任务-邮箱提醒"><a href="#设置定时任务-邮箱提醒" class="headerlink" title="设置定时任务+邮箱提醒"></a>设置定时任务+邮箱提醒</h2><p>OK，回到最原始的目的：</p><ul><li>定期检测集群存储—<strong>定期执行任务</strong></li><li>给所有用户发邮件提醒各自账户的使用情况—<strong>发送邮件</strong></li></ul><p>现在已经具备了所需的知识，那么就开始写脚本吧。</p><p>具体的脚本可以查看<a href="https://github.com/showteeth/useful_scripts" target="_blank" rel="noopener">Github</a></p><p>注意点：</p><ul><li><strong>正文大小和附件大小限制</strong>—解决办法：正文显示最大的前20个文件，附件添加不超过9M的文件(大于9M会其他前9M的信息)</li><li><strong>用户名和邮箱的对应</strong>—解决办法：使用了<a href="http://showteeth.tech/posts/17760.html">Shell中的字典</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这是一篇实战的文章，主要目的是&lt;strong&gt;定期统计集群存储使用情况并通过邮箱告知用户&lt;/strong&gt;。其中涉及到的技术点主要有：&lt;strong&gt;定时任务的设置&lt;/strong&gt;、&lt;strong&gt;集群邮件的发送&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://showteeth.tech/categories/Linux/"/>
    
      <category term="常用内容总结" scheme="http://showteeth.tech/categories/Linux/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="常用内容总结" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Python系列之Matplotlib-基础(二)</title>
    <link href="http://showteeth.tech/posts/31747.html"/>
    <id>http://showteeth.tech/posts/31747.html</id>
    <published>2019-10-27T12:19:23.000Z</published>
    <updated>2019-10-30T15:08:24.993Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章是<a href="http://showteeth.tech/posts/4719.html">Python系列之Matplotlib-基础</a>的一个补充，从另一个<strong>更加贴合日常使用的角度</strong>理解<code>Matplotlib</code>中图片的元素，将元素分为<strong>基础(primitives)类</strong>和<strong>容器(containers)类</strong>，最后<strong>结合实例</strong>的方式来加深理解。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在之前的文章<a href="http://showteeth.tech/posts/4719.html">Python系列之Matplotlib-基础</a>中已经对<code>Matplotlib</code>有了一个大概的认知：<strong>Python绘图系统中非常重要的模块，具有很强大的对图片进行自定义的功能</strong>，同时对其组件也有了一定的认识。这里会换个角度来认识一个图片中的所有元素。</p><p>前面我们将一个图片拆分为了<code>Figure</code>、<code>Axes</code>、<code>Axis</code>、<code>Artist</code>四大部分，虽然简洁，但是和平常绘图使用还是有一定的距离，尤其是最后的那个<code>Artist</code>，太过笼统和抽象。下面我们从另一种角度对图片中的元素进行分类，使其更加贴近我们的日常使用。总的来说，可以将一个图片拆分为<strong>两类元素</strong>：</p><ul><li><strong>基础 (primitives) 类</strong>：线 (<code>line</code>)、点 (<code>marker</code>)、文字 (<code>text</code>)、图例 (<code>legend</code>)、网格 (<code>grid</code>)、标题 (<code>title</code>)、图片 (<code>image</code>) 等。</li><li><strong>容器 (containers) 类</strong>：图 (<code>figure</code>)、坐标系 (<code>axes</code>)、坐标轴 (<code>axis</code>)和刻度 (<code>tick</code>)</li></ul><p>基础类元素是我们想画出的标准对象，而容器类元素顾名思义就是包含基础类元素的对象，基础类元素画在容器类元素之上。看了上述两类元素包含的对象和作用，有没有感觉非常熟悉，自己平常绘图的过程不就是在容器类元素中添加基础类元素嘛。</p><p><strong>这里主要学习容器类元素</strong>，原因有二：一是基础类元素纷繁复杂，种类较多，且相互之间没有联系，学着比较费劲；二是基础类元素是绘制在容器类元素之上的，在学习容器类元素的过程中就会涉及到基础类元素。</p><p>首先结合之前学习的内容，我们可以知道这里的容器类元素是有层级关系的：<strong>图 &gt; 坐标系 &gt; 坐标轴 &gt; 刻度</strong></p><hr><p><br></p><h2 id="图-Figure"><a href="#图-Figure" class="headerlink" title="图(Figure)"></a>图(Figure)</h2><p>之前已经对其有过介绍，所以这里主要集中在图(Figure)的容器类元素方面的内容.</p><h3 id="添加文本"><a href="#添加文本" class="headerlink" title="添加文本"></a>添加文本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.text( <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">'Figure'</span>, ha=<span class="string">'center'</span>, </span><br><span class="line">          va=<span class="string">'center'</span>, size=<span class="number">20</span>, alpha=<span class="number">.5</span> )</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/figure_with_text.png" alt="figure_with_text.png"></p><p>关于<code>plt.text()</code>：</p><ul><li><strong>第一、二个参数</strong>是指添加的<code>text</code>的横轴和纵轴坐标</li><li><strong>第三个参数</strong>是指要<code>text</code>显示的内容</li><li><code>ha, va</code>：是对齐方式，<code>horizontalalignment</code>、<code>verticalalignment</code></li><li><code>size</code>：设置字体大小</li><li><code>alpha</code>：设置字体透明度 (<code>0.5</code> 是半透明)</li></ul><hr><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">plt.figure()</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">im = np.array(Image.open(<span class="string">'Houston Rockets.png'</span>))</span><br><span class="line">plt.imshow(im)</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/figure_with_figure.png" alt="figure_with_figure.png"></p><hr><h3 id="添加线条"><a href="#添加线条" class="headerlink" title="添加线条"></a>添加线条</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.plot( [<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>] )</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/figure_with_line.png" alt="figure_with_line.png"></p><div class="note info"><p>前面这些操作看似是直接加在<code>figure</code>上，其实并不是，实际上上述各种操作都是在<code>Axes</code>上，而<code>Axes</code>又是被包含在<code>figure</code>中。默认情况下，一个<code>figure</code>中只有一个<code>Axes</code>，所以不需要在向<code>Axes</code>添加元素时进行显式声明，所以感觉就是直接在<code>figure</code>上操作，接下来我们来看看多个<code>Axes</code>的情况，这样就会对<code>figure</code>和<code>Axes</code>以及操作的具体界面有更进一步的了解。</p></div><hr><p><br></p><h2 id="Axes"><a href="#Axes" class="headerlink" title="Axes"></a>Axes</h2><p>首先说明一下关于<code>Axes</code>和<code>Subplot</code>的关系，两者都可以表示存在多个坐标系，但是存在细微的差别：</p><ul><li><strong>子图(Subplot)</strong>在<code>figure</code>中的网格结构<strong>一定是规则的</strong></li><li><strong>坐标系(Axes)</strong>在<code>figure</code>中的网格结构<strong>可以是不规则的</strong></li></ul><p>由此可见，<strong>子图是坐标系的一个特例，来我们先研究特例。</strong></p><h3 id="子图-Subplot"><a href="#子图-Subplot" class="headerlink" title="子图(Subplot)"></a>子图(Subplot)</h3><p><strong>子图有两种生成方式</strong>：</p><ul><li><code>plt.subplots(nrows=NUM,ncols=NUM)</code>：返回一个<code>NUM x NUM</code>的<strong>数组</strong>，在哪个子图上画图就将其调出来即可，相当于是<strong>先声明再调用</strong>。</li><li><code>plt.subplot(rows=NUM, columns=NUM, i-th plots)</code>：返回<strong>单个的子图</strong>，<strong>每次画子图之前先声明是哪个子图</strong>。</li></ul><h4 id="plt-subplots"><a href="#plt-subplots" class="headerlink" title="plt.subplots"></a>plt.subplots</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建4个坐标系，2行2列</span></span><br><span class="line">fig,axes=plt.subplots(nrows=<span class="number">2</span>,ncols=<span class="number">2</span>)</span><br><span class="line">axes</span><br><span class="line">  <span class="comment"># 二维数组，每个元素表示一个坐标系</span></span><br><span class="line">  array([[&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x7f30f2ac6630</span>&gt;,</span><br><span class="line">          &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x7f30f2a2b9b0</span>&gt;],</span><br><span class="line">        [&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x7f30f2766da0</span>&gt;,</span><br><span class="line">          &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="number">0x7f30f288f390</span>&gt;]],</span><br><span class="line">        dtype=object)</span><br><span class="line"><span class="comment"># 以每个坐标系为单位添加文字</span></span><br><span class="line"><span class="keyword">for</span> i,ax <span class="keyword">in</span> enumerate(axes.flat):</span><br><span class="line">    ax.set(xticks=[],yticks=[])</span><br><span class="line">    s=<span class="string">'subplot(2,2,'</span> + str(i) + <span class="string">')'</span></span><br><span class="line">    ax.text(<span class="number">0.5</span>,<span class="number">0.5</span>,s,ha=<span class="string">"center"</span>,va=<span class="string">"center"</span>,size=<span class="number">20</span>,alpha=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/axes_add_subplots.png" alt="axes_add_subplots.png"></p><p>上面是例子是不是很明天可以看出层级关系了：<code>figure(fig)</code>包含四个<code>Axes(ax)</code>，具体的添加<code>text</code>是在<code>ax</code>上操作的。</p><hr><h4 id="plt-subplot"><a href="#plt-subplot" class="headerlink" title="plt.subplot"></a>plt.subplot</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2行1列figure的第一个子图</span></span><br><span class="line"><span class="comment"># 声明完子图后，下面所有代码就只在这幅子图上生效，直到声明下一幅子图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">plt.text( <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">'subplot(2,1,1)'</span>, ha=<span class="string">'center'</span>, </span><br><span class="line">          va=<span class="string">'center'</span>, size=<span class="number">20</span>, alpha=<span class="number">.5</span> )</span><br><span class="line"><span class="comment"># 2行1列figure的第二个子图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">plt.text( <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">'subplot(2,1,2)'</span>, ha=<span class="string">'center'</span>, </span><br><span class="line">          va=<span class="string">'center'</span>, size=<span class="number">20</span>, alpha=<span class="number">.5</span> )</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/axes_add_subplot.png" alt="axes_add_subplot.png"></p><div class="note info"><p><code>plt.subplot</code>和<code>plt.subplots</code>还有一个区别是：<code>plt.subplots</code>会先把子图画出来(先形成<code>2x2</code>的子图)，即使只在其中一个子图上添加了基础类元素，最后显示的时候也会将所有的子图画出来；而<code>plt.subplot</code>因为是用时在声明，所以即使使用的是<code>plt.subplot(2,2,1)</code>，最后也只会显示出这个小子图，只是其大小是符合子图的对应比例的(长和宽都是<code>figure</code>的一半)。</p></div><hr><h3 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h3><p><strong>坐标系比子图更通用，布局更加随意</strong>，所以在某些需要对坐标系进行特殊排布的情况就非常实用，下面就是一个使用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line"><span class="comment"># 创建3x3的网格</span></span><br><span class="line">G=gridspec.GridSpec(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 第1行的所有网格作为第一个Axes</span></span><br><span class="line">plt.subplot(G[<span class="number">0</span>,:])</span><br><span class="line">plt.xticks([]);plt.yticks([])</span><br><span class="line">plt.text( <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">'Axes 1'</span>, ha=<span class="string">'center'</span>, </span><br><span class="line">          va=<span class="string">'center'</span>, size=<span class="number">20</span>, alpha=<span class="number">.5</span> )</span><br><span class="line"><span class="comment"># 第2行除最后一列之外的所有部分作为第二个Axes</span></span><br><span class="line">plt.subplot(G[<span class="number">1</span>,:<span class="number">-1</span>])</span><br><span class="line">plt.xticks([]);plt.yticks([])</span><br><span class="line">plt.text( <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">'Axes 2'</span>, ha=<span class="string">'center'</span>, </span><br><span class="line">          va=<span class="string">'center'</span>, size=<span class="number">20</span>, alpha=<span class="number">.5</span> )</span><br><span class="line"><span class="comment"># 第2行和第3行的最后一列的网格作为第三个Axes</span></span><br><span class="line">plt.subplot(G[<span class="number">1</span>:,<span class="number">-1</span>])</span><br><span class="line">plt.xticks([]);plt.yticks([])</span><br><span class="line">plt.text( <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">'Axes 3'</span>, ha=<span class="string">'center'</span>, </span><br><span class="line">          va=<span class="string">'center'</span>, size=<span class="number">20</span>, alpha=<span class="number">.5</span> )</span><br><span class="line"><span class="comment"># 第2行第1列的网格作为第三个Axes</span></span><br><span class="line">plt.subplot(G[<span class="number">-1</span>,<span class="number">0</span>])</span><br><span class="line">plt.xticks([]);plt.yticks([])</span><br><span class="line">plt.text( <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">'Axes 4'</span>, ha=<span class="string">'center'</span>, </span><br><span class="line">          va=<span class="string">'center'</span>, size=<span class="number">20</span>, alpha=<span class="number">.5</span> )</span><br><span class="line"><span class="comment"># 第2行第2列的网格作为第三个Axes</span></span><br><span class="line">plt.subplot(G[<span class="number">-1</span>,<span class="number">-2</span>])</span><br><span class="line">plt.xticks([]);plt.yticks([])</span><br><span class="line">plt.text( <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="string">'Axes 5'</span>, ha=<span class="string">'center'</span>, </span><br><span class="line">          va=<span class="string">'center'</span>, size=<span class="number">20</span>, alpha=<span class="number">.5</span> )</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/axes_add_gridspec.png" alt="axes_add_gridspec.png"></p><hr><p><br></p><h2 id="坐标轴和刻度"><a href="#坐标轴和刻度" class="headerlink" title="坐标轴和刻度"></a>坐标轴和刻度</h2><p>一个二维坐标系 (<code>Axes</code>)，有两条坐标轴 (<code>Axis</code>)：</p><ul><li>横轴：<code>X-Axis</code></li><li>纵轴：<code>Y-Axis</code></li></ul><p>而每个坐标轴都有两个元素:</p><ul><li><strong>容器类元素「刻度」</strong>：该对象里还包含<strong>刻度本身</strong>和<strong>刻度标签</strong></li><li><strong>基础类元素「标签」</strong>：该对象包含的是<strong>坐标轴标签</strong></li></ul><p><strong>「刻度」</strong> 和 <strong>「标签」</strong> 都是对象，下面代码通过改变它们一些属性值来进行可视化：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fig,ax=plt.subplots()</span><br><span class="line"><span class="comment"># 显示坐标轴标签</span></span><br><span class="line">ax.set_xlabel(<span class="string">"Label on X-Axis"</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">"Label on Y-Axis"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改X轴的刻度标签</span></span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> ax.xaxis.get_ticklabels():</span><br><span class="line">    <span class="comment"># 设置刻度标签的字体颜色</span></span><br><span class="line">    label.set_color(<span class="string">"blue"</span>)</span><br><span class="line">    <span class="comment"># 设置刻度标签选择的角度</span></span><br><span class="line">    label.set_rotation(<span class="number">45</span>)</span><br><span class="line">    <span class="comment"># 设置刻度标签选择的字体大小</span></span><br><span class="line">    label.set_fontsize(<span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 设置刻度Y轴的刻度本身---刻度线</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> ax.yaxis.get_ticklines():</span><br><span class="line">    <span class="comment"># 设置刻度线的颜色</span></span><br><span class="line">    line.set_color(<span class="string">"red"</span>)</span><br><span class="line">    <span class="comment"># 设置刻度线长度(凸出部分的长度)</span></span><br><span class="line">    line.set_markersize(<span class="number">30</span>)</span><br><span class="line">    <span class="comment"># 设置刻度线的宽度</span></span><br><span class="line">    line.set_markeredgewidth(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/axis_tick_add.png" alt="axis_tick_add.png"></p><hr><p><br></p><h2 id="关于图形选择"><a href="#关于图形选择" class="headerlink" title="关于图形选择"></a>关于图形选择</h2><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/choosing_a_good_chart_en.png" alt="choosing_a_good_chart_en.png"></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/choosing_a_good_chart_zh.png" alt="choosing_a_good_chart_zh.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzU0MDQ1NjAzNg==&amp;mid=2247487597&amp;idx=2&amp;sn=e2a61c9637900d7bcb3fb658a28758a3&amp;chksm=fb39b566cc4e3c70fc6d06c5be5b962dee3e68ce66e51b03533db5cd9fd60cd0c51a64fb3d3f&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1571474906951&amp;sharer_shareid=1b54e58f922202bb93a6ffe28bb2f3a7&amp;key=7fbd4d18e8fd1c6fff6d9c4f75a5f7a7aa84450f1bafdbddcb15955ec1c1602ad5b32e505be4f4262cb7c3a654ae46ad1f778ab74bfca91c73afbcc665063b69ce1f6fe3338b9a0ae66edf55bbfdbebc&amp;ascene=1&amp;uin=MjU2NzcxOTIxNQ%3D%3D&amp;devicetype=Windows+10&amp;version=62060841&amp;lang=zh_CN&amp;pass_ticket=GwsbQV788IMD6AiagF%2BPxa50XmG0oazH9xqtxGhmt5vIPH0QkD3SChoH46%2Fsdj%2FX" target="_blank" rel="noopener">干货一文掌握Matplotlib的使用方法</a></li><li><a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.subplots.html" target="_blank" rel="noopener">matplotlib.pyplot.subplots</a></li><li><a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.subplot.html" target="_blank" rel="noopener">matplotlib.pyplot.subplot</a></li><li><a href="https://matplotlib.org/3.1.1/gallery/subplots_axes_and_figures/gridspec_multicolumn.html#sphx-glr-gallery-subplots-axes-and-figures-gridspec-multicolumn-py" target="_blank" rel="noopener">Using Gridspec to make multi-column/row subplot layouts</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章是&lt;a href=&quot;http://showteeth.tech/posts/4719.html&quot;&gt;Python系列之Matplotlib-基础&lt;/a&gt;的一个补充，从另一个&lt;strong&gt;更加贴合日常使用的角度&lt;/strong&gt;理解&lt;code&gt;Matplotlib&lt;/code&gt;中图片的元素，将元素分为&lt;strong&gt;基础(primitives)类&lt;/strong&gt;和&lt;strong&gt;容器(containers)类&lt;/strong&gt;，最后&lt;strong&gt;结合实例&lt;/strong&gt;的方式来加深理解。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="常用模块" scheme="http://showteeth.tech/categories/Python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="常用模块" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python绘图系列-matplotlib中50个最常用的图</title>
    <link href="http://showteeth.tech/posts/56749.html"/>
    <id>http://showteeth.tech/posts/56749.html</id>
    <published>2019-10-23T08:01:54.000Z</published>
    <updated>2019-10-27T08:02:07.720Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章对应于<a href="http://showteeth.tech/posts/59768.html">R绘图系列-ggplot2中50个最常用的图</a>，参考<a href="https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/" target="_blank" rel="noopener">Top 50 matplotlib Visualizations – The Master Plots (with full python code)</a>给出了matplotlib中最常用的50个图，这里mark一下，便于学习使用。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这篇文章起源于<a href="http://showteeth.tech/posts/59768.html">R绘图系列-ggplot2中50个最常用的图</a>，这里对应于<code>ggplot2</code>中常用的50个图给出了<code>matplotlib</code>中常用的50个图，具体的参考文章是<a href="https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/" target="_blank" rel="noopener">Top 50 matplotlib Visualizations – The Master Plots (with full python code)</a>。</p><hr><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>因为这里所有的图都和ggplot2中的相对应的，所以就没有继续学习，后续如果使用的话可以结合<a href="http://showteeth.tech/posts/59768.html">R绘图系列-ggplot2中50个最常用的图</a>以及<a href="https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/" target="_blank" rel="noopener">Top 50 matplotlib Visualizations – The Master Plots (with full python code)</a>、中文译文：<a href="http://liyangbit.com/pythonvisualization/matplotlib-top-50-visualizations/" target="_blank" rel="noopener">深度好文 | Matplotlib可视化最有价值的 50 个图表（附完整 Python 源代码）</a>。</p><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章对应于&lt;a href=&quot;http://showteeth.tech/posts/59768.html&quot;&gt;R绘图系列-ggplot2中50个最常用的图&lt;/a&gt;，参考&lt;a href=&quot;https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Top 50 matplotlib Visualizations – The Master Plots (with full python code)&lt;/a&gt;给出了matplotlib中最常用的50个图，这里mark一下，便于学习使用。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/Python/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="常用图" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%9B%BE/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列-ggplot2中50个最常用的图</title>
    <link href="http://showteeth.tech/posts/59768.html"/>
    <id>http://showteeth.tech/posts/59768.html</id>
    <published>2019-10-23T04:23:44.000Z</published>
    <updated>2019-11-22T03:17:11.999Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章是从<a href="http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html" target="_blank" rel="noopener">Top 50 ggplot2 Visualizations - The Master List (With Full R Code)</a>选出了我自己<strong>之前比较少用，但是又挺有实际意义的图</strong>，这里记录学习一下。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天看到了这篇文章：<a href="http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html" target="_blank" rel="noopener">Top 50 ggplot2 Visualizations - The Master List (With Full R Code)</a>，感觉里面有些解释和有些图也挺实用的，这里mark一下并挑选几个进行学习。</p><hr><h2 id="整数散点图重叠"><a href="#整数散点图重叠" class="headerlink" title="整数散点图重叠"></a>整数散点图重叠</h2><p>散点图是绘图中很常用的一种图，其可以<strong>在很直观地显示变量之间相关关系的同时保留原始的数据特征</strong>。但是在对整数类型的数据进行散点图绘制中<strong>存在的问题</strong>是：<strong>数据点之间存在重叠，这样的话很多散点信息其实就被隐藏了(重叠的数据点在散点图上只表现为单个散点)</strong>。解决这种数据重叠的方法有两种：</p><ul><li><code>Jitter Plot</code>：给点<strong>增加扰动，使点与点之间分开</strong></li><li><code>Counts Chart</code>：点的<strong>大小表示数据点的密度</strong></li></ul><h3 id="Jitter-Plot"><a href="#Jitter-Plot" class="headerlink" title="Jitter Plot"></a>Jitter Plot</h3><p><strong>对每个点的位置添加了随机的变异</strong>.</p><blockquote><p>It adds a small amount of random variation to the location of each point, and is a useful way of handling overplotting caused by discreteness in smaller datasets.</p></blockquote><p>使用<code>geom_jitter</code>替换原始的<code>geom_point</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line"><span class="comment"># 数据</span></span><br><span class="line">data(mpg, package=<span class="string">"ggplot2"</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主题背景</span></span><br><span class="line">theme_set(theme_bw())  <span class="comment"># pre-set the bw theme.</span></span><br><span class="line"><span class="comment"># 普通的散点图</span></span><br><span class="line">p1 &lt;- ggplot(mpg, aes(cty, hwy)) + </span><br><span class="line">  geom_point() + </span><br><span class="line">  geom_smooth(method=<span class="string">"lm"</span>, se=<span class="literal">F</span>) +</span><br><span class="line">  labs(subtitle=<span class="string">"mpg: city vs highway mileage"</span>, </span><br><span class="line">       y=<span class="string">"hwy"</span>, </span><br><span class="line">       x=<span class="string">"cty"</span>, </span><br><span class="line">       title=<span class="string">"Scatterplot with overlapping points"</span>, </span><br><span class="line">       caption=<span class="string">"Source: midwest"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加了jitter</span></span><br><span class="line">p2 &lt;- ggplot(mpg, aes(cty, hwy)) + </span><br><span class="line">  geom_jitter(width = <span class="number">0.5</span>) +</span><br><span class="line">  geom_smooth(method=<span class="string">"lm"</span>, se=<span class="literal">F</span>) +</span><br><span class="line">  labs(subtitle=<span class="string">"mpg: city vs highway mileage"</span>, </span><br><span class="line">       y=<span class="string">"hwy"</span>, </span><br><span class="line">       x=<span class="string">"cty"</span>, </span><br><span class="line">       title=<span class="string">"Jittered Points"</span>)   </span><br><span class="line">grid.arrange(p1,p2,nrow=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/top_50_jitter_R.png" alt="top_50_jitter_R.png"></p><p><code>jitter</code>图明显比原始的散点图点更多(扰动之后点分开了)。<strong><code>jitter</code>中<code>width</code>参数是控制点的离散程度的</strong>，<code>width</code>值越大，那么图中的点与原始点之间的距离就越大。</p><hr><h3 id="Counts-Chart"><a href="#Counts-Chart" class="headerlink" title="Counts Chart"></a>Counts Chart</h3><p>前面使用<code>jitter</code>解决整数数据散点图重叠有一个很大的问题就是<strong>改变了原始数据的值</strong>，虽然只是在原始点附近随机扰动，并不影响最终的结果，但这对于强迫症来说可能有点难受。这里给出另一种解决方案就是<strong>修改点的大小</strong>，如果多个点重叠在同一个位置，那么画的点就大一些，这样也能很好的区分。</p><p>使用<code>geom_count</code>替换<code>geom_point</code>：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(gridExtra)</span><br><span class="line">data(mpg, package=<span class="string">"ggplot2"</span>) </span><br><span class="line"><span class="comment"># 设置主题背景</span></span><br><span class="line">theme_set(theme_bw())  <span class="comment"># pre-set the bw theme.</span></span><br><span class="line"><span class="comment"># 原始的散点图</span></span><br><span class="line">p1 &lt;- ggplot(mpg, aes(cty, hwy)) + </span><br><span class="line">  geom_point() + </span><br><span class="line">  geom_smooth(method=<span class="string">"lm"</span>, se=<span class="literal">F</span>) +</span><br><span class="line">  labs(subtitle=<span class="string">"mpg: city vs highway mileage"</span>, </span><br><span class="line">       y=<span class="string">"hwy"</span>, </span><br><span class="line">       x=<span class="string">"cty"</span>, </span><br><span class="line">       title=<span class="string">"Scatterplot with overlapping points"</span>, </span><br><span class="line">       caption=<span class="string">"Source: midwest"</span>)</span><br><span class="line"><span class="comment"># count chart</span></span><br><span class="line">p3 &lt;- ggplot(mpg, aes(cty, hwy)) +  </span><br><span class="line">  geom_count(col=<span class="string">"tomato3"</span>, show.legend=<span class="literal">F</span>) +</span><br><span class="line">  geom_smooth(method=<span class="string">"lm"</span>, se=<span class="literal">F</span>) +</span><br><span class="line">  labs(subtitle=<span class="string">"mpg: city vs highway mileage"</span>, </span><br><span class="line">       y=<span class="string">"hwy"</span>, </span><br><span class="line">       x=<span class="string">"cty"</span>, </span><br><span class="line">       title=<span class="string">"Counts Plot"</span>)</span><br><span class="line">grid.arrange(p1,p3,nrow=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/top_50_count_R.png" alt="top_50_count_R.png"></p><hr><h2 id="选中部分画圈"><a href="#选中部分画圈" class="headerlink" title="选中部分画圈"></a>选中部分画圈</h2><p>选中部分的数据点，在图中将其圈起来(使用多边形圈起来，不是圆或者椭圆)。这个可以<strong>适用于PCA选中不同群的点</strong>以及<strong>其他任意想要圈起来的</strong>。</p><p>这部分需要使用的是一个<code>ggplot2</code>插件：<a href="https://github.com/hrbrmstr/ggalt" target="_blank" rel="noopener">ggalt</a>。所谓插件的意思就是可以在原有ggplot2图形的基础上添加语法即可完成想要的图。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先安装proj</span></span><br><span class="line"><span class="comment"># 可以直接使用conda安装</span></span><br><span class="line">conda install -c conda-forge proj</span><br><span class="line"><span class="comment"># proj安装完成之后再安装ggalt</span></span><br><span class="line">install.packages(<span class="string">"ggalt"</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="任意部分画圈"><a href="#任意部分画圈" class="headerlink" title="任意部分画圈"></a>任意部分画圈</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(ggalt)</span><br><span class="line"><span class="comment"># 得到选中的区域</span></span><br><span class="line">midwest_select &lt;- midwest[midwest$poptotal &gt; <span class="number">350000</span> &amp; </span><br><span class="line">                            midwest$poptotal &lt;= <span class="number">500000</span> &amp; </span><br><span class="line">                            midwest$area &gt; <span class="number">0.01</span> &amp; </span><br><span class="line">                            midwest$area &lt; <span class="number">0.1</span>, ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画多边形将上面选中的圈起来</span></span><br><span class="line">ggplot(midwest, aes(x=area, y=poptotal)) + </span><br><span class="line">  geom_point(aes(col=state, size=popdensity)) +   <span class="comment"># draw points</span></span><br><span class="line">  geom_smooth(method=<span class="string">"loess"</span>, se=<span class="literal">F</span>) + </span><br><span class="line">  xlim(c(<span class="number">0</span>, <span class="number">0.1</span>)) + </span><br><span class="line">  ylim(c(<span class="number">0</span>, <span class="number">500000</span>)) +   <span class="comment"># draw smoothing line</span></span><br><span class="line">  <span class="comment"># 这个是画多边形的</span></span><br><span class="line">  geom_encircle(aes(x=area, y=poptotal), </span><br><span class="line">                data=midwest_select, </span><br><span class="line">                color=<span class="string">"red"</span>, </span><br><span class="line">                size=<span class="number">2</span>, </span><br><span class="line">                expand=<span class="number">0.08</span>) +   <span class="comment"># encircle</span></span><br><span class="line">  labs(subtitle=<span class="string">"Area Vs Population"</span>, </span><br><span class="line">       y=<span class="string">"Population"</span>, </span><br><span class="line">       x=<span class="string">"Area"</span>, </span><br><span class="line">       title=<span class="string">"Scatterplot + Encircle"</span>, </span><br><span class="line">       caption=<span class="string">"Source: midwest"</span>)</span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><code>expand</code>：画的多边形<strong>向外扩的大小</strong></li><li><code>color</code>：多边形<strong>圈的颜色</strong></li><li><code>size</code>：<strong>线的宽度</strong></li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/scatter_circle.png" alt="scatter_circle.png"></p><hr><h3 id="PCA部分"><a href="#PCA部分" class="headerlink" title="PCA部分"></a>PCA部分</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(ggalt)</span><br><span class="line"><span class="keyword">library</span>(ggfortify)</span><br><span class="line">theme_set(theme_classic())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute data with principal components ------------------</span></span><br><span class="line">df &lt;- iris[c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line">pca_mod &lt;- prcomp(df)  <span class="comment"># compute principal components</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Data frame of principal components ----------------------</span></span><br><span class="line">df_pc &lt;- data.frame(pca_mod$x, Species=iris$Species)  <span class="comment"># dataframe of principal components</span></span><br><span class="line">df_pc_vir &lt;- df_pc[df_pc$Species == <span class="string">"virginica"</span>, ]  <span class="comment"># df for 'virginica'</span></span><br><span class="line">df_pc_set &lt;- df_pc[df_pc$Species == <span class="string">"setosa"</span>, ]  <span class="comment"># df for 'setosa'</span></span><br><span class="line">df_pc_ver &lt;- df_pc[df_pc$Species == <span class="string">"versicolor"</span>, ]  <span class="comment"># df for 'versicolor'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Plot ----------------------------------------------------</span></span><br><span class="line">ggplot(df_pc, aes(PC1, PC2, col=Species)) + </span><br><span class="line">  geom_point(aes(shape=Species), size=<span class="number">2</span>) +   <span class="comment"># draw points</span></span><br><span class="line">  labs(title=<span class="string">"Iris Clustering"</span>, </span><br><span class="line">       subtitle=<span class="string">"With principal components PC1 and PC2 as X and Y axis"</span>,</span><br><span class="line">       caption=<span class="string">"Source: Iris"</span>) + </span><br><span class="line">  coord_cartesian(xlim = <span class="number">1.2</span> * c(min(df_pc$PC1), max(df_pc$PC1)), </span><br><span class="line">                  ylim = <span class="number">1.2</span> * c(min(df_pc$PC2), max(df_pc$PC2))) +   <span class="comment"># change axis limits</span></span><br><span class="line">  geom_encircle(data = df_pc_vir, aes(x=PC1, y=PC2)) +   <span class="comment"># draw circles</span></span><br><span class="line">  geom_encircle(data = df_pc_set, aes(x=PC1, y=PC2)) + </span><br><span class="line">  geom_encircle(data = df_pc_ver, aes(x=PC1, y=PC2))</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/pca_circle_ggplot.png" alt="pca_circle_ggplot.png"></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他有意思的图如<strong>分组之间连线(Slope Chart)</strong>、<strong>哑铃图(Dumbbell Plot)</strong>，具体可以直接看原文：<a href="http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html" target="_blank" rel="noopener">Top 50 ggplot2 Visualizations - The Master List (With Full R Code)</a>，或者译文：<a href="https://mp.weixin.qq.com/s?__biz=MzA4ODQ1MzQ0Mg==&amp;mid=2648661801&amp;idx=1&amp;sn=05cc8ff30e1e9831dc7163e0bc8beb38&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">50个ggplot2可视化案例</a></p><hr><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章是从&lt;a href=&quot;http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Top 50 ggplot2 Visualizations - The Master List (With Full R Code)&lt;/a&gt;选出了我自己&lt;strong&gt;之前比较少用，但是又挺有实际意义的图&lt;/strong&gt;，这里记录学习一下。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="常用图" scheme="http://showteeth.tech/tags/%E5%B8%B8%E7%94%A8%E5%9B%BE/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python绘图系列-给boxplot添加统计性的注释</title>
    <link href="http://showteeth.tech/posts/26853.html"/>
    <id>http://showteeth.tech/posts/26853.html</id>
    <published>2019-10-21T06:58:44.000Z</published>
    <updated>2019-10-23T04:24:35.405Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了在<code>Python</code>中如何<strong>给<code>boxplot</code>添加两两之间比较的统计注释信息</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这篇文章起源于<a href="http://showteeth.tech/posts/40911.html">R绘图系列-带有significant信息的boxplot</a>，因为<code>R</code>中有可以对<code>boxplot</code>两两样本之间<strong>添加显著性注释</strong>的包，这里对应地记录一下<code>Python</code>中<strong>实现相同目的需要的包</strong>和<strong>基本命令</strong>。</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为该包没有发表在<code>Pypi</code>上，所以不可以直接使用<code>pip</code>安装，这里直接使用<code>setup.py</code>安装：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clone到本地目录</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/webermarcolivier/statannot.git</span><br><span class="line"><span class="comment"># 如果没有权限将它安装到系统Python库中去，可以使用如下命令</span></span><br><span class="line"><span class="comment"># 会安装在~/.local/</span></span><br><span class="line">python setup.py install --user</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>特点</strong>：</p><ul><li>给由<code>seaborn boxplot</code>画出的<code>boxplot</code>添加<strong>统计注释</strong></li><li>内置的检验：<ul><li><code>Mann-Whitney</code>—<strong>非参检验(不要求正态分布)</strong></li><li><code>t-test (independent and paired)</code>—<strong>配对和不配对的t检验</strong></li><li><code>Welch&#39;s t-test</code>—<strong>方差不同情况下的t检验</strong></li></ul></li><li>可以控制统计注释在<strong>图内还是图外</strong>以及<strong>多个注释之间的间隔</strong></li><li>统计注释有三种格式：<ul><li><strong>star annotation</strong>：对应的参数<code>star</code>，这个是<strong>默认格式</strong>，<ul><li><code>ns</code>: 5.00e-02 &lt; p &lt;= 1.00e+00</li><li><code>*</code>: 1.00e-02 &lt; p &lt;= 5.00e-02</li><li><code>**</code>: 1.00e-03 &lt; p &lt;= 1.00e-02</li><li><code>***</code>: 1.00e-04 &lt; p &lt;= 1.00e-03</li><li><code>****</code>: p &lt;= 1.00e-04</li></ul></li><li><strong>simplified pvalue</strong>：对应的参数是<code>simple</code>，这个会<strong>直接显示pvalue数值</strong></li><li><strong>explicit pvalue</strong>：对应的参数是<code>full</code>，这个会显示使用的<strong>检验名称</strong>、<strong>pvalue的数值</strong></li></ul></li></ul><p>具体使用可以参考<a href="https://nbviewer.jupyter.org/github/webermarcolivier/statannot/blob/master/example/example.ipynb" target="_blank" rel="noopener">statannot使用example</a></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/webermarcolivier/statannot" target="_blank" rel="noopener">statannot的Github</a></li><li><a href="https://nbviewer.jupyter.org/github/webermarcolivier/statannot/blob/master/example/example.ipynb" target="_blank" rel="noopener">statannot使用example</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了在&lt;code&gt;Python&lt;/code&gt;中如何&lt;strong&gt;给&lt;code&gt;boxplot&lt;/code&gt;添加两两之间比较的统计注释信息&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/Python/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
      <category term="annotation" scheme="http://showteeth.tech/tags/annotation/"/>
    
      <category term="boxplot" scheme="http://showteeth.tech/tags/boxplot/"/>
    
  </entry>
  
  <entry>
    <title>R绘图系列-带有significant信息的boxplot</title>
    <link href="http://showteeth.tech/posts/40911.html"/>
    <id>http://showteeth.tech/posts/40911.html</id>
    <published>2019-10-21T06:18:00.000Z</published>
    <updated>2019-11-23T02:56:00.019Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了使用R中的<code>ggsignif</code>包对<code>boxplot</code>两两样本之间<strong>添加显著性注释</strong>的过程；其实这个包可以两两对比的使用<code>ggplot2</code>画图的都可以添加，对<strong>任何可以两两对比的、使用<code>ggplot2</code>画图的都可以添加</strong>。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>boxplot</code>既可以很好地显示某个属性内部样本点的变化，也可以与其他属性进行对比，所以使用非常广泛。但是有时候我们需要对属性之间的样本点变化有个准确的度量，也就是比较两个样本是不是存在显著性地差异，这个时候就需要在原始的<code>boxplot</code>上加上样本之间假设检验的显著性信息。</p><hr><h2 id="ggsignif"><a href="#ggsignif" class="headerlink" title="ggsignif"></a>ggsignif</h2><p><code>R</code>中的<code>ggsignif</code>就是专门解决前面遇到问题的包，<a href="https://www.jianshu.com/p/678213d605a5" target="_blank" rel="noopener">其他包如ggpubr</a>也可以达到类似的目的，这里主要学习<code>ggsignif</code>，因为其是基于<code>ggplot2</code>的语法，相当于是<a href="https://www.ggplot2-exts.org/gallery/" target="_blank" rel="noopener">ggplot2的一个拓展</a>，这也就意味着<strong>其不仅可以对<code>boxplot</code>添加显著性，对于任何可以两两对比的使用<code>ggplot2</code>画图的都可以添加</strong>，很是方便；同时对熟悉<code>ggplot2</code>的人来说也比较容易上手。下面来简单介绍其使用。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">install.packages(<span class="string">"ggsignif"</span>)</span><br><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line"><span class="keyword">library</span>(ggsignif)</span><br></pre></td></tr></table></figure><hr><h2 id="不带分组因素"><a href="#不带分组因素" class="headerlink" title="不带分组因素"></a>不带分组因素</h2><h3 id="简单绘制"><a href="#简单绘制" class="headerlink" title="简单绘制"></a>简单绘制</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ggplot(iris, aes(x=Species, y=Sepal.Length)) + </span><br><span class="line">  geom_boxplot() +</span><br><span class="line">  geom_signif(comparisons = list(c(<span class="string">"versicolor"</span>, <span class="string">"virginica"</span>)), </span><br><span class="line">              map_signif_level=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/boxplot_with_sign.png" alt="boxplot_with_sign.png"></p><div class="note info"><p>注意<strong>默认的检验的两个样本的非参检验(不需要样本符合正太分布)</strong>：<code>‘Mann-Whitney’ test.(wilcox.test)</code></p></div><hr><h3 id="自定义绘制"><a href="#自定义绘制" class="headerlink" title="自定义绘制"></a>自定义绘制</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两两比较的列表</span></span><br><span class="line">compaired &lt;- list(c(<span class="string">"versicolor"</span>, <span class="string">"virginica"</span>), </span><br><span class="line">                  c(<span class="string">"versicolor"</span>,<span class="string">"setosa"</span>), </span><br><span class="line">                  c(<span class="string">"virginica"</span>,<span class="string">"setosa"</span>))</span><br><span class="line"><span class="comment"># 使用t.test代替默认的wilcox.test</span></span><br><span class="line">ggplot(iris, aes(Species, Sepal.Width, fill = Species)) +</span><br><span class="line">  geom_boxplot() +</span><br><span class="line">  ylim(<span class="number">1.5</span>, <span class="number">6.5</span>) +</span><br><span class="line">  geom_signif(comparisons = compaired,</span><br><span class="line">              step_increase = <span class="number">0.3</span>,</span><br><span class="line">              map_signif_level = <span class="literal">F</span>,</span><br><span class="line">              test = t.test)</span><br></pre></td></tr></table></figure><ul><li><code>step_increase</code>：调整每个显著性标记之间的间隔。</li><li><code>test</code>：指定要使用的检验类型，默认是<code>wilcox.test</code></li><li><code>map_signif_level</code>：是显示具体<code>pvalue</code>还是显示符号<code>c(&quot;***&quot;=0.001,&quot;**&quot;=0.01, &quot;*&quot;=0.05)</code>，可以自行指定符号。</li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/boxplot_with_sign_2.png" alt="boxplot_with_sign_2.png"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ggplot(iris, aes(Species, Sepal.Width, fill = Species)) +</span><br><span class="line">  geom_boxplot() +</span><br><span class="line">  ylim(<span class="number">1.5</span>, <span class="number">6.5</span>) +</span><br><span class="line">  geom_signif(comparisons = compaired,</span><br><span class="line">              map_signif_level = <span class="literal">F</span>,</span><br><span class="line">              y_position=c(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>),</span><br><span class="line">              tip_length = c(<span class="number">0</span>),</span><br><span class="line">              test = t.test)</span><br></pre></td></tr></table></figure><ul><li><code>y_position</code>：指定显著性标记的高度，如<code>y_position=c(4,5,6)</code></li><li><code>tip_length</code>：设置横线两端向下生出的长度，如 <code>tip_length = c(0)</code></li></ul><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/boxplot_with_sign_3.png" alt="boxplot_with_sign_3.png"></p><p>其他常用参数：</p><ul><li><code>annotations</code>：character vector with alternative annotations, <strong>if not null test is ignored</strong></li></ul><hr><h2 id="带分组条件"><a href="#带分组条件" class="headerlink" title="带分组条件"></a>带分组条件</h2><h3 id="简单情况"><a href="#简单情况" class="headerlink" title="简单情况"></a>简单情况</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义t检验</span></span><br><span class="line"><span class="comment"># 得到P-value</span></span><br><span class="line">anno &lt;- t.test(iris[iris$Petal.Width &gt; <span class="number">1</span> &amp; iris$Species == <span class="string">"versicolor"</span>, <span class="string">"Sepal.Width"</span>], </span><br><span class="line">               iris[iris$Species == <span class="string">"virginica"</span>, <span class="string">"Sepal.Width"</span>])$p.value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将得到的Pvalue加在图形上</span></span><br><span class="line">ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Petal.Width &gt; <span class="number">1</span>)) +</span><br><span class="line">  geom_boxplot(position=<span class="string">"dodge"</span>) +</span><br><span class="line">  geom_signif(annotation=formatC(anno, digits=<span class="number">1</span>),</span><br><span class="line">              y_position=<span class="number">4.05</span>, xmin=<span class="number">2.2</span>, xmax=<span class="number">3</span>, </span><br><span class="line">              tip_length = c(<span class="number">0.2</span>, <span class="number">0.04</span>))</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/boxplot_with_sign_4.png" alt="boxplot_with_sign_4.png"></p><hr><h3 id="分面"><a href="#分面" class="headerlink" title="分面"></a>分面</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据的基本情况</span></span><br><span class="line">mpg</span><br><span class="line">  <span class="comment"># A tibble: 234 x 11</span></span><br><span class="line">    manufacturer model      displ  year   cyl trans      drv     cty   hwy fl    class  </span><br><span class="line">    &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  </span><br><span class="line">  <span class="number">1</span> audi         a4           <span class="number">1.8</span>  <span class="number">1999</span>     <span class="number">4</span> auto(l5)   f        <span class="number">18</span>    <span class="number">29</span> p     compact</span><br><span class="line">  <span class="number">2</span> audi         a4           <span class="number">1.8</span>  <span class="number">1999</span>     <span class="number">4</span> manual(m5) f        <span class="number">21</span>    <span class="number">29</span> p     compact</span><br><span class="line">  <span class="number">3</span> audi         a4           <span class="number">2</span>    <span class="number">2008</span>     <span class="number">4</span> manual(m6) f        <span class="number">20</span>    <span class="number">31</span> p     compact</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先将trans列以(进行分割，分别得到type、variant列</span></span><br><span class="line">mpg &lt;- mpg %&gt;% </span><br><span class="line">  separate(trans, c(<span class="string">"type"</span>, <span class="string">"variant"</span>), sep=<span class="string">"\\("</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对修改之后的mpg进行绘图</span></span><br><span class="line">ggplot(mpg, aes(type, hwy)) +</span><br><span class="line">  geom_boxplot() +</span><br><span class="line">  geom_signif(data=data.frame(class=c(<span class="string">"2seater"</span>, <span class="string">"midsize"</span>), type=<span class="number">0</span>, hwy=<span class="number">0</span>, group=<span class="number">1</span>)</span><br><span class="line">              , aes(group=group), </span><br><span class="line">              annotations=<span class="string">"abc"</span>, y_position = <span class="number">46</span>, xmin=<span class="number">1</span>, xmax=<span class="number">2</span>)+</span><br><span class="line">  geom_signif(data=data.frame(class=c(<span class="string">"minivan"</span>), type=<span class="number">0</span>, hwy=<span class="number">0</span>, group=<span class="number">1</span>), </span><br><span class="line">              aes(group=group), </span><br><span class="line">              annotations=<span class="string">"123"</span>, y_position = <span class="number">46</span>, xmin=<span class="number">1</span>, xmax=<span class="number">2</span>)+</span><br><span class="line">  facet_grid(.~class)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中在geom_signif里面的data是</span></span><br><span class="line">data.frame(class=c(<span class="string">"2seater"</span>, <span class="string">"midsize"</span>), type=<span class="number">0</span>, hwy=<span class="number">0</span>, group=<span class="number">1</span>)</span><br><span class="line">      class type hwy group</span><br><span class="line">  <span class="number">1</span> 2seater    <span class="number">0</span>   <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">  <span class="number">2</span> midsize    <span class="number">0</span>   <span class="number">0</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/boxplot_with_sign_5.png" alt="boxplot_with_sign_5.png"></p><hr><h3 id="分面内批量注释"><a href="#分面内批量注释" class="headerlink" title="分面内批量注释"></a>分面内批量注释</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">diamonds</span><br><span class="line">  <span class="comment"># A tibble: 53,940 x 10</span></span><br><span class="line">    carat cut       color clarity depth table price     x     y     z</span><br><span class="line">    &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> <span class="number">0.23</span>  Ideal     E     SI2      <span class="number">61.5</span>    <span class="number">55</span>   <span class="number">326</span>  <span class="number">3.95</span>  <span class="number">3.98</span>  <span class="number">2.43</span></span><br><span class="line">  <span class="number">2</span> <span class="number">0.21</span>  Premium   E     SI1      <span class="number">59.8</span>    <span class="number">61</span>   <span class="number">326</span>  <span class="number">3.89</span>  <span class="number">3.84</span>  <span class="number">2.31</span></span><br><span class="line">  <span class="number">3</span> <span class="number">0.23</span>  Good      E     VS1      <span class="number">56.9</span>    <span class="number">65</span>   <span class="number">327</span>  <span class="number">4.05</span>  <span class="number">4.07</span>  <span class="number">2.31</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成注释数据</span></span><br><span class="line">annotation_df &lt;- cross_df(list(clarity = unique(diamonds$clarity), cut = unique(diamonds$cut))) %&gt;% </span><br><span class="line">  mutate(xmin = factor(<span class="string">"Fair"</span>, levels = levels(cut)), </span><br><span class="line">         annotations = apply(combn(letters, <span class="number">2</span>), <span class="number">2</span>, paste0, collapse = <span class="string">""</span>)[<span class="number">1</span>:n()]) %&gt;% </span><br><span class="line">  filter(cut != xmin) %&gt;% </span><br><span class="line">  group_by(clarity) %&gt;% </span><br><span class="line">  arrange(cut) %&gt;% </span><br><span class="line">  mutate(y_position = <span class="number">8000</span> + <span class="number">2000</span> * row_number())</span><br><span class="line"><span class="comment"># 注释数据信息</span></span><br><span class="line">annotation_df</span><br><span class="line">  <span class="comment"># A tibble: 32 x 5</span></span><br><span class="line">  <span class="comment"># Groups:   clarity [8]</span></span><br><span class="line">    clarity cut       xmin  annotations y_position</span><br><span class="line">    &lt;fct&gt;   &lt;fct&gt;     &lt;fct&gt; &lt;chr&gt;            &lt;dbl&gt;</span><br><span class="line">  <span class="number">1</span> SI2     Good      Fair  ar               <span class="number">10000</span></span><br><span class="line">  <span class="number">2</span> SI1     Good      Fair  as               <span class="number">10000</span></span><br><span class="line">  <span class="number">3</span> VS1     Good      Fair  at               <span class="number">10000</span></span><br><span class="line">  <span class="number">4</span> VS2     Good      Fair  au               <span class="number">10000</span></span><br><span class="line">  <span class="number">5</span> VVS2    Good      Fair  av               <span class="number">10000</span></span><br><span class="line">  <span class="number">6</span> VVS1    Good      Fair  aw               <span class="number">10000</span></span><br><span class="line">  <span class="number">7</span> I1      Good      Fair  ax               <span class="number">10000</span></span><br><span class="line">  <span class="number">8</span> IF      Good      Fair  ay               <span class="number">10000</span></span><br><span class="line">  <span class="number">9</span> SI2     Very Good Fair  az               <span class="number">12000</span></span><br><span class="line">  <span class="keyword">...</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 批量添加error bar</span></span><br><span class="line">highsd = <span class="keyword">function</span>(x) &#123;</span><br><span class="line">  <span class="keyword">return</span>(mean(x, na.rm = <span class="literal">T</span>) + sd(x))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量画图</span></span><br><span class="line">ggplot(data = diamonds, aes(x = cut, y = price)) + </span><br><span class="line">  stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = highsd,</span><br><span class="line">               width = <span class="number">0.8</span>, geom = <span class="string">"errorbar"</span>, </span><br><span class="line">               position = position_dodge(width = <span class="number">0.9</span>), colour = <span class="string">"black"</span>, size = <span class="number">0.3</span>) + </span><br><span class="line">  stat_summary(geom = <span class="string">"bar"</span>, fun.y = mean, aes(fill = cut), </span><br><span class="line">               width = <span class="number">0.8</span>, colour = <span class="string">"black"</span>, </span><br><span class="line">               position = position_dodge(width = <span class="number">0.9</span>), size = <span class="number">0.4</span>, show.legend = <span class="literal">F</span>) +</span><br><span class="line">  geom_signif(data = annotation_df, </span><br><span class="line">              aes(annotations = annotations, xmin = xmin, xmax = cut, y_position = y_position), </span><br><span class="line">              manual = <span class="literal">TRUE</span>) +</span><br><span class="line">  facet_wrap(~clarity, scales = <span class="string">"free"</span>) +</span><br><span class="line">  ylim(<span class="literal">NA</span>, <span class="number">17000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://showteeth.oss-cn-beijing.aliyuncs.com/blog_img/boxplot_with_sign_6.png" alt="boxplot_with_sign_6.png"></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/const-ae/ggsignif" target="_blank" rel="noopener">ggsignif的Github</a></li><li><a href="https://cran.r-project.org/web/packages/ggsignif/ggsignif.pdf" target="_blank" rel="noopener">ggsignif的文档</a></li><li><a href="https://cran.r-project.org/web/packages/ggsignif/vignettes/intro.html" target="_blank" rel="noopener">ggsignif官方介绍</a></li><li><a href="https://github.com/const-ae/ggsignif/issues/22" target="_blank" rel="noopener">Is it possible to compare between facets?</a></li><li><a href="https://github.com/const-ae/ggsignif/issues/23" target="_blank" rel="noopener">Custom annotations when using facets</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI5MzQzMjU4Mw==&amp;mid=2247487837&amp;idx=3&amp;sn=6559108238df05ddbb261416bbc0851c&amp;chksm=ec736d35db04e423545b852bb6eedbc2275b0a884f85513fdf06770e35f1f105fa9f6d360141&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1570442620363&amp;sharer_shareid=1b54e58f922202bb93a6ffe28bb2f3a7&amp;key=0a90e6804693187e27a3239b02db27a4572be4a61502c8d3c582ed2cf63ac02fb7c1f7ba2c4ddcf96ee86e173f89f985e926f84a233154d2660ff56f51e0fda374a6b37deda76be77484d35e635e4165&amp;ascene=1&amp;uin=MjU2NzcxOTIxNQ%3D%3D&amp;devicetype=Windows+10&amp;version=62060841&amp;lang=zh_CN&amp;pass_ticket=62x9VlAM9BQRQsx6qYImjeGo2KjVm0E3ZgT1cQ7V8AytSS45gCiqY%2FtyNXhl%2B6mt" target="_blank" rel="noopener">Boxplot | 用R画一个漂亮的boxplot</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI3Mzc1MzczMA==&amp;mid=2247484318&amp;idx=1&amp;sn=aeeb47d5f0cc6ce0971032f4709393ef&amp;chksm=eb1f3073dc68b9651aa3fe1fed06db66ade6231c5f9790868ffcf680e76f67e329e04f823da3&amp;scene=21" target="_blank" rel="noopener">神奇小工具丨ggplot绘图显著性添加工具—ggsignif</a></li><li><a href="http://www.bioinfo-scrounger.com/archives/403" target="_blank" rel="noopener">R作图 显著性绘制工具-ggsignif</a></li></ul><p><br></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了使用R中的&lt;code&gt;ggsignif&lt;/code&gt;包对&lt;code&gt;boxplot&lt;/code&gt;两两样本之间&lt;strong&gt;添加显著性注释&lt;/strong&gt;的过程；其实这个包可以两两对比的使用&lt;code&gt;ggplot2&lt;/code&gt;画图的都可以添加，对&lt;strong&gt;任何可以两两对比的、使用&lt;code&gt;ggplot2&lt;/code&gt;画图的都可以添加&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="R" scheme="http://showteeth.tech/categories/R/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/R/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
      <category term="boxplot" scheme="http://showteeth.tech/tags/boxplot/"/>
    
  </entry>
  
  <entry>
    <title>Python绘图系列-处理annotation重叠</title>
    <link href="http://showteeth.tech/posts/46875.html"/>
    <id>http://showteeth.tech/posts/46875.html</id>
    <published>2019-10-21T05:41:36.000Z</published>
    <updated>2019-10-23T04:24:30.575Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>这篇文章记录了在<code>R</code>和<code>Python</code>中<strong>对<code>annotation</code>重叠进行自动调整的包</strong>，便于日后查询使用。</p></div><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前不管在使用<code>R</code>语言绘图还是<code>Python</code>绘图都会涉及到<strong>对图中的某些点进行注释</strong>的问题，点比较少并且分得开也还好，但是一旦点比较多或者想要标注的点比较密集就很容易遇到annotation重叠的问题，这种情况下自己慢慢调整就非常费劲。今天刚好看到有文章在分享关于解决<code>R</code>中<code>annotation</code>注释重叠的问题(专门的基于<code>ggplot2</code>的包来解决这个问题)，顺藤摸瓜居然发现<code>Python</code>也已经有了类似的包可以解决<code>annotation</code>重叠(白高兴一场，本来以为自己可以开发一个自动调整<code>annotation</code>的包来着)，这里就记录一下这个包，日后需要的时候方便。</p><hr><h2 id="Python-adjustText"><a href="#Python-adjustText" class="headerlink" title="Python-adjustText"></a>Python-adjustText</h2><p>在具体使用方面总的来说是<strong>先使用<code>Matplotlib</code>的命令将图画出来</strong>，然后<strong>再使用该包的一些命令对<code>annotation</code>进行调整</strong>(没有脱离于<code>Matplotlib</code>，大大增强了其易用性)：</p><ul><li><a href="https://github.com/Phlya/adjustText" target="_blank" rel="noopener">Github链接</a></li><li><a href="https://adjusttext.readthedocs.io/en/latest/" target="_blank" rel="noopener">文档</a></li><li><a href="https://github.com/Phlya/adjustText/wiki" target="_blank" rel="noopener">wiki</a></li><li><a href="https://nbviewer.jupyter.org/github/Phlya/adjustText/blob/master/docs/source/Examples.ipynb" target="_blank" rel="noopener">使用example</a></li></ul><hr><h2 id="R-ggrepel"><a href="#R-ggrepel" class="headerlink" title="R-ggrepel"></a>R-ggrepel</h2><p>上面的<code>adjustText</code>就是基于R包<code>ggrepel</code>思想来开发的，该包在我看来最大的好处就是<strong>没有脱离于<code>ggplot2</code>(属于<a href="https://www.ggplot2-exts.org/gallery/" target="_blank" rel="noopener">ggplot2的拓展</a>)</strong>，也就是说使用者可以在常规地<code>ggplot2</code>绘图脚本之后添加一行命令就可以达到调整<code>annotation</code>重叠的目的(吹爆这个特点)：</p><ul><li><a href="https://github.com/slowkow/ggrepel" target="_blank" rel="noopener">Github链接</a></li><li><a href="https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html" target="_blank" rel="noopener">ggrepel examples</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这篇文章记录了在&lt;code&gt;R&lt;/code&gt;和&lt;code&gt;Python&lt;/code&gt;中&lt;strong&gt;对&lt;code&gt;annotation&lt;/code&gt;重叠进行自动调整的包&lt;/strong&gt;，便于日后查询使用。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://showteeth.tech/categories/Python/"/>
    
      <category term="绘图" scheme="http://showteeth.tech/categories/Python/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="绘图" scheme="http://showteeth.tech/tags/%E7%BB%98%E5%9B%BE/"/>
    
      <category term="annotation" scheme="http://showteeth.tech/tags/annotation/"/>
    
  </entry>
  
</feed>
